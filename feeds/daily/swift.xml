<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Swift, Today</title><link>https://github.com/trending/swift?since=daily</link><description>The top repositories on GitHub for swift, measured daily</description><pubDate>Sun, 05 Jan 2020 01:06:52 GMT</pubDate><lastBuildDate>Sun, 05 Jan 2020 01:06:52 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>realm/SwiftLint #1 in Swift, Today</title><link>https://github.com/realm/SwiftLint</link><description>&lt;p&gt;&lt;i&gt;A tool to enforce Swift style and conventions.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-swiftlint" class="anchor" aria-hidden="true" href="#swiftlint"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftLint&lt;/h1&gt;
&lt;p&gt;A tool to enforce Swift style and conventions, loosely based on
&lt;a href="https://github.com/github/swift-style-guide"&gt;GitHub's Swift Style Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SwiftLint hooks into &lt;a href="http://clang.llvm.org" rel="nofollow"&gt;Clang&lt;/a&gt; and
&lt;a href="http://www.jpsim.com/uncovering-sourcekit" rel="nofollow"&gt;SourceKit&lt;/a&gt; to use the
&lt;a href="http://clang.llvm.org/docs/IntroductionToTheClangAST.html" rel="nofollow"&gt;AST&lt;/a&gt; representation
of your source files for more accurate results.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dev.azure.com/jpsim/SwiftLint/_build/latest?definitionId=4?branchName=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9a0296a6379b15a4bb08a821efade137d0837d36/68747470733a2f2f6465762e617a7572652e636f6d2f6a7073696d2f53776966744c696e742f5f617069732f6275696c642f7374617475732f7265616c6d2e53776966744c696e743f6272616e63684e616d653d6d6173746572" alt="Build Status" data-canonical-src="https://dev.azure.com/jpsim/SwiftLint/_apis/build/status/realm.SwiftLint?branchName=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/github/realm/SwiftLint?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c86f87b309c2e2ed94c56663ab18ce4096d1cd7f/68747470733a2f2f636f6465636f762e696f2f6769746875622f7265616c6d2f53776966744c696e742f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/realm/SwiftLint/coverage.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/screenshot.png"&gt;&lt;img src="assets/screenshot.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This project adheres to the &lt;a href="https://realm.io/conduct" rel="nofollow"&gt;Contributor Covenant Code of Conduct&lt;/a&gt;.
By participating, you are expected to uphold this code. Please report
unacceptable behavior to &lt;a href="mailto:info@realm.io"&gt;info@realm.io&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Language Switch: &lt;a href="https://github.com/realm/SwiftLint/blob/master/README_CN.md"&gt;中文&lt;/a&gt;, &lt;a href="https://github.com/realm/SwiftLint/blob/master/README_KR.md"&gt;한국어&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-using-homebrew" class="anchor" aria-hidden="true" href="#using-homebrew"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;a href="http://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt;:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;brew install swiftlint
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-using-cocoapods" class="anchor" aria-hidden="true" href="#using-cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;a href="https://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt;:&lt;/h3&gt;
&lt;p&gt;Simply add the following line to your Podfile:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;SwiftLint&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will download the SwiftLint binaries and dependencies in &lt;code&gt;Pods/&lt;/code&gt; during your next
&lt;code&gt;pod install&lt;/code&gt; execution and will allow you to invoke it via &lt;code&gt;${PODS_ROOT}/SwiftLint/swiftlint&lt;/code&gt;
in your Script Build Phases.&lt;/p&gt;
&lt;p&gt;This is the recommended way to install a specific version of SwiftLint since it supports
installing a pinned version rather than simply the latest (which is the case with Homebrew).&lt;/p&gt;
&lt;p&gt;Note that this will add the SwiftLint binaries, its dependencies' binaries and the Swift binary
library distribution to the &lt;code&gt;Pods/&lt;/code&gt; directory, so checking in this directory to SCM such as
git is discouraged.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-mint" class="anchor" aria-hidden="true" href="#using-mint"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;a href="https://github.com/yonaskolb/mint"&gt;Mint&lt;/a&gt;:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ mint install realm/SwiftLint
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-using-a-pre-built-package" class="anchor" aria-hidden="true" href="#using-a-pre-built-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using a pre-built package:&lt;/h3&gt;
&lt;p&gt;You can also install SwiftLint by downloading &lt;code&gt;SwiftLint.pkg&lt;/code&gt; from the
&lt;a href="https://github.com/realm/SwiftLint/releases/latest"&gt;latest GitHub release&lt;/a&gt; and
running it.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-compiling-from-source" class="anchor" aria-hidden="true" href="#compiling-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compiling from source:&lt;/h3&gt;
&lt;p&gt;You can also build from source by cloning this project and running
&lt;code&gt;git submodule update --init --recursive; make install&lt;/code&gt; (Xcode 10.2 or later).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-known-installation-issues-on-macos-before-10144" class="anchor" aria-hidden="true" href="#known-installation-issues-on-macos-before-10144"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known Installation Issues On MacOS Before 10.14.4&lt;/h3&gt;
&lt;p&gt;Starting with &lt;a href="https://github.com/realm/SwiftLint/releases/tag/0.32.0"&gt;SwiftLint 0.32.0&lt;/a&gt;, if you get
an error similar to &lt;code&gt;dyld: Symbol not found: _$s11SubSequenceSlTl&lt;/code&gt; when running SwiftLint,
you'll need to install the &lt;a href="https://support.apple.com/kb/DL1998" rel="nofollow"&gt;Swift 5 Runtime Support for Command Line Tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Update to macOS 10.14.4 or later&lt;/li&gt;
&lt;li&gt;Install Xcode 10.2 or later at &lt;code&gt;/Applications/Xcode.app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rebuild SwiftLint from source using Xcode 10.2 or later&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-presentation" class="anchor" aria-hidden="true" href="#presentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Presentation&lt;/h3&gt;
&lt;p&gt;To get a high-level overview of recommended ways to integrate SwiftLint into your project,
we encourage you to watch this presentation or read the transcript:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://academy.realm.io/posts/slug-jp-simard-swiftlint/" rel="nofollow"&gt;&lt;img src="assets/presentation.svg" alt="Presentation" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-xcode" class="anchor" aria-hidden="true" href="#xcode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Xcode&lt;/h3&gt;
&lt;p&gt;Integrate SwiftLint into an Xcode scheme to get warnings and errors displayed
in the IDE. Just add a new "Run Script Phase" with:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; which swiftlint &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;/dev/null&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;then&lt;/span&gt;
  swiftlint
&lt;span class="pl-k"&gt;else&lt;/span&gt;
  &lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/runscript.png"&gt;&lt;img src="assets/runscript.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, if you've installed SwiftLint via CocoaPods the script should look like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${PODS_ROOT}&lt;/span&gt;/SwiftLint/swiftlint&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-format-on-save-xcode-plugin" class="anchor" aria-hidden="true" href="#format-on-save-xcode-plugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Format on Save Xcode Plugin&lt;/h4&gt;
&lt;p&gt;To run &lt;code&gt;swiftlint autocorrect&lt;/code&gt; on save in Xcode, install the
&lt;a href="https://github.com/ypresto/SwiftLintXcode"&gt;SwiftLintXcode&lt;/a&gt; plugin from Alcatraz.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt;This plugin will not work with Xcode 8 or later without disabling SIP.
This is not recommended.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-appcode" class="anchor" aria-hidden="true" href="#appcode"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AppCode&lt;/h3&gt;
&lt;p&gt;To integrate SwiftLint with AppCode, install
&lt;a href="https://plugins.jetbrains.com/plugin/9175" rel="nofollow"&gt;this plugin&lt;/a&gt; and configure
SwiftLint's installed path in the plugin's preferences.
The &lt;code&gt;autocorrect&lt;/code&gt; action is available via &lt;code&gt;⌥⏎&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-atom" class="anchor" aria-hidden="true" href="#atom"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Atom&lt;/h3&gt;
&lt;p&gt;To integrate SwiftLint with &lt;a href="https://atom.io/" rel="nofollow"&gt;Atom&lt;/a&gt;, install the
&lt;a href="https://atom.io/packages/linter-swiftlint" rel="nofollow"&gt;&lt;code&gt;linter-swiftlint&lt;/code&gt;&lt;/a&gt; package from
APM.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-fastlane" class="anchor" aria-hidden="true" href="#fastlane"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fastlane&lt;/h3&gt;
&lt;p&gt;You can use the &lt;a href="https://docs.fastlane.tools/actions/swiftlint" rel="nofollow"&gt;official swiftlint fastlane action&lt;/a&gt; to run SwiftLint as part of your fastlane process.&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;swiftlint(
    &lt;span class="pl-c1"&gt;mode:&lt;/span&gt; &lt;span class="pl-c1"&gt;:lint&lt;/span&gt;,                            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; SwiftLint mode: :lint (default) or :autocorrect&lt;/span&gt;
    &lt;span class="pl-c1"&gt;executable:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Pods/SwiftLint/swiftlint&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; The SwiftLint binary path (optional). Important if you've installed it via CocoaPods&lt;/span&gt;
    &lt;span class="pl-c1"&gt;path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/lint&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,                  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Specify path to lint (optional)&lt;/span&gt;
    &lt;span class="pl-c1"&gt;output_file:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;swiftlint.result.json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; The path of the output file (optional)&lt;/span&gt;
    &lt;span class="pl-c1"&gt;reporter:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,                       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; The custom reporter to use (optional)&lt;/span&gt;
    &lt;span class="pl-c1"&gt;config_file:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.swiftlint-ci.yml&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; The path of the configuration file (optional)&lt;/span&gt;
    &lt;span class="pl-c1"&gt;files:&lt;/span&gt; [                                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; List of files to process (optional)&lt;/span&gt;
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AppDelegate.swift&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;path/to/project/Model.swift&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    ],
    &lt;span class="pl-c1"&gt;ignore_exit_status:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;,               &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Allow fastlane to continue even if SwiftLint returns a non-zero exit status (Default: false)&lt;/span&gt;
    &lt;span class="pl-c1"&gt;quiet:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;,                            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Don't print status logs like 'Linting ' &amp;amp; 'Done linting' (Default: false)&lt;/span&gt;
    &lt;span class="pl-c1"&gt;strict:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;                            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Fail on warnings? (Default: false)&lt;/span&gt;
)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-command-line" class="anchor" aria-hidden="true" href="#command-line"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Command Line&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ swiftlint help
Available commands:

   analyze         [Experimental] Run analysis rules
   autocorrect     Automatically correct warnings and errors
   generate-docs   Generates markdown documentation for all rules
   help            Display general or command-specific help
   lint            Print lint warnings and errors (default command)
   rules           Display the list of rules and their identifiers
   version         Display the current version of SwiftLint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run &lt;code&gt;swiftlint&lt;/code&gt; in the directory containing the Swift files to lint. Directories
will be searched recursively.&lt;/p&gt;
&lt;p&gt;To specify a list of files when using &lt;code&gt;lint&lt;/code&gt;, &lt;code&gt;autocorrect&lt;/code&gt; or &lt;code&gt;analyze&lt;/code&gt;
(like the list of files modified by Xcode specified by the
&lt;a href="https://github.com/norio-nomura/ExtraBuildPhase"&gt;&lt;code&gt;ExtraBuildPhase&lt;/code&gt;&lt;/a&gt; Xcode
plugin, or modified files in the working tree based on &lt;code&gt;git ls-files -m&lt;/code&gt;), you
can do so by passing the option &lt;code&gt;--use-script-input-files&lt;/code&gt; and setting the
following instance variables: &lt;code&gt;SCRIPT_INPUT_FILE_COUNT&lt;/code&gt; and
&lt;code&gt;SCRIPT_INPUT_FILE_0&lt;/code&gt;, &lt;code&gt;SCRIPT_INPUT_FILE_1&lt;/code&gt;...&lt;code&gt;SCRIPT_INPUT_FILE_{SCRIPT_INPUT_FILE_COUNT}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These are same environment variables set for input files to
&lt;a href="http://indiestack.com/2014/12/speeding-up-custom-script-phases/" rel="nofollow"&gt;custom Xcode script phases&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-working-with-multiple-swift-versions" class="anchor" aria-hidden="true" href="#working-with-multiple-swift-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Working With Multiple Swift Versions&lt;/h3&gt;
&lt;p&gt;SwiftLint hooks into SourceKit so it continues working even as Swift evolves!&lt;/p&gt;
&lt;p&gt;This also keeps SwiftLint lean, as it doesn't need to ship with a full Swift
compiler, it just communicates with the official one you already have installed
on your machine.&lt;/p&gt;
&lt;p&gt;You should always run SwiftLint with the same toolchain you use to compile your
code.&lt;/p&gt;
&lt;p&gt;You may want to override SwiftLint's default Swift toolchain if you have
multiple toolchains or Xcodes installed.&lt;/p&gt;
&lt;p&gt;Here's the order in which SwiftLint determines which Swift toolchain to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$XCODE_DEFAULT_TOOLCHAIN_OVERRIDE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$TOOLCHAIN_DIR&lt;/code&gt; or &lt;code&gt;$TOOLCHAINS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xcrun -find swift&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;sourcekitd.framework&lt;/code&gt; is expected to be found in the &lt;code&gt;usr/lib/&lt;/code&gt; subdirectory of
the value passed in the paths above.&lt;/p&gt;
&lt;p&gt;You may also set the &lt;code&gt;TOOLCHAINS&lt;/code&gt; environment variable to the reverse-DNS
notation that identifies a Swift toolchain version:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ TOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 swiftlint autocorrect&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Linux, SourceKit is expected to be located in
&lt;code&gt;/usr/lib/libsourcekitdInProc.so&lt;/code&gt; or specified by the &lt;code&gt;LINUX_SOURCEKIT_LIB_PATH&lt;/code&gt;
environment variable.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-swift-version-support" class="anchor" aria-hidden="true" href="#swift-version-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Version Support&lt;/h3&gt;
&lt;p&gt;Here's a reference of which SwiftLint version to use for a given Swift version.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Swift version&lt;/th&gt;
&lt;th align="left"&gt;Last supported SwiftLint release&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 1.x&lt;/td&gt;
&lt;td align="left"&gt;SwiftLint 0.1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 2.x&lt;/td&gt;
&lt;td align="left"&gt;SwiftLint 0.18.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 3.x&lt;/td&gt;
&lt;td align="left"&gt;SwiftLint 0.25.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 4.0-4.1.x&lt;/td&gt;
&lt;td align="left"&gt;SwiftLint 0.28.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 4.2.x&lt;/td&gt;
&lt;td align="left"&gt;SwiftLint 0.35.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 5.x&lt;/td&gt;
&lt;td align="left"&gt;Latest&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-rules" class="anchor" aria-hidden="true" href="#rules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rules&lt;/h2&gt;
&lt;p&gt;Over 75 rules are included in SwiftLint and the Swift community (that's you!)
continues to contribute more over time.
&lt;a href="CONTRIBUTING.md"&gt;Pull requests&lt;/a&gt; are encouraged.&lt;/p&gt;
&lt;p&gt;You can find an updated list of rules and more information about them
in &lt;a href="Rules.md"&gt;Rules.md&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also check &lt;a href="Source/SwiftLintFramework/Rules"&gt;Source/SwiftLintFramework/Rules&lt;/a&gt;
directory to see their implementation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-opt-in-rules" class="anchor" aria-hidden="true" href="#opt-in-rules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Opt-In Rules&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;opt_in_rules&lt;/code&gt; are disabled by default (i.e., you have to explicitly enable them
in your configuration file).&lt;/p&gt;
&lt;p&gt;Guidelines on when to mark a rule as opt-in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A rule that can have many false positives (e.g. &lt;code&gt;empty_count&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;A rule that is too slow&lt;/li&gt;
&lt;li&gt;A rule that is not general consensus or is only useful in some cases
(e.g. &lt;code&gt;force_unwrapping&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-disable-rules-in-code" class="anchor" aria-hidden="true" href="#disable-rules-in-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disable rules in code&lt;/h3&gt;
&lt;p&gt;Rules can be disabled with a comment inside a source file with the following
format:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;// swiftlint:disable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The rules will be disabled until the end of the file or until the linter sees a
matching enable comment:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;// swiftlint:enable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftlint:disable colon&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; noWarning &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; No warning about colons immediately after variable names!&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftlint:enable colon&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; hasWarning &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Warning generated about colons immediately after variable names&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Including the &lt;code&gt;all&lt;/code&gt; keyword will disable all rules until the linter sees a matching enable comment:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;// swiftlint:disable all&lt;/code&gt;
&lt;code&gt;// swiftlint:enable all&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftlint:disable all&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; noWarning &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; No warning about colons immediately after variable names!&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; i &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Also no warning about short identifier names&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftlint:enable all&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; hasWarning &lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Warning generated about colons immediately after variable names&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; y &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Warning generated about short identifier names&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's also possible to modify a &lt;code&gt;disable&lt;/code&gt; or &lt;code&gt;enable&lt;/code&gt; command by appending
&lt;code&gt;:previous&lt;/code&gt;, &lt;code&gt;:this&lt;/code&gt; or &lt;code&gt;:next&lt;/code&gt; for only applying the command to the previous,
this (current) or next line respectively.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftlint:disable:next force_cast&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; noWarning &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSNumber&lt;/span&gt;() &lt;span class="pl-k"&gt;as!&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; hasWarning &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSNumber&lt;/span&gt;() &lt;span class="pl-k"&gt;as!&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; noWarning2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSNumber&lt;/span&gt;() &lt;span class="pl-k"&gt;as!&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftlint:disable:this force_cast&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; noWarning3 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSNumber&lt;/span&gt;() &lt;span class="pl-k"&gt;as!&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftlint:disable:previous force_cast&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;code&gt;swiftlint rules&lt;/code&gt; to print a list of all available rules and their
identifiers.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Configure SwiftLint by adding a &lt;code&gt;.swiftlint.yml&lt;/code&gt; file from the directory you'll
run SwiftLint from. The following parameters can be configured:&lt;/p&gt;
&lt;p&gt;Rule inclusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled_rules&lt;/code&gt;: Disable rules from the default enabled set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opt_in_rules&lt;/code&gt;: Enable rules not from the default set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;whitelist_rules&lt;/code&gt;: Acts as a whitelist, only the rules specified in this list
will be enabled. Can not be specified alongside &lt;code&gt;disabled_rules&lt;/code&gt; or
&lt;code&gt;opt_in_rules&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;analyzer_rules&lt;/code&gt;: This is an entirely separate list of rules that are only
run by the &lt;code&gt;analyze&lt;/code&gt; command. All analyzer rules are opt-in, so this is the
only configurable rule list (there is no disabled/whitelist equivalent).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;disabled_rules&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; rule identifiers to exclude from running&lt;/span&gt;
  - &lt;span class="pl-s"&gt;colon&lt;/span&gt;
  - &lt;span class="pl-s"&gt;comma&lt;/span&gt;
  - &lt;span class="pl-s"&gt;control_statement&lt;/span&gt;
&lt;span class="pl-ent"&gt;opt_in_rules&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; some rules are only opt-in&lt;/span&gt;
  - &lt;span class="pl-s"&gt;empty_count&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Find all the available rules by running:&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; swiftlint rules&lt;/span&gt;
&lt;span class="pl-ent"&gt;included&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; paths to include during linting. `--path` is ignored if present.&lt;/span&gt;
  - &lt;span class="pl-s"&gt;Source&lt;/span&gt;
&lt;span class="pl-ent"&gt;excluded&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; paths to ignore during linting. Takes precedence over `included`.&lt;/span&gt;
  - &lt;span class="pl-s"&gt;Carthage&lt;/span&gt;
  - &lt;span class="pl-s"&gt;Pods&lt;/span&gt;
  - &lt;span class="pl-s"&gt;Source/ExcludedFolder&lt;/span&gt;
  - &lt;span class="pl-s"&gt;Source/ExcludedFile.swift&lt;/span&gt;
  - &lt;span class="pl-s"&gt;Source/*/ExcludedFile.swift &lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Exclude files with a wildcard&lt;/span&gt;
&lt;span class="pl-ent"&gt;analyzer_rules&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Rules run by `swiftlint analyze` (experimental)&lt;/span&gt;
  - &lt;span class="pl-s"&gt;explicit_self&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; configurable rules can be customized from this configuration file&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; binary rules can set their severity level&lt;/span&gt;
&lt;span class="pl-ent"&gt;force_cast&lt;/span&gt;: &lt;span class="pl-s"&gt;warning &lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; implicitly&lt;/span&gt;
&lt;span class="pl-ent"&gt;force_try&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;severity&lt;/span&gt;: &lt;span class="pl-s"&gt;warning &lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; explicitly&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; rules that have both warning and error levels, can set just the warning level&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; implicitly&lt;/span&gt;
&lt;span class="pl-ent"&gt;line_length&lt;/span&gt;: &lt;span class="pl-c1"&gt;110&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; they can set both implicitly with an array&lt;/span&gt;
&lt;span class="pl-ent"&gt;type_body_length&lt;/span&gt;:
  - &lt;span class="pl-c1"&gt;300&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; warning&lt;/span&gt;
  - &lt;span class="pl-c1"&gt;400&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or they can set both explicitly&lt;/span&gt;
&lt;span class="pl-ent"&gt;file_length&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;warning&lt;/span&gt;: &lt;span class="pl-c1"&gt;500&lt;/span&gt;
  &lt;span class="pl-ent"&gt;error&lt;/span&gt;: &lt;span class="pl-c1"&gt;1200&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; naming rules can set warnings/errors for min_length and max_length&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; additionally they can set excluded names&lt;/span&gt;
&lt;span class="pl-ent"&gt;type_name&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;min_length&lt;/span&gt;: &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; only warning&lt;/span&gt;
  &lt;span class="pl-ent"&gt;max_length&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; warning and error&lt;/span&gt;
    &lt;span class="pl-ent"&gt;warning&lt;/span&gt;: &lt;span class="pl-c1"&gt;40&lt;/span&gt;
    &lt;span class="pl-ent"&gt;error&lt;/span&gt;: &lt;span class="pl-c1"&gt;50&lt;/span&gt;
  &lt;span class="pl-ent"&gt;excluded&lt;/span&gt;: &lt;span class="pl-s"&gt;iPhone &lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; excluded via string&lt;/span&gt;
  &lt;span class="pl-ent"&gt;allowed_symbols&lt;/span&gt;: &lt;span class="pl-s"&gt;["_"] &lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; these are allowed in type names&lt;/span&gt;
&lt;span class="pl-ent"&gt;identifier_name&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;min_length&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; only min_length&lt;/span&gt;
    &lt;span class="pl-ent"&gt;error&lt;/span&gt;: &lt;span class="pl-c1"&gt;4&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; only error&lt;/span&gt;
  &lt;span class="pl-ent"&gt;excluded&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; excluded via string array&lt;/span&gt;
    - &lt;span class="pl-s"&gt;id&lt;/span&gt;
    - &lt;span class="pl-s"&gt;URL&lt;/span&gt;
    - &lt;span class="pl-s"&gt;GlobalAPIKey&lt;/span&gt;
&lt;span class="pl-ent"&gt;reporter&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;xcode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; reporter type (xcode, json, csv, checkstyle, junit, html, emoji, sonarqube, markdown)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use environment variables in your configuration file,
by using &lt;code&gt;${SOME_VARIABLE}&lt;/code&gt; in a string.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-defining-custom-rules" class="anchor" aria-hidden="true" href="#defining-custom-rules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Defining Custom Rules&lt;/h4&gt;
&lt;p&gt;You can define custom regex-based rules in your configuration file using the
following syntax:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;custom_rules&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;pirates_beat_ninjas&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; rule identifier&lt;/span&gt;
    &lt;span class="pl-ent"&gt;included&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.*&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.swift&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; regex that defines paths to include during linting. optional.&lt;/span&gt;
    &lt;span class="pl-ent"&gt;excluded&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.*Test&lt;span class="pl-cce"&gt;\\&lt;/span&gt;.swift&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; regex that defines paths to exclude during linting. optional&lt;/span&gt;
    &lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Pirates Beat Ninjas&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; rule name. optional.&lt;/span&gt;
    &lt;span class="pl-ent"&gt;regex&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;([n,N]inja)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; matching pattern&lt;/span&gt;
    &lt;span class="pl-ent"&gt;match_kinds&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; SyntaxKinds to match. optional.&lt;/span&gt;
      - &lt;span class="pl-s"&gt;comment&lt;/span&gt;
      - &lt;span class="pl-s"&gt;identifier&lt;/span&gt;
    &lt;span class="pl-ent"&gt;message&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Pirates are better than ninjas.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; violation message. optional.&lt;/span&gt;
    &lt;span class="pl-ent"&gt;severity&lt;/span&gt;: &lt;span class="pl-s"&gt;error &lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; violation severity. optional.&lt;/span&gt;
  &lt;span class="pl-ent"&gt;no_hiding_in_strings&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;regex&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;([n,N]inja)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-ent"&gt;match_kinds&lt;/span&gt;: &lt;span class="pl-s"&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is what the output would look like:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/custom-rule.png"&gt;&lt;img src="assets/custom-rule.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can filter the matches by providing one or more &lt;code&gt;match_kinds&lt;/code&gt;, which will
reject matches that include syntax kinds that are not present in this list. Here
are all the possible syntax kinds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;argument&lt;/li&gt;
&lt;li&gt;attribute.builtin&lt;/li&gt;
&lt;li&gt;attribute.id&lt;/li&gt;
&lt;li&gt;buildconfig.id&lt;/li&gt;
&lt;li&gt;buildconfig.keyword&lt;/li&gt;
&lt;li&gt;comment&lt;/li&gt;
&lt;li&gt;comment.mark&lt;/li&gt;
&lt;li&gt;comment.url&lt;/li&gt;
&lt;li&gt;doccomment&lt;/li&gt;
&lt;li&gt;doccomment.field&lt;/li&gt;
&lt;li&gt;identifier&lt;/li&gt;
&lt;li&gt;keyword&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;objectliteral&lt;/li&gt;
&lt;li&gt;parameter&lt;/li&gt;
&lt;li&gt;placeholder&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;string_interpolation_anchor&lt;/li&gt;
&lt;li&gt;typeidentifier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If using custom rules alongside a whitelist, make sure to add &lt;code&gt;custom_rules&lt;/code&gt; as an item under &lt;code&gt;whitelist_rules&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-nested-configurations" class="anchor" aria-hidden="true" href="#nested-configurations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nested Configurations&lt;/h4&gt;
&lt;p&gt;SwiftLint supports nesting configuration files for more granular control over
the linting process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Include additional &lt;code&gt;.swiftlint.yml&lt;/code&gt; files where necessary in your directory
structure.&lt;/li&gt;
&lt;li&gt;Each file will be linted using the configuration file that is in its
directory or at the deepest level of its parent directories. Otherwise the
root configuration will be used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;included&lt;/code&gt; is ignored for nested configurations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-auto-correct" class="anchor" aria-hidden="true" href="#auto-correct"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Auto-correct&lt;/h3&gt;
&lt;p&gt;SwiftLint can automatically correct certain violations. Files on disk are
overwritten with a corrected version.&lt;/p&gt;
&lt;p&gt;Please make sure to have backups of these files before running
&lt;code&gt;swiftlint autocorrect&lt;/code&gt;, otherwise important data may be lost.&lt;/p&gt;
&lt;p&gt;Standard linting is disabled while correcting because of the high likelihood of
violations (or their offsets) being incorrect after modifying a file while
applying corrections.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-analyze-experimental" class="anchor" aria-hidden="true" href="#analyze-experimental"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Analyze (experimental)&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;experimental&lt;/em&gt; &lt;code&gt;swiftlint analyze&lt;/code&gt; command can lint Swift files using the
full type-checked AST. The compiler log path containing the clean &lt;code&gt;swiftc&lt;/code&gt; build
command invocation (incremental builds will fail) must be passed to &lt;code&gt;analyze&lt;/code&gt;
via the &lt;code&gt;--compiler-log-path&lt;/code&gt; flag.
e.g. &lt;code&gt;--compiler-log-path /path/to/xcodebuild.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This can be obtained by running
&lt;code&gt;xcodebuild -workspace {WORKSPACE}.xcworkspace -scheme {SCHEME} &amp;gt; xcodebuild.log&lt;/code&gt;
with a clean &lt;code&gt;DerivedData&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;This command and related code in SwiftLint is subject to substantial changes at
any time while this feature is marked as experimental. Analyzer rules also tend
to be considerably slower than lint rules.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href="LICENSE"&gt;MIT licensed.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/realm.png"&gt;&lt;img src="assets/realm.png" width="184" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SwiftLint is maintained and funded by Realm Inc. The names and logos for
Realm are trademarks of Realm Inc.&lt;/p&gt;
&lt;p&gt;We &lt;g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"&gt;❤️&lt;/g-emoji&gt; open source software!
See &lt;a href="https://github.com/realm"&gt;our other open source projects&lt;/a&gt;,
read &lt;a href="https://realm.io/news" rel="nofollow"&gt;our blog&lt;/a&gt;, or say hi on twitter
(&lt;a href="https://twitter.com/realm" rel="nofollow"&gt;@realm&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="assets/macstadium.png"&gt;&lt;img src="assets/macstadium.png" width="184" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our thanks to MacStadium for providing a Mac Mini to run our performance
tests.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>realm</author><guid isPermaLink="false">https://github.com/realm/SwiftLint</guid><pubDate>Sun, 05 Jan 2020 00:01:00 GMT</pubDate></item><item><title>Quick/Quick #2 in Swift, Today</title><link>https://github.com/Quick/Quick</link><description>&lt;p&gt;&lt;i&gt;The Swift (and Objective-C) testing framework.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/bcd71a03c67bd89a4cfc390c7c22cc4f06db91b1/687474703a2f2f662e636c2e6c792f6974656d732f30723145313932433152306232673251336832772f517569636b4c6f676f5f436f6c6f722e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/bcd71a03c67bd89a4cfc390c7c22cc4f06db91b1/687474703a2f2f662e636c2e6c792f6974656d732f30723145313932433152306232673251336832772f517569636b4c6f676f5f436f6c6f722e706e67" alt="" data-canonical-src="http://f.cl.ly/items/0r1E192C1R0b2g2Q3h2w/QuickLogo_Color.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/Quick/Quick" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dcc8a78312e91eebe17c044f463b541138333433/68747470733a2f2f7472617669732d63692e6f72672f517569636b2f517569636b2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Quick/Quick.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/Quick" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ba63156f546b0fd6afd502fbd9b9eb7fb0902d26/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f517569636b2e737667" alt="CocoaPods" data-canonical-src="https://img.shields.io/cocoapods/v/Quick.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage Compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/JamitLabs/Accio"&gt;&lt;img src="https://camo.githubusercontent.com/e502cdc2b27c1f2b2590f061d37b984ba3957c26/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f416363696f2d737570706f727465642d3041374346352e7376673f7374796c653d666c6174" alt="Accio supported" data-canonical-src="https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/Quick" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f3222c744930e7f6041ac150ab618c12ae26c8e1/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f517569636b2e737667" alt="Platforms" data-canonical-src="https://img.shields.io/cocoapods/p/Quick.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://houndci.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1c940d021ef775a44e0880bc3ba124a6bee5fefb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657669657765645f62792d486f756e642d3845363442302e737667" alt="Reviewed by Hound" data-canonical-src="https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quick is a behavior-driven development framework for Swift and Objective-C.
Inspired by &lt;a href="https://github.com/rspec/rspec"&gt;RSpec&lt;/a&gt;, &lt;a href="https://github.com/specta/specta"&gt;Specta&lt;/a&gt;, and &lt;a href="https://github.com/onsi/ginkgo"&gt;Ginkgo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/Quick/Assets/master/Screenshots/QuickSpec%20screenshot.png"&gt;&lt;img src="https://raw.githubusercontent.com/Quick/Assets/master/Screenshots/QuickSpec%20screenshot.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Quick&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Nimble&lt;/span&gt;

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;TableOfContentsSpec&lt;/span&gt;: &lt;span class="pl-e"&gt;QuickSpec &lt;/span&gt;{
  &lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;() {
    &lt;span class="pl-c1"&gt;describe&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;the 'Documentation' directory&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
      &lt;span class="pl-c1"&gt;it&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;has everything you need to get started&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; sections &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Directory&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Documentation&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-smi"&gt;sections&lt;/span&gt;
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(sections).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Organized Tests with Quick Examples and Example Groups&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(sections).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Installing Quick&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
      }

      &lt;span class="pl-c1"&gt;context&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;if it doesn't have what you're looking for&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;it&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;needs to be updated&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
          &lt;span class="pl-k"&gt;let&lt;/span&gt; you &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;You&lt;/span&gt;(&lt;span class="pl-c1"&gt;awesome&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
          expect{you.&lt;span class="pl-smi"&gt;submittedAnIssue&lt;/span&gt;}.&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTruthy&lt;/span&gt;())
        }
      }
    }
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-nimble" class="anchor" aria-hidden="true" href="#nimble"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nimble&lt;/h4&gt;
&lt;p&gt;Quick comes together with &lt;a href="https://github.com/Quick/Nimble"&gt;Nimble&lt;/a&gt; — a matcher framework for your tests. You can learn why &lt;code&gt;XCTAssert()&lt;/code&gt; statements make your expectations unclear and how to fix that using Nimble assertions &lt;a href="./Documentation/en-us/NimbleAssertions.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-swift-version" class="anchor" aria-hidden="true" href="#swift-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Version&lt;/h2&gt;
&lt;p&gt;Certain versions of Quick and Nimble only support certain versions of Swift. Depending on which version of Swift your project uses, you should use specific versions of Quick and Nimble. Use the table below to determine which versions of Quick and Nimble are compatible with your project.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Swift version&lt;/th&gt;
&lt;th align="left"&gt;Quick version&lt;/th&gt;
&lt;th align="left"&gt;Nimble version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 4.2&lt;/td&gt;
&lt;td align="left"&gt;v1.3.2 or later&lt;/td&gt;
&lt;td align="left"&gt;v7.3.2 or later&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 3 / Swift 4&lt;/td&gt;
&lt;td align="left"&gt;v1.0.0 or later&lt;/td&gt;
&lt;td align="left"&gt;v5.0.0 or later&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swift 2.2 / Swift 2.3&lt;/td&gt;
&lt;td align="left"&gt;v0.9.3&lt;/td&gt;
&lt;td align="left"&gt;v4.1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;All documentation can be found in the &lt;a href="./Documentation"&gt;Documentation folder&lt;/a&gt;, including &lt;a href="./Documentation/en-us/InstallingQuick.md"&gt;detailed installation instructions&lt;/a&gt; for CocoaPods, Carthage, Git submodules, and more. For example, you can install Quick and &lt;a href="https://github.com/Quick/Nimble"&gt;Nimble&lt;/a&gt; using CocoaPods by adding the following to your Podfile:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Podfile&lt;/span&gt;

use_frameworks!

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MyApp&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Normal libraries&lt;/span&gt;

  abstract_target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Tests&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    inherit! &lt;span class="pl-c1"&gt;:search_paths&lt;/span&gt;
    target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MyAppTests&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MyAppUITests&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Quick&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Nimble&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-projects-using-quick" class="anchor" aria-hidden="true" href="#projects-using-quick"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Projects using Quick&lt;/h2&gt;
&lt;p&gt;Over ten-thousand apps use either Quick and Nimble however, as they are not included in the app binary, neither appear in “Top Used Libraries” blog posts. Therefore, it would be greatly appreciated to remind contributors that their efforts are valued by compiling a list of organizations and projects that use them.&lt;/p&gt;
&lt;p&gt;Does your organization or project use Quick and Nimble? If yes, &lt;a href="https://github.com/Quick/Quick/wiki/Projects-using-Quick"&gt;please add your project to the list&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-who-uses-quick" class="anchor" aria-hidden="true" href="#who-uses-quick"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Who uses Quick&lt;/h2&gt;
&lt;p&gt;Similar to projects using Quick, it would be nice to hear why people use Quick and Nimble. Are there features you love? Are there features that are just okay? Are there some features we have that no one uses?&lt;/p&gt;
&lt;p&gt;Have something positive to say about Quick (or Nimble)? If yes, &lt;a href="https://github.com/Quick/Quick/wiki/Who-uses-Quick"&gt;provide a testimonial here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Apache 2.0 license. See the &lt;a href="LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; file for details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Quick</author><guid isPermaLink="false">https://github.com/Quick/Quick</guid><pubDate>Sun, 05 Jan 2020 00:02:00 GMT</pubDate></item><item><title>yonaskolb/XcodeGen #3 in Swift, Today</title><link>https://github.com/yonaskolb/XcodeGen</link><description>&lt;p&gt;&lt;i&gt;A Swift command line tool for generating your Xcode project&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
&lt;a href="https://github.com/yonaskolb/XcodeGen"&gt;
&lt;img src="Assets/Logo_animated.gif" alt="XcodeGen" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://swift.org/package-manager" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/6da72e15649e210131bd77310c4789539301a101/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73706d2d636f6d70617469626c652d627269676874677265656e2e7376673f7374796c653d666f722d7468652d6261646765" alt="Swift Package Manager" data-canonical-src="https://img.shields.io/badge/spm-compatible-brightgreen.svg?style=for-the-badge" style="max-width:100%;"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/yonaskolb/XcodeGen/releases"&gt;
    &lt;img src="https://camo.githubusercontent.com/fb2e4308c38f433deead4c1893c637dc318650e4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f796f6e61736b6f6c622f78636f646567656e2e7376673f7374796c653d666f722d7468652d6261646765" data-canonical-src="https://img.shields.io/github/release/yonaskolb/xcodegen.svg?style=for-the-badge" style="max-width:100%;"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/yonaskolb/XcodeGen/blob/master/LICENSE"&gt;
    &lt;img src="https://camo.githubusercontent.com/ef15689f8b6f20f4a2db810df9f278ccf99f8815/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f796f6e61736b6f6c622f58636f646547656e2e7376673f7374796c653d666f722d7468652d6261646765" data-canonical-src="https://img.shields.io/github/license/yonaskolb/XcodeGen.svg?style=for-the-badge" style="max-width:100%;"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-xcodegen" class="anchor" aria-hidden="true" href="#xcodegen"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;XcodeGen&lt;/h1&gt;
&lt;p&gt;XcodeGen is a command line tool written in Swift that generates your Xcode project using your folder structure and a project spec.&lt;/p&gt;
&lt;p&gt;The project spec is a YAML or JSON file that defines your targets, configurations, schemes, custom build settings and many other options. All your source directories are automatically parsed and referenced appropriately while preserving your folder structure. Sensible defaults are used in many places, so you only need to customize what is needed. Very complex projects can also be defined using more advanced features.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Generate projects on demand and remove your &lt;code&gt;.xcodeproj&lt;/code&gt; from git, which means &lt;strong&gt;no more merge conflicts&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Groups and files in Xcode are always &lt;strong&gt;synced&lt;/strong&gt; to your directories on disk&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Easy &lt;strong&gt;configuration&lt;/strong&gt; of projects which is human readable and git friendly&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Easily copy and paste &lt;strong&gt;files and directories&lt;/strong&gt; without having to edit anything in Xcode&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Share build settings across multiple targets with &lt;strong&gt;build setting groups&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Automatically generate Schemes for &lt;strong&gt;different environments&lt;/strong&gt; like test and production&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Easily &lt;strong&gt;create new projects&lt;/strong&gt; with complicated setups on demand without messing around with Xcode&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Generate from anywhere including on &lt;strong&gt;CI&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Distribute your spec amongst multiple files for easy &lt;strong&gt;sharing&lt;/strong&gt; and overriding&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Easily create &lt;strong&gt;multi-platform&lt;/strong&gt; frameworks&lt;/li&gt;
&lt;li&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt; Integrate &lt;strong&gt;Carthage&lt;/strong&gt; frameworks without any work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a very simple project spec file like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;MyProject&lt;/span&gt;
&lt;span class="pl-ent"&gt;options&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;bundleIdPrefix&lt;/span&gt;: &lt;span class="pl-s"&gt;com.myapp&lt;/span&gt;
&lt;span class="pl-ent"&gt;packages&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;Yams&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;https://github.com/jpsim/Yams&lt;/span&gt;
    &lt;span class="pl-ent"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;2.0.0&lt;/span&gt;
&lt;span class="pl-ent"&gt;targets&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;MyApp&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;type&lt;/span&gt;: &lt;span class="pl-s"&gt;application&lt;/span&gt;
    &lt;span class="pl-ent"&gt;platform&lt;/span&gt;: &lt;span class="pl-s"&gt;iOS&lt;/span&gt;
    &lt;span class="pl-ent"&gt;deploymentTarget&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;10.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-ent"&gt;sources&lt;/span&gt;: &lt;span class="pl-s"&gt;[MyApp]&lt;/span&gt;
    &lt;span class="pl-ent"&gt;settings&lt;/span&gt;:
      &lt;span class="pl-ent"&gt;configs&lt;/span&gt;:
        &lt;span class="pl-ent"&gt;debug&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;CUSTOM_BUILD_SETTING&lt;/span&gt;: &lt;span class="pl-s"&gt;my_debug_value&lt;/span&gt;
        &lt;span class="pl-ent"&gt;release&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;CUSTOM_BUILD_SETTING&lt;/span&gt;: &lt;span class="pl-s"&gt;my_release_value&lt;/span&gt;
    &lt;span class="pl-ent"&gt;dependencies&lt;/span&gt;:
      - &lt;span class="pl-ent"&gt;target&lt;/span&gt;: &lt;span class="pl-s"&gt;MyFramework&lt;/span&gt;
      - &lt;span class="pl-ent"&gt;carthage&lt;/span&gt;: &lt;span class="pl-s"&gt;Alamofire&lt;/span&gt;
      - &lt;span class="pl-ent"&gt;framework&lt;/span&gt;: &lt;span class="pl-s"&gt;Vendor/MyFramework.framework&lt;/span&gt;
      - &lt;span class="pl-ent"&gt;sdk&lt;/span&gt;: &lt;span class="pl-s"&gt;Contacts.framework&lt;/span&gt;
      - &lt;span class="pl-ent"&gt;sdk&lt;/span&gt;: &lt;span class="pl-s"&gt;libc++.tbd&lt;/span&gt;
      - &lt;span class="pl-ent"&gt;package&lt;/span&gt;: &lt;span class="pl-s"&gt;Yams&lt;/span&gt;
  &lt;span class="pl-ent"&gt;MyFramework&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;type&lt;/span&gt;: &lt;span class="pl-s"&gt;framework&lt;/span&gt;
    &lt;span class="pl-ent"&gt;platform&lt;/span&gt;: &lt;span class="pl-s"&gt;iOS&lt;/span&gt;
    &lt;span class="pl-ent"&gt;sources&lt;/span&gt;: &lt;span class="pl-s"&gt;[MyFramework]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A project would be created with 2 connected targets, with all the required configurations and build settings. See the &lt;a href="Docs/ProjectSpec.md"&gt;Project Spec&lt;/a&gt; documentation for all the options you can specify, and &lt;a href="Docs/Usage.md"&gt;Usage&lt;/a&gt; for more general documentation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing&lt;/h2&gt;
&lt;p&gt;Make sure Xcode 11 is installed first.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-mint" class="anchor" aria-hidden="true" href="#mint"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/yonaskolb/mint"&gt;Mint&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mint install yonaskolb/xcodegen&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-make" class="anchor" aria-hidden="true" href="#make"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Make&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/yonaskolb/XcodeGen.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; XcodeGen
make install&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-homebrew" class="anchor" aria-hidden="true" href="#homebrew"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Homebrew&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;brew install xcodegen&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Package Manager&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Use as CLI&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/yonaskolb/XcodeGen.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; XcodeGen
swift run xcodegen&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Use as dependency&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add the following to your Package.swift file's dependencies:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;.&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/yonaskolb/XcodeGen.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2.11.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then import wherever needed: &lt;code&gt;import XcodeGenKit&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Simply run:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;xcodegen generate&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will look for a project spec in the current directory called &lt;code&gt;project.yml&lt;/code&gt; and generate an Xcode project with the name defined in the spec.&lt;/p&gt;
&lt;p&gt;Options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;--spec&lt;/strong&gt;: An optional path to a &lt;code&gt;.yml&lt;/code&gt; or &lt;code&gt;.json&lt;/code&gt; project spec. Defaults to &lt;code&gt;project.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--project&lt;/strong&gt;: An optional path to a directory where the project will be generated. By default this is the directory the spec lives in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--quiet&lt;/strong&gt;: Suppress informational and success messages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--use-cache&lt;/strong&gt;: Used to prevent unnecessarily generating the project. If this is set, then a cache file will be written to when a project is generated. If &lt;code&gt;xcodegen&lt;/code&gt; is later run but the spec and all the files it contains are the same, the project won't be generated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--cache-path&lt;/strong&gt;: A custom path to use for your cache file. This defaults to &lt;code&gt;~/.xcodegen/cache/{PROJECT_SPEC_PATH_HASH}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other commands as well. Use &lt;code&gt;xcodegen help&lt;/code&gt; to see more detailed usage information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-editing" class="anchor" aria-hidden="true" href="#editing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editing&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/yonaskolb/XcodeGen.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; XcodeGen
swift package generate-xcodeproj&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This use Swift Project Manager to create an &lt;code&gt;xcodeproj&lt;/code&gt; file that you can open, edit and run in Xcode, which makes editing any code easier.&lt;/p&gt;
&lt;p&gt;If you want to pass any required arguments when running in Xcode, you can edit the scheme to include launch arguments.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;a href="Docs/ProjectSpec.md"&gt;Project Spec&lt;/a&gt; documentation for all the various properties and options that can be set&lt;/li&gt;
&lt;li&gt;See &lt;a href="Docs/Usage.md"&gt;Usage&lt;/a&gt; for more specific usage and use case documentation&lt;/li&gt;
&lt;li&gt;See &lt;a href="Docs/FAQ.md"&gt;FAQ&lt;/a&gt; for a list of some frequently asked questions&lt;/li&gt;
&lt;li&gt;See &lt;a href="Docs/Examples.md"&gt;Examples&lt;/a&gt; for some real world XcodeGen project specs out in the wild&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-attributions" class="anchor" aria-hidden="true" href="#attributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Attributions&lt;/h2&gt;
&lt;p&gt;This tool is powered by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/carambalabs/xcodeproj"&gt;xcodeproj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yonaskolb/JSONUtilities"&gt;JSONUtilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kylef/Spectre"&gt;Spectre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kylef/PathKit"&gt;PathKit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kylef/Commander"&gt;Commander&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jpsim/Yams"&gt;Yams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inspiration for this tool came from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/workshop/struct"&gt;struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jcampbell05/xcake"&gt;xcake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CocoaPods/Xcodeproj"&gt;CocoaPods Xcodeproj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions&lt;/h2&gt;
&lt;p&gt;Pull requests and issues are always welcome. Please open any issues and PRs for bugs, features, or documentation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a8c921e80eccceb652e97f3e3681a06fa684cf23/68747470733a2f2f736f757263657265722e696f2f66616d652f796f6e61736b6f6c622f796f6e61736b6f6c622f58636f646547656e2f696d616765732f30" alt="" data-canonical-src="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/0" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/1" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8d80e519bde0d2130dcb2b6a066929f9ee09fb8/68747470733a2f2f736f757263657265722e696f2f66616d652f796f6e61736b6f6c622f796f6e61736b6f6c622f58636f646547656e2f696d616765732f31" alt="" data-canonical-src="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/1" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/2" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2d02142a2d35f782cf3915ad92b7ab0115a0eb6/68747470733a2f2f736f757263657265722e696f2f66616d652f796f6e61736b6f6c622f796f6e61736b6f6c622f58636f646547656e2f696d616765732f32" alt="" data-canonical-src="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/2" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/3" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/351562780d4b0a1b7a1dbcfba6fb0ee583ad9c86/68747470733a2f2f736f757263657265722e696f2f66616d652f796f6e61736b6f6c622f796f6e61736b6f6c622f58636f646547656e2f696d616765732f33" alt="" data-canonical-src="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/3" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/4" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8869bf5b6acfb64ede5c694257c6924acb852aa1/68747470733a2f2f736f757263657265722e696f2f66616d652f796f6e61736b6f6c622f796f6e61736b6f6c622f58636f646547656e2f696d616765732f34" alt="" data-canonical-src="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/4" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/94b53c088e75969ca41606c9da34ba3b6187baa3/68747470733a2f2f736f757263657265722e696f2f66616d652f796f6e61736b6f6c622f796f6e61736b6f6c622f58636f646547656e2f696d616765732f35" alt="" data-canonical-src="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/5" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/6" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0a6638c6a0b289b20b7d703dc2860a1c5753ae2c/68747470733a2f2f736f757263657265722e696f2f66616d652f796f6e61736b6f6c622f796f6e61736b6f6c622f58636f646547656e2f696d616765732f36" alt="" data-canonical-src="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/6" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/7" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5607cdc82657e829a12654a85a7670cfdff5e6fc/68747470733a2f2f736f757263657265722e696f2f66616d652f796f6e61736b6f6c622f796f6e61736b6f6c622f58636f646547656e2f696d616765732f37" alt="" data-canonical-src="https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/7" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;XcodeGen is licensed under the MIT license. See &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt; for more info.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>yonaskolb</author><guid isPermaLink="false">https://github.com/yonaskolb/XcodeGen</guid><pubDate>Sun, 05 Jan 2020 00:03:00 GMT</pubDate></item><item><title>Swinject/Swinject #4 in Swift, Today</title><link>https://github.com/Swinject/Swinject</link><description>&lt;p&gt;&lt;i&gt;Dependency injection framework for Swift with iOS/macOS/Linux&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="https://avatars0.githubusercontent.com/u/13637225?v=3&amp;amp;s=600"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/13637225?v=3&amp;amp;s=600" width="33%" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-swinject" class="anchor" aria-hidden="true" href="#swinject"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swinject&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/Swinject/Swinject" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/512c6743bb3271ad6cdceddc4ed3f7037cd53e4c/68747470733a2f2f7472617669732d63692e6f72672f5377696e6a6563742f5377696e6a6563742e7376673f6272616e63683d6d6173746572" alt="Travis CI" data-canonical-src="https://travis-ci.org/Swinject/Swinject.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoapods.org/pods/Swinject" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c9c67f6e25e6835b794740820745c2418123bc78/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f5377696e6a6563742e7376673f7374796c653d666c6174" alt="CocoaPods Version" data-canonical-src="https://img.shields.io/cocoapods/v/Swinject.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoapods.org/pods/Swinject" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/847343d0e310495086b026780886fd4d3a7ecdeb/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f5377696e6a6563742e7376673f7374796c653d666c6174" alt="License" data-canonical-src="https://img.shields.io/cocoapods/l/Swinject.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoapods.org/pods/Swinject" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f8c4d75a9e97488d6b39cce08bdaeefd8b24d661/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d694f532532302537432532306d61634f5325323025374325323074764f5325323025374325323077617463684f532532302537432532304c696e75782d6c69676874677265792e737667" alt="Platforms" data-canonical-src="https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://developer.apple.com/swift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1b9a7a494e815f0f0f9a96013d4b91b40afdd25c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742d322e322d2d332e312e782d4631364433392e7376673f7374796c653d666c6174" alt="Swift Version" data-canonical-src="https://img.shields.io/badge/Swift-2.2--3.1.x-F16D39.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://houndci.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1c940d021ef775a44e0880bc3ba124a6bee5fefb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657669657765645f62792d486f756e642d3845363442302e737667" alt="Reviewed by Hound" data-canonical-src="https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swinject is a lightweight &lt;a href="https://en.wikipedia.org/wiki/Dependency_injection" rel="nofollow"&gt;dependency injection&lt;/a&gt; framework for Swift.&lt;/p&gt;
&lt;p&gt;Dependency injection (DI) is a software design pattern that implements Inversion of Control (IoC) for resolving dependencies. In the pattern, Swinject helps your app split into loosely-coupled components, which can be developed, tested and maintained more easily. Swinject is powered by the Swift generic type system and first class functions to define dependencies of your app simply and fluently.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/README.md#user-content-pure-swift-type-support"&gt;Pure Swift Type Support&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/DIContainer.md#registration-with-arguments-to-di-container"&gt;Injection with Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/InjectionPatterns.md"&gt;Initializer/Property/Method Injections&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/InjectionPatterns.md#user-content-initialization-callback"&gt;Initialization Callback&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/CircularDependencies.md"&gt;Circular Dependency Injection&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/ObjectScopes.md"&gt;Object Scopes as None (Transient), Graph, Container (Singleton) and Hierarchy&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Support of both Reference and &lt;a href="./Documentation/Misc.md#value-types"&gt;Value Types&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/Misc.md#self-registration-self-binding"&gt;Self-registration (Self-binding)&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/ContainerHierarchy.md"&gt;Container Hierarchy&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/ThreadSafety.md"&gt;Thread Safety&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;a href="./Documentation/Assembler.md"&gt;Modular Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extensions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Swinject/SwinjectPropertyLoader"&gt;SwinjectPropertyLoader&lt;/a&gt;&lt;/strong&gt;: Loading property values from resources.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Swinject/SwinjectStoryboard"&gt;SwinjectStoryboard&lt;/a&gt;&lt;/strong&gt;: Automatic dependency injection via Storyboard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Swinject/Swinject-CodeGen"&gt;Swinject-CodeGen&lt;/a&gt;&lt;/strong&gt;: Type-safe code generation of &lt;code&gt;Container&lt;/code&gt; from a CSV/YAML file defining dependencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Swinject/SwinjectAutoregistration"&gt;SwinjectAutoregistration&lt;/a&gt;&lt;/strong&gt;: Automatic registration of services by leveraging the Swift Generics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 8.0+ / Mac OS X 10.10+ / watchOS 2.0+ / tvOS 9.0+&lt;/li&gt;
&lt;li&gt;Swift 2.2 or 2.3
&lt;ul&gt;
&lt;li&gt;Xcode 7.0+&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Swift 3
&lt;ul&gt;
&lt;li&gt;Xcode 8.0+&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Swift 3.2, 4.x
&lt;ul&gt;
&lt;li&gt;Xcode 9.0+&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Carthage 0.18+ (if you use)&lt;/li&gt;
&lt;li&gt;CocoaPods 1.1.1+ (if you use)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Swinject is available through &lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; or &lt;a href="https://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage&lt;/h3&gt;
&lt;p&gt;To install Swinject with Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-swift-22-or-23" class="anchor" aria-hidden="true" href="#swift-22-or-23"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 2.2 or 2.3&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;github "Swinject/Swinject" ~&amp;gt; 1.1.4
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-swift-3x-or-4x" class="anchor" aria-hidden="true" href="#swift-3x-or-4x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 3.x or 4.x&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;github "Swinject/Swinject"

# Uncomment if you use SwinjectStoryboard
# github "Swinject/SwinjectStoryboard"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then run &lt;code&gt;carthage update --no-use-binaries&lt;/code&gt; command or just &lt;code&gt;carthage update&lt;/code&gt;. For details of the installation and usage of Carthage, visit &lt;a href="https://github.com/Carthage/Carthage"&gt;its project page&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods&lt;/h3&gt;
&lt;p&gt;To install Swinject with CocoaPods, add the following lines to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-swift-22-or-23-1" class="anchor" aria-hidden="true" href="#swift-22-or-23-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 2.2 or 2.3&lt;/h4&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;source &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://github.com/CocoaPods/Specs.git&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
platform &lt;span class="pl-c1"&gt;:ios&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;8.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or platform :osx, '10.10' if your target is OS X.&lt;/span&gt;
use_frameworks!

pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Swinject&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 1.1.4&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-swift-3x" class="anchor" aria-hidden="true" href="#swift-3x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift 3.x&lt;/h4&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;source &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://github.com/CocoaPods/Specs.git&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
platform &lt;span class="pl-c1"&gt;:ios&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;8.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or platform :osx, '10.10' if your target is OS X.&lt;/span&gt;
use_frameworks!

pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Swinject&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Uncomment if you use SwinjectStoryboard&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; pod 'SwinjectStoryboard'&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt; command. For details of the installation and usage of CocoaPods, visit &lt;a href="https://cocoapods.org" rel="nofollow"&gt;its official website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="./Documentation"&gt;Technical documents&lt;/a&gt; including patterns of dependency injection and examples.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cocoadocs.org/docsets/Swinject/" rel="nofollow"&gt;API reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Usage&lt;/h2&gt;
&lt;p&gt;First, register a service and component pair to a &lt;code&gt;Container&lt;/code&gt;, where the component is created by the registered closure as a factory. In this example, &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;PetOwner&lt;/code&gt; are component classes implementing &lt;code&gt;Animal&lt;/code&gt; and &lt;code&gt;Person&lt;/code&gt; service protocols, respectively.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; container &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Container&lt;/span&gt;()
container.&lt;span class="pl-c1"&gt;register&lt;/span&gt;(Animal.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;Cat&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Mimi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) }
container.&lt;span class="pl-c1"&gt;register&lt;/span&gt;(Person.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { r &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;PetOwner&lt;/span&gt;(&lt;span class="pl-c1"&gt;pet&lt;/span&gt;: r.&lt;span class="pl-c1"&gt;resolve&lt;/span&gt;(Animal.&lt;span class="pl-k"&gt;self&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then get an instance of a service from the container. The person is resolved to a pet owner, and playing with the cat named Mimi!&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; person &lt;span class="pl-k"&gt;=&lt;/span&gt; container.&lt;span class="pl-c1"&gt;resolve&lt;/span&gt;(Person.&lt;span class="pl-k"&gt;self&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;
person.&lt;span class="pl-c1"&gt;play&lt;/span&gt;() &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; prints "I'm playing with Mimi."&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where definitions of the protocols and classes are&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;Animal&lt;/span&gt; {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; { &lt;span class="pl-k"&gt;get&lt;/span&gt; }
}

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Cat&lt;/span&gt;: &lt;span class="pl-e"&gt;Animal &lt;/span&gt;{
    &lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;

    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;name&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; name
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;Person&lt;/span&gt; {
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;play&lt;/span&gt;()
}

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;PetOwner&lt;/span&gt;: &lt;span class="pl-e"&gt;Person &lt;/span&gt;{
    &lt;span class="pl-k"&gt;let&lt;/span&gt; pet&lt;span class="pl-k"&gt;:&lt;/span&gt; Animal

    &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;pet&lt;/span&gt;&lt;/span&gt;: Animal) {
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;pet&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; pet
    }

    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;play&lt;/span&gt;() {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; pet.&lt;span class="pl-smi"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;??&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;someone&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I'm playing with &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;name&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the &lt;code&gt;pet&lt;/code&gt; of &lt;code&gt;PetOwner&lt;/code&gt; is automatically set as the instance of &lt;code&gt;Cat&lt;/code&gt; when &lt;code&gt;Person&lt;/code&gt; is resolved to the instance of &lt;code&gt;PetOwner&lt;/code&gt;. If a container already set up is given, you do not have to care what are the actual types of the services and how they are created with their dependency.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-where-to-register-services" class="anchor" aria-hidden="true" href="#where-to-register-services"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where to Register Services&lt;/h2&gt;
&lt;p&gt;Services must be registered to a container before they are used. The typical registration approach will differ depending upon whether you are using &lt;code&gt;SwinjectStoryboard&lt;/code&gt; or not.&lt;/p&gt;
&lt;p&gt;The following view controller class is used in addition to the protocols and classes above in the examples below.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;PersonViewController&lt;/span&gt;: &lt;span class="pl-e"&gt;UIViewController &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; person&lt;span class="pl-k"&gt;:&lt;/span&gt; Person&lt;span class="pl-k"&gt;?&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-with-swinjectstoryboard" class="anchor" aria-hidden="true" href="#with-swinjectstoryboard"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;With SwinjectStoryboard&lt;/h3&gt;
&lt;p&gt;Import SwinjectStoryboard at the top of your swift source file if you use Swinject v2 in Swift 3.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Only Swinject v2 in Swift 3.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;SwinjectStoryboard&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Services should be registered in an extension of &lt;code&gt;SwinjectStoryboard&lt;/code&gt; if you use &lt;code&gt;SwinjectStoryboard&lt;/code&gt;. Refer to &lt;a href="https://github.com/Swinject/SwinjectStoryboard"&gt;the project page of SwinjectStoryboard&lt;/a&gt; for further details.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;SwinjectStoryboard&lt;/span&gt; {
    &lt;span class="pl-k"&gt;@objc&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;setup&lt;/span&gt;() {
        defaultContainer.&lt;span class="pl-c1"&gt;register&lt;/span&gt;(Animal.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;Cat&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Mimi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) }
        defaultContainer.&lt;span class="pl-c1"&gt;register&lt;/span&gt;(Person.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { r &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-c1"&gt;PetOwner&lt;/span&gt;(&lt;span class="pl-c1"&gt;pet&lt;/span&gt;: r.&lt;span class="pl-c1"&gt;resolve&lt;/span&gt;(Animal.&lt;span class="pl-k"&gt;self&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;)
        }
        defaultContainer.&lt;span class="pl-c1"&gt;register&lt;/span&gt;(PersonViewController.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { r &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;let&lt;/span&gt; controller &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;PersonViewController&lt;/span&gt;()
            controller.&lt;span class="pl-smi"&gt;person&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; r.&lt;span class="pl-c1"&gt;resolve&lt;/span&gt;(Person.&lt;span class="pl-k"&gt;self&lt;/span&gt;)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; controller
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-without-swinjectstoryboard" class="anchor" aria-hidden="true" href="#without-swinjectstoryboard"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Without SwinjectStoryboard&lt;/h3&gt;
&lt;p&gt;If you do not use &lt;code&gt;SwinjectStoryboard&lt;/code&gt; to instantiate view controllers, services should be registered to a container in your application's &lt;code&gt;AppDelegate&lt;/code&gt;. Registering before exiting &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; will ensure that the services are setup appropriately before they are used.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;AppDelegate&lt;/span&gt;: &lt;span class="pl-e"&gt;UIResponder&lt;/span&gt;, &lt;span class="pl-e"&gt;UIApplicationDelegate &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; window&lt;span class="pl-k"&gt;:&lt;/span&gt; UIWindow&lt;span class="pl-k"&gt;?&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; container&lt;span class="pl-k"&gt;:&lt;/span&gt; Container &lt;span class="pl-k"&gt;=&lt;/span&gt; {
        &lt;span class="pl-k"&gt;let&lt;/span&gt; container &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Container&lt;/span&gt;()
        container.&lt;span class="pl-c1"&gt;register&lt;/span&gt;(Animal.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;Cat&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Mimi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) }
        container.&lt;span class="pl-c1"&gt;register&lt;/span&gt;(Person.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { r &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-c1"&gt;PetOwner&lt;/span&gt;(&lt;span class="pl-c1"&gt;pet&lt;/span&gt;: r.&lt;span class="pl-c1"&gt;resolve&lt;/span&gt;(Animal.&lt;span class="pl-k"&gt;self&lt;/span&gt;)&lt;span class="pl-k"&gt;!&lt;/span&gt;)
        }
        container.&lt;span class="pl-c1"&gt;register&lt;/span&gt;(PersonViewController.&lt;span class="pl-k"&gt;self&lt;/span&gt;) { r &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;let&lt;/span&gt; controller &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;PersonViewController&lt;/span&gt;()
            controller.&lt;span class="pl-smi"&gt;person&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; r.&lt;span class="pl-c1"&gt;resolve&lt;/span&gt;(Person.&lt;span class="pl-k"&gt;self&lt;/span&gt;)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; controller
        }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; container
    }()

    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;application&lt;/span&gt;(
        &lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;application&lt;/span&gt;: UIApplication,
        &lt;span class="pl-en"&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class="pl-smi"&gt;launchOptions&lt;/span&gt;: [UIApplicationLaunchOptionsKey : &lt;span class="pl-c1"&gt;Any&lt;/span&gt;]&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt; {

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Instantiate a window.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-k"&gt;let&lt;/span&gt; window &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIWindow&lt;/span&gt;(&lt;span class="pl-c1"&gt;frame&lt;/span&gt;: UIScreen.&lt;span class="pl-smi"&gt;main&lt;/span&gt;.&lt;span class="pl-smi"&gt;bounds&lt;/span&gt;)
        window.&lt;span class="pl-c1"&gt;makeKeyAndVisible&lt;/span&gt;()
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;window&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; window

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Instantiate the root view controller with dependencies injected by the container.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        window.&lt;span class="pl-smi"&gt;rootViewController&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; container.&lt;span class="pl-c1"&gt;resolve&lt;/span&gt;(PersonViewController.&lt;span class="pl-k"&gt;self&lt;/span&gt;)

        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the example uses a convenience initializer taking a closure to register services to the new instance of &lt;code&gt;Container&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-play-in-playground" class="anchor" aria-hidden="true" href="#play-in-playground"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Play in Playground!&lt;/h2&gt;
&lt;p&gt;The project contains &lt;code&gt;Sample-iOS.playground&lt;/code&gt; to demonstrate the features of Swinject. Download or clone the project, run the playground, modify it, and play with it to learn Swinject.&lt;/p&gt;
&lt;p&gt;To run the playground in the project, first build the project, then select &lt;code&gt;Editor &amp;gt; Execute Playground&lt;/code&gt; menu in Xcode.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-example-apps" class="anchor" aria-hidden="true" href="#example-apps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example Apps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Swinject/SwinjectSimpleExample"&gt;SwinjectSimpleExample&lt;/a&gt; demonstrates dependency injection and Swinject in a simple weather app that lists current weather information at some locations.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Swinject/SwinjectMVVMExample"&gt;SwinjectMVVMExample&lt;/a&gt; demonstrates dependency injection with Swift and reactive programming with &lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa"&gt;ReactiveCocoa&lt;/a&gt; in MVVM architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-blog-posts" class="anchor" aria-hidden="true" href="#blog-posts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Blog Posts&lt;/h2&gt;
&lt;p&gt;The following blog posts introduce Swinject and the concept of dependency injection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-introduction-to-swinject/" rel="nofollow"&gt;Dependency Injection Framework for Swift - Introduction to Swinject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-simple-weather-app-example-with-swinject-part-1/" rel="nofollow"&gt;Dependency Injection Framework for Swift - Simple Weather App Example with Swinject Part 1/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-simple-weather-app-example-with-swinject-part-2/" rel="nofollow"&gt;Dependency Injection Framework for Swift - Simple Weather App Example with Swinject Part 2/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contribution-guide" class="anchor" aria-hidden="true" href="#contribution-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribution Guide&lt;/h2&gt;
&lt;p&gt;A guide to &lt;a href="https://github.com/Swinject/Swinject/issues"&gt;submit issues&lt;/a&gt;, to ask general questions, or to &lt;a href="https://github.com/Swinject/Swinject/pulls"&gt;open pull requests&lt;/a&gt; is &lt;a href="CONTRIBUTING.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-question" class="anchor" aria-hidden="true" href="#question"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Question?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://join.slack.com/t/swinject/shared_invite/enQtNjk0NjE0NjMzOTIyLTI5NWJiNDU5NGI1MTUwZDI3MDU2ZTM2YTMwMWRhMjI0ZmFlODk4MDI5OWUwNzY1YjlhOTRjYWM2NjZmOTVhNTU" rel="nofollow"&gt;Slack&lt;/a&gt; feel free to discuss anything Swinject related.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/tagged/swinject" rel="nofollow"&gt;Stack Overflow&lt;/a&gt; we are trying to monitor questions tagged &lt;code&gt;swinject&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h2&gt;
&lt;p&gt;The DI container features of Swinject are inspired by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ninject.org" rel="nofollow"&gt;Ninject&lt;/a&gt; - &lt;a href="https://github.com/enkari"&gt;Enkari, Ltd&lt;/a&gt; and &lt;a href="https://github.com/ninject/Ninject/graphs/contributors"&gt;the Ninject project contributors&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://autofac.org" rel="nofollow"&gt;Autofac&lt;/a&gt; - &lt;a href="https://github.com/autofac/Autofac"&gt;Autofac Project&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and highly inspired by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://funq.codeplex.com" rel="nofollow"&gt;Funq&lt;/a&gt; - &lt;a href="http://www.codeplex.com/site/users/view/dcazzulino" rel="nofollow"&gt;Daniel Cazzulino&lt;/a&gt; and &lt;a href="http://funq.codeplex.com/team/view" rel="nofollow"&gt;the project team&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;MIT license. See the &lt;a href="LICENSE.txt"&gt;LICENSE file&lt;/a&gt; for details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Swinject</author><guid isPermaLink="false">https://github.com/Swinject/Swinject</guid><pubDate>Sun, 05 Jan 2020 00:04:00 GMT</pubDate></item><item><title>Carthage/Carthage #5 in Swift, Today</title><link>https://github.com/Carthage/Carthage</link><description>&lt;p&gt;&lt;i&gt;A simple, decentralized dependency manager for Cocoa&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Logo/PNG/header.png"&gt;&lt;img src="Logo/PNG/header.png" alt="" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-carthage---" class="anchor" aria-hidden="true" href="#carthage---"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage &lt;a href="https://raw.githubusercontent.com/Carthage/Carthage/master/LICENSE.md" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c0e54a826d90da52e4ee70c63fef3ee61b3ffbd5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6c69676874677265792e737667" alt="GitHub license" data-canonical-src="https://img.shields.io/badge/license-MIT-lightgrey.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/Carthage/Carthage/releases"&gt;&lt;img src="https://camo.githubusercontent.com/3f4c1a081128a7fb77fe7d371e52f0e675090200/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f63617274686167652f63617274686167652e737667" alt="GitHub release" data-canonical-src="https://img.shields.io/github/release/carthage/carthage.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://houndci.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1c940d021ef775a44e0880bc3ba124a6bee5fefb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657669657765645f62792d486f756e642d3845363442302e737667" alt="Reviewed by Hound" data-canonical-src="https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Carthage is intended to be the simplest way to add frameworks to your Cocoa application.&lt;/p&gt;
&lt;p&gt;Carthage builds your dependencies and provides you with binary frameworks, but you retain full control over your project structure and setup. Carthage does not automatically modify your project files or your build settings.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#quick-start"&gt;Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-carthage"&gt;Installing Carthage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-frameworks-to-an-application"&gt;Adding frameworks to an application&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#if-youre-building-for-macos"&gt;If you're building for macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-youre-building-for-ios-tvos-or-watchos"&gt;If you're building for iOS, tvOS, or watchOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#for-both-platforms"&gt;For both platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optionally-add-build-phase-to-warn-about-outdated-dependencies"&gt;(Optionally) Add build phase to warn about outdated dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swift-binary-framework-download-compatibility"&gt;Swift binary framework download compatibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-a-project-that-uses-carthage"&gt;Running a project that uses Carthage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-frameworks-to-unit-tests-or-a-framework"&gt;Adding frameworks to unit tests or a framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#upgrading-frameworks"&gt;Upgrading frameworks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#experimental-resolver"&gt;Experimental Resolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#nested-dependencies"&gt;Nested dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-submodules-for-dependencies"&gt;Using submodules for dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automatically-rebuilding-dependencies"&gt;Automatically rebuilding dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#caching-builds"&gt;Caching builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bashzshfish-completion"&gt;Bash/Zsh/Fish completion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#supporting-carthage-for-your-framework"&gt;Supporting Carthage for your framework&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#share-your-xcode-schemes"&gt;Share your Xcode schemes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resolve-build-failures"&gt;Resolve build failures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tag-stable-releases"&gt;Tag stable releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#archive-prebuilt-frameworks-into-one-zip-file"&gt;Archive prebuilt frameworks into one zip file&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#use-travis-ci-to-upload-your-tagged-prebuilt-frameworks"&gt;Use travis-ci to upload your tagged prebuilt frameworks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-static-frameworks-to-speed-up-your-apps-launch-times"&gt;Build static frameworks to speed up your app’s launch times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#declare-your-compatibility"&gt;Declare your compatibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#known-issues"&gt;Known issues&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#dwarfs-symbol-problem"&gt;DWARFs symbol problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#carthagekit"&gt;CarthageKit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#differences-between-carthage-and-cocoapods"&gt;Differences between Carthage and CocoaPods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get Carthage by running &lt;code&gt;brew install carthage&lt;/code&gt; or choose &lt;a href="#installing-carthage"&gt;another installation method&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;a href="Documentation/Artifacts.md#cartfile"&gt;Cartfile&lt;/a&gt; in the same directory where your &lt;code&gt;.xcodeproj&lt;/code&gt; or &lt;code&gt;.xcworkspace&lt;/code&gt; is&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List the desired dependencies in the &lt;a href="Documentation/Artifacts.md#cartfile"&gt;Cartfile&lt;/a&gt;, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github "Alamofire/Alamofire" ~&amp;gt; 4.7.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Cartfile.resolved&lt;/code&gt; file and a &lt;code&gt;Carthage&lt;/code&gt; directory will appear in the same directory where your &lt;code&gt;.xcodeproj&lt;/code&gt; or &lt;code&gt;.xcworkspace&lt;/code&gt; is&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Drag the built &lt;code&gt;.framework&lt;/code&gt; binaries from &lt;code&gt;Carthage/Build/&amp;lt;platform&amp;gt;&lt;/code&gt; into your application’s Xcode project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are using Carthage for an application, follow the remaining steps, otherwise stop here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On your application targets’ &lt;em&gt;Build Phases&lt;/em&gt; settings tab, click the &lt;em&gt;+&lt;/em&gt; icon and choose &lt;em&gt;New Run Script Phase&lt;/em&gt;. Create a Run Script in which you specify your shell (ex: &lt;code&gt;/bin/sh&lt;/code&gt;), add the following contents to the script area below the shell:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;/usr/local/bin/carthage copy-frameworks&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the paths to the frameworks you want to use under “Input Files". For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/Alamofire.framework
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the paths to the copied frameworks to the “Output Files”. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/Alamofire.framework
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another approach when having multiple dependencies is to use &lt;code&gt;.xcfilelist&lt;/code&gt;s. This is covered in &lt;a href="#if-youre-building-for-ios-tvos-or-watchos"&gt;If you´re building for iOS, tvOS ot WatchOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For an in depth guide, read on from &lt;a href="#adding-frameworks-to-an-application"&gt;Adding frameworks to an application&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-carthage" class="anchor" aria-hidden="true" href="#installing-carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Carthage&lt;/h2&gt;
&lt;p&gt;There are multiple options for installing Carthage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Installer:&lt;/strong&gt; Download and run the &lt;code&gt;Carthage.pkg&lt;/code&gt; file for the latest &lt;a href="https://github.com/Carthage/Carthage/releases"&gt;release&lt;/a&gt;, then follow the on-screen instructions. If you are installing the pkg via CLI, you might need to run &lt;code&gt;sudo chown -R $(whoami) /usr/local&lt;/code&gt; first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Homebrew:&lt;/strong&gt; You can use &lt;a href="http://brew.sh" rel="nofollow"&gt;Homebrew&lt;/a&gt; and install the &lt;code&gt;carthage&lt;/code&gt; tool on your system simply by running &lt;code&gt;brew update&lt;/code&gt; and &lt;code&gt;brew install carthage&lt;/code&gt;. (note: if you previously installed the binary version of Carthage, you should delete &lt;code&gt;/Library/Frameworks/CarthageKit.framework&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MacPorts:&lt;/strong&gt; You can use &lt;a href="https://www.macports.org/" rel="nofollow"&gt;MacPorts&lt;/a&gt; and install the &lt;code&gt;carthage&lt;/code&gt; tool on your system simply by running &lt;code&gt;sudo port selfupdate&lt;/code&gt; and &lt;code&gt;sudo port install carthage&lt;/code&gt;. (note: if you previously installed the binary version of Carthage, you should delete &lt;code&gt;/Library/Frameworks/CarthageKit.framework&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;From source:&lt;/strong&gt; If you’d like to run the latest development version (which may be highly unstable or incompatible), simply clone the &lt;code&gt;master&lt;/code&gt; branch of the repository, then run &lt;code&gt;make install&lt;/code&gt;. Requires Xcode 9.4 (Swift 4.1).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-adding-frameworks-to-an-application" class="anchor" aria-hidden="true" href="#adding-frameworks-to-an-application"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding frameworks to an application&lt;/h2&gt;
&lt;p&gt;Once you have Carthage &lt;a href="#installing-carthage"&gt;installed&lt;/a&gt;, you can begin adding frameworks to your project. Note that Carthage only supports dynamic frameworks, which are &lt;strong&gt;only available on iOS 8 or later&lt;/strong&gt; (or any version of OS X).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h3&gt;
&lt;h5&gt;&lt;a id="user-content-if-youre-building-for-macos" class="anchor" aria-hidden="true" href="#if-youre-building-for-macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;If you're building for macOS&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href="Documentation/Artifacts.md#cartfile"&gt;Cartfile&lt;/a&gt; that lists the frameworks you’d like to use in your project.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;carthage update --platform macOS&lt;/code&gt;. This will fetch dependencies into a &lt;a href="Documentation/Artifacts.md#carthagecheckouts"&gt;Carthage/Checkouts&lt;/a&gt; folder and build each one or download a pre-compiled framework.&lt;/li&gt;
&lt;li&gt;On your application targets’ &lt;em&gt;General&lt;/em&gt; settings tab, in the &lt;em&gt;Embedded Binaries&lt;/em&gt; section, drag and drop each framework you want to use from the &lt;a href="Documentation/Artifacts.md#carthagebuild"&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, you'll need to copy debug symbols for debugging and crash reporting on OS X.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On your application target’s &lt;em&gt;Build Phases&lt;/em&gt; settings tab, click the &lt;em&gt;+&lt;/em&gt; icon and choose &lt;em&gt;New Copy Files Phase&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Click the &lt;em&gt;Destination&lt;/em&gt; drop-down menu and select &lt;em&gt;Products Directory&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;For each framework you’re using, drag and drop its corresponding dSYM file.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;&lt;a id="user-content-if-youre-building-for-ios-tvos-or-watchos" class="anchor" aria-hidden="true" href="#if-youre-building-for-ios-tvos-or-watchos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;If you're building for iOS, tvOS, or watchOS&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;a href="Documentation/Artifacts.md#cartfile"&gt;Cartfile&lt;/a&gt; that lists the frameworks you’d like to use in your project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;. This will fetch dependencies into a &lt;a href="Documentation/Artifacts.md#carthagecheckouts"&gt;Carthage/Checkouts&lt;/a&gt; folder, then build each one or download a pre-compiled framework.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On your application targets’ &lt;em&gt;General&lt;/em&gt; settings tab, in the “Linked Frameworks and Libraries” section, drag and drop each framework you want to use from the &lt;a href="Documentation/Artifacts.md#carthagebuild"&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On your application targets’ &lt;em&gt;Build Phases&lt;/em&gt; settings tab, click the &lt;em&gt;+&lt;/em&gt; icon and choose &lt;em&gt;New Run Script Phase&lt;/em&gt;. Create a Run Script in which you specify your shell (ex: &lt;code&gt;/bin/sh&lt;/code&gt;), add the following contents to the script area below the shell:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;/usr/local/bin/carthage copy-frameworks&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a file named &lt;code&gt;input.xcfilelist&lt;/code&gt; and a file named &lt;code&gt;output.xcfilelist&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the paths to the frameworks you want to use to your &lt;code&gt;input.xcfilelist&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/Result.framework
$(SRCROOT)/Carthage/Build/iOS/ReactiveSwift.framework
$(SRCROOT)/Carthage/Build/iOS/ReactiveCocoa.framework
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the paths to the copied frameworks to the &lt;code&gt;output.xcfilelist&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/Result.framework
$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/ReactiveSwift.framework
$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/ReactiveCocoa.framework
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With output files specified alongside the input files, Xcode only needs to run the script when the input files have changed or the output files are missing. This means dirty builds will be faster when you haven't rebuilt frameworks with Carthage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;input.xcfilelist&lt;/code&gt; to the "Input File Lists" section of the Carthage run script phase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;output.xcfilelist&lt;/code&gt; to the "Output File Lists" section of the Carthage run script phase&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This script works around an &lt;a href="http://www.openradar.me/radar?id=6409498411401216" rel="nofollow"&gt;App Store submission bug&lt;/a&gt; triggered by universal binaries and ensures that necessary bitcode-related files and dSYMs are copied when archiving.&lt;/p&gt;
&lt;p&gt;With the debug information copied into the built products directory, Xcode will be able to symbolicate the stack trace whenever you stop at a breakpoint. This will also enable you to step through third-party code in the debugger.&lt;/p&gt;
&lt;p&gt;When archiving your application for submission to the App Store or TestFlight, Xcode will also copy these files into the dSYMs subdirectory of your application’s &lt;code&gt;.xcarchive&lt;/code&gt; bundle.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-for-both-platforms" class="anchor" aria-hidden="true" href="#for-both-platforms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;For both platforms&lt;/h5&gt;
&lt;p&gt;Along the way, Carthage will have created some &lt;a href="Documentation/Artifacts.md"&gt;build artifacts&lt;/a&gt;. The most important of these is the &lt;a href="Documentation/Artifacts.md#cartfileresolved"&gt;Cartfile.resolved&lt;/a&gt; file, which lists the versions that were actually built for each framework. &lt;strong&gt;Make sure to commit your &lt;a href="Documentation/Artifacts.md#cartfileresolved"&gt;Cartfile.resolved&lt;/a&gt;&lt;/strong&gt;, because anyone else using the project will need that file to build the same framework versions.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-optionally-add-build-phase-to-warn-about-outdated-dependencies" class="anchor" aria-hidden="true" href="#optionally-add-build-phase-to-warn-about-outdated-dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(Optionally) Add build phase to warn about outdated dependencies&lt;/h5&gt;
&lt;p&gt;You can add a Run Script phase to automatically warn you when one of your dependencies is out of date.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On your application targets’ &lt;code&gt;Build Phases&lt;/code&gt; settings tab, click the &lt;code&gt;+&lt;/code&gt; icon and choose &lt;code&gt;New Run Script Phase&lt;/code&gt;. Create a Run Script in which you specify your shell (ex: &lt;code&gt;/bin/sh&lt;/code&gt;), add the following contents to the script area below the shell:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;/usr/local/bin/carthage outdated --xcode-warnings &lt;span class="pl-k"&gt;2&amp;gt;&lt;/span&gt;/dev/null&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;&lt;a id="user-content-swift-binary-framework-download-compatibility" class="anchor" aria-hidden="true" href="#swift-binary-framework-download-compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift binary framework download compatibility&lt;/h5&gt;
&lt;p&gt;Carthage will check to make sure that downloaded Swift (and mixed Objective-C/Swift) frameworks were built with the same version of Swift that is in use locally. If there is a version mismatch, Carthage will proceed to build the framework from source. If the framework cannot be built from source, Carthage will fail.&lt;/p&gt;
&lt;p&gt;Because Carthage uses the output of &lt;code&gt;xcrun swift --version&lt;/code&gt; to determine the local Swift version, make sure to run Carthage commands with the Swift toolchain that you intend to use. For many use cases, nothing additional is needed. However, for example, if you are building a Swift 2.3 project using Xcode 8.x, one approach to specifying your default &lt;code&gt;swift&lt;/code&gt; for &lt;code&gt;carthage bootstrap&lt;/code&gt; is to use the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 carthage bootstrap
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-running-a-project-that-uses-carthage" class="anchor" aria-hidden="true" href="#running-a-project-that-uses-carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running a project that uses Carthage&lt;/h3&gt;
&lt;p&gt;After you’ve finished the above steps and pushed your changes, other users of the project only need to fetch the repository and run &lt;code&gt;carthage bootstrap&lt;/code&gt; to get started with the frameworks you’ve added.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-adding-frameworks-to-unit-tests-or-a-framework" class="anchor" aria-hidden="true" href="#adding-frameworks-to-unit-tests-or-a-framework"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding frameworks to unit tests or a framework&lt;/h3&gt;
&lt;p&gt;Using Carthage for the dependencies of any arbitrary target is fairly similar to &lt;a href="#adding-frameworks-to-an-application"&gt;using Carthage for an application&lt;/a&gt;. The main difference lies in how the frameworks are actually set up and linked in Xcode.&lt;/p&gt;
&lt;p&gt;Because unit test targets are missing the &lt;em&gt;Linked Frameworks and Libraries&lt;/em&gt; section in their &lt;em&gt;General&lt;/em&gt; settings tab, you must instead drag the &lt;a href="Documentation/Artifacts.md#carthagebuild"&gt;built frameworks&lt;/a&gt; to the &lt;em&gt;Link Binaries With Libraries&lt;/em&gt; build phase.&lt;/p&gt;
&lt;p&gt;In the Test target under the &lt;em&gt;Build Settings&lt;/em&gt; tab, add &lt;code&gt;@loader_path/Frameworks&lt;/code&gt; to the &lt;em&gt;Runpath Search Paths&lt;/em&gt; if it isn't already present.&lt;/p&gt;
&lt;p&gt;In rare cases, you may want to also copy each dependency into the build product (e.g., to embed dependencies within the outer framework, or make sure dependencies are present in a test bundle). To do this, create a new &lt;em&gt;Copy Files&lt;/em&gt; build phase with the &lt;em&gt;Frameworks&lt;/em&gt; destination, then add the framework reference there as well. You shouldn't use the &lt;code&gt;carthage copy-frameworks&lt;/code&gt; command since test bundles don't need frameworks stripped, and running concurrent instances of &lt;code&gt;copy-frameworks&lt;/code&gt; (with parallel builds turn on) is not supported.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-upgrading-frameworks" class="anchor" aria-hidden="true" href="#upgrading-frameworks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Upgrading frameworks&lt;/h3&gt;
&lt;p&gt;If you’ve modified your &lt;a href="Documentation/Artifacts.md#cartfile"&gt;Cartfile&lt;/a&gt;, or you want to update to the newest versions of each framework (subject to the requirements you’ve specified), simply run the &lt;code&gt;carthage update&lt;/code&gt; command again.&lt;/p&gt;
&lt;p&gt;If you only want to update one, or specific, dependencies, pass them as a space-separated list to the &lt;code&gt;update&lt;/code&gt; command. e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;carthage update Box
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;carthage update Box Result
&lt;/code&gt;&lt;/pre&gt;
&lt;h5&gt;&lt;a id="user-content-experimental-resolver" class="anchor" aria-hidden="true" href="#experimental-resolver"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Experimental Resolver&lt;/h5&gt;
&lt;p&gt;A rewrite of the logic for upgrading frameworks was done with the aim of increasing speed and reducing memory usage. It is currently an opt-in feature. It can be used by passing &lt;code&gt;--new-resolver&lt;/code&gt; to the update command, e.g.,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;carthage update --new-resolver Box
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are experiencing performance problems during updates, please give the new resolver a try&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-nested-dependencies" class="anchor" aria-hidden="true" href="#nested-dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nested dependencies&lt;/h3&gt;
&lt;p&gt;If the framework you want to add to your project has dependencies explicitly listed in a &lt;a href="Documentation/Artifacts.md#cartfile"&gt;Cartfile&lt;/a&gt;, Carthage will automatically retrieve them for you. You will then have to &lt;strong&gt;drag them yourself into your project&lt;/strong&gt; from the &lt;a href="Documentation/Artifacts.md#carthagebuild"&gt;Carthage/Build&lt;/a&gt; folder.&lt;/p&gt;
&lt;p&gt;If the embedded framework in your project has dependencies to other frameworks you must  &lt;strong&gt;link them to application target&lt;/strong&gt; (even if application target does not have dependency to that frameworks and never uses them).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-submodules-for-dependencies" class="anchor" aria-hidden="true" href="#using-submodules-for-dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using submodules for dependencies&lt;/h3&gt;
&lt;p&gt;By default, Carthage will directly &lt;a href="Documentation/Artifacts.md#carthagecheckouts"&gt;check out&lt;/a&gt; dependencies’ source files into your project folder, leaving you to commit or ignore them as you choose. If you’d like to have dependencies available as Git submodules instead (perhaps so you can commit and push changes within them), you can run &lt;code&gt;carthage update&lt;/code&gt; or &lt;code&gt;carthage checkout&lt;/code&gt; with the &lt;code&gt;--use-submodules&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;When run this way, Carthage will write to your repository’s &lt;code&gt;.gitmodules&lt;/code&gt; and &lt;code&gt;.git/config&lt;/code&gt; files, and automatically update the submodules when the dependencies’ versions change.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-automatically-rebuilding-dependencies" class="anchor" aria-hidden="true" href="#automatically-rebuilding-dependencies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatically rebuilding dependencies&lt;/h3&gt;
&lt;p&gt;If you want to work on your dependencies during development, and want them to be automatically rebuilt when you build your parent project, you can add a Run Script build phase that invokes Carthage like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;/usr/local/bin/carthage build --platform &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;$PLATFORM_NAME&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; --project-directory &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;$SRCROOT&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that you should be &lt;a href="#using-submodules-for-dependencies"&gt;using submodules&lt;/a&gt; before doing this, because plain checkouts &lt;a href="Documentation/Artifacts.md#carthagecheckouts"&gt;should not be modified&lt;/a&gt; directly.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-caching-builds" class="anchor" aria-hidden="true" href="#caching-builds"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caching builds&lt;/h3&gt;
&lt;p&gt;By default Carthage will rebuild a dependency regardless of whether it's the same resolved version as before. Passing the &lt;code&gt;--cache-builds&lt;/code&gt; will cause carthage to avoid rebuilding a dependency if it can. See information on &lt;a href="Documentation/VersionFile.md"&gt;version files&lt;/a&gt; for details on how Carthage performs this caching.&lt;/p&gt;
&lt;p&gt;Note: At this time &lt;code&gt;--cache-builds&lt;/code&gt; is incompatible with &lt;code&gt;--use-submodules&lt;/code&gt;. Using both will result in working copy and committed changes to your submodule dependency not being correctly rebuilt. See &lt;a href="https://github.com/Carthage/Carthage/issues/1785"&gt;#1785&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-bashzshfish-completion" class="anchor" aria-hidden="true" href="#bashzshfish-completion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bash/Zsh/Fish completion&lt;/h3&gt;
&lt;p&gt;Auto completion of Carthage commands and options are available as documented in &lt;a href="Documentation/BashZshFishCompletion.md"&gt;Bash/Zsh/Fish Completion&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supporting-carthage-for-your-framework" class="anchor" aria-hidden="true" href="#supporting-carthage-for-your-framework"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supporting Carthage for your framework&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Carthage only officially supports dynamic frameworks&lt;/strong&gt;. Dynamic frameworks can be used on any version of OS X, but only on &lt;strong&gt;iOS 8 or later&lt;/strong&gt;. Additionally, since version 0.30.0 Carthage supports &lt;strong&gt;static&lt;/strong&gt; frameworks.&lt;/p&gt;
&lt;p&gt;Because Carthage has no centralized package list, and no project specification format, &lt;strong&gt;most frameworks should build automatically&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The specific requirements of any framework project are listed below.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-share-your-xcode-schemes" class="anchor" aria-hidden="true" href="#share-your-xcode-schemes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Share your Xcode schemes&lt;/h3&gt;
&lt;p&gt;Carthage will only build Xcode schemes that are shared from your &lt;code&gt;.xcodeproj&lt;/code&gt;. You can see if all of your intended schemes build successfully by running &lt;code&gt;carthage build --no-skip-current&lt;/code&gt;, then checking the &lt;a href="Documentation/Artifacts.md#carthagebuild"&gt;Carthage/Build&lt;/a&gt; folder.&lt;/p&gt;
&lt;p&gt;If an important scheme is not built when you run that command, open Xcode and make sure that the &lt;a href="https://developer.apple.com/library/content/documentation/IDEs/Conceptual/xcode_guide-continuous_integration/ConfigureBots.html#//apple_ref/doc/uid/TP40013292-CH9-SW3" rel="nofollow"&gt;scheme is marked as &lt;em&gt;Shared&lt;/em&gt;&lt;/a&gt;, so Carthage can discover it.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-resolve-build-failures" class="anchor" aria-hidden="true" href="#resolve-build-failures"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resolve build failures&lt;/h3&gt;
&lt;p&gt;If you encounter build failures in &lt;code&gt;carthage build --no-skip-current&lt;/code&gt;, try running &lt;code&gt;xcodebuild -scheme SCHEME -workspace WORKSPACE build&lt;/code&gt; or &lt;code&gt;xcodebuild -scheme SCHEME -project PROJECT build&lt;/code&gt; (with the actual values) and see if the same failure occurs there. This should hopefully yield enough information to resolve the problem.&lt;/p&gt;
&lt;p&gt;If you have multiple versions of the Apple developer tools installed (an Xcode beta, for example), use &lt;code&gt;xcode-select&lt;/code&gt; to change which version Carthage uses.&lt;/p&gt;
&lt;p&gt;If you’re still not able to build your framework with Carthage, please &lt;a href="https://github.com/Carthage/Carthage/issues/new"&gt;open an issue&lt;/a&gt; and we’d be happy to help!&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-tag-stable-releases" class="anchor" aria-hidden="true" href="#tag-stable-releases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tag stable releases&lt;/h3&gt;
&lt;p&gt;Carthage determines which versions of your framework are available by searching through the tags published on the repository, and trying to interpret each tag name as a &lt;a href="https://semver.org/" rel="nofollow"&gt;semantic version&lt;/a&gt;. For example, in the tag &lt;code&gt;v1.2&lt;/code&gt;, the semantic version is 1.2.0.&lt;/p&gt;
&lt;p&gt;Tags without any version number, or with any characters following the version number (e.g., &lt;code&gt;1.2-alpha-1&lt;/code&gt;) are currently unsupported, and will be ignored.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-archive-prebuilt-frameworks-into-one-zip-file" class="anchor" aria-hidden="true" href="#archive-prebuilt-frameworks-into-one-zip-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Archive prebuilt frameworks into one zip file&lt;/h3&gt;
&lt;p&gt;Carthage can automatically use prebuilt frameworks, instead of building from scratch, if they are attached to a &lt;a href="https://help.github.com/articles/about-releases/"&gt;GitHub Release&lt;/a&gt; on your project’s repository or via a binary project definition file.&lt;/p&gt;
&lt;p&gt;To offer prebuilt frameworks for a specific tag, the binaries for &lt;em&gt;all&lt;/em&gt; supported platforms should be zipped up together into &lt;em&gt;one&lt;/em&gt; archive, and that archive should be attached to a published Release corresponding to that tag. The attachment should include &lt;code&gt;.framework&lt;/code&gt; in its name (e.g., &lt;code&gt;ReactiveCocoa.framework.zip&lt;/code&gt;), to indicate to Carthage that it contains binaries. The directory structure of the acthive is free form but, &lt;strong&gt;frameworks should only appear once in the archive&lt;/strong&gt; as they will be copied
to &lt;code&gt;Carthage/Build/&amp;lt;platform&amp;gt;&lt;/code&gt; based on their name (e.g. &lt;code&gt;ReactiveCocoa.framework&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You can perform the archiving operation with carthage itself using:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;-carthage build --no-skip-current
-carthage archive YourFrameworkName&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or alternatively&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;carthage build --archive&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Draft Releases will be automatically ignored, even if they correspond to the desired tag.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-use-travis-ci-to-upload-your-tagged-prebuilt-frameworks" class="anchor" aria-hidden="true" href="#use-travis-ci-to-upload-your-tagged-prebuilt-frameworks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use travis-ci to upload your tagged prebuilt frameworks&lt;/h4&gt;
&lt;p&gt;It is possible to use travis-ci in order to build and upload your tagged releases.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/travis-ci/travis.rb#installation"&gt;Install travis CLI&lt;/a&gt; with &lt;code&gt;gem install travis&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.travis-ci.com/user/getting-started/" rel="nofollow"&gt;Setup&lt;/a&gt; travis-ci for your repository (Steps 1 and 2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create &lt;code&gt;.travis.yml&lt;/code&gt; file at the root of your repository based on that template. Set &lt;code&gt;FRAMEWORK_NAME&lt;/code&gt; to the correct value.&lt;/p&gt;
&lt;p&gt;Replace PROJECT_PLACEHOLDER and SCHEME_PLACEHOLDER&lt;/p&gt;
&lt;p&gt;If you are using a &lt;em&gt;workspace&lt;/em&gt; instead of a &lt;em&gt;project&lt;/em&gt; remove the xcode_project line and uncomment the xcode_workspace line.&lt;/p&gt;
&lt;p&gt;The project should be in the format: MyProject.xcodeproj&lt;/p&gt;
&lt;p&gt;The workspace should be in the format: MyWorkspace.xcworkspace&lt;/p&gt;
&lt;p&gt;Feel free to update the &lt;code&gt;xcode_sdk&lt;/code&gt; value to another SDK, note that testing on iphoneos SDK would require you to upload a code signing identity&lt;/p&gt;
&lt;p&gt;For more informations you can visit &lt;a href="https://docs.travis-ci.com/user/languages/objective-c" rel="nofollow"&gt;travis docs for objective-c projects&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;language&lt;/span&gt;: &lt;span class="pl-s"&gt;objective-c&lt;/span&gt;
&lt;span class="pl-ent"&gt;osx_image&lt;/span&gt;: &lt;span class="pl-s"&gt;xcode7.3&lt;/span&gt;
&lt;span class="pl-ent"&gt;xcode_project&lt;/span&gt;: &lt;span class="pl-s"&gt;&amp;lt;PROJECT_PLACEHOLDER&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; xcode_workspace: &amp;lt;WORKSPACE_PLACEHOLDER&amp;gt;&lt;/span&gt;
&lt;span class="pl-ent"&gt;xcode_scheme&lt;/span&gt;: &lt;span class="pl-s"&gt;&amp;lt;SCHEME_PLACEHOLDER&amp;gt;&lt;/span&gt;
&lt;span class="pl-ent"&gt;xcode_sdk&lt;/span&gt;: &lt;span class="pl-s"&gt;iphonesimulator9.3&lt;/span&gt;
&lt;span class="pl-ent"&gt;env&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;global&lt;/span&gt;:
    - &lt;span class="pl-s"&gt;FRAMEWORK_NAME=&amp;lt;THIS_IS_A_PLACEHOLDER_REPLACE_ME&amp;gt;&lt;/span&gt;
&lt;span class="pl-ent"&gt;before_install&lt;/span&gt;:
  - &lt;span class="pl-s"&gt;brew update&lt;/span&gt;
  - &lt;span class="pl-s"&gt;brew outdated carthage || brew upgrade carthage&lt;/span&gt;
&lt;span class="pl-ent"&gt;before_script&lt;/span&gt;:
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; bootstrap the dependencies for the project&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; you can remove if you don't have dependencies&lt;/span&gt;
  - &lt;span class="pl-s"&gt;carthage bootstrap&lt;/span&gt;
&lt;span class="pl-ent"&gt;before_deploy&lt;/span&gt;:
  - &lt;span class="pl-s"&gt;carthage build --no-skip-current&lt;/span&gt;
  - &lt;span class="pl-s"&gt;carthage archive $FRAMEWORK_NAME&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;travis setup releases&lt;/code&gt;, follow documentation &lt;a href="https://docs.travis-ci.com/user/deployment/releases/" rel="nofollow"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This command will encode your GitHub credentials into the &lt;code&gt;.travis.yml&lt;/code&gt; file in order to let travis upload the release to GitHub.com
When prompted for the file to upload, enter &lt;code&gt;$FRAMEWORK_NAME.framework.zip&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the deploy section to run on tags:&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;.travis.yml&lt;/code&gt; locate:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;on&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;repo&lt;/span&gt;: &lt;span class="pl-s"&gt;repo/repo&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And add &lt;code&gt;tags: true&lt;/code&gt; and &lt;code&gt;skip_cleanup: true&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;skip_cleanup&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-ent"&gt;on&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;repo&lt;/span&gt;: &lt;span class="pl-s"&gt;repo/repo&lt;/span&gt;
  &lt;span class="pl-ent"&gt;tags&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That will let travis know to create a deployment when a new tag is pushed and prevent travis to cleanup the generated zip file&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-build-static-frameworks-to-speed-up-your-apps-launch-times" class="anchor" aria-hidden="true" href="#build-static-frameworks-to-speed-up-your-apps-launch-times"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build static frameworks to speed up your app’s launch times&lt;/h3&gt;
&lt;p&gt;If you embed many dynamic frameworks into your app, its pre-main launch times may be quite slow. Carthage is able to help mitigate this by building your dynamic frameworks as static frameworks instead. Static frameworks can be linked directly into your application or merged together into a larger dynamic framework with a few simple modifications to your workflow, which can result in dramatic reductions in pre-main launch times.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-carthage-0300-or-higher" class="anchor" aria-hidden="true" href="#carthage-0300-or-higher"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage 0.30.0 or higher&lt;/h4&gt;
&lt;p&gt;Since version 0.30.0 Carthage project rolls out support for statically linked frameworks written in Swift or Objective-C, support for which has been introduced in Xcode 9.4. Please note however that it specifically says &lt;em&gt;frameworks&lt;/em&gt;, hence Darwin bundles with &lt;strong&gt;.framework&lt;/strong&gt; extension and statically linked object archives inside. Carthage does not currently support static &lt;em&gt;library&lt;/em&gt; schemes, nor are there any plans to introduce their support in the future.&lt;/p&gt;
&lt;p&gt;The workflow differs barely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You still need to tick your Carthage-compliant project's schemes as &lt;em&gt;shared&lt;/em&gt; in &lt;em&gt;Product &amp;gt; Scheme &amp;gt; Manage Schemes...&lt;/em&gt;, just as with dynamic binaries&lt;/li&gt;
&lt;li&gt;You still need to link against static &lt;strong&gt;.frameworks&lt;/strong&gt; in your project's &lt;em&gt;Build Phases&lt;/em&gt; just as with dynamic binaries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In your Carthage-compliant project's Cocoa Framework target's &lt;em&gt;Build Settings&lt;/em&gt;, &lt;em&gt;Linking&lt;/em&gt; section, set &lt;strong&gt;Mach-O Type&lt;/strong&gt; to &lt;strong&gt;Static Library&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Your statically linked frameworks will be built at &lt;em&gt;./Carthage/Build/$(PLATFORM_NAME)/Static&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;You should not add any of static frameworks as input/output files in &lt;strong&gt;carthage copy-frameworks&lt;/strong&gt; &lt;em&gt;Build Phase&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-carthage-0290-or-lower" class="anchor" aria-hidden="true" href="#carthage-0290-or-lower"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage 0.29.0 or lower&lt;/h4&gt;
&lt;p&gt;See the &lt;a href="Documentation/StaticFrameworks.md"&gt;StaticFrameworks&lt;/a&gt; doc for details.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note that a few caveats apply to this approach:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swift static frameworks are not officially supported by Apple&lt;/li&gt;
&lt;li&gt;This is an advanced workflow that is not built into Carthage, YMMV&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-declare-your-compatibility" class="anchor" aria-hidden="true" href="#declare-your-compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Declare your compatibility&lt;/h3&gt;
&lt;p&gt;Want to advertise that your project can be used with Carthage? You can add a compatibility badge:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;… to your &lt;code&gt;README&lt;/code&gt;, by simply inserting the following Markdown:&lt;/p&gt;
&lt;div class="highlight highlight-source-gfm"&gt;&lt;pre&gt;[![&lt;span class="pl-e"&gt;Carthage compatible&lt;/span&gt;](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known issues&lt;/h2&gt;
&lt;h5&gt;&lt;a id="user-content-dwarfs-symbol-problem" class="anchor" aria-hidden="true" href="#dwarfs-symbol-problem"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DWARFs symbol problem&lt;/h5&gt;
&lt;p&gt;Pre-built framework cannot be debugged using step execution on other machine than on which the framework was built. Simply &lt;code&gt;carthage bootstrap/build/update --no-use-binaries&lt;/code&gt; should fix this, but for more automated workaround, see &lt;a href="https://github.com/Carthage/Carthage/issues/924"&gt;#924&lt;/a&gt;. Dupe &lt;a href="http://www.openradar.me/23551273" rel="nofollow"&gt;rdar://23551273&lt;/a&gt; if you want Apple to fix the root cause of this problem.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-carthagekit" class="anchor" aria-hidden="true" href="#carthagekit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CarthageKit&lt;/h2&gt;
&lt;p&gt;Most of the functionality of the &lt;code&gt;carthage&lt;/code&gt; command line tool is actually encapsulated in a framework named CarthageKit.&lt;/p&gt;
&lt;p&gt;If you’re interested in using Carthage as part of another tool, or perhaps extending the functionality of Carthage, take a look at the &lt;a href="Source/CarthageKit"&gt;CarthageKit&lt;/a&gt; source code to see if the API fits your needs.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-differences-between-carthage-and-cocoapods" class="anchor" aria-hidden="true" href="#differences-between-carthage-and-cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Differences between Carthage and CocoaPods&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://cocoapods.org/" rel="nofollow"&gt;CocoaPods&lt;/a&gt; is a long-standing dependency manager for Cocoa. So why was Carthage created?&lt;/p&gt;
&lt;p&gt;Firstly, CocoaPods (by default) automatically creates and updates an Xcode workspace for your application and all dependencies. Carthage builds framework binaries using &lt;code&gt;xcodebuild&lt;/code&gt;, but leaves the responsibility of integrating them up to the user. CocoaPods’ approach is easier to use, while Carthage’s is flexible and unintrusive.&lt;/p&gt;
&lt;p&gt;The goal of CocoaPods is listed in its &lt;a href="https://github.com/CocoaPods/CocoaPods/blob/1703a3464674baecf54bd7e766f4b37ed8fc43f7/README.md"&gt;README&lt;/a&gt; as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… to improve discoverability of, and engagement in, third party open-source libraries, by creating a more centralized ecosystem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By contrast, Carthage has been created as a &lt;em&gt;decentralized&lt;/em&gt; dependency manager. There is no central list of projects, which reduces maintenance work and avoids any central point of failure. However, project discovery is more difficult—users must resort to GitHub’s &lt;a href="https://github.com/trending?l=swift"&gt;Trending&lt;/a&gt; pages or similar.&lt;/p&gt;
&lt;p&gt;CocoaPods projects must also have what’s known as a &lt;a href="http://guides.cocoapods.org/syntax/podspec.html" rel="nofollow"&gt;podspec&lt;/a&gt; file, which includes metadata about the project and specifies how it should be built. Carthage uses &lt;code&gt;xcodebuild&lt;/code&gt; to build dependencies, instead of integrating them into a single workspace, it doesn’t have a similar specification file but your dependencies must include their own Xcode project that describes how to build their products.&lt;/p&gt;
&lt;p&gt;Ultimately, we created Carthage because we wanted the simplest tool possible—a dependency manager that gets the job done without taking over the responsibility of Xcode, and without creating extra work for framework authors. CocoaPods offers many amazing features that Carthage will never have, at the expense of additional complexity.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Carthage is released under the &lt;a href="LICENSE.md"&gt;MIT License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Header backdrop photo is released under the &lt;a href="https://creativecommons.org/licenses/by-nc-sa/2.0/" rel="nofollow"&gt;CC BY-NC-SA 2.0&lt;/a&gt; license. Original photo by &lt;a href="https://www.flickr.com/photos/prof_richard/" rel="nofollow"&gt;Richard Mortel&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Carthage</author><guid isPermaLink="false">https://github.com/Carthage/Carthage</guid><pubDate>Sun, 05 Jan 2020 00:05:00 GMT</pubDate></item><item><title>airbnb/lottie-ios #6 in Swift, Today</title><link>https://github.com/airbnb/lottie-ios</link><description>&lt;p&gt;&lt;i&gt;An iOS library to natively render After Effects vector animations&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-lottie-for-ios-macos-and-android-and-react-native" class="anchor" aria-hidden="true" href="#lottie-for-ios-macos-and-android-and-react-native"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lottie for iOS, macOS (and &lt;a href="https://github.com/airbnb/lottie-android"&gt;Android&lt;/a&gt; and &lt;a href="https://github.com/airbnb/lottie-react-native"&gt;React Native&lt;/a&gt;)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://cocoapods.org/pods/lottie-ios" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ec93af3b58853a5ba768cc785ad54a4aca961645/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f6c6f747469652d696f732e7376673f7374796c653d666c6174" alt="Version" data-canonical-src="https://img.shields.io/cocoapods/v/lottie-ios.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="https://cocoapods.org/pods/lottie-ios" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ff1d88230b9d245f16df6036e058518d051df573/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f6c6f747469652d696f732e7376673f7374796c653d666c6174" alt="License" data-canonical-src="https://img.shields.io/cocoapods/l/lottie-ios.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;a href="https://cocoapods.org/pods/lottie-ios" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80aaf7fb5854bde9c64a0aff30cd12ebf1765b36/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f6c6f747469652d696f732e7376673f7374796c653d666c6174" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/lottie-ios.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-view-documentation-faq-help-examples-and-more-at-airbnbiolottie" class="anchor" aria-hidden="true" href="#view-documentation-faq-help-examples-and-more-at-airbnbiolottie"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;View documentation, FAQ, help, examples, and more at &lt;a href="http://airbnb.io/lottie/" rel="nofollow"&gt;airbnb.io/lottie&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Lottie is a mobile library for Android and iOS that natively renders vector based animations and art in realtime with minimal code.&lt;/p&gt;
&lt;p&gt;Lottie loads and renders animations and vectors exported in the bodymovin JSON format. Bodymovin JSON can be created and exported from After Effects with &lt;a href="https://github.com/bodymovin/bodymovin"&gt;bodymovin&lt;/a&gt;, Sketch with &lt;a href="https://github.com/buba447/Lottie-Sketch-Export"&gt;Lottie Sketch Export&lt;/a&gt;, and from &lt;a href="https://www.haiku.ai" rel="nofollow"&gt;Haiku&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the first time, designers can create &lt;strong&gt;and ship&lt;/strong&gt; beautiful animations without an engineer painstakingly recreating it by hand.
Since the animation is backed by JSON they are extremely small in size but can be large in complexity!
Animations can be played, resized, looped, sped up, slowed down, reversed, and even interactively scrubbed.
Lottie can play or loop just a portion of the animation as well, the possibilities are endless!
Animations can even be &lt;em&gt;&lt;strong&gt;changed at runtime&lt;/strong&gt;&lt;/em&gt; in various ways! Change the color, position or any keyframable value!
Lottie also supports native UIViewController Transitions out of the box!&lt;/p&gt;
&lt;p&gt;Here is just a small sampling of the power of Lottie&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="_Gifs/Examples1.gif"&gt;&lt;img src="_Gifs/Examples1.gif" alt="Example1" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="_Gifs/Examples2.gif"&gt;&lt;img src="_Gifs/Examples2.gif" alt="Example2" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="_Gifs/Community 2_3.gif"&gt;&lt;img src="_Gifs/Community 2_3.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="_Gifs/Examples3.gif"&gt;&lt;img src="_Gifs/Examples3.gif" alt="Example3" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="_Gifs/Examples4.gif"&gt;&lt;img src="_Gifs/Examples4.gif" alt="Abcs" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-lottie" class="anchor" aria-hidden="true" href="#installing-lottie"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Lottie&lt;/h2&gt;
&lt;p&gt;Lottie supports &lt;a href="https://cocoapods.org/" rel="nofollow"&gt;CocoaPods&lt;/a&gt; and &lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; (Both dynamic and static). Lottie is written in &lt;em&gt;&lt;strong&gt;Swift 4.2&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-github-repo" class="anchor" aria-hidden="true" href="#github-repo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Github Repo&lt;/h3&gt;
&lt;p&gt;You can pull the &lt;a href="https://github.com/airbnb/lottie-ios/"&gt;Lottie Github Repo&lt;/a&gt; and include the Lottie.xcodeproj to build a dynamic or static library.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods&lt;/h3&gt;
&lt;p&gt;Add the pod to your Podfile:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;lottie-ios&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then run:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installing the cocoapod into your project import Lottie with&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Lottie&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage&lt;/h3&gt;
&lt;p&gt;Add Lottie to your Cartfile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github "airbnb/lottie-ios" "master"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;carthage update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In your application targets “General” tab under the “Linked Frameworks and Libraries” section, drag and drop lottie-ios.framework from the Carthage/Build/iOS directory that &lt;code&gt;carthage update&lt;/code&gt; produced.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Package Manager&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swift-tools-version:5.1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;PackageDescription&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; package &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Package&lt;/span&gt;(
  &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;YourTestProject&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;platforms&lt;/span&gt;: [
       .&lt;span class="pl-c1"&gt;iOS&lt;/span&gt;(.&lt;span class="pl-smi"&gt;v12&lt;/span&gt;),
  ],
  &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [
    .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/airbnb/lottie-ios.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3.1.2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  ],
  &lt;span class="pl-c1"&gt;targets&lt;/span&gt;: [
    .&lt;span class="pl-c1"&gt;target&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;YourTestProject&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Lottie&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
  ]
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then import wherever needed: &lt;code&gt;import Lottie&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-adding-it-to-an-existent-ios-project-via-swift-package-manager" class="anchor" aria-hidden="true" href="#adding-it-to-an-existent-ios-project-via-swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding it to an existent iOS Project via Swift Package Manager&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Using Xcode 11 go to File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt;
&lt;li&gt;Paste the project URL: &lt;a href="https://github.com/airbnb/lottie-ios"&gt;https://github.com/airbnb/lottie-ios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click on next and select the project target
**NOTE: For MacOS you must set the &lt;code&gt;Branch&lt;/code&gt; field to &lt;code&gt;lottie/macos-spm&lt;/code&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="_Gifs/spm-branch.png"&gt;&lt;img src="_Gifs/spm-branch.png" alt="Example" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have doubts, please, check the following links:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/videos/play/wwdc2019/408/" rel="nofollow"&gt;How to use&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/videos/play/wwdc2019/410/" rel="nofollow"&gt;Creating Swift Packages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After successfully retrieved the package and added it to your project, just import &lt;code&gt;Lottie&lt;/code&gt; and you can get the full benefits of it.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>airbnb</author><guid isPermaLink="false">https://github.com/airbnb/lottie-ios</guid><pubDate>Sun, 05 Jan 2020 00:06:00 GMT</pubDate></item><item><title>mac-cain13/R.swift #7 in Swift, Today</title><link>https://github.com/mac-cain13/R.swift</link><description>&lt;p&gt;&lt;i&gt;Get strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-rswift---" class="anchor" aria-hidden="true" href="#rswift---"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;R.swift &lt;a href="https://cocoapods.org/pods/R.swift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/903ee57d0ba3731a9957a8f700419ebcdfa0b223/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f522e73776966742e7376673f7374796c653d666c6174" alt="Version" data-canonical-src="https://img.shields.io/cocoapods/v/R.swift.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="blob/master/License"&gt;&lt;img src="https://camo.githubusercontent.com/f431cb50765333a8273a1bf4c14ca4dbe648352b/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f522e73776966742e7376673f7374796c653d666c6174" alt="License" data-canonical-src="https://img.shields.io/cocoapods/l/R.swift.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/188e8439be4950e7d4677142d417a82b91821d22/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f522e73776966742e7376673f7374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/188e8439be4950e7d4677142d417a82b91821d22/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f522e73776966742e7376673f7374796c653d666c6174" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/R.swift.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Get strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-use-this" class="anchor" aria-hidden="true" href="#why-use-this"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why use this?&lt;/h2&gt;
&lt;p&gt;It makes your code that uses resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fully typed&lt;/strong&gt;, less casting and guessing what a method will return&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compile time checked&lt;/strong&gt;, no more incorrect strings that make your app crash at runtime&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocompleted&lt;/strong&gt;, never have to guess that image name again&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently you type:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; icon &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;settings-icon&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; font &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIFont&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;San Francisco&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;size&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; color &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIColor&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;indicator highlight&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; viewController &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CustomViewController&lt;/span&gt;(&lt;span class="pl-c1"&gt;nibName&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CustomView&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;bundle&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;(&lt;span class="pl-c1"&gt;format&lt;/span&gt;: &lt;span class="pl-c1"&gt;NSLocalizedString&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;welcome.withName&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;comment&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;locale&lt;/span&gt;: NSLocale.&lt;span class="pl-smi"&gt;current&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur Dent&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With R.swift it becomes:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; icon &lt;span class="pl-k"&gt;=&lt;/span&gt; R.&lt;span class="pl-c1"&gt;image&lt;/span&gt;.&lt;span class="pl-c1"&gt;settingsIcon&lt;/span&gt;()
&lt;span class="pl-k"&gt;let&lt;/span&gt; font &lt;span class="pl-k"&gt;=&lt;/span&gt; R.&lt;span class="pl-smi"&gt;font&lt;/span&gt;.&lt;span class="pl-c1"&gt;sanFrancisco&lt;/span&gt;(&lt;span class="pl-c1"&gt;size&lt;/span&gt;: &lt;span class="pl-c1"&gt;42&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; color &lt;span class="pl-k"&gt;=&lt;/span&gt; R.&lt;span class="pl-c1"&gt;color&lt;/span&gt;.&lt;span class="pl-c1"&gt;indicatorHighlight&lt;/span&gt;()
&lt;span class="pl-k"&gt;let&lt;/span&gt; viewController &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CustomViewController&lt;/span&gt;(&lt;span class="pl-c1"&gt;nib&lt;/span&gt;: R.&lt;span class="pl-smi"&gt;nib&lt;/span&gt;.&lt;span class="pl-smi"&gt;customView&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; R.&lt;span class="pl-smi"&gt;string&lt;/span&gt;.&lt;span class="pl-smi"&gt;localizable&lt;/span&gt;.&lt;span class="pl-c1"&gt;welcomeWithName&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Arthur Dent&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out &lt;a href="Documentation/Examples.md"&gt;more examples&lt;/a&gt; or hear about &lt;a href="https://news.realm.io/news/slug-javi-soto-building-fabric-in-swift/#rswift-2956" rel="nofollow"&gt;how Fabric.app uses R.swift&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Autocompleted images:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Documentation/Images/DemoUseImage.gif"&gt;&lt;img src="Documentation/Images/DemoUseImage.gif" alt="Autocompleted images" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compiletime checked images:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Documentation/Images/DemoRenameImage.gif"&gt;&lt;img src="Documentation/Images/DemoRenameImage.gif" alt="Compiletime checked images" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is only the beginning, check out &lt;a href="Documentation/Examples.md"&gt;more examples&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-cocoaheadsnl-presentation" class="anchor" aria-hidden="true" href="#cocoaheadsnl-presentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaHeadsNL presentation&lt;/h2&gt;
&lt;p&gt;Mathijs Kadijk presented R.swift at the September 2016 CocoaHeadsNL meetup.
Talking about the ideas behind R.swift and demonstrating how to move from plain stringly-typed iOS code to statically typed code.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/185173151" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e97fa08f9d0f58040d539cebaa5a905498c92336/68747470733a2f2f692e76696d656f63646e2e636f6d2f766964656f2f3539343833353635382e6a70673f6d773d31393230266d683d3130383026713d3730" width="560" alt="R.swift presentation at CocoaHeadsNL" data-canonical-src="https://i.vimeocdn.com/video/594835658.jpg?mw=1920&amp;amp;mh=1080&amp;amp;q=70" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;After installing R.swift into your project you can use the &lt;code&gt;R&lt;/code&gt;-struct to access resources. If the struct is outdated just build and R.swift will correct any missing/changed/added resources.&lt;/p&gt;
&lt;p&gt;R.swift currently supports these types of resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/Examples.md#images"&gt;Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Examples.md#custom-fonts"&gt;Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Examples.md#resource-files"&gt;Resource files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Examples.md#colors"&gt;Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Examples.md#localized-strings"&gt;Localized strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Examples.md#storyboards"&gt;Storyboards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Examples.md#segues"&gt;Segues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Examples.md#nibs"&gt;Nibs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Examples.md#reusable-table-view-cells"&gt;Reusable cells&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Runtime validation with &lt;a href="Documentation/Examples.md#runtime-validation"&gt;&lt;code&gt;R.validate()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If all images used in storyboards and nibs are available&lt;/li&gt;
&lt;li&gt;If all named colors used in storyboards and nibs are available&lt;/li&gt;
&lt;li&gt;If all view controllers with storyboard identifiers can be loaded&lt;/li&gt;
&lt;li&gt;If all custom fonts can be loaded&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-qa" class="anchor" aria-hidden="true" href="#qa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/QandA.md#why-was-rswift-created"&gt;Why was R.swift created?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/QandA.md#why-should-i-choose-rswift-over-alternative-x-or-y"&gt;Why should I choose R.swift over alternative X or Y?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/QandA.md#what-are-the-requirements-to-run-rswift"&gt;What are the requirements to run R.swift?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/QandA.md#how-to-use-methods-with-a-void-argument"&gt;How to use methods with a &lt;code&gt;Void&lt;/code&gt; argument?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/QandA.md#how-to-fix-missing-imports-in-the-generated-file"&gt;How to fix missing imports in the generated file?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/QandA.md#how-to-use-classes-with-the-same-name-as-their-module"&gt;How to use classes with the same name as their module?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Ignoring.md"&gt;Can I ignore resources?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/QandA.md#can-i-use-rswift-in-a-library"&gt;Can I use R.swift in a library?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/QandA.md#how-does-rswift-work"&gt;How does R.swift work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Migration.md"&gt;How to upgrade to a new major version?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mac-cain13/R.swift/blob/master/Documentation/Ignoring.md#only-run-specific-generators-exclude-rsomething"&gt;How can I only run specific generators?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt; is the recommended way of installation, as this avoids including any binary files into your project.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note on Carthage: R.swift is a tool used in a build step, it is not a dynamic library. Therefore &lt;a href="https://github.com/mac-cain13/R.swift/issues/42"&gt;it is not possible&lt;/a&gt; to install it with Carthage.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods-recommended" class="anchor" aria-hidden="true" href="#cocoapods-recommended"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods (recommended)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;pod 'R.swift'&lt;/code&gt; to your &lt;a href="http://cocoapods.org/#get_started" rel="nofollow"&gt;Podfile&lt;/a&gt; and run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt;
&lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase and &lt;strong&gt;below&lt;/strong&gt; &lt;code&gt;Check Pods Manifest.lock&lt;/code&gt;, expand it and paste the following script:
&lt;pre&gt;&lt;code&gt;"$PODS_ROOT/R.swift/rswift" generate "$SRCROOT/R.generated.swift"
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;$TEMP_DIR/rswift-lastrun&lt;/code&gt; to the "Input Files" and &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the "Output Files" of the Build Phase&lt;/li&gt;
&lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href="Documentation/Images/BuildPhaseExample.png"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-mint" class="anchor" aria-hidden="true" href="#mint"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/yonaskolb/mint"&gt;Mint&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-first-install-rswift-binary-and-run-script-phase" class="anchor" aria-hidden="true" href="#first-install-rswift-binary-and-run-script-phase"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;First, Install &lt;code&gt;R.Swift&lt;/code&gt; Binary and Run Script Phase&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;mac-cain13/R.swift&lt;/code&gt; to your &lt;a href="https://github.com/yonaskolb/Mint#mintfile"&gt;Mintfile&lt;/a&gt; and run &lt;code&gt;mint bootstrap&lt;/code&gt;  to install this package without linking it globally (recommended)&lt;/li&gt;
&lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt;
&lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script:
&lt;pre&gt;&lt;code&gt;if mint list | grep -q 'R.swift'; then
  mint run R.swift rswift generate "$SRCROOT/R.generated.swift"
else
  echo "error: R.swift not installed; run 'mint bootstrap' to install"
  return -1
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;$TEMP_DIR/rswift-lastrun&lt;/code&gt; to the "Input Files" and &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the "Output Files" of the Build Phase&lt;/li&gt;
&lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-second-install-rswiftlibrary-via-the-swift-package-manager-requires-xcode-11" class="anchor" aria-hidden="true" href="#second-install-rswiftlibrary-via-the-swift-package-manager-requires-xcode-11"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Second, Install &lt;code&gt;R.Swift.Library&lt;/code&gt; via the Swift Package Manager (requires Xcode 11)&lt;/h4&gt;
&lt;p&gt;If you see a build error &lt;code&gt;No such module 'Rswift'&lt;/code&gt; when trying to &lt;code&gt;#import Rswift&lt;/code&gt; at the top of the &lt;code&gt;R.generated.swift&lt;/code&gt; file, then you will also need to install the &lt;em&gt;library&lt;/em&gt; via the Swift Package Manager available in Xcode 11+.&lt;/p&gt;
&lt;p&gt;Head over to the &lt;a href="https://github.com/mac-cain13/R.swift.Library"&gt;R.Swift.Library&lt;/a&gt; repo and follow the &lt;a href="https://github.com/mac-cain13/R.swift.Library#swift-package-manager-requires-xcode-11"&gt;Swift Package Manager installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-manually" class="anchor" aria-hidden="true" href="#manually"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually&lt;/h3&gt;
&lt;ol start="0"&gt;
&lt;li&gt;Add the &lt;a href="https://github.com/mac-cain13/R.swift.Library#Installation"&gt;R.swift.Library&lt;/a&gt; to your project&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mac-cain13/R.swift/releases"&gt;Download&lt;/a&gt; a R.swift release, unzip it and put it into your source root directory&lt;/li&gt;
&lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt;
&lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script:
&lt;pre&gt;&lt;code&gt;"$SRCROOT/rswift" generate "$SRCROOT/R.generated.swift"
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;$TEMP_DIR/rswift-lastrun&lt;/code&gt; to the "Input Files" and &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the "Output Files" of the Build Phase&lt;/li&gt;
&lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href="Documentation/Images/ManualBuildPhaseExample.png"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-building-from-source" class="anchor" aria-hidden="true" href="#building-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building from source&lt;/h3&gt;
&lt;p&gt;R.swift is built using &lt;a href="https://github.com/apple/swift-package-manager"&gt;Swift Package Manager (SPM)&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check out the code&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;swift build -c release&lt;/code&gt; from the root directory&lt;/li&gt;
&lt;li&gt;Follow the manual installation steps with the binary you now have&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For developing on R.swift in Xcode, run &lt;code&gt;swift package generate-xcodeproj --xcconfig-overrides RswiftConfig.xcconfig&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contribute&lt;/h2&gt;
&lt;p&gt;We'll love contributions, read the &lt;a href="Documentation/Contribute.md"&gt;contribute docs&lt;/a&gt; for info on how to report issues, submit ideas and submit pull requests!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mac-cain13/R.swift"&gt;R.swift&lt;/a&gt; and &lt;a href="https://github.com/mac-cain13/R.swift.Library"&gt;R.swift.Library&lt;/a&gt; are created by &lt;a href="https://github.com/mac-cain13"&gt;Mathijs Kadijk&lt;/a&gt; and released under a &lt;a href="License"&gt;MIT License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href="https://github.com/tomlokhorst"&gt;Tom Lokhorst&lt;/a&gt; for his major contributions and help maintaining this project.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>mac-cain13</author><guid isPermaLink="false">https://github.com/mac-cain13/R.swift</guid><pubDate>Sun, 05 Jan 2020 00:07:00 GMT</pubDate></item><item><title>mxcl/PromiseKit #8 in Swift, Today</title><link>https://github.com/mxcl/PromiseKit</link><description>&lt;p&gt;&lt;i&gt;Promises for Swift &amp; ObjC.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="../gh-pages/public/img/logo-tight.png"&gt;&lt;img src="../gh-pages/public/img/logo-tight.png" alt="PromiseKit" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cocoapods.org/pods/PromiseKit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c15ee18886b7426341e502b764d0a76d81970b57/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f50726f6d6973654b69742e7376673f6c6162656c3d76657273696f6e" alt="badge-pod" data-canonical-src="https://img.shields.io/cocoapods/v/PromiseKit.svg?label=version" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/98c220d03f8bf6b21af781b82d06fbf5e755d0be/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c616e6775616765732d53776966742532302537432532304f626a432d6f72616e67652e737667"&gt;&lt;img src="https://camo.githubusercontent.com/98c220d03f8bf6b21af781b82d06fbf5e755d0be/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c616e6775616765732d53776966742532302537432532304f626a432d6f72616e67652e737667" alt="badge-languages" data-canonical-src="https://img.shields.io/badge/languages-Swift%20%7C%20ObjC-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/3dd4a24e33f01ed9376e333f35ddd306208eda86/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f737570706f7274732d436f636f61506f64732532302537432532304361727468616765253230253743253230416363696f2532302537432532305377696674504d2d677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/3dd4a24e33f01ed9376e333f35ddd306208eda86/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f737570706f7274732d436f636f61506f64732532302537432532304361727468616765253230253743253230416363696f2532302537432532305377696674504d2d677265656e2e737667" alt="badge-pms" data-canonical-src="https://img.shields.io/badge/supports-CocoaPods%20%7C%20Carthage%20%7C%20Accio%20%7C%20SwiftPM-green.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/efcda9fe2c564128d079066be8138688f3f0465f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d6d61634f53253230253743253230694f5325323025374325323077617463684f5325323025374325323074764f532532302537432532304c696e75782d6c69676874677265792e737667"&gt;&lt;img src="https://camo.githubusercontent.com/efcda9fe2c564128d079066be8138688f3f0465f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d6d61634f53253230253743253230694f5325323025374325323077617463684f5325323025374325323074764f532532302537432532304c696e75782d6c69676874677265792e737667" alt="badge-platforms" data-canonical-src="https://img.shields.io/badge/platforms-macOS%20%7C%20iOS%20%7C%20watchOS%20%7C%20tvOS%20%7C%20Linux-lightgrey.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/mxcl/PromiseKit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b9838a922b5c46736da485cc0ff2c06eaf350995/68747470733a2f2f7472617669732d63692e6f72672f6d78636c2f50726f6d6973654b69742e7376673f6272616e63683d6d6173746572" alt="badge-travis" data-canonical-src="https://travis-ci.org/mxcl/PromiseKit.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Promises simplify asynchronous programming, freeing you up to focus on the more
important things. They are easy to learn, easy to master and result in clearer,
more readable code. Your co-workers will thank you.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;UIApplication.&lt;span class="pl-smi"&gt;shared&lt;/span&gt;.&lt;span class="pl-smi"&gt;isNetworkActivityIndicatorVisible&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; fetchImage &lt;span class="pl-k"&gt;=&lt;/span&gt; URLSession.&lt;span class="pl-smi"&gt;shared&lt;/span&gt;.&lt;span class="pl-c1"&gt;dataTask&lt;/span&gt;(.&lt;span class="pl-smi"&gt;promise&lt;/span&gt;, &lt;span class="pl-c1"&gt;with&lt;/span&gt;: url).&lt;span class="pl-smi"&gt;compactMap&lt;/span&gt;{ &lt;span class="pl-c1"&gt;UIImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;data&lt;/span&gt;: &lt;span class="pl-c1"&gt;$0&lt;/span&gt;.&lt;span class="pl-smi"&gt;data&lt;/span&gt;) }
&lt;span class="pl-k"&gt;let&lt;/span&gt; fetchLocation &lt;span class="pl-k"&gt;=&lt;/span&gt; CLLocationManager.&lt;span class="pl-c1"&gt;requestLocation&lt;/span&gt;().&lt;span class="pl-smi"&gt;lastValue&lt;/span&gt;

firstly {
    &lt;span class="pl-c1"&gt;when&lt;/span&gt;(&lt;span class="pl-c1"&gt;fulfilled&lt;/span&gt;: fetchImage, fetchLocation)
}.&lt;span class="pl-smi"&gt;done&lt;/span&gt; { image, location &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;imageView&lt;/span&gt;.&lt;span class="pl-c1"&gt;image&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; image
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;label&lt;/span&gt;.&lt;span class="pl-c1"&gt;text&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;location&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}.&lt;span class="pl-smi"&gt;ensure&lt;/span&gt; {
    UIApplication.&lt;span class="pl-smi"&gt;shared&lt;/span&gt;.&lt;span class="pl-smi"&gt;isNetworkActivityIndicatorVisible&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
}.&lt;span class="pl-smi"&gt;catch&lt;/span&gt; { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;show&lt;/span&gt;(&lt;span class="pl-c1"&gt;UIAlertController&lt;/span&gt;(&lt;span class="pl-c1"&gt;for&lt;/span&gt;: error), &lt;span class="pl-c1"&gt;sender&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PromiseKit is a thoughtful and complete implementation of promises for any
platform that has a &lt;code&gt;swiftc&lt;/code&gt;. It has &lt;em&gt;excellent&lt;/em&gt; Objective-C bridging and
&lt;em&gt;delightful&lt;/em&gt; specializations for iOS, macOS, tvOS and watchOS. It is a top-100
pod used in many of the most popular apps in the world.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codecov.io/gh/mxcl/PromiseKit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c6e5c784c54f92152d6984a9f5e5b3b5e10549bf/68747470733a2f2f636f6465636f762e696f2f67682f6d78636c2f50726f6d6973654b69742f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mxcl/PromiseKit/branch/master/graph/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-promisekit-7-alpha" class="anchor" aria-hidden="true" href="#promisekit-7-alpha"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PromiseKit 7 Alpha&lt;/h1&gt;
&lt;p&gt;We are testing PromiseKit 7 alpha, it is Swift 5 only. It is tagged and thus
importable in all package managers.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-promisekit-6" class="anchor" aria-hidden="true" href="#promisekit-6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PromiseKit 6&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://mxcl.dev/PromiseKit/news/2018/02/PromiseKit-6.0-Released/" rel="nofollow"&gt;Release notes and migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Start&lt;/h1&gt;
&lt;p&gt;In your &lt;a href="https://guides.cocoapods.org/syntax/podfile.html" rel="nofollow"&gt;Podfile&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;use_frameworks!

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Change Me!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PromiseKit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 6.8&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;The above gives an Xcode warning? See our &lt;a href="Documentation/Installation.md"&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PromiseKit 6, 5 and 4 support Xcode 8.3, 9.x and 10.0; Swift 3.1,
3.2, 3.3, 3.4, 4.0, 4.1, 4.2, 4.3 and 5.0 (development snapshots); iOS, macOS,
tvOS, watchOS, Linux and Android; CocoaPods, Carthage and SwiftPM;
(&lt;a href="https://travis-ci.org/mxcl/PromiseKit" rel="nofollow"&gt;CI Matrix&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For Carthage, SwiftPM, Accio, etc., or for instructions when using older Swifts or Xcodes, see our &lt;a href="Documentation/Installation.md"&gt;Installation Guide&lt;/a&gt;. We recommend
&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; or
&lt;a href="https://github.com/JamitLabs/Accio"&gt;Accio&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-professionally-supported-promisekit-is-now-available" class="anchor" aria-hidden="true" href="#professionally-supported-promisekit-is-now-available"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Professionally Supported PromiseKit is Now Available&lt;/h1&gt;
&lt;p&gt;TideLift gives software development teams a single source for purchasing
and maintaining their software, with professional grade assurances from
the experts who know it best, while seamlessly integrating with existing
tools.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tidelift.com/subscription/pkg/cocoapods-promisekit?utm_source=cocoapods-promisekit&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme" rel="nofollow"&gt;Get Professional Support for PromiseKit with TideLift&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-promisekit-is-thousands-of-hours-of-work" class="anchor" aria-hidden="true" href="#promisekit-is-thousands-of-hours-of-work"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PromiseKit is Thousands of Hours of Work&lt;/h1&gt;
&lt;p&gt;Hey there, I’m Max Howell. I’m a prolific producer of open source software and
probably you already use some of it (I created &lt;a href="https://brew.sh" rel="nofollow"&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;). I work full-time on
open source and it’s hard; currently &lt;em&gt;I earn less than minimum wage&lt;/em&gt;. Please
help me continue my work, I appreciate it 🙏🏻&lt;/p&gt;
&lt;a href="https://www.patreon.com/mxcl" rel="nofollow"&gt;
	&lt;img src="https://camo.githubusercontent.com/c11c9bdf1f6c2a1d80afb11859984a61f0fadfa6/68747470733a2f2f63352e70617472656f6e2e636f6d2f65787465726e616c2f6c6f676f2f6265636f6d655f615f706174726f6e5f627574746f6e4032782e706e67" width="160" data-canonical-src="https://c5.patreon.com/external/logo/become_a_patron_button@2x.png" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;p&gt;&lt;a href="http://mxcl.dev/#donate" rel="nofollow"&gt;Other ways to say thanks&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Handbook
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/GettingStarted.md"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/CommonPatterns.md"&gt;Promises: Common Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/FAQ.md"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Manual
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/Installation.md"&gt;Installation Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/ObjectiveC.md"&gt;Objective-C Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Troubleshooting.md"&gt;Troubleshooting&lt;/a&gt; (e.g., solutions to common compile errors)&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Appendix.md"&gt;Appendix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mxcl.dev/PromiseKit/reference/v6/Classes/Promise.html" rel="nofollow"&gt;API Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extensions&lt;/h1&gt;
&lt;p&gt;Promises are only as useful as the asynchronous tasks they represent. Thus, we
have converted (almost) all of Apple’s APIs to promises. The default CocoaPod
provides Promises and the extensions for Foundation and UIKit. The other
extensions are available by specifying additional subspecs in your &lt;code&gt;Podfile&lt;/code&gt;,
e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PromiseKit/MapKit&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; MKDirections().calculate().then { /*…*/ }&lt;/span&gt;
pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PromiseKit/CoreLocation&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; CLLocationManager.requestLocation().then { /*…*/ }&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All our extensions are separate repositories at the &lt;a href="https://github.com/PromiseKit"&gt;PromiseKit organization&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-i-dont-want-the-extensions" class="anchor" aria-hidden="true" href="#i-dont-want-the-extensions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I don't want the extensions!&lt;/h2&gt;
&lt;p&gt;Then don’t have them:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;PromiseKit/CorePromise&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 6.8&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Carthage installations come with no extensions by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-choose-your-networking-library" class="anchor" aria-hidden="true" href="#choose-your-networking-library"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Choose Your Networking Library&lt;/h2&gt;
&lt;p&gt;Promise chains commonly start with a network operation. Thus, we offer
extensions for &lt;code&gt;URLSession&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; pod 'PromiseKit/Foundation'  # https://github.com/PromiseKit/Foundation&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
firstly {
    URLSession.&lt;span class="pl-smi"&gt;shared&lt;/span&gt;.&lt;span class="pl-c1"&gt;dataTask&lt;/span&gt;(.&lt;span class="pl-smi"&gt;promise&lt;/span&gt;, &lt;span class="pl-c1"&gt;with&lt;/span&gt;: &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;makeUrlRequest&lt;/span&gt;()).&lt;span class="pl-c1"&gt;validate&lt;/span&gt;()
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ^^ we provide `.validate()` so that eg. 404s get converted to errors&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}.&lt;span class="pl-c1"&gt;map&lt;/span&gt; {
    &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;JSONDecoder&lt;/span&gt;().&lt;span class="pl-c1"&gt;decode&lt;/span&gt;(Foo.&lt;span class="pl-k"&gt;self&lt;/span&gt;, &lt;span class="pl-c1"&gt;with&lt;/span&gt;: &lt;span class="pl-c1"&gt;$0&lt;/span&gt;.&lt;span class="pl-smi"&gt;data&lt;/span&gt;)
}.&lt;span class="pl-smi"&gt;done&lt;/span&gt; { foo &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;…&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}.&lt;span class="pl-smi"&gt;catch&lt;/span&gt; { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;…&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;makeUrlRequest&lt;/span&gt;() &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; URLRequest {
    &lt;span class="pl-k"&gt;var&lt;/span&gt; rq &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;URLRequest&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: url)
    rq.&lt;span class="pl-smi"&gt;httpMethod&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;POST&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    rq.&lt;span class="pl-c1"&gt;addValue&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forHTTPHeaderField&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    rq.&lt;span class="pl-c1"&gt;addValue&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forHTTPHeaderField&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Accept&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    rq.&lt;span class="pl-smi"&gt;httpBody&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;JSONEncoder&lt;/span&gt;().&lt;span class="pl-c1"&gt;encode&lt;/span&gt;(obj)
    &lt;span class="pl-k"&gt;return&lt;/span&gt; rq
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;a href="http://github.com/PromiseKit/Alamofire-"&gt;Alamofire&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; pod 'PromiseKit/Alamofire'  # https://github.com/PromiseKit/Alamofire-&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
firstly {
    Alamofire
        .&lt;span class="pl-c1"&gt;request&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;method&lt;/span&gt;: .&lt;span class="pl-smi"&gt;post&lt;/span&gt;, &lt;span class="pl-c1"&gt;parameters&lt;/span&gt;: params)
        .&lt;span class="pl-c1"&gt;responseDecodable&lt;/span&gt;(Foo.&lt;span class="pl-k"&gt;self&lt;/span&gt;)
}.&lt;span class="pl-smi"&gt;done&lt;/span&gt; { foo &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;…&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}.&lt;span class="pl-smi"&gt;catch&lt;/span&gt; { error &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;…&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nowadays, considering that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We almost always POST JSON&lt;/li&gt;
&lt;li&gt;We now have &lt;code&gt;JSONDecoder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PromiseKit now has &lt;code&gt;map&lt;/code&gt; and other functional primitives&lt;/li&gt;
&lt;li&gt;PromiseKit (like Alamofire, but not raw-&lt;code&gt;URLSession&lt;/code&gt;) also defaults to having
callbacks go to the main thread&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend vanilla &lt;code&gt;URLSession&lt;/code&gt;. It uses fewer black boxes and sticks closer to the metal. Alamofire was essential until the three bullet points above
became true, but nowadays it isn’t really necessary.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-support" class="anchor" aria-hidden="true" href="#support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Support&lt;/h1&gt;
&lt;p&gt;Please check our &lt;a href="Documentation/Troubleshooting.md"&gt;Troubleshooting Guide&lt;/a&gt;, and
if after that you still have a question, ask at our &lt;a href="https://gitter.im/mxcl/PromiseKit" rel="nofollow"&gt;Gitter chat channel&lt;/a&gt; or on &lt;a href="https://github.com/mxcl/PromiseKit/issues/new"&gt;our bug tracker&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-security--vulnerability-reporting-or-disclosure" class="anchor" aria-hidden="true" href="#security--vulnerability-reporting-or-disclosure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Security &amp;amp; Vulnerability Reporting or Disclosure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tidelift.com/security" rel="nofollow"&gt;https://tidelift.com/security&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>mxcl</author><guid isPermaLink="false">https://github.com/mxcl/PromiseKit</guid><pubDate>Sun, 05 Jan 2020 00:08:00 GMT</pubDate></item><item><title>JohnSundell/Plot #9 in Swift, Today</title><link>https://github.com/JohnSundell/Plot</link><description>&lt;p&gt;&lt;i&gt;A DSL for writing type-safe HTML, XML and RSS in Swift.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
    &lt;a target="_blank" rel="noopener noreferrer" href="Logo.png"&gt;&lt;img src="Logo.png" width="400" alt="Plot" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ab29f34b72a97a1dee84cf993b101dcf0ca4f36b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742d352e312d6f72616e67652e737667"&gt;&lt;img src="https://camo.githubusercontent.com/ab29f34b72a97a1dee84cf993b101dcf0ca4f36b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742d352e312d6f72616e67652e737667" data-canonical-src="https://img.shields.io/badge/Swift-5.1-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;
    &lt;a href="https://swift.org/package-manager" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/c813249038274173e70fde3dcd21dab0294241c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7377696674706d2d636f6d70617469626c652d627269676874677265656e2e7376673f7374796c653d666c6174" alt="Swift Package Manager" data-canonical-src="https://img.shields.io/badge/swiftpm-compatible-brightgreen.svg?style=flat" style="max-width:100%;"&gt;
    &lt;/a&gt;
     &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/297472a97b068b4ca634402a1eacd9b623a1fe06/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d6d61632b6c696e75782d627269676874677265656e2e7376673f7374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/297472a97b068b4ca634402a1eacd9b623a1fe06/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d6d61632b6c696e75782d627269676874677265656e2e7376673f7374796c653d666c6174" alt="Mac + Linux" data-canonical-src="https://img.shields.io/badge/platforms-mac+linux-brightgreen.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
    &lt;a href="https://twitter.com/johnsundell" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/abe7c44c68304371aca82c9a40796b576c17716e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747769747465722d406a6f686e73756e64656c6c2d626c75652e7376673f7374796c653d666c6174" alt="Twitter: @johnsundell" data-canonical-src="https://img.shields.io/badge/twitter-@johnsundell-blue.svg?style=flat" style="max-width:100%;"&gt;
    &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Welcome to &lt;strong&gt;Plot&lt;/strong&gt;, a domain-specific language (DSL) for writing type-safe HTML, XML and RSS in Swift. It can be used to build websites, documents and feeds, as a templating tool, or as a renderer for higher-level components and tools. It’s primary focus is on static site generation and Swift-based web development.&lt;/p&gt;
&lt;p&gt;Plot is used to build and render all of &lt;a href="https://swiftbysundell.com" rel="nofollow"&gt;swiftbysundell.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-write-html--in-swift" class="anchor" aria-hidden="true" href="#write-html--in-swift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Write HTML — in Swift!&lt;/h2&gt;
&lt;p&gt;Plot enables you to write HTML using native, fully compiled Swift code, by modeling the HTML5 standard’s various elements as Swift APIs. The result is a very lightweight DSL that lets you build complete web pages in a highly expressive way:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;head&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;title&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My website&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
        .&lt;span class="pl-c1"&gt;stylesheet&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;styles.css&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    ),
    .&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;div&lt;/span&gt;(
            .&lt;span class="pl-c1"&gt;h1&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My website&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
            .&lt;span class="pl-c1"&gt;p&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Writing HTML in Swift is pretty great!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        )
    )
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the above, it may at first seem like Plot simply maps each function call directly to an equivalent HTML element — and while that’s the case for &lt;em&gt;some&lt;/em&gt; elements, Plot also inserts many kinds of highly valuable metadata automatically. For example, the above expression will result in this HTML:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic"&gt;&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;&lt;span class="pl-ent"&gt;html&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;head&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class="pl-ent"&gt;title&lt;/span&gt;&amp;gt;My website&amp;lt;/&lt;span class="pl-ent"&gt;title&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class="pl-ent"&gt;meta&lt;/span&gt; &lt;span class="pl-e"&gt;name&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;twitter:title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-e"&gt;content&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My website&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;/&amp;gt;
        &amp;lt;&lt;span class="pl-ent"&gt;meta&lt;/span&gt; &lt;span class="pl-e"&gt;name&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;og:title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-e"&gt;content&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My website&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;/&amp;gt;
        &amp;lt;&lt;span class="pl-ent"&gt;link&lt;/span&gt; &lt;span class="pl-e"&gt;rel&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;stylesheet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-e"&gt;href&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;styles.css&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-e"&gt;type&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;text/css&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;/&amp;gt;
    &amp;lt;/&lt;span class="pl-ent"&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;body&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class="pl-ent"&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span class="pl-ent"&gt;h1&lt;/span&gt;&amp;gt;My website&amp;lt;/&lt;span class="pl-ent"&gt;h1&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span class="pl-ent"&gt;p&lt;/span&gt;&amp;gt;Writing HTML in Swift is pretty great!&amp;lt;/&lt;span class="pl-ent"&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span class="pl-ent"&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="pl-ent"&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class="pl-ent"&gt;html&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see above, Plot added both all of the necessary attributes to load the requested CSS stylesheet, along with additional metadata for the page’s title as well — improving page rendering, social media sharing, and search engine optimization.&lt;/p&gt;
&lt;p&gt;Plot ships with a very wide coverage of the HTML5 standard, enabling all sorts of elements to be defined using the same lightweight syntax — such as tables, lists, and inline text styling:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;h2&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Countries and their capitals&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
        .&lt;span class="pl-c1"&gt;table&lt;/span&gt;(
            .&lt;span class="pl-c1"&gt;tr&lt;/span&gt;(.&lt;span class="pl-c1"&gt;th&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Country&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), .&lt;span class="pl-c1"&gt;th&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Capital&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)),
            .&lt;span class="pl-c1"&gt;tr&lt;/span&gt;(.&lt;span class="pl-c1"&gt;td&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Sweden&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), .&lt;span class="pl-c1"&gt;td&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Stockholm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)),
            .&lt;span class="pl-c1"&gt;tr&lt;/span&gt;(.&lt;span class="pl-c1"&gt;td&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Japan&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), .&lt;span class="pl-c1"&gt;td&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Tokyo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
        ),
        .&lt;span class="pl-c1"&gt;h2&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;List of &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;strong&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;programming languages&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)),
        .&lt;span class="pl-c1"&gt;ul&lt;/span&gt;(
            .&lt;span class="pl-c1"&gt;li&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Swift&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
            .&lt;span class="pl-c1"&gt;li&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Objective-C&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
            .&lt;span class="pl-c1"&gt;li&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;C&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        )
    )
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above we’re also using Plot’s powerful composition capabilities, which lets us express all sorts of HTML hierarchies by simply adding new elements as comma-separated values.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-applying-attributes" class="anchor" aria-hidden="true" href="#applying-attributes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Applying attributes&lt;/h2&gt;
&lt;p&gt;Attributes can also be applied the exact same way as child elements are added, by simply adding another entry to an element’s comma-separated list of content. For example, here’s how an anchor element with both a CSS class and a URL can be defined:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;a&lt;/span&gt;(.&lt;span class="pl-c1"&gt;class&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;link&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), .&lt;span class="pl-c1"&gt;href&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GitHub&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    )
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fact that attributes, elements and inline text are all defined the same way both makes Plot’s API easier to learn, and also enables a really fast and fluid typing experience — as you can simply type &lt;code&gt;.&lt;/code&gt; within any context to keep defining new attributes and elements.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-type-safety-built-in" class="anchor" aria-hidden="true" href="#type-safety-built-in"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type safety built-in&lt;/h2&gt;
&lt;p&gt;Plot makes heavy use of Swift’s advanced generics capabilities to not only make it &lt;em&gt;possible&lt;/em&gt; to write HTML and XML using native code, but to also make that process completely type-safe as well.&lt;/p&gt;
&lt;p&gt;All of Plot’s elements and attributes are implemented as context-bound &lt;em&gt;nodes&lt;/em&gt;, which both enforces valid HTML semantics, and also enables Xcode and other IDEs to provide rich autocomplete suggestions when writing code using Plot’s DSL.&lt;/p&gt;
&lt;p&gt;For example, above the &lt;code&gt;href&lt;/code&gt; attribute was added to an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, which is completely valid. However, if we instead attempted to add that same attribute to a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, we’d get a compiler error:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(.&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Compiler error: Referencing static method 'href' on&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 'Node' requires that 'HTML.BodyContext' conform to&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 'HTMLLinkableContext'.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;p&lt;/span&gt;(.&lt;span class="pl-c1"&gt;href&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plot also leverages the Swift type system to verify each document’s element structure as well. For example, within HTML lists (such as &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;), it’s only valid to place &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements — and if we break that rule, we’ll again get a compiler error:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(.&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Compiler error: Member 'p' in 'Node&amp;lt;HTML.ListContext&amp;gt;'&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; produces result of type 'Node&amp;lt;Context&amp;gt;', but context&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; expects 'Node&amp;lt;HTML.ListContext&amp;gt;'.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    .&lt;span class="pl-c1"&gt;ul&lt;/span&gt;(.&lt;span class="pl-c1"&gt;p&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not allowed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This high degree of type safety both results in a really pleasant development experience, and that the HTML and XML documents created using Plot will have a much higher chance of being semantically correct — especially when compared to writing documents and markup using raw strings.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-defining-custom-components" class="anchor" aria-hidden="true" href="#defining-custom-components"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Defining custom components&lt;/h2&gt;
&lt;p&gt;The same context-bound &lt;code&gt;Node&lt;/code&gt; architecture that gives Plot its high degree of type safety also enables more higher-level components to be defined, which can then be mixed and composed the exact same way as elements defined within Plot itself.&lt;/p&gt;
&lt;p&gt;For example, let’s say that we’re building a news website using Plot, and that we’re rendering &lt;code&gt;NewsArticle&lt;/code&gt; models in multiple places. Here’s how we could define a reusable &lt;code&gt;newsArticle&lt;/code&gt; component that’s bound to the context of an HTML document’s &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Node&lt;/span&gt; &lt;span class="pl-k"&gt;where&lt;/span&gt; Context&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-e"&gt;HTML.BodyContext&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;newsArticle&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;article&lt;/span&gt;: NewsArticle) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Self&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-c1"&gt;article&lt;/span&gt;(
            .&lt;span class="pl-c1"&gt;class&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;news&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
            .&lt;span class="pl-c1"&gt;img&lt;/span&gt;(.&lt;span class="pl-c1"&gt;src&lt;/span&gt;(article.&lt;span class="pl-smi"&gt;imagePath&lt;/span&gt;)),
            .&lt;span class="pl-c1"&gt;h1&lt;/span&gt;(.&lt;span class="pl-c1"&gt;text&lt;/span&gt;(article.&lt;span class="pl-smi"&gt;title&lt;/span&gt;)),
            .&lt;span class="pl-c1"&gt;span&lt;/span&gt;(
                .&lt;span class="pl-c1"&gt;class&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;description&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
                .&lt;span class="pl-c1"&gt;text&lt;/span&gt;(article.&lt;span class="pl-c1"&gt;description&lt;/span&gt;)
            )
        )
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the above in place, we can now render any of our &lt;code&gt;NewsArticle&lt;/code&gt; models using the exact same syntax as we use for built-in elements:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;newsArticlePage&lt;/span&gt;(&lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;article&lt;/span&gt;: NewsArticle) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; HTML {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(.&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;div&lt;/span&gt;(
            .&lt;span class="pl-c1"&gt;class&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;wrapper&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
            .&lt;span class="pl-c1"&gt;newsArticle&lt;/span&gt;(article)
        )
    ))
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s highly recommended that you use the above component-based approach as much as possible when building websites and documents with Plot — as doing so will let you build up a growing library of reusable components, which will most likely accelerate your overall workflow over time.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-inline-control-flow" class="anchor" aria-hidden="true" href="#inline-control-flow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Inline control flow&lt;/h2&gt;
&lt;p&gt;Since Plot is focused on static site generation, it also ships with several control flow mechanisms that let you inline logic when using its DSL. For example, using the &lt;code&gt;.if()&lt;/code&gt; command, you can optionally add a node only when a given condition is &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rating&lt;span class="pl-k"&gt;:&lt;/span&gt; Rating &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(.&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;if&lt;/span&gt;(rating.&lt;span class="pl-smi"&gt;hasEnoughVotes&lt;/span&gt;,
        .&lt;span class="pl-c1"&gt;span&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Average score: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;rating.&lt;span class="pl-smi"&gt;averageScore&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    )
))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also attach an &lt;code&gt;else&lt;/code&gt; clause to the &lt;code&gt;.if()&lt;/code&gt; command as well, which will act as a fallback node to be displayed when the condition is &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(.&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;if&lt;/span&gt;(rating.&lt;span class="pl-smi"&gt;hasEnoughVotes&lt;/span&gt;,
        .&lt;span class="pl-c1"&gt;span&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Average score: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;rating.&lt;span class="pl-smi"&gt;averageScore&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
        &lt;span class="pl-c1"&gt;else&lt;/span&gt;: .&lt;span class="pl-c1"&gt;span&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough votes yet.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    )
))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Optional values can also be unwrapped inline using the &lt;code&gt;.unwrap()&lt;/code&gt; command, which takes an optional to unwrap, and a closure used to transform its value into a node — for example to conditionally display a part of an HTML page only if a user is logged in:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; user&lt;span class="pl-k"&gt;:&lt;/span&gt; User&lt;span class="pl-k"&gt;?&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;loadUser&lt;/span&gt;()

&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(.&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;unwrap&lt;/span&gt;(user) {
        .&lt;span class="pl-c1"&gt;p&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello, &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;$0&lt;/span&gt;.&lt;span class="pl-smi"&gt;name&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the &lt;code&gt;.forEach()&lt;/code&gt; command can be used to transform any Swift &lt;code&gt;Sequence&lt;/code&gt; into a group of nodes, which is incredibly useful when constructing lists:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; names&lt;span class="pl-k"&gt;:&lt;/span&gt; [&lt;span class="pl-c1"&gt;String&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(.&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;h2&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;People&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
    .&lt;span class="pl-c1"&gt;ul&lt;/span&gt;(.&lt;span class="pl-c1"&gt;forEach&lt;/span&gt;(names) {
        .&lt;span class="pl-c1"&gt;li&lt;/span&gt;(.&lt;span class="pl-c1"&gt;class&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), .&lt;span class="pl-c1"&gt;text&lt;/span&gt;(&lt;span class="pl-c1"&gt;$0&lt;/span&gt;))
    })
))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the above control flow mechanisms, especially when combined with the approach of defining custom components, lets you build really flexible templates, documents and HTML pages — all in a completely type-safe way.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-custom-elements-and-attributes" class="anchor" aria-hidden="true" href="#custom-elements-and-attributes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom elements and attributes&lt;/h2&gt;
&lt;p&gt;While Plot aims to cover as much of the standards associated with the document formats that it supports (see &lt;a href="#compatibility-with-standards"&gt;“Compatibility with standards”&lt;/a&gt; for more info), chances are that you’ll eventually encounter some form of element or attribute that Plot doesn’t yet cover.&lt;/p&gt;
&lt;p&gt;Thankfully, Plot also makes it trivial to define custom elements and attributes — which is both useful when building more free-form XML documents, and as an &lt;em&gt;“escape hatch”&lt;/em&gt; when Plot does not yet support a given part of a standard:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(.&lt;span class="pl-c1"&gt;body&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;element&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;custom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
    .&lt;span class="pl-c1"&gt;p&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;attribute&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;custom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;value&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;...world!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    )
))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the above APIs are great for constructing one-off custom elements, or for temporary working around a limitation in Plot’s built-in functionality, it’s (in most cases) recommended to instead either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="CONTRIBUTING.md#adding-a-new-node-type"&gt;Add and submit&lt;/a&gt; the missing API if it’s for an element or attribute that Plot should ideally cover.&lt;/li&gt;
&lt;li&gt;Define your own type-safe elements and attributes the same way Plot does — by first extending the relevant document format in order to add your own context type, and then extending the &lt;code&gt;Node&lt;/code&gt; type with your own DSL APIs:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;XML&lt;/span&gt; {
    &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ProductContext&lt;/span&gt; {}
}

&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Node&lt;/span&gt; &lt;span class="pl-k"&gt;where&lt;/span&gt; Context &lt;span class="pl-k"&gt;==&lt;/span&gt; XML.DocumentContext {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;product&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;nodes&lt;/span&gt;: Node&amp;lt;XML.ProductContext&amp;gt;&lt;span class="pl-k"&gt;...&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Self&lt;/span&gt; {
        .&lt;span class="pl-c1"&gt;element&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;product&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;nodes&lt;/span&gt;: nodes)
    }
}

&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;Node&lt;/span&gt; &lt;span class="pl-k"&gt;where&lt;/span&gt; Context &lt;span class="pl-k"&gt;==&lt;/span&gt; XML.ProductContext {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;name&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;name&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Self&lt;/span&gt; {
        .&lt;span class="pl-c1"&gt;element&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text&lt;/span&gt;: name)
    }

    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;isAvailable&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;bool&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Self&lt;/span&gt; {
        .&lt;span class="pl-c1"&gt;attribute&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;available&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;value&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;(bool))
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above may at first seem like unnecessary busywork, but just like Plot itself, it can really improve the stability and predictability of your custom documents going forward.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-rendering-a-document" class="anchor" aria-hidden="true" href="#rendering-a-document"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rendering a document&lt;/h2&gt;
&lt;p&gt;Once you’ve finished constructing a document using Plot’s DSL, call the &lt;code&gt;render&lt;/code&gt; method to render it into a &lt;code&gt;String&lt;/code&gt;, which can optionally be indented using either tabs or spaces:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;HTML&lt;/span&gt;(&lt;span class="pl-k"&gt;...&lt;/span&gt;)

&lt;span class="pl-k"&gt;let&lt;/span&gt; nonIndentedString &lt;span class="pl-k"&gt;=&lt;/span&gt; html.&lt;span class="pl-c1"&gt;render&lt;/span&gt;()
&lt;span class="pl-k"&gt;let&lt;/span&gt; spacesIndentedString &lt;span class="pl-k"&gt;=&lt;/span&gt; html.&lt;span class="pl-c1"&gt;render&lt;/span&gt;(&lt;span class="pl-c1"&gt;indentedBy&lt;/span&gt;: .&lt;span class="pl-c1"&gt;spaces&lt;/span&gt;(&lt;span class="pl-c1"&gt;4&lt;/span&gt;))
&lt;span class="pl-k"&gt;let&lt;/span&gt; tabsIndentedString &lt;span class="pl-k"&gt;=&lt;/span&gt; html.&lt;span class="pl-c1"&gt;render&lt;/span&gt;(&lt;span class="pl-c1"&gt;indentedBy&lt;/span&gt;: .&lt;span class="pl-c1"&gt;tabs&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Individual nodes can also be rendered independently, which makes it possible to use Plot to construct just a single part of a larger document:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; header &lt;span class="pl-k"&gt;=&lt;/span&gt; Node.&lt;span class="pl-c1"&gt;header&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;h1&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
    .&lt;span class="pl-c1"&gt;span&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Description&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
)

&lt;span class="pl-k"&gt;let&lt;/span&gt; string &lt;span class="pl-k"&gt;=&lt;/span&gt; header.&lt;span class="pl-c1"&gt;render&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plot was built with performance in mind, so regardless of how you render a document, the goal is for that rendering process to be as fast as possible — with very limited node tree traversal and as little string copying and interpolation as possible.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-rss-feeds-podcasting-and-site-maps" class="anchor" aria-hidden="true" href="#rss-feeds-podcasting-and-site-maps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RSS feeds, podcasting, and site maps&lt;/h2&gt;
&lt;p&gt;Besides HTML and free-form XML, Plot also ships with DSL APIs for constructing RSS and podcast feeds, as well as SiteMap XMLs for search engine indexing.&lt;/p&gt;
&lt;p&gt;While these APIs are most likely only relevant when building tools and custom generators (the upcoming static site generator Publish includes implementations of all of these formats), they provide the same level of type safety as when building HTML pages using Plot:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rss &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;RSS&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;item&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;guid&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://mysite.com/post&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;isPermaLink&lt;/span&gt;(&lt;span class="pl-c1"&gt;true&lt;/span&gt;)),
        .&lt;span class="pl-c1"&gt;title&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My post&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
        .&lt;span class="pl-c1"&gt;link&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://mysite.com/post&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    )
)

&lt;span class="pl-k"&gt;let&lt;/span&gt; podcastFeed &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;PodcastFeed&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;title&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My podcast&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
    .&lt;span class="pl-c1"&gt;owner&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;name&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;John Appleseed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
        .&lt;span class="pl-c1"&gt;email&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;john.appleseed@url.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    ),
    .&lt;span class="pl-c1"&gt;item&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;title&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My first episode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
        .&lt;span class="pl-c1"&gt;audio&lt;/span&gt;(
            &lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://mycdn.com/episode.mp3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
            &lt;span class="pl-c1"&gt;byteSize&lt;/span&gt;: &lt;span class="pl-c1"&gt;79295410&lt;/span&gt;,
            &lt;span class="pl-c1"&gt;title&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My first episode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        )
    )
)

&lt;span class="pl-k"&gt;let&lt;/span&gt; siteMap &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SiteMap&lt;/span&gt;(
    .&lt;span class="pl-c1"&gt;url&lt;/span&gt;(
        .&lt;span class="pl-c1"&gt;loc&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://mysite.com/post&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
        .&lt;span class="pl-c1"&gt;lastmod&lt;/span&gt;(&lt;span class="pl-c1"&gt;Date&lt;/span&gt;()),
        .&lt;span class="pl-c1"&gt;changefreq&lt;/span&gt;(.&lt;span class="pl-smi"&gt;daily&lt;/span&gt;),
        .&lt;span class="pl-c1"&gt;priority&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)
    )
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information about what data is required to build a podcast feed, see &lt;a href="https://itunespartner.apple.com/podcasts" rel="nofollow"&gt;Apple’s podcasting guide&lt;/a&gt;, and for more information about the SiteMap format, see &lt;a href="https://www.sitemaps.org/protocol.html" rel="nofollow"&gt;its official spec&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Plot is distributed using the &lt;a href="https://swift.org/package-manager" rel="nofollow"&gt;Swift Package Manager&lt;/a&gt;. To install it into a project, simply add it as a dependency within your &lt;code&gt;Package.swift&lt;/code&gt; manifest:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; package &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Package&lt;/span&gt;(
    &lt;span class="pl-k"&gt;...&lt;/span&gt;
    dependencies&lt;span class="pl-k"&gt;:&lt;/span&gt; [
        .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/johnsundell/plot.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0.1.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    ],
    &lt;span class="pl-k"&gt;...&lt;/span&gt;
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then import Plot wherever you’d like to use it:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Plot&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information on how to use the Swift Package Manager, check out &lt;a href="https://www.swiftbysundell.com/articles/managing-dependencies-using-the-swift-package-manager" rel="nofollow"&gt;this article&lt;/a&gt;, or &lt;a href="https://github.com/apple/swift-package-manager/tree/master/Documentation"&gt;its official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-navigating-plots-api-and-implementation" class="anchor" aria-hidden="true" href="#navigating-plots-api-and-implementation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Navigating Plot’s API and implementation&lt;/h2&gt;
&lt;p&gt;Plot consists of four core parts, that together make up both its DSL and its overall document rendering API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Sources/Plot/API/Node.swift"&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; is the core building block for all elements and attributes within any Plot document. It can represent elements and attributes, as well as text content and groups of nodes. Each node is bound to a &lt;code&gt;Context&lt;/code&gt; type, which determines which kind of DSL APIs that it gets access to (for example &lt;code&gt;HTML.BodyContext&lt;/code&gt; for nodes placed within the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of an HTML page).&lt;/li&gt;
&lt;li&gt;&lt;a href="Sources/Plot/API/Element.swift"&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; represents an element, and can either be opened and closed using two separate tags (like &lt;code&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/code&gt;) or self-closed (like &lt;code&gt;&amp;lt;img/&amp;gt;&lt;/code&gt;). You normally don’t have to interact with this type when using Plot, since you can create instances of it through its DSL.&lt;/li&gt;
&lt;li&gt;&lt;a href="Sources/Plot/API/Attribute.swift"&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; represents an attribute attached to an element, such as the &lt;code&gt;href&lt;/code&gt; of an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, or the &lt;code&gt;src&lt;/code&gt; of an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element. You can either construct &lt;code&gt;Attribute&lt;/code&gt; values through its initializer, or through the DSL, using the &lt;code&gt;.attribute()&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;&lt;a href="Sources/Plot/API/Document.swift"&gt;&lt;code&gt;Document&lt;/code&gt; and &lt;code&gt;DocumentFormat&lt;/code&gt;&lt;/a&gt; represent documents of a given format, such as &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;RSS&lt;/code&gt; and &lt;code&gt;PodcastFeed&lt;/code&gt;. These are the top level types that you use in order to start a document building session using Plot’s DSL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Plot makes heavy use of a technique known as &lt;em&gt;&lt;a href="https://www.swiftbysundell.com/articles/phantom-types-in-swift" rel="nofollow"&gt;Phantom Types&lt;/a&gt;&lt;/em&gt;, which is when types are used as “markers” for the compiler, to be able to enforce type safety through &lt;a href="https://www.swiftbysundell.com/articles/using-generic-type-constraints-in-swift-4" rel="nofollow"&gt;generic constraints&lt;/a&gt;. Both &lt;code&gt;DocumentFormat&lt;/code&gt;, and the &lt;code&gt;Context&lt;/code&gt; of a node, element or attribute, are used this way — as these types are never instantiated, but rather just there to associate their values with a given context or format.&lt;/p&gt;
&lt;p&gt;Plot also uses a very &lt;a href="https://www.swiftbysundell.com/articles/lightweight-api-design-in-swift" rel="nofollow"&gt;lightweight API design&lt;/a&gt;, minimizing external argument labels in favor of reducing the amount of syntax needed to render a document — giving its API a very “DSL-like” design.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-compatibility-with-standards" class="anchor" aria-hidden="true" href="#compatibility-with-standards"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compatibility with standards&lt;/h2&gt;
&lt;p&gt;Plot’s ultimate goal to be fully compatible with all standards that back the document formats that it supports. However, being a very young project, it will most likely need the community’s help to move it closer to that goal.&lt;/p&gt;
&lt;p&gt;The following standards are intended to be covered by Plot’s DSL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://html.spec.whatwg.org" rel="nofollow"&gt;HTML 5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/REC-xml" rel="nofollow"&gt;XML 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://validator.w3.org/feed/docs/rss2.html" rel="nofollow"&gt;RSS 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.apple.com/itc/podcasts_connect/#/itcbaf351599" rel="nofollow"&gt;Apple’s RSS extensions for podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sitemaps.org/protocol.html" rel="nofollow"&gt;The Sitemaps XML format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you discover an element or attribute that’s missing, please &lt;a href="CONTRIBUTING.md#adding-a-new-node-type"&gt;add it&lt;/a&gt; and open a Pull Request with that addition.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-credits-alternatives-and-focus" class="anchor" aria-hidden="true" href="#credits-alternatives-and-focus"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits, alternatives and focus&lt;/h2&gt;
&lt;p&gt;Plot was originally written by &lt;a href="https://twitter.com/johnsundell" rel="nofollow"&gt;John Sundell&lt;/a&gt; as part of the Publish suite of static site generation tools, which is used to build and generate &lt;a href="https://swiftbysundell.com" rel="nofollow"&gt;Swift by Sundell&lt;/a&gt;. That suite also includes the Markdown parser &lt;a href="https://github.com/JohnSundell/Ink"&gt;Ink&lt;/a&gt;, as well as Publish itself (which will be open sourced soon).&lt;/p&gt;
&lt;p&gt;The idea of using Swift to generate HTML has also been explored by many other people and projects in the community, some of them similar to Plot, some of them completely different. For example &lt;a href="https://github.com/vapor/leaf"&gt;Leaf&lt;/a&gt; by &lt;a href="https://vapor.codes" rel="nofollow"&gt;Vapor&lt;/a&gt;, &lt;a href="https://github.com/pointfreeco/swift-html"&gt;swift-html&lt;/a&gt; by &lt;a href="https://www.pointfree.co" rel="nofollow"&gt;Point-Free&lt;/a&gt;, and the &lt;a href="https://github.com/objcio/swift-talk-backend"&gt;Swift Talk backend&lt;/a&gt; by &lt;a href="https://www.objc.io" rel="nofollow"&gt;objc.io&lt;/a&gt;. The fact that there’s a lot of simultaneous innovation within this area is a great thing — since all of these tools (including Plot) have made different decisions around their overall API design and scope, which lets each developer pick the tool that best fits their individual taste and needs (or perhaps build yet another one?).&lt;/p&gt;
&lt;p&gt;Plot’s main focus is on Swift-based static site generation, and on supporting a wide range of formats used when building websites, including RSS and podcast feeds. It’s also tightly integrated with the upcoming Publish static site generator, and was built to enable Publish to be as fast and flexible as possible, without having to take on any third-party dependencies. It was open sourced as a separate project both from an architectural perspective, and to enable other tools to be built on top of it without having to depend on Publish.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributions-and-support" class="anchor" aria-hidden="true" href="#contributions-and-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions and support&lt;/h2&gt;
&lt;p&gt;Plot is developed completely in the open, and your contributions are more than welcome.&lt;/p&gt;
&lt;p&gt;Before you start using Plot in any of your projects, it’s highly recommended that you spend a few minutes familiarizing yourself with its documentation and internal implementation, so that you’ll be ready to tackle any issues or edge cases that you might encounter.&lt;/p&gt;
&lt;p&gt;Since this is a very young project, it’s likely to have many limitations and missing features, which is something that can really only be discovered and addressed as more people start using it. While Plot is used in production to build and render all of &lt;a href="https://swiftbysundell.com" rel="nofollow"&gt;Swift by Sundell&lt;/a&gt;, it’s recommended that you first try it out for your specific use case, to make sure it supports the features that you need.&lt;/p&gt;
&lt;p&gt;This project does &lt;a href="CONTRIBUTING.md#bugs-feature-requests-and-support"&gt;not come with GitHub Issues-based support&lt;/a&gt;, and users are instead encouraged to become active participants in its continued development — by fixing any bugs that they encounter, or by improving the documentation wherever it’s found to be lacking.&lt;/p&gt;
&lt;p&gt;If you wish to make a change, &lt;a href="https://github.com/JohnSundell/Plot/pull/new"&gt;open a Pull Request&lt;/a&gt; — even if it just contains a draft of the changes you’re planning, or a test that reproduces an issue — and we can discuss it further from there. See &lt;a href="CONTRIBUTING.md"&gt;Plot’s contribution guide&lt;/a&gt; for more information about how to contribute to this project.&lt;/p&gt;
&lt;p&gt;Hope you’ll enjoy using Plot!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>JohnSundell</author><guid isPermaLink="false">https://github.com/JohnSundell/Plot</guid><pubDate>Sun, 05 Jan 2020 00:09:00 GMT</pubDate></item><item><title>ReactiveCocoa/ReactiveCocoa #10 in Swift, Today</title><link>https://github.com/ReactiveCocoa/ReactiveCocoa</link><description>&lt;p&gt;&lt;i&gt;Reactive extensions to Cocoa frameworks, built on top of ReactiveSwift&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
	&lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa/"&gt;&lt;img src="Logo/PNG/logo.png" alt="ReactiveCocoa" style="max-width:100%;"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
	Reactive extensions to Cocoa frameworks, built on top of &lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift/"&gt;ReactiveSwift&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
	&lt;a href="http://reactivecocoa.io/slack/" rel="nofollow"&gt;&lt;img src="Logo/PNG/JoinSlack.png" alt="Join the ReactiveSwift Slack community." width="143" height="40" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href="#carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="#cocoapods"&gt;&lt;img src="https://camo.githubusercontent.com/a6b100658b4ece5a715c70fa7b4f44c6a8b88c11/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f5265616374697665436f636f612e737667" alt="CocoaPods compatible" data-canonical-src="https://img.shields.io/cocoapods/v/ReactiveCocoa.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="#swift-package-manager"&gt;&lt;img src="https://camo.githubusercontent.com/b517430363a06faf2e1f0511eadad89649675eac/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5377696674504d2d636f6d70617469626c652d6f72616e67652e737667" alt="SwiftPM compatible" data-canonical-src="https://img.shields.io/badge/SwiftPM-compatible-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa/releases"&gt;&lt;img src="https://camo.githubusercontent.com/131016545ea411ad678b807756e70895f612372b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f5265616374697665436f636f612f5265616374697665436f636f612e737667" alt="GitHub release" data-canonical-src="https://img.shields.io/github/release/ReactiveCocoa/ReactiveCocoa.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/2c49daa23b7fed8b74c0a9b7711fdf45a6ac4cb8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742d332e302e782d6f72616e67652e737667"&gt;&lt;img src="https://camo.githubusercontent.com/2c49daa23b7fed8b74c0a9b7711fdf45a6ac4cb8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742d332e302e782d6f72616e67652e737667" alt="Swift 3.0.x" data-canonical-src="https://img.shields.io/badge/Swift-3.0.x-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/f280133141a11ab161b19612fa8734ce5f252aa7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d694f532532302537432532304f532532305825323025374325323077617463684f5325323025374325323074764f532532302d6c69676874677265792e737667"&gt;&lt;img src="https://camo.githubusercontent.com/f280133141a11ab161b19612fa8734ce5f252aa7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d694f532532302537432532304f532532305825323025374325323077617463684f5325323025374325323074764f532532302d6c69676874677265792e737667" alt="platforms" data-canonical-src="https://img.shields.io/badge/platforms-iOS%20%7C%20OS%20X%20%7C%20watchOS%20%7C%20tvOS%20-lightgrey.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png"&gt;⚠️&lt;/g-emoji&gt; &lt;a href="https://github.com/ReactiveCocoa/ReactiveObjC"&gt;Looking for the Objective-C API?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="tada" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png"&gt;🎉&lt;/g-emoji&gt; &lt;a href="CHANGELOG.md"&gt;Migrating from RAC 4.x?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bullettrain_side" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f684.png"&gt;🚄&lt;/g-emoji&gt; &lt;a href="#release-roadmap"&gt;Release Roadmap&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-what-is-reactiveswift" class="anchor" aria-hidden="true" href="#what-is-reactiveswift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is ReactiveSwift?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ReactiveSwift&lt;/strong&gt; offers composable, declarative and flexible primitives that are built around the grand concept of &lt;em&gt;&lt;strong&gt;streams of values over time&lt;/strong&gt;&lt;/em&gt;. These primitives can be used to uniformly represent common Cocoa and generic programming patterns that are fundamentally an act of observation.&lt;/p&gt;
&lt;p&gt;For more information about the core primitives, see &lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift"&gt;ReactiveSwift&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-what-is-reactivecocoa" class="anchor" aria-hidden="true" href="#what-is-reactivecocoa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is ReactiveCocoa?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ReactiveCocoa&lt;/strong&gt; wraps various aspects of Cocoa frameworks with the declarative &lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift"&gt;ReactiveSwift&lt;/a&gt; primitives.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UI Bindings&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UI components expose &lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift/blob/master/Documentation/FrameworkOverview.md#properties"&gt;&lt;code&gt;BindingTarget&lt;/code&gt;&lt;/a&gt;s, which accept bindings from any
kind of streams of values via the &lt;code&gt;&amp;lt;~&lt;/code&gt; operator.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Bind the `name` property of `person` to the text value of an `UILabel`.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;nameLabel.&lt;span class="pl-smi"&gt;reactive&lt;/span&gt;.&lt;span class="pl-c1"&gt;text&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;~&lt;/span&gt; person.&lt;span class="pl-smi"&gt;name&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: You'll need to import ReactiveSwift as well to make use of the &lt;code&gt;&amp;lt;~&lt;/code&gt; operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Controls and User Interactions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Interactive UI components expose &lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift/blob/master/Documentation/FrameworkOverview.md#signals"&gt;&lt;code&gt;Signal&lt;/code&gt;&lt;/a&gt;s for control events
and updates in the control value upon user interactions.&lt;/p&gt;
&lt;p&gt;A selected set of controls provide a convenience, expressive binding
API for &lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift/blob/master/Documentation/FrameworkOverview.md#actions"&gt;&lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;s.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Update `allowsCookies` whenever the toggle is flipped.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;preferences.&lt;span class="pl-smi"&gt;allowsCookies&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;~&lt;/span&gt; toggle.&lt;span class="pl-smi"&gt;reactive&lt;/span&gt;.&lt;span class="pl-smi"&gt;isOnValues&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Compute live character counts from the continuous stream of user initiated&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; changes in the text.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;textField.&lt;span class="pl-smi"&gt;reactive&lt;/span&gt;.&lt;span class="pl-smi"&gt;continuousTextValues&lt;/span&gt;.&lt;span class="pl-c1"&gt;map&lt;/span&gt; { &lt;span class="pl-c1"&gt;$0&lt;/span&gt;.&lt;span class="pl-c1"&gt;characters&lt;/span&gt;.&lt;span class="pl-c1"&gt;count&lt;/span&gt; }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Trigger `commit` whenever the button is pressed.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;button.&lt;span class="pl-smi"&gt;reactive&lt;/span&gt;.&lt;span class="pl-smi"&gt;pressed&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;CocoaAction&lt;/span&gt;(viewModel.&lt;span class="pl-smi"&gt;commit&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Declarative Objective-C Dynamism&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create signals that are sourced by intercepting Objective-C objects,
e.g. method call interception and object deinitialization.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Notify after every time `viewWillAppear(_:)` is called.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; appearing &lt;span class="pl-k"&gt;=&lt;/span&gt; viewController.&lt;span class="pl-smi"&gt;reactive&lt;/span&gt;.&lt;span class="pl-c1"&gt;trigger&lt;/span&gt;(&lt;span class="pl-c1"&gt;for&lt;/span&gt;: &lt;span class="pl-c1"&gt;#selector&lt;/span&gt;(UIViewController.&lt;span class="pl-en"&gt;viewWillAppear&lt;/span&gt;(_:)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Observe the lifetime of `object`.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;object.&lt;span class="pl-smi"&gt;reactive&lt;/span&gt;.&lt;span class="pl-smi"&gt;lifetime&lt;/span&gt;.&lt;span class="pl-smi"&gt;ended&lt;/span&gt;.&lt;span class="pl-c1"&gt;observeCompleted&lt;/span&gt;(doCleanup)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expressive, Safe Key Path Observation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Establish key-value observations in the form of &lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift/blob/master/Documentation/FrameworkOverview.md#signal-producers"&gt;&lt;code&gt;SignalProducer&lt;/code&gt;&lt;/a&gt;s and
&lt;code&gt;DynamicProperty&lt;/code&gt;s, and enjoy the inherited composability.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A producer that sends the current value of `keyPath`, followed by&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; subsequent changes.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Terminate the KVO observation if the lifetime of `self` ends.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; producer &lt;span class="pl-k"&gt;=&lt;/span&gt; object.&lt;span class="pl-smi"&gt;reactive&lt;/span&gt;.&lt;span class="pl-c1"&gt;producer&lt;/span&gt;(&lt;span class="pl-c1"&gt;forKeyPath&lt;/span&gt;: &lt;span class="pl-c1"&gt;#keyPath&lt;/span&gt;(key))
	.&lt;span class="pl-c1"&gt;take&lt;/span&gt;(&lt;span class="pl-c1"&gt;during&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;reactive&lt;/span&gt;.&lt;span class="pl-smi"&gt;lifetime&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; A parameterized property that represents the supplied key path of the&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; wrapped object. It holds a weak reference to the wrapped object.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; property &lt;span class="pl-k"&gt;=&lt;/span&gt; DynamicProperty&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;: person,
                                       &lt;span class="pl-c1"&gt;keyPath&lt;/span&gt;: &lt;span class="pl-c1"&gt;#keyPath&lt;/span&gt;(person.&lt;span class="pl-smi"&gt;name&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But there are still more to be discovered and introduced. Read our in-code documentations and release notes to
find out more.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h2&gt;
&lt;p&gt;ReactiveCocoa supports macOS 10.9+, iOS 8.0+, watchOS 2.0+, and tvOS 9.0+.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage&lt;/h4&gt;
&lt;p&gt;If you use &lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; to manage your dependencies, simply add
ReactiveCocoa to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github "ReactiveCocoa/ReactiveCocoa" ~&amp;gt; 9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use Carthage to build your dependencies, make sure you have added &lt;code&gt;ReactiveCocoa.framework&lt;/code&gt; and &lt;code&gt;ReactiveSwift.framework&lt;/code&gt; to the "&lt;em&gt;Linked Frameworks and Libraries&lt;/em&gt;" section of your target, and have included them in your Carthage framework copying build phase.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods&lt;/h4&gt;
&lt;p&gt;If you use &lt;a href="https://cocoapods.org/" rel="nofollow"&gt;CocoaPods&lt;/a&gt; to manage your dependencies, simply add
ReactiveCocoa to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pod 'ReactiveCocoa', '~&amp;gt; 9.0'
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Package Manager&lt;/h4&gt;
&lt;p&gt;If you use Swift Package Manager, simply add ReactiveCocoa as a dependency
of your package in &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.package(url: "https://github.com/ReactiveCocoa/ReactiveCocoa.git", branch: "master")
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-git-submodule" class="anchor" aria-hidden="true" href="#git-submodule"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git submodule&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Add the ReactiveCocoa repository as a &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules" rel="nofollow"&gt;submodule&lt;/a&gt; of your
application’s repository.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; from within the ReactiveCocoa folder.&lt;/li&gt;
&lt;li&gt;Drag and drop &lt;code&gt;ReactiveCocoa.xcodeproj&lt;/code&gt; and &lt;code&gt;Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcodeproj&lt;/code&gt; into your application’s Xcode
project or workspace.&lt;/li&gt;
&lt;li&gt;On the “General” tab of your application target’s settings, add
&lt;code&gt;ReactiveCocoa.framework&lt;/code&gt; and &lt;code&gt;ReactiveSwift.framework&lt;/code&gt; to the “Embedded Binaries” section.&lt;/li&gt;
&lt;li&gt;If your application target does not contain Swift code at all, you should also
set the &lt;code&gt;EMBEDDED_CONTENT_CONTAINS_SWIFT&lt;/code&gt; build setting to “Yes”.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-have-a-question" class="anchor" aria-hidden="true" href="#have-a-question"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Have a question?&lt;/h2&gt;
&lt;p&gt;If you need any help, please visit our &lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa/issues?q=is%3Aissue+label%3Aquestion+"&gt;GitHub issues&lt;/a&gt; or &lt;a href="http://stackoverflow.com/questions/tagged/reactive-cocoa" rel="nofollow"&gt;Stack Overflow&lt;/a&gt;. Feel free to file an issue if you do not manage to find any solution from the archives.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-release-roadmap" class="anchor" aria-hidden="true" href="#release-roadmap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Release Roadmap&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Current Stable Release:&lt;/strong&gt;&lt;br&gt;&lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa/releases"&gt;&lt;img src="https://camo.githubusercontent.com/131016545ea411ad678b807756e70895f612372b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f5265616374697665436f636f612f5265616374697665436f636f612e737667" alt="GitHub release" data-canonical-src="https://img.shields.io/github/release/ReactiveCocoa/ReactiveCocoa.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-in-development" class="anchor" aria-hidden="true" href="#in-development"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;In Development&lt;/h3&gt;
&lt;h3&gt;&lt;a id="user-content-plan-of-record" class="anchor" aria-hidden="true" href="#plan-of-record"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plan of Record&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-abi-stability-release" class="anchor" aria-hidden="true" href="#abi-stability-release"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABI stability release&lt;/h4&gt;
&lt;p&gt;ReactiveCocoa is expected to declare library ABI stability when Swift rolls out resilence support in Swift 5. Until then, ReactiveCocoa will incrementally adopt new language features.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ReactiveCocoa</author><guid isPermaLink="false">https://github.com/ReactiveCocoa/ReactiveCocoa</guid><pubDate>Sun, 05 Jan 2020 00:10:00 GMT</pubDate></item><item><title>rxhanson/Rectangle #11 in Swift, Today</title><link>https://github.com/rxhanson/Rectangle</link><description>&lt;p&gt;&lt;i&gt;Move and resize windows on macOS with keyboard shortcuts and snap areas&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-rectangle" class="anchor" aria-hidden="true" href="#rectangle"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rectangle&lt;/h1&gt;
&lt;p&gt;Rectangle is a window management app based on Spectacle, written in Swift.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-system-requirements" class="anchor" aria-hidden="true" href="#system-requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;System Requirements&lt;/h2&gt;
&lt;p&gt;Rectangle arbitrarily supports macOS v10.12+. If you're willing to test on earlier versions of macOS, this can be updated.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-keyboard-shortcuts" class="anchor" aria-hidden="true" href="#keyboard-shortcuts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keyboard Shortcuts&lt;/h2&gt;
&lt;p&gt;The default keyboard shortcuts are based on Spectacle, but there is a recommended alternative set of defaults based on the Magnet app. This can be enabled by setting "alternateDefaultShortcuts" to true in NSUserDefaults for Rectangle with the following Terminal command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;defaults write com.knollsoft.Rectangle alternateDefaultShortcuts -bool true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then restart the Rectangle app.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-differences-with-spectacle" class="anchor" aria-hidden="true" href="#differences-with-spectacle"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Differences with Spectacle&lt;/h2&gt;
&lt;p&gt;Spectacle used its own keyboard shortcut recorder, while Rectangle uses &lt;a href="https://github.com/shpakovski/MASShortcut"&gt;MASShortcut&lt;/a&gt;, a well maintained open source library for shortcut recording in macOS apps. This cuts down dramatically on the number of bugs that were only in Spectacle because of the custom shortcut recorder.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-additional-features" class="anchor" aria-hidden="true" href="#additional-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Additional window actions: move windows to each edge without resizing, maximize only the height of a window, almost maximizing a window.&lt;/li&gt;
&lt;li&gt;Next/prev screen thirds is replaced with explicitly first third, first two thirds, center third, last two thirds, and last third. Screen orientation is taken into account, as in first third will be left third on landscape and top third on portrait.&lt;/li&gt;
&lt;li&gt;There's an option to have windows traverse across displays on subsequent left or right executions, similar to what Microsoft provided in Windows 7.&lt;/li&gt;
&lt;li&gt;Windows will snap when dragged to edges/corners of the screen. This can be disabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-details-on-halves-to-thirds-subsequent-execution-of-half-and-quarter-actions" class="anchor" aria-hidden="true" href="#details-on-halves-to-thirds-subsequent-execution-of-half-and-quarter-actions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Details on halves to thirds (subsequent execution of half and quarter actions)&lt;/h3&gt;
&lt;p&gt;The default behavior for Rectangle is based on Spectacle. Each time you execute a half or quarter action, the width of the window will cycle through the following sizes: 1/2 -&amp;gt; 2/3 -&amp;gt; 1/3.&lt;/p&gt;
&lt;p&gt;This behavior can be disabled with the following terminal command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;defaults write com.knollsoft.Rectangle subsequentExecutionMode -int 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Followed by a restart of the app.&lt;/p&gt;
&lt;p&gt;Note that the &lt;code&gt;subsequentExecutionMode&lt;/code&gt; is also tied to the setting for traversing displays in the prefs.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-details-on-almost-maximize" class="anchor" aria-hidden="true" href="#details-on-almost-maximize"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Details on Almost Maximize&lt;/h3&gt;
&lt;p&gt;By default, "Almost Maximize" will resize the window to 90% of the screen (width &amp;amp; height). These values can be adjusted with the following terminal commands:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;defaults write com.knollsoft.Rectangle almostMaximizeHeight -float &amp;lt;VALUE_BETWEEN_0_&amp;amp;_1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;defaults write com.knollsoft.Rectangle almostMaximizeWidth -float &amp;lt;VALUE_BETWEEN_0_&amp;amp;_1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Followed by a restart of the app.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Logic from Rectangle is used in the &lt;a href="https://multitouch.app" rel="nofollow"&gt;Multitouch&lt;/a&gt; app. If you contribute code or localizations that get merged into Rectangle, you get a free license of Multitouch. Contributors to Sparkle, MASShortcut, or Spectacle can also receive a free license of Multitouch (just send me a direct message on &lt;a href="https://gitter.im" rel="nofollow"&gt;Gitter&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-localization" class="anchor" aria-hidden="true" href="#localization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Localization&lt;/h3&gt;
&lt;p&gt;Localization was done using &lt;a href="https://www.deepl.com/translator" rel="nofollow"&gt;DeepL&lt;/a&gt; and Google Translate. Since it wasn't done by a person, it's likely that the translations can be improved. If you would like to contribute to localization, all of the translations are held in the Main.strings per language.&lt;/p&gt;
&lt;p&gt;Pull requests for new localizations or improvements on existing localizations are welcome.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;If windows aren't resizing or moving as you expect, here's some initial steps to get to the bottom of it. Most issues of this type have been caused by other apps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure macOS is up to date, if possible.&lt;/li&gt;
&lt;li&gt;Restart your machine.&lt;/li&gt;
&lt;li&gt;Make sure there are no other window manager applications running.&lt;/li&gt;
&lt;li&gt;Make sure that the app whose windows are not behaving properly does not have any conflicting keyboard shortcuts.&lt;/li&gt;
&lt;li&gt;Try using the menu items to execute a window action or changing the keyboard shortcut to something different so we can tell if it's a keyboard shortcut issue or not.&lt;/li&gt;
&lt;li&gt;Enable debug logging, as per the instructions in the following section.&lt;/li&gt;
&lt;li&gt;The logs are pretty straightforward. If your calculated rect and your resulting rect are identical, chances are that there is another application causing issues. Save your logs if needed to attach to an issue if you create one.&lt;/li&gt;
&lt;li&gt;If you suspect there may be another application causing issues, try creating and logging in as a new macOS user.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-view-debug-logging" class="anchor" aria-hidden="true" href="#view-debug-logging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;View Debug Logging&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Hold down the alt (option) key with the Rectangle menu open.&lt;/li&gt;
&lt;li&gt;Select the "View Logging..." menu item, which is in place of the "About" menu item.&lt;/li&gt;
&lt;li&gt;Logging will appear in the window as you perform Rectangle commands.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;You can download the latest dmg from &lt;a href="https://rectangleapp.com" rel="nofollow"&gt;https://rectangleapp.com&lt;/a&gt; or the &lt;a href="https://github.com/rxhanson/Rectangle/releases"&gt;Releases page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or install with brew cask:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew cask install rectangle&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-preferences-storage" class="anchor" aria-hidden="true" href="#preferences-storage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preferences Storage&lt;/h2&gt;
&lt;p&gt;The configuration for Rectangle is stored using NSUserDefaults, meaning it is stored in the following location:
&lt;code&gt;~/Library/Preferences/com.knollsoft.Rectangle.plist&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That file can be backed up or transferred to other machines.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>rxhanson</author><guid isPermaLink="false">https://github.com/rxhanson/Rectangle</guid><pubDate>Sun, 05 Jan 2020 00:11:00 GMT</pubDate></item><item><title>amirdew/gmenu #12 in Swift, Today</title><link>https://github.com/amirdew/gmenu</link><description>&lt;p&gt;&lt;i&gt;A redesigned menu for Gmail iOS app, implemented using SwiftUI&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-gmenu" class="anchor" aria-hidden="true" href="#gmenu"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gmenu&lt;/h1&gt;
&lt;p&gt;A redesigned menu for Gmail iOS app, implemented using SwiftUI&lt;br&gt;
Xcode 11, Swift 5.1&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-preview" class="anchor" aria-hidden="true" href="#preview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preview&lt;/h1&gt;
&lt;p&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4eba287d7501661cfb3e9c57a58d517b57e9e46c/68747470733a2f2f616d69722e6170702f676d656e752f707265766965772d6461726b2e676966"&gt;&lt;img src="https://camo.githubusercontent.com/4eba287d7501661cfb3e9c57a58d517b57e9e46c/68747470733a2f2f616d69722e6170702f676d656e752f707265766965772d6461726b2e676966" data-canonical-src="https://amir.app/gmenu/preview-dark.gif" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/9c4140ddf77a6f2bb4f02205d18d56226027b103/68747470733a2f2f616d69722e6170702f676d656e752f707265766965772d6c696768742e676966"&gt;&lt;img src="https://camo.githubusercontent.com/9c4140ddf77a6f2bb4f02205d18d56226027b103/68747470733a2f2f616d69722e6170702f676d656e752f707265766965772d6c696768742e676966" data-canonical-src="https://amir.app/gmenu/preview-light.gif" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>amirdew</author><guid isPermaLink="false">https://github.com/amirdew/gmenu</guid><pubDate>Sun, 05 Jan 2020 00:12:00 GMT</pubDate></item><item><title>nicklockwood/SwiftFormat #13 in Swift, Today</title><link>https://github.com/nicklockwood/SwiftFormat</link><description>&lt;p&gt;&lt;i&gt;A code library and command-line formatting tool for reformatting Swift code&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/nicklockwood/SwiftFormat" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/56ef899b2093b42b4b65c3111907745f6728f0f7/68747470733a2f2f6170692e7472617669732d63692e6f72672f6e69636b6c6f636b776f6f642f5377696674466f726d61742e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://api.travis-ci.org/nicklockwood/SwiftFormat.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/nicklockwood/SwiftFormat" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bd509d38c739b8db79bd616bec02a5a4dfed56a4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6e69636b6c6f636b776f6f642f5377696674466f726d61742f62616467652e737667" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/nicklockwood/SwiftFormat/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://developer.apple.com/swift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2445de343b7f6ef7aecab974c00333e05deaf42f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73776966742d342e322d7265642e7376673f7374796c653d666c6174" alt="Swift 4.2" data-canonical-src="https://img.shields.io/badge/swift-4.2-red.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c0e54a826d90da52e4ee70c63fef3ee61b3ffbd5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6c69676874677265792e737667" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-lightgrey.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://twitter.com/nicklockwood" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/67b1993f79fd1248818638921acef6800b606f8b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747769747465722d406e69636b6c6f636b776f6f642d626c75652e737667" alt="Twitter" data-canonical-src="https://img.shields.io/badge/twitter-@nicklockwood-blue.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-this"&gt;What?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-would-i-want-to-do-that"&gt;Why?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-install-it"&gt;How?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#command-line-tool"&gt;Command-line tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#xcode-source-editor-extension"&gt;Xcode source editor extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#xcode-build-phase"&gt;Xcode build phase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#via-applescript"&gt;Via Applescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vscode-plugin"&gt;VSCode plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-pre-commit-hook"&gt;Git pre-commit hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-ci-using-danger"&gt;On CI using Danger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuration"&gt;Configuration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#options"&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rules"&gt;Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swift-version"&gt;Swift version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#config-file"&gt;Config file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#globs"&gt;Globs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linting"&gt;Linting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cache"&gt;Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#file-headers"&gt;File headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#known-issues"&gt;Known issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-what-is-this" class="anchor" aria-hidden="true" href="#what-is-this"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is this?&lt;/h2&gt;
&lt;p&gt;SwiftFormat is a code library and command-line tool for reformatting swift code on macOS or Linux.&lt;/p&gt;
&lt;p&gt;SwiftFormat goes above and beyond what you might expect from a code formatter. In addition to adjusting white space it can insert or remove implicit &lt;code&gt;self&lt;/code&gt;, remove redundant parentheses, and correct many other deviations from the standard Swift idioms.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-would-i-want-to-do-that" class="anchor" aria-hidden="true" href="#why-would-i-want-to-do-that"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why would I want to do that?&lt;/h2&gt;
&lt;p&gt;Many programmers have a preferred style for formatting their code, and others seem entirely blind to the existing formatting conventions of a project (to the enragement of their colleagues).&lt;/p&gt;
&lt;p&gt;When collaborating on a project, it can be helpful to agree on a common coding style, but enforcing that manually is tedious and error-prone, and can lead to arguments if some participants take it more seriously than others.&lt;/p&gt;
&lt;p&gt;Having a tool to automatically enforce a common style eliminates those issues, and lets you focus on the behavior of the code, not its presentation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-how-do-i-install-it" class="anchor" aria-hidden="true" href="#how-do-i-install-it"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do I install it?&lt;/h2&gt;
&lt;p&gt;That depends - There are several ways you can use SwiftFormat:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As a command-line tool that you run manually, or as part of some other toolchain&lt;/li&gt;
&lt;li&gt;As a Source Editor Extension that you can invoke via the Editor &amp;gt; SwiftFormat menu within Xcode&lt;/li&gt;
&lt;li&gt;As a build phase in your Xcode project, so that it runs every time you press Cmd-R or Cmd-B, or&lt;/li&gt;
&lt;li&gt;As a Git pre-commit hook, so that it runs on any files you've changed before you check them in&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-command-line-tool" class="anchor" aria-hidden="true" href="#command-line-tool"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Command-line tool&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; if you are using any of the following methods to install SwiftFormat on macOS 10.14.3 or earlier and are experiencing a crash on launch, you may need to install the &lt;a href="https://support.apple.com/kb/DL1998" rel="nofollow"&gt;Swift 5 Runtime Support for Command Line Tools&lt;/a&gt;. See &lt;a href="#known-issues"&gt;known issues&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can install the &lt;code&gt;swiftformat&lt;/code&gt; command-line tool on macOS using &lt;a href="http://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt;. Assuming you already have Homebrew installed, just type:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew install swiftformat&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To update to the latest version once installed:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew upgrade swiftformat&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you can install the tool on macOS or Linux by using &lt;a href="https://github.com/yonaskolb/Mint"&gt;Mint&lt;/a&gt; as follows:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ mint install nicklockwood/SwiftFormat&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then run it using:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ mint run swiftformat&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or if you prefer, you can check out and build SwiftFormat manually on macOS or Linux as follows:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ git clone https://github.com/nicklockwood/SwiftFormat
$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; SwiftFormat
$ swift build -c release&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are installing SwiftFormat into your project directory, you can use &lt;a href="https://cocoapods.org/" rel="nofollow"&gt;CocoaPods&lt;/a&gt; on macOS to automatically install the swiftformat binary along with your other pods - see the Xcode build phase instructions below for details.&lt;/p&gt;
&lt;p&gt;If you would prefer not to use a package manager, you can build the command-line app manually:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;open &lt;code&gt;SwiftFormat.xcodeproj&lt;/code&gt; and build the &lt;code&gt;SwiftFormat (Application)&lt;/code&gt; scheme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Drag the &lt;code&gt;swiftformat&lt;/code&gt; binary into &lt;code&gt;/usr/local/bin/&lt;/code&gt; (this is a hidden folder, but you can use the Finder's &lt;code&gt;Go &amp;gt; Go to Folder...&lt;/code&gt; menu to open it).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;code&gt;~/.bash_profile&lt;/code&gt; in your favorite text editor (this is a hidden file, but you can type &lt;code&gt;open ~/.bash_profile&lt;/code&gt; in the terminal to open it).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following line to the file: &lt;code&gt;alias swiftformat="/usr/local/bin/swiftformat --indent 4"&lt;/code&gt; (you can omit the &lt;code&gt;--indent 4&lt;/code&gt;, or replace it with something else. Run &lt;code&gt;swiftformat --help&lt;/code&gt; to see the available options).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the &lt;code&gt;.bash_profile&lt;/code&gt; file and run the command &lt;code&gt;source ~/.bash_profile&lt;/code&gt; for the changes to take effect.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you followed the installation instructions above, you can now just type&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ swiftformat &lt;span class="pl-c1"&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(that's a space and then a period after the command) in the terminal to format any Swift files in the current directory. In place of the &lt;code&gt;.&lt;/code&gt;, you can instead type an absolute or relative path to the file or directory that you want to format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; &lt;code&gt;swiftformat .&lt;/code&gt; will overwrite any Swift files it finds in the current directory, and any subfolders therein. If you run it in your home directory, it will probably reformat every Swift file on your hard drive.&lt;/p&gt;
&lt;p&gt;To use it safely, do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Choose a file or directory that you want to apply the changes to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure that you have committed all your changes to that code safely in git (or whatever source control system you use).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) In Terminal, type &lt;code&gt;swiftformat --inferoptions "/path/to/your/code/"&lt;/code&gt;. This will suggest a set of formatting options to use that match your existing project style (but you are free to ignore these and use the defaults, or your own settings if you prefer).&lt;/p&gt;
&lt;p&gt;The path can point to either a single Swift file or a directory of files. It can be either be absolute, or relative to the current directory. The &lt;code&gt;""&lt;/code&gt; quotes around the path are optional, but if the path contains spaces then you either need to use quotes, or escape each space with &lt;code&gt;\&lt;/code&gt;. You may include multiple paths separated by spaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Terminal, type &lt;code&gt;swiftformat "/path/to/your/code/"&lt;/code&gt;. The same rules apply as above with respect to paths, and multiple space-delimited paths are allowed.&lt;/p&gt;
&lt;p&gt;If you used &lt;code&gt;--inferoptions&lt;/code&gt; to generate a suggested set of options in step 3, you should copy and paste them into the command, either before or after the path(s) to your source files.&lt;/p&gt;
&lt;p&gt;If you have created a &lt;a href="#config-file"&gt;config file&lt;/a&gt;, you can specify its path using &lt;code&gt;--config "/path/to/your/config-file/"&lt;/code&gt;. Alternatively, if you name the file &lt;code&gt;.swiftformat&lt;/code&gt; and place it inside the project you are formatting, it will be picked up automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press enter to begin formatting. Once the formatting is complete, use your source control system to check the changes, and verify that no undesirable changes have been introduced. If they have, revert the changes, tweak the options and try again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) commit the changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Following these instructions &lt;em&gt;should&lt;/em&gt; ensure that you avoid catastrophic data loss, but in the unlikely event that it wipes your hard drive, &lt;strong&gt;please note that I accept no responsibility&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using Standard Input/Output:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you prefer, you can use unix pipes to include SwiftFormat as part of a command chain. For example, this is an alternative way to format a file:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ cat /path/to/file.swift &lt;span class="pl-k"&gt;|&lt;/span&gt; swiftformat --output /path/to/file.swift&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Omitting the &lt;code&gt;--output /path/to/file.swift&lt;/code&gt; will print the formatted file to Standard Output (stdout). You can also use &lt;code&gt;&amp;gt;&lt;/code&gt; to specify the output path as follows:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ cat /path/to/file.swift &lt;span class="pl-k"&gt;|&lt;/span&gt; swiftformat &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; /path/to/file.swift&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do not supply an input file, SwiftFormat will automatically take its input from Standard Input (stdin), but will time-out if no input is received immediately and display the help screen. To make it explicit, pass "stdin" as the input path:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ cat /path/to/file.swift &lt;span class="pl-k"&gt;|&lt;/span&gt; swiftformat stdin&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-xcode-source-editor-extension" class="anchor" aria-hidden="true" href="#xcode-source-editor-extension"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Xcode source editor extension&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like the command-line tool, you can install the SwiftFormat for Xcode extension application via &lt;a href="http://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt;. Assuming you already have Homebrew installed, type:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew cask install swiftformat-for-xcode&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will install SwiftFormat for Xcode in your Applications folder. Double-click the app to launch it, and then follow the on-screen instructions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The app should be correctly signed, but if you get a Gatekeeper warning when trying to open it you can bypass this by right-clicking (or control-clicking) the app and selecting &lt;code&gt;Open&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To update to the latest version once installed use:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew cask upgrade swiftformat-for-xcode&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, if you prefer not to use Homebrew, you'll find the latest version of the SwiftFormat for Xcode application inside the EditorExtension folder included in the SwiftFormat repository. Download and unpack the zip archive, then drag &lt;code&gt;SwiftFormat for Xcode.app&lt;/code&gt; into your &lt;code&gt;Applications&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you have launched the app and restarted Xcode, you'll find a SwiftFormat option under Xcode's Editor menu. You can use this to format either the current selection or the whole file.&lt;/p&gt;
&lt;p&gt;You can configure the formatting &lt;a href="#rules"&gt;rules&lt;/a&gt; and &lt;a href="#options"&gt;options&lt;/a&gt; using the SwiftFormat for Xcode host application. There is currently no way to override these per-project, however you can import and export different configurations using the File menu. You will need to do this again each time you switch projects.&lt;/p&gt;
&lt;p&gt;The format of the configuration file is described in the &lt;a href="#config-file"&gt;Config section&lt;/a&gt; below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SwiftFormat for Xcode cannot automatically detect changes to an imported configuration file. If you update the &lt;code&gt;.swiftformat&lt;/code&gt; file for your project, you will need to manually re-import that file into SwiftFormat for Xcode in order for the Xcode source editor extension to use the new configuration.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-xcode-build-phase" class="anchor" aria-hidden="true" href="#xcode-build-phase"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Xcode build phase&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Adding this script will overwrite your source files as you work on them, which has the annoying side-effect of clearing the undo history. You may wish to add the script to your test target rather than your main target, so that it is invoked only when you run the unit tests, and not every time you build the app.&lt;/p&gt;
&lt;p&gt;Alternatively, you might want to consider running SwiftFormat in &lt;a href="#linting"&gt;lint&lt;/a&gt; mode as part of your normal build, and then running a formatting pass manually, or as part of a less-frequent build target (such as the tests).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-swift-package-manager" class="anchor" aria-hidden="true" href="#using-swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Swift Package Manager&lt;/h3&gt;
&lt;p&gt;To set up SwiftFormat as an Xcode build phase, do the following:&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-1-create-a-buildtools-folder--packageswift" class="anchor" aria-hidden="true" href="#1-create-a-buildtools-folder--packageswift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) Create a BuildTools folder &amp;amp; Package.swift&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Create a folder called &lt;code&gt;BuildTools&lt;/code&gt; in the same folder as your xcodeproj file&lt;/li&gt;
&lt;li&gt;In this folder, create a file called &lt;code&gt;Package.swift&lt;/code&gt;, with the following contents:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swift-tools-version:5.1&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;PackageDescription&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; package &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Package&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;BuildTools&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
	&lt;span class="pl-c1"&gt;platforms&lt;/span&gt;: [.&lt;span class="pl-c1"&gt;macOS&lt;/span&gt;(.&lt;span class="pl-smi"&gt;v10_11&lt;/span&gt;)],
    &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [
        .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/nicklockwood/SwiftFormat&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0.41.2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
    ]
)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-2-add-a-build-phases-to-your-app-target" class="anchor" aria-hidden="true" href="#2-add-a-build-phases-to-your-app-target"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) Add a Build phases to your app target&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt;
&lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script:
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; BuildTools
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;swift package update #Uncomment this line temporarily to update the version used to the latest matching your BuildTools/Package.swift file&lt;/span&gt;
swift run -c release swiftformat &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;$SRCROOT&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may wish to check BuildTools/Package.swift into your source control so that the version used by your run-script phase is kept in version control. It is recommended to add the following to your .gitignore file: &lt;code&gt;BuildTools/.build&lt;/code&gt; and &lt;code&gt;BuildTools/.swiftpm&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-cocoapods" class="anchor" aria-hidden="true" href="#using-cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Cocoapods&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-1-add-the-switfformat-cli-to-your-podfile" class="anchor" aria-hidden="true" href="#1-add-the-switfformat-cli-to-your-podfile"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) Add the SwitfFormat CLI to your Podfile&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;swiftformat&lt;/code&gt; binary to your project directory via &lt;a href="https://cocoapods.org/" rel="nofollow"&gt;CocoaPods&lt;/a&gt;, by adding the following line to your Podfile then running &lt;code&gt;pod install&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;SwiftFormat/CLI&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This will only install the pre-built command-line app, not the source code for the SwiftFormat framework.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-2-add-a-build-phase-to-your-app-target" class="anchor" aria-hidden="true" href="#2-add-a-build-phase-to-your-app-target"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) Add a Build phase to your app target&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt;
&lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script:
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${PODS_ROOT}&lt;/span&gt;/SwiftFormat/CommandLineTool/swiftformat&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;$SRCROOT&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-alternative-locally-installed-swiftformat" class="anchor" aria-hidden="true" href="#alternative-locally-installed-swiftformat"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternative: Locally installed swiftformat&lt;/h3&gt;
&lt;p&gt;Alternatively, you could use a locally installed swiftformat command-line tool instead by putting the following in your Run Script build phase:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; which swiftformat &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;/dev/null&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;then&lt;/span&gt;
  swiftformat &lt;span class="pl-c1"&gt;.&lt;/span&gt;
&lt;span class="pl-k"&gt;else&lt;/span&gt;
  &lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;warning: SwiftFormat not installed, download from https://github.com/nicklockwood/SwiftFormat&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not recommended for shared projects however, as different team members using different versions of SwiftFormat may result in noise in the commit history as code gets reformatted inconsistently.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-via-applescript" class="anchor" aria-hidden="true" href="#via-applescript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Via AppleScript&lt;/h2&gt;
&lt;p&gt;To run SwiftFormat on the frontmost Xcode document (project or workspace) you can use the following AppleScript:&lt;/p&gt;
&lt;div class="highlight highlight-source-applescript"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;tell&lt;/span&gt; &lt;span class="pl-c1"&gt;application&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Xcode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
	&lt;span class="pl-k"&gt;set&lt;/span&gt; &lt;span class="pl-smi"&gt;frontWindow&lt;/span&gt; &lt;span class="pl-k"&gt;to&lt;/span&gt; &lt;span class="pl-k"&gt;the&lt;/span&gt; &lt;span class="pl-k"&gt;first&lt;/span&gt; window
	&lt;span class="pl-k"&gt;set&lt;/span&gt; &lt;span class="pl-smi"&gt;myPath&lt;/span&gt; &lt;span class="pl-k"&gt;to&lt;/span&gt; path &lt;span class="pl-k"&gt;of&lt;/span&gt; document &lt;span class="pl-k"&gt;of&lt;/span&gt; frontWindow
	&lt;span class="pl-c1"&gt;do shell script&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cd &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&lt;/span&gt; myPath &lt;span class="pl-k"&gt;&amp;amp;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;;cd ..; /usr/local/bin/swiftformat .&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end tell&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some Apps you can trigger this from are &lt;a href="https://folivora.ai" rel="nofollow"&gt;BetterTouchTool&lt;/a&gt;, &lt;a href="https://www.alfredapp.com" rel="nofollow"&gt;Alfred&lt;/a&gt; or &lt;a href="https://www.keyboardmaestro.com/main/" rel="nofollow"&gt;Keyboard Maestro&lt;/a&gt;. Another option is to define a QuickAction for Xcode via Automator and then assign a keyboard shortcut for it in the System Preferences.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-vscode-plugin" class="anchor" aria-hidden="true" href="#vscode-plugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VSCode plugin&lt;/h2&gt;
&lt;p&gt;If you prefer to use Microsoft's &lt;a href="https://code.visualstudio.com" rel="nofollow"&gt;VSCode&lt;/a&gt; editor for writing Swift, &lt;a href="https://github.com/vknabel"&gt;Valentin Knabel&lt;/a&gt; has created a &lt;a href="https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftformat" rel="nofollow"&gt;VSCode plugin&lt;/a&gt; for SwiftFormat.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-git-pre-commit-hook" class="anchor" aria-hidden="true" href="#git-pre-commit-hook"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git pre-commit hook&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Follow the instructions for installing the SwiftFormat command-line tool.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit or create a &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt; file in your project folder. The .git folder is hidden but should already exist if you are using Git with your project, so open in with the terminal, or the Finder's &lt;code&gt;Go &amp;gt; Go to Folder...&lt;/code&gt; menu.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following line in the pre-commit file (unlike the Xcode build phase approach, this uses your locally installed version of SwiftFormat, not a separate copy in your project repository)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#!&lt;/span&gt;/bin/bash&lt;/span&gt;
git diff --diff-filter=d --staged --name-only &lt;span class="pl-k"&gt;|&lt;/span&gt; grep -e &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;\(.*\).swift$&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-c1"&gt;read&lt;/span&gt; line&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  swiftformat &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${line}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt;
  git add &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;$line&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enable the hook by typing &lt;code&gt;chmod +x .git/hooks/pre-commit&lt;/code&gt; in the terminal&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The pre-commit hook will now run whenever you run &lt;code&gt;git commit&lt;/code&gt;. Running &lt;code&gt;git commit --no-verify&lt;/code&gt; will skip the pre-commit hook.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you are using Git via a GUI client such as &lt;a href="https://www.git-tower.com" rel="nofollow"&gt;Tower&lt;/a&gt;, &lt;a href="https://www.git-tower.com/help/mac/faq-and-tips/faq/hook-scripts" rel="nofollow"&gt;additional steps&lt;/a&gt; may be needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE (2):&lt;/strong&gt; Unlike the Xcode build phase approach, git pre-commit hook won't be checked in to source control, and there's no way to guarantee that all users of the project are using the same version of SwiftFormat. For a collaborative project, you might want to consider a &lt;em&gt;post&lt;/em&gt;-commit hook instead, which would run on your continuous integration server.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-on-ci-using-danger" class="anchor" aria-hidden="true" href="#on-ci-using-danger"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;On CI using Danger&lt;/h2&gt;
&lt;p&gt;To setup SwiftFormat to be used by your continuous integration system using &lt;a href="http://danger.systems/ruby/" rel="nofollow"&gt;Danger&lt;/a&gt;, do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Follow the &lt;a href="http://danger.systems/guides/getting_started.html" rel="nofollow"&gt;&lt;code&gt;instructions&lt;/code&gt;&lt;/a&gt; to setup Danger.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;a href="https://github.com/garriguv/danger-ruby-swiftformat"&gt;&lt;code&gt;danger-swiftformat&lt;/code&gt;&lt;/a&gt; plugin to your &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following to your &lt;code&gt;Dangerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;swiftformat.binary_path &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path/to/swiftformat&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; optional&lt;/span&gt;
swiftformat.additional_args &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--indent tab --self insert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; optional&lt;/span&gt;
swiftformat.check_format(&lt;span class="pl-c1"&gt;fail_on_error:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is recommended to add the &lt;code&gt;swiftformat&lt;/code&gt; binary to your project directory to ensure the same version is used each time (see the &lt;a href="#xcode-build-phase"&gt;Xcode build phase&lt;/a&gt; instructions above).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p&gt;SwiftFormat's configuration is split between &lt;strong&gt;rules&lt;/strong&gt; and &lt;strong&gt;options&lt;/strong&gt;. Rules are functions in the SwiftFormat library that apply changes to the code. Options are settings that control the behavior of the rules.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-options" class="anchor" aria-hidden="true" href="#options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Options&lt;/h2&gt;
&lt;p&gt;The options available in SwiftFormat can be displayed using the &lt;code&gt;--options&lt;/code&gt; command-line argument. The default value for each option is indicated in the help text.&lt;/p&gt;
&lt;p&gt;Rules are configured by adding &lt;code&gt;--[option_name] [value]&lt;/code&gt; to your command-line arguments, or by creating a &lt;code&gt;.swiftformat&lt;/code&gt; &lt;a href="#config-file"&gt;config file&lt;/a&gt; and placing it in your project directory.&lt;/p&gt;
&lt;p&gt;A given option may affect multiple rules. Use &lt;code&gt;--ruleinfo [rule_name]&lt;/code&gt; command for details about which options affect a given rule, or see the &lt;a href="https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md"&gt;Rules.md&lt;/a&gt; file.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-rules" class="anchor" aria-hidden="true" href="#rules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rules&lt;/h2&gt;
&lt;p&gt;SwiftFormat includes over 50 rules, and new ones are added all the time. An up-to-date list can be found in &lt;a href="https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md"&gt;Rules.md&lt;/a&gt; along with documentation for how they are used.&lt;/p&gt;
&lt;p&gt;The list of available rules can be displayed within the command-line app using the &lt;code&gt;--rules&lt;/code&gt; argument. Rules can be either enabled or disabled. Most are enabled by default. Disabled rules are marked with "(disabled)" when displayed using &lt;code&gt;--rules&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;--ruleinfo [rule_name]&lt;/code&gt; command to get information about a specific rule. Pass a comma-delimited list of rule names to get information for multiple rules at once, or use &lt;code&gt;--ruleinfo&lt;/code&gt; with no argument for info on all rules.&lt;/p&gt;
&lt;p&gt;You can disable rules individually using &lt;code&gt;--disable&lt;/code&gt; followed by a list of one or more comma-delimited rule names, or enable opt-in rules using &lt;code&gt;--enable&lt;/code&gt; followed by the rule names:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;--disable redundantSelf,trailingClosures
--enable isEmpty&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you prefer, you can place your enabled/disabled rules on separate lines instead of using commas:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;--disable indent
--disable linebreaks
--disable redundantSelf&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To avoid automatically opting-in to new rules when SwiftFormat is updated, you can use the&lt;code&gt;--rules&lt;/code&gt; argument to &lt;em&gt;only&lt;/em&gt; enable the rules you specify:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;--rules indent,linebreaks&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To see exactly which rules were applied to a given file, you can use the &lt;code&gt;--verbose&lt;/code&gt; command-line option to force SwiftFormat to print a more detailed log as it applies the formatting. &lt;strong&gt;NOTE:&lt;/strong&gt; running in verbose mode is slower than the default mode.&lt;/p&gt;
&lt;p&gt;You can disable rules for specific files or code ranges by using &lt;code&gt;swiftformat:&lt;/code&gt; directives in comments inside your Swift files. To temporarily disable one or more rules inside a source file, use:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftformat:disable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; [rule&amp;lt;3&amp;gt; ...]]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To enable the rule(s) again, use:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftformat:enable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; [rule&amp;lt;3&amp;gt; ...]]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To disable all rules use:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftformat:disable all&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And to enable them all again, use:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftformat:enable all&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To temporarily prevent one or more rules being applied to just the next line, use:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swiftformat:disable:next &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; [rule&amp;lt;3&amp;gt; ...]]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; foo &lt;span class="pl-k"&gt;=&lt;/span&gt; bar &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; rule(s) will be disabled for this line&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; bar &lt;span class="pl-k"&gt;=&lt;/span&gt; baz &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; rule(s) will be re-enabled for this line&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is no need to manually re-enable a rule after using the &lt;code&gt;next&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;swiftformat:enable&lt;/code&gt; directives only serves to counter a previous &lt;code&gt;swiftformat:disable&lt;/code&gt; directive in the same file. It is not possible to use &lt;code&gt;swiftformat:enable&lt;/code&gt; to enable a rule that was not already enabled when formatting started.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-swift-version" class="anchor" aria-hidden="true" href="#swift-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift version&lt;/h2&gt;
&lt;p&gt;Most SwiftFormat rules are version-agnostic, but some are applicable only to newer Swift versions. These rules will be disabled automatically if the Swift version is not specified, so to make sure that the full functionality is available you should specify the version of Swift that is used by your project.&lt;/p&gt;
&lt;p&gt;You can specify the Swift version in one of two ways:&lt;/p&gt;
&lt;p&gt;The preferred option is to add a &lt;code&gt;.swift-version&lt;/code&gt; file to your project directory. This is a text file that should contain the minimum Swift version supported by your project, and is a standard already used by other tools.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.swift-version&lt;/code&gt; file applies hierarchically; If you have submodules in your project that use a different Swift version, you can add separate &lt;code&gt;.swift-version&lt;/code&gt; files to those directories.&lt;/p&gt;
&lt;p&gt;The other option to specify the Swift version using the &lt;code&gt;--swiftversion&lt;/code&gt; command line argument. Note that this will be overridden by any &lt;code&gt;.swift-version&lt;/code&gt; files encountered while processing.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-config-file" class="anchor" aria-hidden="true" href="#config-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Config file&lt;/h2&gt;
&lt;p&gt;Although it is possible to configure SwiftFormat directly by using the command-line &lt;a href="#options"&gt;options&lt;/a&gt; and &lt;a href="#rules"&gt;rules&lt;/a&gt; detailed above, it is sometimes more convenient to create a configuration file, which can be added to your project and shared with other developers.&lt;/p&gt;
&lt;p&gt;A SwiftFormat configuration file consists of one or more command-line options, split onto separate lines, e.g:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--allman true
--indent tabs
--disable elseOnSameLine,semicolons
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While formatting, SwiftFormat will automatically check inside each subdirectory for the presence of a &lt;code&gt;.swiftformat&lt;/code&gt; file and will apply any options that it finds there to the files in that directory.&lt;/p&gt;
&lt;p&gt;This allows you to override certain rules or formatting options just for a particular directory of files. You can also specify excluded files relative to that directory using &lt;code&gt;--exclude&lt;/code&gt;, which may be more convenient than specifying them at the top-level:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--exclude Pods,Generated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;--exclude&lt;/code&gt; option takes a comma-delimited list of file or directory paths to exclude from formatting. Excluded paths are relative to the config file containing the &lt;code&gt;--exclude&lt;/code&gt; command. The excluded paths can include wildcards, specified using Unix "Glob" syntax, as &lt;a href="#globs"&gt;documented below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Config files named ".swiftformat" will be processed automatically, however you can select an additional configuration file to use for formatting using the &lt;code&gt;--config "path/to/config/file"&lt;/code&gt; command-line argument. A configuration file selected using &lt;code&gt;--config&lt;/code&gt; does not need to be named ".swiftformat", and can be located outside of the project directory.&lt;/p&gt;
&lt;p&gt;The config file format is designed to be edited by hand. You may include blank lines for readability, and can also add comments using a hash prefix (#), e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# format options
--allman true
--indent tabs # tabs FTW!

# file options
--exclude Pods

# rules
--disable elseOnSameLine,semicolons
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you would prefer not to edit the configuration file by hand, you can use the &lt;a href="#xcode-source-editor-extension"&gt;SwiftFormat for Xcode&lt;/a&gt; app to edit the configuration and export a configuration file. You can also use the swiftformat command-line-tool's &lt;code&gt;--inferoptions&lt;/code&gt; command to generate a config file from your existing project, like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; /path/to/project
$ swiftformat --inferoptions &lt;span class="pl-c1"&gt;.&lt;/span&gt; --output .swiftformat&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-globs" class="anchor" aria-hidden="true" href="#globs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Globs&lt;/h2&gt;
&lt;p&gt;When excluding files from formatting using the &lt;code&gt;--exclude&lt;/code&gt; option, you may wish to make use of wildcard paths (aka "Globs") to match all files that match a particular naming convention without having to manually list them all.&lt;/p&gt;
&lt;p&gt;SwiftFormat's glob syntax is based on Ruby's implementation, which varies slightly from the Unix standard. The following patterns are supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; - A single star matches zero or more characters in a filename, but &lt;em&gt;not&lt;/em&gt; a &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;**&lt;/code&gt; - A double star will match anything, including one or more &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt; - A question mark will match any single character except &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[abc]&lt;/code&gt; - Matches any single character inside the brackets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[a-z]&lt;/code&gt; - Matches a single character in the specified range in the brackets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;{foo,bar}&lt;/code&gt; - Matches any one of the comma-delimited strings inside the braces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;foo.swift&lt;/code&gt; - Matches the file "foo.swift" in the same directory as the config file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;*.swift&lt;/code&gt; - Matches any swift file in the same directory as the config file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;foo/bar.swift&lt;/code&gt; - Matches the file "bar.swift" in the directory "foo".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;**/foo.swift&lt;/code&gt; - Matches any file named "foo.swift" in the project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;**/*.swift&lt;/code&gt; - Matches any swift file in the project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;**/Generated&lt;/code&gt; - Matches any folder called &lt;code&gt;Generated&lt;/code&gt; in the project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;**/*_generated.swift&lt;/code&gt; - Matches any Swift file with the suffix "_generated" in the project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-linting" class="anchor" aria-hidden="true" href="#linting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linting&lt;/h2&gt;
&lt;p&gt;SwiftFormat is primarily designed as a formatter rather than a linter, i.e. it is designed to fix your code rather than tell you what's wrong with it. However, sometimes it can be useful to verify that code has been formatted in a context where it is not desirable to actually change it.&lt;/p&gt;
&lt;p&gt;A typical example would be as part of a CI (Continuous Integration) process, where you may wish to have an automated script that checks committed code for style violations. While you can use a separate tool such as &lt;a href="https://github.com/realm/SwiftLint"&gt;SwiftLint&lt;/a&gt; for this, it makes sense to be able to validate the formatting against the exact same rules as you are using to apply it.&lt;/p&gt;
&lt;p&gt;In order to run SwiftFormat as a linter, you can use the &lt;code&gt;--lint&lt;/code&gt; command-line option:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ swiftformat --lint path/to/project&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This runs the same rules as format mode, and all the same configuration options apply, however no files will be modified. Instead, SwiftFormat will format each file in memory and then compare the result against the input and report the lines that required changes.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--lint&lt;/code&gt; option is similar to &lt;code&gt;--dryrun&lt;/code&gt;, but &lt;code&gt;--lint&lt;/code&gt; returns warnings for every line that required changes, and will return a nonzero error code if any changes are detected, which is useful if you want it to fail a build step on your CI server.&lt;/p&gt;
&lt;p&gt;If you would prefer &lt;code&gt;--lint&lt;/code&gt; not to fail your build, you can use the &lt;code&gt;--lenient&lt;/code&gt; option to force SwiftFormat to return success in &lt;code&gt;--lint&lt;/code&gt; mode even when formatting issues were detected.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ swiftformat --lint --lenient path/to/project&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, &lt;code&gt;--lint&lt;/code&gt; will only report lines that require formatting, but you can use the additional &lt;code&gt;--verbose&lt;/code&gt; flag to display additional info about which files were checked, even if there were no changes needed.&lt;/p&gt;
&lt;p&gt;If you would prefer not to see a warning for each and every formatting change, you can use the &lt;code&gt;--quiet&lt;/code&gt; flag to suppress all output except errors.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-cache" class="anchor" aria-hidden="true" href="#cache"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cache&lt;/h2&gt;
&lt;p&gt;SwiftFormat uses a cache file to avoid reformatting files that haven't changed. For a large project, this can significantly reduce processing time.&lt;/p&gt;
&lt;p&gt;By default, the cache is stored in &lt;code&gt;~/Library/Caches/com.charcoaldesign.swiftformat&lt;/code&gt; on macOS, or &lt;code&gt;/var/tmp/com.charcoaldesign.swiftformat&lt;/code&gt; on Linux. Use the command-line option &lt;code&gt;--cache ignore&lt;/code&gt; to ignore the cached version and re-apply formatting to all files. Alternatively, you can use &lt;code&gt;--cache clear&lt;/code&gt; to delete the cache (or you can just manually delete the cache file).&lt;/p&gt;
&lt;p&gt;The cache is shared between all projects. The file is fairly small, as it only stores the path and size for each file, not the contents. If you do start experiencing slowdown due to the cache growing too large, you might want to consider using a separate cache file for each project.&lt;/p&gt;
&lt;p&gt;You can specify a custom cache file location by passing a path as the &lt;code&gt;--cache&lt;/code&gt; option value. For example, you might want to store the cache file inside your project directory. It is fine to check in the cache file if you want to share it between different users of your project, as the paths stored in the cache are relative to the location of the formatted files.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-file-headers" class="anchor" aria-hidden="true" href="#file-headers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File headers&lt;/h2&gt;
&lt;p&gt;SwiftFormat can be configured to strip or replace the header comments in every file with a template. The "header comment" is defined as a comment block that begins on the first nonblank line in the file, and is followed by at least one blank line. This may consist of a single comment body, or multiple comments on consecutive lines:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This is a header comment&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This is a regular comment&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;foo&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;bar&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt; { &lt;span class="pl-k"&gt;...&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The header template is a string that you provide using the &lt;code&gt;--header&lt;/code&gt; command-line option. Passing a value of &lt;code&gt;ignore&lt;/code&gt; (the default) will leave the header comments unmodified. Passing &lt;code&gt;strip&lt;/code&gt; or an empty string &lt;code&gt;""&lt;/code&gt; will remove them. If you wish to provide a custom header template, the format is as follows:&lt;/p&gt;
&lt;p&gt;For a single-line template: &lt;code&gt;--header "Copyright (c) 2017 Foobar Industries"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For a multiline comment, mark linebreaks with &lt;code&gt;\n&lt;/code&gt;: &lt;code&gt;--header "First line\nSecond line"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can optionally include Swift comment markup in the template if you wish: &lt;code&gt;--header "/*--- Header comment ---*/"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you do not include comment markup, each line in the template will be prepended with &lt;code&gt;//&lt;/code&gt; and a single space.&lt;/p&gt;
&lt;p&gt;It is common practice to include the file name, creation date and/or the current year in a comment header copyright notice. To do that, you can use the following placeholders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{file}&lt;/code&gt; - the name of the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{year}&lt;/code&gt; - the current year&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{created}&lt;/code&gt; - the date on which the file was created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{created.year}&lt;/code&gt; - the year in which the file was created&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, a header template of:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;--header &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{file}\nCopyright (c) {year} Foobar Industries\nCreated by John Smith on {created}.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will be formatted as:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; SomeFile.swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Copyright (c) 2019 Foobar Industries&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Created by John Smith on 01/02/2016.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the &lt;code&gt;{year}&lt;/code&gt; value and &lt;code&gt;{created}&lt;/code&gt; date format are determined from the current locale and timezone of the machine running the script.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Q. How is this different from SwiftLint?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. SwiftLint is primarily designed to find and report code smells and style violations in your code. SwiftFormat is designed to fix them. While SwiftLint can autocorrect some issues, and SwiftFormat has some support for &lt;a href="#linting"&gt;linting&lt;/a&gt;, their primary functions are different.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Q. Can SwiftFormat and SwiftLint be used together?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. Absolutely! The style rules encouraged by both tools are quite similar, and SwiftFormat even fixes some style violations that SwiftLint warns about but can't currently autocorrect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Q. What platforms does SwiftFormat support?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. SwiftFormat works on macOS 10.12 (Sierra) and above, and also runs on Ubuntu Linux.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Q. What versions of Swift are supported?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. The SwiftFormat framework and command-line tool can be compiled using Swift 4.0 and above, and can format programs written in Swift 3.x, 4.x or 5. Swift 2.x is no longer actively supported. If you are still using Swift 2.x, and find that SwiftFormat breaks your code, the best solution is probably to revert to an earlier SwiftFormat release, or enable only a small subset of rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Q. SwiftFormat made changes I didn't want it to. How can I find out which rules to disable?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. If you run SwiftFormat using the &lt;code&gt;--verbose&lt;/code&gt; option, it will tell you which rules were applied to each file. You can then selectively disable certain rules using the &lt;code&gt;--disable&lt;/code&gt; argument (see below).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Q. How can I modify the formatting rules?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. Many configuration options are exposed in the command-line interface or &lt;code&gt;.swiftformat&lt;/code&gt; configuration file. You can either set these manually, or use the &lt;code&gt;--inferoptions&lt;/code&gt; argument to automatically generate the configuration from your existing project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is a rule that you don't like, and which cannot be configured to your liking via the command-line options, you can disable one or more rules by using the &lt;code&gt;--disable&lt;/code&gt; argument, followed by the name of the rules, separated by commas. You can display a list of all supported rules using the &lt;code&gt;--rules&lt;/code&gt; argument, and their behaviors are documented above this section in the README.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are using the Xcode source editor extension, rules and options can be configured using the &lt;a href="#xcode-source-editor-extension"&gt;SwiftFormat for Xcode&lt;/a&gt; host application. Unfortunately, due to limitation of the Extensions API, there is no way to configure these on a per-project basis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If the options you want aren't exposed, and disabling the rule doesn't solve the problem, the rules are implemented in the file &lt;code&gt;Rules.swift&lt;/code&gt;, so you can modify them and build a new version of the command-line tool. If you think your changes might be generally useful, make a pull request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Q. I don't want to be surprised by new rules added when I upgrade SwiftFormat. How can I prevent this?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. You can use the &lt;code&gt;--rules&lt;/code&gt; argument to specify an exclusive list of rules to run. If new rules are added, they won't be enabled if you have specified a &lt;code&gt;--rules&lt;/code&gt; list in your SwiftFormat configuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Q. Why can't I set the indent width or choose between tabs/spaces in the &lt;a href="#xcode-source-editor-extension"&gt;SwiftFormat for Xcode&lt;/a&gt; options?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Indent width and tabs/spaces can be configured in Xcode on a per project-basis. You'll find the option under "Text Settings" in the right-hand sidebar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Q. After applying SwiftFormat, my code won't compile. Is that a bug?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. SwiftFormat should ideally never break your code. Check the &lt;a href="#known-issues"&gt;known issues&lt;/a&gt;, and if it's not already listed there, or the suggested workaround doesn't solve your problem, please &lt;a href="https://github.com/nicklockwood/SwiftFormat/issues"&gt;open an issue on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Q. Can I use SwiftFormat to lint my code without changing it?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. Yes, see the &lt;a href="#linting"&gt;linting&lt;/a&gt; section above for details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Q. Can I use the &lt;code&gt;SwiftFormat.framework&lt;/code&gt; inside another app?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A. Yes, the SwiftFormat framework can be included in an app or test target, and used for many kinds of parsing and processing of Swift source code besides formatting. The SwiftFormat framework is available as a &lt;a href="https://cocoapods.org/pods/SwiftFormat" rel="nofollow"&gt;CocoaPod&lt;/a&gt; for easy integration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When running a version of SwiftFormat built using Xcode 10.2 on macOS 10.14.3 or earlier, you may experience a crash with the error "dyld: Library not loaded: @rpath/libswiftCore.dylib". To fix this, you need to install the &lt;a href="https://support.apple.com/kb/DL1998" rel="nofollow"&gt;Swift 5 Runtime Support for Command Line Tools&lt;/a&gt;. These tools are included by default in macOS 10.14.4 and later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When using the &lt;code&gt;--self remove&lt;/code&gt; option, the &lt;code&gt;redundantSelf&lt;/code&gt; rule will remove references to &lt;code&gt;self&lt;/code&gt; in autoclosure arguments, which may change the meaning of the code, or cause it not to compile. To work around this issue, use the &lt;code&gt;--selfrequired&lt;/code&gt; option to provide a comma-delimited list of methods to be excluded from the rule. The &lt;code&gt;expect()&lt;/code&gt; function from the popular &lt;a href="https://github.com/Quick/Nimble"&gt;Nimble&lt;/a&gt; unit testing framework is already excluded by default. If you are using the &lt;code&gt;--self insert&lt;/code&gt; option then this is not an issue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you assign &lt;code&gt;SomeClass.self&lt;/code&gt; to a variable and then instantiate an instance of the class using that variable, Swift requires that you use an explicit &lt;code&gt;.init()&lt;/code&gt;, however the   &lt;code&gt;redundantInit&lt;/code&gt; rule is not currently capable of detecting this situation and will remove the &lt;code&gt;.init&lt;/code&gt;. To work around this issue, use the &lt;code&gt;// swiftformat:disable:next redundantInit&lt;/code&gt; comment directive to disable the rule for any affected lines of code (or just disable the &lt;code&gt;redundantInit&lt;/code&gt; rule completely).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;--self insert&lt;/code&gt; option can only recognize locally declared member variables, not ones inherited from superclasses or extensions in other files, so it cannot insert missing &lt;code&gt;self&lt;/code&gt; references for those. Note that the reverse is not true: &lt;code&gt;--self remove&lt;/code&gt; should remove &lt;em&gt;all&lt;/em&gt; redundant &lt;code&gt;self&lt;/code&gt; references.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;trailingClosures&lt;/code&gt; rule can generate ambiguous code if a function has multiple optional closure arguments, or if multiple functions have signatures differing only by the name of the closure argument. For this reason, the rule is limited to anonymous closure arguments by default, with a whitelist for exceptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;isEmpty&lt;/code&gt; rule will convert &lt;code&gt;count == 0&lt;/code&gt; to &lt;code&gt;isEmpty&lt;/code&gt; even for types that do not have an &lt;code&gt;isEmpty&lt;/code&gt; method, such as &lt;code&gt;NSArray&lt;/code&gt;/&lt;code&gt;NSDictionary&lt;/code&gt;/etc. Use of Foundation collections in Swift code is pretty rare, but just in case, the rule is disabled by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a file begins with a comment, the &lt;code&gt;stripHeaders&lt;/code&gt; rule will remove it if it is followed by a blank line. To avoid this, make sure that the first comment is directly followed by a line of code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The formatted file cache is based on a hash of the file contents, so it's possible (though unlikely) that an edited file will have the exact same hash as the previously formatted version, causing SwiftFormat to incorrectly identify it as not having changed, and fail to update it.&lt;/p&gt;
&lt;p&gt;To fix this, you can use the command-line option &lt;code&gt;--cache ignore&lt;/code&gt; to force SwiftFormat to ignore the cache for this run, or just type an extra space in the file (which SwiftFormat will then remove again when it applies the correct formatting).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When running on Linux, the &lt;code&gt;--symlinks&lt;/code&gt; option has no effect, and some of the &lt;code&gt;fileHeader&lt;/code&gt; placeholders are not supported.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tonyarnold"&gt;Tony Arnold&lt;/a&gt; - Xcode source editor extension&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vinceburn"&gt;Vincent Bernier&lt;/a&gt; - Xcode extension settings UI&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bourvill"&gt;Maxime Marinel&lt;/a&gt; - Git pre-commit hook script&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/palleas"&gt;Romain Pouclet&lt;/a&gt; - Homebrew formula&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aerobounce"&gt;Aerobounce&lt;/a&gt; - Homebrew cask for source editor extension&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aliak00"&gt;Ali Akhtarzada&lt;/a&gt; - Several path-related CLI enhancements&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yonaskolb"&gt;Yonas Kolb&lt;/a&gt; - Swift Package Manager integration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Lutzifer"&gt;Wolfgang Lutz&lt;/a&gt; - AppleScript integration instructions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/balitm"&gt;Balázs Kilvády&lt;/a&gt; - Xcode lint warning integration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nicklockwood"&gt;Nick Lockwood&lt;/a&gt; - Everything else&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;a href="https://github.com/nicklockwood/SwiftFormat/graphs/contributors"&gt;Full list of contributors&lt;/a&gt;)&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>nicklockwood</author><guid isPermaLink="false">https://github.com/nicklockwood/SwiftFormat</guid><pubDate>Sun, 05 Jan 2020 00:13:00 GMT</pubDate></item><item><title>Quick/Nimble #14 in Swift, Today</title><link>https://github.com/Quick/Nimble</link><description>&lt;p&gt;&lt;i&gt;A Matcher Framework for Swift and Objective-C&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-nimble" class="anchor" aria-hidden="true" href="#nimble"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nimble&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/Quick/Nimble" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/33e652a42c0be3c96797217d05c7b5e5f33a38ef/68747470733a2f2f7472617669732d63692e6f72672f517569636b2f4e696d626c652e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Quick/Nimble.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/Nimble" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4d38b35e502bc6c1a59fc266bb6ce52291237514/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f4e696d626c652e737667" alt="CocoaPods" data-canonical-src="https://img.shields.io/cocoapods/v/Nimble.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage Compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/JamitLabs/Accio"&gt;&lt;img src="https://camo.githubusercontent.com/e502cdc2b27c1f2b2590f061d37b984ba3957c26/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f416363696f2d737570706f727465642d3041374346352e7376673f7374796c653d666c6174" alt="Accio supported" data-canonical-src="https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/Nimble" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/260d11f464288550b03bddaaa292b713804a9ce1/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f4e696d626c652e737667" alt="Platforms" data-canonical-src="https://img.shields.io/cocoapods/p/Nimble.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://houndci.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1c940d021ef775a44e0880bc3ba124a6bee5fefb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657669657765645f62792d486f756e642d3845363442302e737667" alt="Reviewed by Hound" data-canonical-src="https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use Nimble to express the expected outcomes of Swift
or Objective-C expressions. Inspired by
&lt;a href="https://github.com/pivotal/cedar"&gt;Cedar&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1.2&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beCloseTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;1.1&lt;/span&gt;, &lt;span class="pl-c1"&gt;within&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;seahorse&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Atlantic&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Pacific&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Mississippi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(ocean.&lt;span class="pl-smi"&gt;isClean&lt;/span&gt;).&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTruthy&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-how-to-use-nimble" class="anchor" aria-hidden="true" href="#how-to-use-nimble"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to Use Nimble&lt;/h1&gt;


&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a href="https://github.com/thlorenz/doctoc"&gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#some-background-expressing-outcomes-using-assertions-in-xctest"&gt;Some Background: Expressing Outcomes Using Assertions in XCTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nimble-expectations-using-expectto"&gt;Nimble: Expectations Using &lt;code&gt;expect(...).to&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#custom-failure-messages"&gt;Custom Failure Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#type-safety"&gt;Type Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operator-overloads"&gt;Operator Overloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lazily-computed-values"&gt;Lazily Computed Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#c-primitives"&gt;C Primitives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asynchronous-expectations"&gt;Asynchronous Expectations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#objective-c-support"&gt;Objective-C Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#disabling-objective-c-shorthand"&gt;Disabling Objective-C Shorthand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#built-in-matcher-functions"&gt;Built-in Matcher Functions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#type-checking"&gt;Type Checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#equivalence"&gt;Equivalence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#identity"&gt;Identity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparisons"&gt;Comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#typesclasses"&gt;Types/Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#truthiness"&gt;Truthiness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swift-assertions"&gt;Swift Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swift-error-handling"&gt;Swift Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exceptions"&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collection-membership"&gt;Collection Membership&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strings"&gt;Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collection-elements"&gt;Collection Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collection-count"&gt;Collection Count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notifications"&gt;Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-a-value-to-any-of-a-group-of-matchers"&gt;Matching a value to any of a group of matchers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-validation"&gt;Custom Validation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-your-own-matchers"&gt;Writing Your Own Matchers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#predicateresult"&gt;PredicateResult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lazy-evaluation"&gt;Lazy Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#type-checking-via-swift-generics"&gt;Type Checking via Swift Generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customizing-failure-messages"&gt;Customizing Failure Messages&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#basic-customization"&gt;Basic Customization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-customization"&gt;Full Customization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#supporting-objective-c"&gt;Supporting Objective-C&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#properly-handling-nil-in-objective-c-matchers"&gt;Properly Handling &lt;code&gt;nil&lt;/code&gt; in Objective-C Matchers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrating-from-the-old-matcher-api"&gt;Migrating from the Old Matcher API&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#minimal-step---use-predicate"&gt;Minimal Step - Use &lt;code&gt;.predicate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#convert-to-use-predicate-type-with-old-matcher-constructor"&gt;Convert to use &lt;code&gt;Predicate&lt;/code&gt; Type with Old Matcher Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#convert-to-predicate-type-with-preferred-constructor"&gt;Convert to &lt;code&gt;Predicate&lt;/code&gt; Type with Preferred Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deprecation-roadmap"&gt;Deprecation Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-nimble"&gt;Installing Nimble&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-nimble-as-a-submodule"&gt;Installing Nimble as a Submodule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-nimble-via-cocoapods"&gt;Installing Nimble via CocoaPods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-nimble-via-accio"&gt;Installing Nimble via Accio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-nimble-without-xctest"&gt;Using Nimble without XCTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a id="user-content-some-background-expressing-outcomes-using-assertions-in-xctest" class="anchor" aria-hidden="true" href="#some-background-expressing-outcomes-using-assertions-in-xctest"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Some Background: Expressing Outcomes Using Assertions in XCTest&lt;/h1&gt;
&lt;p&gt;Apple's Xcode includes the XCTest framework, which provides
assertion macros to test whether code behaves properly.
For example, to assert that &lt;code&gt;1 + 1 = 2&lt;/code&gt;, XCTest has you write:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;XCTAssertEqual&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;expected one plus one to equal two&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, in Objective-C:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;XCTAssertEqual&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; + &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;expected one plus one to equal two&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;XCTest assertions have a couple of drawbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Not enough macros.&lt;/strong&gt; There's no easy way to assert that a string
contains a particular substring, or that a number is less than or
equal to another.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It's hard to write asynchronous tests.&lt;/strong&gt; XCTest forces you to write
a lot of boilerplate code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nimble addresses these concerns.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-nimble-expectations-using-expectto" class="anchor" aria-hidden="true" href="#nimble-expectations-using-expectto"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nimble: Expectations Using &lt;code&gt;expect(...).to&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Nimble allows you to express expectations using a natural,
easily understood language:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Nimble&lt;/span&gt;

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Squee!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(seagull.squawk).to(equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Squee!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;expect&lt;/code&gt; function autocompletes to include &lt;code&gt;file:&lt;/code&gt; and &lt;code&gt;line:&lt;/code&gt;,
but these parameters are optional. Use the default values to have
Xcode highlight the correct line when an expectation is not met.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To perform the opposite expectation--to assert something is &lt;em&gt;not&lt;/em&gt;
equal--use &lt;code&gt;toNot&lt;/code&gt; or &lt;code&gt;notTo&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Nimble&lt;/span&gt;

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Oh, hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;).&lt;span class="pl-c1"&gt;notTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Oh, hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(seagull.squawk).toNot(equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Oh, hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(seagull.squawk).notTo(equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Oh, hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-custom-failure-messages" class="anchor" aria-hidden="true" href="#custom-failure-messages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Failure Messages&lt;/h2&gt;
&lt;p&gt;Would you like to add more information to the test's failure messages? Use the &lt;code&gt;description&lt;/code&gt; optional argument to add your own text:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;))
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; failed - expected to equal &amp;lt;3&amp;gt;, got &amp;lt;2&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;), &lt;span class="pl-c1"&gt;description&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Make sure libKindergartenMath is loaded&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; failed - Make sure libKindergartenMath is loaded&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; expected to equal &amp;lt;3&amp;gt;, got &amp;lt;2&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or the *WithDescription version in Objective-C:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;1&lt;/span&gt;+&lt;span class="pl-c1"&gt;1&lt;/span&gt;)).to(equal(@&lt;span class="pl-c1"&gt;3&lt;/span&gt;));
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; failed - expected to equal &amp;lt;3.0000&amp;gt;, got &amp;lt;2.0000&amp;gt;&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;1&lt;/span&gt;+&lt;span class="pl-c1"&gt;1&lt;/span&gt;)).toWithDescription(equal(@&lt;span class="pl-c1"&gt;3&lt;/span&gt;), @"Make sure libKindergartenMath is loaded");
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; failed - Make sure libKindergartenMath is loaded&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; expected to equal &amp;lt;3.0000&amp;gt;, got &amp;lt;2.0000&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-type-safety" class="anchor" aria-hidden="true" href="#type-safety"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type Safety&lt;/h2&gt;
&lt;p&gt;Nimble makes sure you don't compare two types that don't match:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Does not compile:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Squee!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Nimble uses generics--only available in Swift--to ensure
type correctness. That means type checking is
not available when using Nimble in Objective-C. &lt;g-emoji class="g-emoji" alias="sob" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png"&gt;😭&lt;/g-emoji&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-operator-overloads" class="anchor" aria-hidden="true" href="#operator-overloads"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operator Overloads&lt;/h2&gt;
&lt;p&gt;Tired of so much typing? With Nimble, you can use overloaded operators
like &lt;code&gt;==&lt;/code&gt; for equivalence, or &lt;code&gt;&amp;gt;&lt;/code&gt; for comparisons:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if squawk does not equal "Hi!":&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;) &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 10 is greater than 2:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Operator overloads are only available in Swift, so you won't be able
to use this syntax in Objective-C. &lt;g-emoji class="g-emoji" alias="broken_heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png"&gt;💔&lt;/g-emoji&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-lazily-computed-values" class="anchor" aria-hidden="true" href="#lazily-computed-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lazily Computed Values&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;expect&lt;/code&gt; function doesn't evaluate the value it's given until it's
time to match. So Nimble can test whether an expression raises an
exception once evaluated:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Note: Swift currently doesn't have exceptions.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;       Only Objective-C code can raise exceptions&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;       that Nimble will catch.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;       (see https://github.com/Quick/Nimble/issues/220#issuecomment-172667064)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; exception &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSException&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;name&lt;/span&gt;: NSInternalInconsistencyException,
    &lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;userInfo&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;something&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;is fishy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Also, you can customize raiseException to be more specific&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: NSInternalInconsistencyException))
expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;named&lt;/span&gt;: NSInternalInconsistencyException,
    &lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;named&lt;/span&gt;: NSInternalInconsistencyException,
    &lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;userInfo&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;something&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;is fishy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Objective-C works the same way, but you must use the &lt;code&gt;expectAction&lt;/code&gt;
macro when making an expectation on an expression that has no return
value:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c1"&gt;NSException&lt;/span&gt; *exception = [&lt;span class="pl-c1"&gt;NSException&lt;/span&gt; &lt;span class="pl-c1"&gt;exceptionWithName:&lt;/span&gt;&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;
                                                 &lt;span class="pl-c1"&gt;reason:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Not enough fish in the sea.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                                               &lt;span class="pl-c1"&gt;userInfo:&lt;/span&gt;&lt;span class="pl-c1"&gt;nil&lt;/span&gt;];
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Use the property-block syntax to be more specific.&lt;/span&gt;
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException().named(&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;));
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException().
    named(&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;).
    reason(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException().
    named(&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;).
    reason(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not enough fish in the sea&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).
    userInfo(@{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;something&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;is fishy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; You can also pass a block for custom matching of the raised exception&lt;/span&gt;
&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(exception.raise()).to(raiseException().satisfyingBlock(^(&lt;span class="pl-c1"&gt;NSException&lt;/span&gt; *exception) {
    &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(exception.&lt;span class="pl-smi"&gt;name&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(&lt;span class="pl-c1"&gt;NSInternalInconsistencyException&lt;/span&gt;));
}));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-c-primitives" class="anchor" aria-hidden="true" href="#c-primitives"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C Primitives&lt;/h2&gt;
&lt;p&gt;Some testing frameworks make it hard to test primitive C values.
In Nimble, it just works:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; actual&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;CInt&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; expectedValue&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;CInt&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(expectedValue))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In fact, Nimble uses type inference, so you can write the above
without explicitly specifying both types:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;CInt&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;In Objective-C, Nimble only supports Objective-C objects. To
make expectations on primitive C values, wrap then in an object
literal:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;1&lt;/span&gt; + &lt;span class="pl-c1"&gt;1&lt;/span&gt;)).to(equal(@&lt;span class="pl-c1"&gt;2&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-asynchronous-expectations" class="anchor" aria-hidden="true" href="#asynchronous-expectations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Asynchronous Expectations&lt;/h2&gt;
&lt;p&gt;In Nimble, it's easy to make expectations on values that are updated
asynchronously. Just use &lt;code&gt;toEventually&lt;/code&gt; or &lt;code&gt;toEventuallyNot&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;DispatchQueue.&lt;span class="pl-smi"&gt;main&lt;/span&gt;.&lt;span class="pl-smi"&gt;async&lt;/span&gt; {
    ocean.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dolphins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    ocean.&lt;span class="pl-c1"&gt;add&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;whales&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(ocean).&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dolphins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;whales&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^{
    [ocean &lt;span class="pl-c1"&gt;add:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;];
    [ocean &lt;span class="pl-c1"&gt;add:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;whales&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;];
});
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(ocean).toEventually(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphins&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;whales&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: toEventually triggers its polls on the main thread. Blocking the main
thread will cause Nimble to stop the run loop. This can cause test pollution
for whatever incomplete code that was running on the main thread.  Blocking the
main thread can be caused by blocking IO, calls to sleep(), deadlocks, and
synchronous IPC.&lt;/p&gt;
&lt;p&gt;In the above example, &lt;code&gt;ocean&lt;/code&gt; is constantly re-evaluated. If it ever
contains dolphins and whales, the expectation passes. If &lt;code&gt;ocean&lt;/code&gt; still
doesn't contain them, even after being continuously re-evaluated for one
whole second, the expectation fails.&lt;/p&gt;
&lt;p&gt;Sometimes it takes more than a second for a value to update. In those
cases, use the &lt;code&gt;timeout&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Waits three seconds for ocean to contain "starfish":&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(ocean).&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;timeout&lt;/span&gt;: &lt;span class="pl-c1"&gt;3&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Evaluate someValue every 0.2 seconds repeatedly until it equals 100, or fails if it timeouts after 5.5 seconds.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(someValue).&lt;span class="pl-c1"&gt;toEventually&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;100&lt;/span&gt;), &lt;span class="pl-c1"&gt;timeout&lt;/span&gt;: &lt;span class="pl-c1"&gt;5.5&lt;/span&gt;, &lt;span class="pl-c1"&gt;pollInterval&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.2&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Waits three seconds for ocean to contain "starfish":&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(ocean).withTimeout(&lt;span class="pl-c1"&gt;3&lt;/span&gt;).toEventually(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also provide a callback by using the &lt;code&gt;waitUntil&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
waitUntil { done &lt;span class="pl-k"&gt;in&lt;/span&gt;
    ocean.&lt;span class="pl-smi"&gt;goFish&lt;/span&gt; { success &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(success).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;())
        &lt;span class="pl-c1"&gt;done&lt;/span&gt;()
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;waitUntil&lt;/span&gt;(^(&lt;span class="pl-k"&gt;void&lt;/span&gt; (^done)(&lt;span class="pl-k"&gt;void&lt;/span&gt;)){
    [ocean &lt;span class="pl-c1"&gt;goFishWithHandler:&lt;/span&gt;^(&lt;span class="pl-c1"&gt;BOOL&lt;/span&gt; success){
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(success).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;());
        &lt;span class="pl-c1"&gt;done&lt;/span&gt;();
    }];
});&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;waitUntil&lt;/code&gt; also optionally takes a timeout parameter:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;waitUntil&lt;/span&gt;(&lt;span class="pl-c1"&gt;timeout&lt;/span&gt;: &lt;span class="pl-c1"&gt;10&lt;/span&gt;) { done &lt;span class="pl-k"&gt;in&lt;/span&gt;
    ocean.&lt;span class="pl-smi"&gt;goFish&lt;/span&gt; { success &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(success).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;())
        &lt;span class="pl-c1"&gt;done&lt;/span&gt;()
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;waitUntilTimeout&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;, ^(&lt;span class="pl-k"&gt;void&lt;/span&gt; (^done)(&lt;span class="pl-k"&gt;void&lt;/span&gt;)){
    [ocean &lt;span class="pl-c1"&gt;goFishWithHandler:&lt;/span&gt;^(&lt;span class="pl-c1"&gt;BOOL&lt;/span&gt; success){
        &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(success).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;());
        &lt;span class="pl-c1"&gt;done&lt;/span&gt;();
    }];
});&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: &lt;code&gt;waitUntil&lt;/code&gt; triggers its timeout code on the main thread. Blocking the main
thread will cause Nimble to stop the run loop to continue. This can cause test
pollution for whatever incomplete code that was running on the main thread.
Blocking the main thread can be caused by blocking IO, calls to sleep(),
deadlocks, and synchronous IPC.&lt;/p&gt;
&lt;p&gt;In some cases (e.g. when running on slower machines) it can be useful to modify
the default timeout and poll interval values. This can be done as follows:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Increase the global timeout to 5 seconds:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Nimble.&lt;span class="pl-smi"&gt;AsyncDefaults&lt;/span&gt;.&lt;span class="pl-smi"&gt;Timeout&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Slow the polling interval to 0.1 seconds:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;Nimble.&lt;span class="pl-smi"&gt;AsyncDefaults&lt;/span&gt;.&lt;span class="pl-smi"&gt;PollInterval&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-objective-c-support" class="anchor" aria-hidden="true" href="#objective-c-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Objective-C Support&lt;/h2&gt;
&lt;p&gt;Nimble has full support for Objective-C. However, there are two things
to keep in mind when using Nimble in Objective-C:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All parameters passed to the &lt;code&gt;expect&lt;/code&gt; function, as well as matcher
functions like &lt;code&gt;equal&lt;/code&gt;, must be Objective-C objects or can be converted into
an &lt;code&gt;NSObject&lt;/code&gt; equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;1&lt;/span&gt; + &lt;span class="pl-c1"&gt;1&lt;/span&gt;)).to(equal(@&lt;span class="pl-c1"&gt;2&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).to(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Boxed as NSNumber *&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;).to(equal(&lt;span class="pl-c1"&gt;2&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1.2&lt;/span&gt;).to(beLessThan(&lt;span class="pl-c1"&gt;2.0&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;true&lt;/span&gt;).to(beTruthy());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Boxed as NSString *&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).to(equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Boxed as NSRange&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;NSMakeRange&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;10&lt;/span&gt;)).to(equal(&lt;span class="pl-c1"&gt;NSMakeRange&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;10&lt;/span&gt;)));&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To make an expectation on an expression that does not return a value,
such as &lt;code&gt;-[NSException raise]&lt;/code&gt;, use &lt;code&gt;expectAction&lt;/code&gt; instead of
&lt;code&gt;expect&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expectAction&lt;/span&gt;(^{ [exception &lt;span class="pl-c1"&gt;raise&lt;/span&gt;]; }).to(raiseException());&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following types are currently converted to an &lt;code&gt;NSObject&lt;/code&gt; type:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C Numeric types&lt;/strong&gt; are converted to &lt;code&gt;NSNumber *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSRange&lt;/code&gt; is converted to &lt;code&gt;NSValue *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char *&lt;/code&gt; is converted to &lt;code&gt;NSString *&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the following matchers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beGreaterThan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beGreaterThanOrEqual&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beLessThan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beLessThanOrEqual&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beCloseTo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beTrue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beFalse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beTruthy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beFalsy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;haveCount&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you would like to see more, &lt;a href="https://github.com/Quick/Nimble/issues"&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-disabling-objective-c-shorthand" class="anchor" aria-hidden="true" href="#disabling-objective-c-shorthand"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disabling Objective-C Shorthand&lt;/h2&gt;
&lt;p&gt;Nimble provides a shorthand for expressing expectations using the
&lt;code&gt;expect&lt;/code&gt; function. To disable this shorthand in Objective-C, define the
&lt;code&gt;NIMBLE_DISABLE_SHORT_SYNTAX&lt;/code&gt; macro somewhere in your code before
importing Nimble:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;#&lt;span class="pl-k"&gt;define&lt;/span&gt; &lt;span class="pl-en"&gt;NIMBLE_DISABLE_SHORT_SYNTAX&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;

@import Nimble;

&lt;span class="pl-en"&gt;NMB_expect&lt;/span&gt;(^{ &lt;span class="pl-k"&gt;return&lt;/span&gt; seagull.&lt;span class="pl-smi"&gt;squawk&lt;/span&gt;; }, __FILE__, __LINE__).to(NMB_equal(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;Squee!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Disabling the shorthand is useful if you're testing functions with
names that conflict with Nimble functions, such as &lt;code&gt;expect&lt;/code&gt; or
&lt;code&gt;equal&lt;/code&gt;. If that's not the case, there's no point in disabling the
shorthand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a id="user-content-built-in-matcher-functions" class="anchor" aria-hidden="true" href="#built-in-matcher-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Built-in Matcher Functions&lt;/h1&gt;
&lt;p&gt;Nimble includes a wide variety of matcher functions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-type-checking" class="anchor" aria-hidden="true" href="#type-checking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type Checking&lt;/h2&gt;
&lt;p&gt;Nimble supports checking the type membership of any kind of object, whether
Objective-C conformant or not:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;SomeProtocol&lt;/span&gt;{}
&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SomeClassConformingToProtocol&lt;/span&gt;: &lt;span class="pl-e"&gt;SomeProtocol&lt;/span&gt;{}
&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;SomeStructConformingToProtocol&lt;/span&gt;: &lt;span class="pl-e"&gt;SomeProtocol&lt;/span&gt;{}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The following tests pass&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;turtle&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-k"&gt;let&lt;/span&gt; classObject &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SomeClassConformingToProtocol&lt;/span&gt;()
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeClassConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeStructConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-k"&gt;let&lt;/span&gt; structObject &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SomeStructConformingToProtocol&lt;/span&gt;()
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeStructConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(SomeClassConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The following tests pass&lt;/span&gt;
&lt;span class="pl-c1"&gt;NSMutableArray&lt;/span&gt; *array = [&lt;span class="pl-c1"&gt;NSMutableArray&lt;/span&gt; &lt;span class="pl-c1"&gt;array&lt;/span&gt;];
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(array).to(beAKindOf([&lt;span class="pl-c1"&gt;NSArray&lt;/span&gt; &lt;span class="pl-c1"&gt;class&lt;/span&gt;]));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@&lt;span class="pl-c1"&gt;1&lt;/span&gt;).toNot(beAKindOf([&lt;span class="pl-c1"&gt;NSNull&lt;/span&gt; &lt;span class="pl-c1"&gt;class&lt;/span&gt;]));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Objects can be tested for their exact types using the &lt;code&gt;beAnInstanceOf&lt;/code&gt; matcher:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;protocol&lt;/span&gt; &lt;span class="pl-en"&gt;SomeProtocol&lt;/span&gt;{}
&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;SomeClassConformingToProtocol&lt;/span&gt;: &lt;span class="pl-e"&gt;SomeProtocol&lt;/span&gt;{}
&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;SomeStructConformingToProtocol&lt;/span&gt;: &lt;span class="pl-e"&gt;SomeProtocol&lt;/span&gt;{}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Unlike the 'beKindOf' matcher, the 'beAnInstanceOf' matcher only&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if the object is the EXACT type requested. The following&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; tests pass -- note its behavior when working in an inheritance hierarchy.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;Int&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;turtle&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;String&lt;/span&gt;.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-k"&gt;let&lt;/span&gt; classObject &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SomeClassConformingToProtocol&lt;/span&gt;()
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeClassConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(classObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeStructConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-k"&gt;let&lt;/span&gt; structObject &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SomeStructConformingToProtocol&lt;/span&gt;()
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeStructConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(structObject).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(SomeClassConformingToProtocol.&lt;span class="pl-k"&gt;self&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-equivalence" class="anchor" aria-hidden="true" href="#equivalence"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Equivalence&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is equivalent to 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;==&lt;/span&gt; expected

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is not equivalent to 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;!=&lt;/span&gt; expected&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is equivalent to 'expected':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(equal(expected))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is not equivalent to 'expected':&lt;/span&gt;
expect(actual).toNot(equal(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Values must be &lt;code&gt;Equatable&lt;/code&gt;, &lt;code&gt;Comparable&lt;/code&gt;, or subclasses of &lt;code&gt;NSObject&lt;/code&gt;.
&lt;code&gt;equal&lt;/code&gt; will always fail when used to compare one or more &lt;code&gt;nil&lt;/code&gt; values.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-identity" class="anchor" aria-hidden="true" href="#identity"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Identity&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' has the same pointer address as 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beIdenticalTo&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;===&lt;/span&gt; expected

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' does not have the same pointer address as 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;beIdenticalTo&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;!==&lt;/span&gt; expected&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is important to remember that &lt;code&gt;beIdenticalTo&lt;/code&gt; only makes sense when comparing
types with reference semantics, which have a notion of identity. In Swift,
that means types that are defined as a &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This matcher will not work when comparing types with value semantics such as
those defined as a &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt;. If you need to compare two value types,
consider what it means for instances of your type to be identical. This may mean
comparing individual properties or, if it makes sense to do so, conforming your type
to &lt;code&gt;Equatable&lt;/code&gt; and using Nimble's equivalence matchers instead.&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' has the same pointer address as 'expected':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beIdenticalTo(expected));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' does not have the same pointer address as 'expected':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).toNot(beIdenticalTo(expected));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-comparisons" class="anchor" aria-hidden="true" href="#comparisons"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comparisons&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThan&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; expected

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThanOrEqualTo&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; expected

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beGreaterThan&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; expected

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beGreaterThanOrEqualTo&lt;/span&gt;(expected))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; expected&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beLessThan(expected));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beLessThanOrEqualTo(expected));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beGreaterThan(expected));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beGreaterThanOrEqualTo(expected));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Values given to the comparison matchers above must implement
&lt;code&gt;Comparable&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because of how computers represent floating point numbers, assertions
that two floating point numbers be equal will sometimes fail. To express
that two numbers should be close to one another within a certain margin
of error, use &lt;code&gt;beCloseTo&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beCloseTo&lt;/span&gt;(expected, &lt;span class="pl-c1"&gt;within&lt;/span&gt;: delta))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beCloseTo(expected).within(delta));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, to assert that &lt;code&gt;10.01&lt;/code&gt; is close to &lt;code&gt;10&lt;/code&gt;, you can write:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;10.01&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beCloseTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;, &lt;span class="pl-c1"&gt;within&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@(&lt;span class="pl-c1"&gt;10.01&lt;/span&gt;)).to(beCloseTo(@&lt;span class="pl-c1"&gt;10&lt;/span&gt;).within(&lt;span class="pl-c1"&gt;0.1&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is also an operator shortcut available in Swift:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;≈&lt;/span&gt; expected
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;≈&lt;/span&gt; (expected, delta)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Type &lt;kbd&gt;option&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; to get &lt;code&gt;≈&lt;/code&gt; on a U.S. keyboard)&lt;/p&gt;
&lt;p&gt;The former version uses the default delta of 0.0001. Here is yet another way to do this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;≈&lt;/span&gt; expected &lt;span class="pl-k"&gt;±&lt;/span&gt; delta
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual) &lt;span class="pl-k"&gt;==&lt;/span&gt; expected &lt;span class="pl-k"&gt;±&lt;/span&gt; delta
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Type &lt;kbd&gt;option&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;=&lt;/kbd&gt; to get &lt;code&gt;±&lt;/code&gt; on a U.S. keyboard)&lt;/p&gt;
&lt;p&gt;If you are comparing arrays of floating point numbers, you'll find the following useful:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-c1"&gt;0.0&lt;/span&gt;, &lt;span class="pl-c1"&gt;2.0&lt;/span&gt;]) &lt;span class="pl-k"&gt;≈&lt;/span&gt; [&lt;span class="pl-c1"&gt;0.0001&lt;/span&gt;, &lt;span class="pl-c1"&gt;2.0001&lt;/span&gt;]
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-c1"&gt;0.0&lt;/span&gt;, &lt;span class="pl-c1"&gt;2.0&lt;/span&gt;]).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beCloseTo&lt;/span&gt;([&lt;span class="pl-c1"&gt;0.1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2.1&lt;/span&gt;], &lt;span class="pl-c1"&gt;within&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.1&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Values given to the &lt;code&gt;beCloseTo&lt;/code&gt; matcher must be coercable into a
&lt;code&gt;Double&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-typesclasses" class="anchor" aria-hidden="true" href="#typesclasses"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Types/Classes&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'instance' is an instance of 'aClass':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(instance).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAnInstanceOf&lt;/span&gt;(aClass))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'instance' is an instance of 'aClass' or any of its subclasses:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(instance).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(aClass))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'instance' is an instance of 'aClass':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(instance).to(beAnInstanceOf(aClass));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'instance' is an instance of 'aClass' or any of its subclasses:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(instance).to(beAKindOf(aClass));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Instances must be Objective-C objects: subclasses of &lt;code&gt;NSObject&lt;/code&gt;,
or Swift objects bridged to Objective-C with the &lt;code&gt;@objc&lt;/code&gt; prefix.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, to assert that &lt;code&gt;dolphin&lt;/code&gt; is a kind of &lt;code&gt;Mammal&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(dolphin).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beAKindOf&lt;/span&gt;(Mammal))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(dolphin).to(beAKindOf([Mammal &lt;span class="pl-c1"&gt;class&lt;/span&gt;]));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;beAnInstanceOf&lt;/code&gt; uses the &lt;code&gt;-[NSObject isMemberOfClass:]&lt;/code&gt; method to
test membership. &lt;code&gt;beAKindOf&lt;/code&gt; uses &lt;code&gt;-[NSObject isKindOfClass:]&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-truthiness" class="anchor" aria-hidden="true" href="#truthiness"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Truthiness&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is not nil, true, or an object with a boolean value of true:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTruthy&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is only true (not nil or an object conforming to Boolean true):&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beTrue&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is nil, false, or an object with a boolean value of false:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beFalsy&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is only false (not nil or an object conforming to Boolean false):&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beFalse&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is nil:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beNil&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is not nil, true, or an object with a boolean value of true:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beTruthy());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is only true (not nil or an object conforming to Boolean true):&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beTrue());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is nil, false, or an object with a boolean value of false:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beFalsy());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is only false (not nil or an object conforming to Boolean false):&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beFalse());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is nil:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beNil());&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-swift-assertions" class="anchor" aria-hidden="true" href="#swift-assertions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Assertions&lt;/h2&gt;
&lt;p&gt;If you're using Swift, you can use the &lt;code&gt;throwAssertion&lt;/code&gt; matcher to check if an assertion is thrown (e.g. &lt;code&gt;fatalError()&lt;/code&gt;). This is made possible by &lt;a href="https://github.com/mattgallagher"&gt;@mattgallagher&lt;/a&gt;'s &lt;a href="https://github.com/mattgallagher/CwlPreconditionTesting"&gt;CwlPreconditionTesting&lt;/a&gt; library.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws an assertion, &lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; such as by calling 'fatalError()' or if a precondition fails:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())
expect { () &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Void&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;fatalError&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())
expect { &lt;span class="pl-c1"&gt;precondition&lt;/span&gt;(&lt;span class="pl-c1"&gt;false&lt;/span&gt;) }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if throwing an NSError is not equal to throwing an assertion:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;throw&lt;/span&gt; &lt;span class="pl-c1"&gt;NSError&lt;/span&gt;(&lt;span class="pl-c1"&gt;domain&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;code&lt;/span&gt;: &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;userInfo&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) }.&lt;span class="pl-c1"&gt;toNot&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the code after the precondition check is not run:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; reachedPoint1 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; reachedPoint2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
expect {
    reachedPoint1 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
    &lt;span class="pl-c1"&gt;precondition&lt;/span&gt;(&lt;span class="pl-c1"&gt;false&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;condition message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    reachedPoint2 &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
}.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwAssertion&lt;/span&gt;())

&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(reachedPoint1) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(reachedPoint2) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This feature is only available in Swift.&lt;/li&gt;
&lt;li&gt;It is only supported for &lt;code&gt;x86_64&lt;/code&gt; binaries, meaning &lt;em&gt;you cannot run this matcher on iOS devices, only simulators&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The tvOS simulator is supported, but using a different mechanism, requiring you to turn off the &lt;code&gt;Debug executable&lt;/code&gt; scheme setting for your tvOS scheme's Test configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-swift-error-handling" class="anchor" aria-hidden="true" href="#swift-error-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Error Handling&lt;/h2&gt;
&lt;p&gt;You can use the &lt;code&gt;throwError&lt;/code&gt; matcher to check if an error is thrown.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws an 'Error':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwError&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws an error within a particular domain:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(throwError { (&lt;span class="pl-c1"&gt;error&lt;/span&gt;: &lt;span class="pl-c1"&gt;Error&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(error.&lt;span class="pl-smi"&gt;_domain&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(NSCocoaErrorDomain))
})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws a particular error enum case:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwError&lt;/span&gt;(NSCocoaError.&lt;span class="pl-smi"&gt;PropertyListReadCorruptError&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'somethingThatThrows()' throws an error of a particular type:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { &lt;span class="pl-k"&gt;try&lt;/span&gt; &lt;span class="pl-c1"&gt;somethingThatThrows&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;throwError&lt;/span&gt;(&lt;span class="pl-c1"&gt;errorType&lt;/span&gt;: NimbleError.&lt;span class="pl-k"&gt;self&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When working directly with &lt;code&gt;Error&lt;/code&gt; values, using the &lt;code&gt;matchError&lt;/code&gt; matcher
allows you to perform certain checks on the error itself without having to
explicitly cast the error.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;matchError&lt;/code&gt; matcher allows you to check whether or not the error:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is the same &lt;em&gt;type&lt;/em&gt; of error you are expecting.&lt;/li&gt;
&lt;li&gt;represents a particular error value that you are expecting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can be useful when using &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Promise&lt;/code&gt; types, for example.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; actual&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Error&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;...&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' represents any error value from the NimbleErrorEnum type:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;matchError&lt;/span&gt;(NimbleErrorEnum.&lt;span class="pl-k"&gt;self&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' represents the case 'timeout' from the NimbleErrorEnum type:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;matchError&lt;/span&gt;(NimbleErrorEnum.&lt;span class="pl-smi"&gt;timeout&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains an NSError equal to the one provided:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;matchError&lt;/span&gt;(&lt;span class="pl-c1"&gt;NSError&lt;/span&gt;(&lt;span class="pl-c1"&gt;domain&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;err&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;code&lt;/span&gt;: &lt;span class="pl-c1"&gt;123&lt;/span&gt;, &lt;span class="pl-c1"&gt;userInfo&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: This feature is only available in Swift.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-exceptions" class="anchor" aria-hidden="true" href="#exceptions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exceptions&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual', when evaluated, raises an exception:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception with the given name:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: name))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception with the given name and reason:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;raiseException&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: name, &lt;span class="pl-c1"&gt;reason&lt;/span&gt;: reason))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception which passes expectations defined in the given closure:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; (in this case, if the exception's name begins with "a r")&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect { exception.&lt;span class="pl-c1"&gt;raise&lt;/span&gt;() }.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(raiseException { (&lt;span class="pl-c1"&gt;exception&lt;/span&gt;: NSException) &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(exception.&lt;span class="pl-smi"&gt;name&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
})&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual', when evaluated, raises an exception:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(raiseException())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception with the given name&lt;/span&gt;
expect(actual).to(raiseException().named(name))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception with the given name and reason:&lt;/span&gt;
expect(actual).to(raiseException().named(name).reason(reason))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' raises an exception and it passes expectations defined in the given block:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; (in this case, if name begins with "a r")&lt;/span&gt;
expect(actual).to(raiseException().satisfyingBlock(^(&lt;span class="pl-c1"&gt;NSException&lt;/span&gt; *exception) {
    &lt;span class="pl-c1"&gt;expect&lt;/span&gt;(exception.&lt;span class="pl-smi"&gt;name&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;a r&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
}));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: Swift currently doesn't have exceptions (see &lt;a href="https://github.com/Quick/Nimble/issues/220#issuecomment-172667064"&gt;#220&lt;/a&gt;).
Only Objective-C code can raise exceptions that Nimble will catch.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-collection-membership" class="anchor" aria-hidden="true" href="#collection-membership"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collection Membership&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if all of the expected values are members of 'actual':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(expected&lt;span class="pl-k"&gt;...&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is empty (i.e. it contains no elements):&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beEmpty&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if expected is a member of 'actual':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(contain(expected));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' is empty (i.e. it contains no elements):&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beEmpty());&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;In Swift &lt;code&gt;contain&lt;/code&gt; takes any number of arguments. The expectation
passes if all of them are members of the collection. In Objective-C,
&lt;code&gt;contain&lt;/code&gt; only takes one argument &lt;a href="https://github.com/Quick/Nimble/issues/27"&gt;for now&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, to assert that a list of sea creature names contains
"dolphin" and "starfish":&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;whale&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;whale&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]).to(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;whale&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;dolphin&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]).to(contain(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;starfish&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;contain&lt;/code&gt; and &lt;code&gt;beEmpty&lt;/code&gt; expect collections to be instances of
&lt;code&gt;NSArray&lt;/code&gt;, &lt;code&gt;NSSet&lt;/code&gt;, or a Swift collection composed of &lt;code&gt;Equatable&lt;/code&gt; elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To test whether a set of elements is present at the beginning or end of
an ordered collection, use &lt;code&gt;beginWith&lt;/code&gt; and &lt;code&gt;endWith&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the elements in expected appear at the beginning of 'actual':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(expected&lt;span class="pl-k"&gt;...&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the the elements in expected come at the end of 'actual':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;endWith&lt;/span&gt;(expected&lt;span class="pl-k"&gt;...&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the elements in expected appear at the beginning of 'actual':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beginWith(expected));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if the the elements in expected come at the end of 'actual':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(endWith(expected));&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;beginWith&lt;/code&gt; and &lt;code&gt;endWith&lt;/code&gt; expect collections to be instances of
&lt;code&gt;NSArray&lt;/code&gt;, or ordered Swift collections composed of &lt;code&gt;Equatable&lt;/code&gt;
elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like &lt;code&gt;contain&lt;/code&gt;, in Objective-C &lt;code&gt;beginWith&lt;/code&gt; and &lt;code&gt;endWith&lt;/code&gt; only support
a single argument &lt;a href="https://github.com/Quick/Nimble/issues/27"&gt;for now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For code that returns collections of complex objects without a strict
ordering, there is the &lt;code&gt;containElementSatisfying&lt;/code&gt; matcher:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Turtle&lt;/span&gt; {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; color&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
}

&lt;span class="pl-k"&gt;let&lt;/span&gt; turtles&lt;span class="pl-k"&gt;:&lt;/span&gt; [Turtle] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;functionThatReturnsSomeTurtlesInAnyOrder&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This set of matchers passes regardless of whether the array is &lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [{color: "blue"}, {color: "green"}] or [{color: "green"}, {color: "blue"}]:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(turtles).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;containElementSatisfying&lt;/span&gt;({ turtle &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; turtle.&lt;span class="pl-c1"&gt;color&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;green&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}))
&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(turtles).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;containElementSatisfying&lt;/span&gt;({ turtle &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; turtle.&lt;span class="pl-c1"&gt;color&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;blue&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;that is a turtle with color 'blue'&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The second matcher will incorporate the provided string in the error message&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; should it fail&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-k"&gt;@interface&lt;/span&gt; &lt;span class="pl-en"&gt;Turtle&lt;/span&gt; : &lt;span class="pl-e"&gt;NSObject&lt;/span&gt;
&lt;span class="pl-k"&gt;@property&lt;/span&gt; (&lt;span class="pl-k"&gt;nonatomic&lt;/span&gt;, &lt;span class="pl-k"&gt;readonly&lt;/span&gt;, &lt;span class="pl-k"&gt;nonnull&lt;/span&gt;) &lt;span class="pl-c1"&gt;NSString&lt;/span&gt; *color;
&lt;span class="pl-k"&gt;@end&lt;/span&gt;

&lt;span class="pl-k"&gt;@implementation&lt;/span&gt; &lt;span class="pl-en"&gt;Turtle&lt;/span&gt; 
&lt;span class="pl-k"&gt;@end&lt;/span&gt;

&lt;span class="pl-c1"&gt;NSArray&lt;/span&gt;&amp;lt;Turtle *&amp;gt; * __nonnull turtles = functionThatReturnsSomeTurtlesInAnyOrder();

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This set of matchers passes regardless of whether the array is &lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [{color: "blue"}, {color: "green"}] or [{color: "green"}, {color: "blue"}]:&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(turtles).to(containElementSatisfying(^&lt;span class="pl-c1"&gt;BOOL&lt;/span&gt;(&lt;span class="pl-c1"&gt;id&lt;/span&gt; __nonnull object) {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; [[turtle &lt;span class="pl-c1"&gt;color&lt;/span&gt;] &lt;span class="pl-c1"&gt;isEqualToString:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;green&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;];
}));
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(turtles).to(containElementSatisfying(^&lt;span class="pl-c1"&gt;BOOL&lt;/span&gt;(&lt;span class="pl-c1"&gt;id&lt;/span&gt; __nonnull object) {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; [[turtle &lt;span class="pl-c1"&gt;color&lt;/span&gt;] &lt;span class="pl-c1"&gt;isEqualToString:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;@"&lt;/span&gt;blue&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;];
}));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-strings" class="anchor" aria-hidden="true" href="#strings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Strings&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains 'substring':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;contain&lt;/span&gt;(substring))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' begins with 'prefix':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(&lt;span class="pl-k"&gt;prefix&lt;/span&gt;))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' ends with 'suffix':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;endWith&lt;/span&gt;(suffix))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' represents the empty string, "":&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beEmpty&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' matches the regular expression defined in 'expected':&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;match&lt;/span&gt;(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains 'substring':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(contain(expected));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' begins with 'prefix':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beginWith(prefix));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' ends with 'suffix':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(endWith(suffix));

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' represents the empty string, "":&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(beEmpty());

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' matches the regular expression defined in 'expected':&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(match(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-collection-elements" class="anchor" aria-hidden="true" href="#collection-elements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collection Elements&lt;/h2&gt;
&lt;p&gt;Nimble provides a means to check that all elements of a collection pass a given expectation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-swift" class="anchor" aria-hidden="true" href="#swift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift&lt;/h3&gt;
&lt;p&gt;In Swift, the collection must be an instance of a type conforming to
&lt;code&gt;Sequence&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Providing a custom function:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;4&lt;/span&gt;]).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(allPass { &lt;span class="pl-c1"&gt;$0&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; })

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Composing the expectation with another matcher:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;([&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;4&lt;/span&gt;]).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;allPass&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-objective-c" class="anchor" aria-hidden="true" href="#objective-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Objective-C&lt;/h3&gt;
&lt;p&gt;In Objective-C, the collection must be an instance of a type which implements
the &lt;code&gt;NSFastEnumeration&lt;/code&gt; protocol, and whose elements are instances of a type
which subclasses &lt;code&gt;NSObject&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, unlike in Swift, there is no override to specify a custom
matcher function.&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(@[@&lt;span class="pl-c1"&gt;1&lt;/span&gt;, @&lt;span class="pl-c1"&gt;2&lt;/span&gt;, @&lt;span class="pl-c1"&gt;3&lt;/span&gt;, @&lt;span class="pl-c1"&gt;4&lt;/span&gt;]).to(allPass(beLessThan(@&lt;span class="pl-c1"&gt;5&lt;/span&gt;)));&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-collection-count" class="anchor" aria-hidden="true" href="#collection-count"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collection Count&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains the 'expected' number of elements:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;haveCount&lt;/span&gt;(expected))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' does _not_ contain the 'expected' number of elements:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;notTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;haveCount&lt;/span&gt;(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' contains the 'expected' number of elements:&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(haveCount(expected))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Passes if 'actual' does _not_ contain the 'expected' number of elements:&lt;/span&gt;
expect(actual).notTo(haveCount(expected))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Swift, the actual value must be an instance of a type conforming to &lt;code&gt;Collection&lt;/code&gt;.
For example, instances of &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Dictionary&lt;/code&gt;, or &lt;code&gt;Set&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For Objective-C, the actual value must be one of the following classes, or their subclasses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NSArray&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSDictionary&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSSet&lt;/code&gt;, or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSHashTable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-notifications" class="anchor" aria-hidden="true" href="#notifications"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notifications&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; testNotification &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Notification&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;object&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if the closure in expect { ... } posts a notification to the default&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; notification center.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;expect {
    NotificationCenter.&lt;span class="pl-smi"&gt;default&lt;/span&gt;.&lt;span class="pl-c1"&gt;postNotification&lt;/span&gt;(testNotification)
}.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;postNotifications&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;([testNotification]))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if the closure in expect { ... } posts a notification to a given&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; notification center&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; notificationCenter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NotificationCenter&lt;/span&gt;()
expect {
    notificationCenter.&lt;span class="pl-c1"&gt;postNotification&lt;/span&gt;(testNotification)
}.&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;postNotifications&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;([testNotification]), &lt;span class="pl-c1"&gt;fromNotificationCenter&lt;/span&gt;: notificationCenter))&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;This matcher is only available in Swift.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-matching-a-value-to-any-of-a-group-of-matchers" class="anchor" aria-hidden="true" href="#matching-a-value-to-any-of-a-group-of-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Matching a value to any of a group of matchers&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if actual is either less than 10 or greater than 20&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(actual).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;satisfyAnyOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;), &lt;span class="pl-c1"&gt;beGreaterThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;20&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; can include any number of matchers -- the following will pass&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; **be careful** -- too many matchers can be the sign of an unfocused test&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;6&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;satisfyAnyOf&lt;/span&gt;(&lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;4&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;6&lt;/span&gt;), &lt;span class="pl-c1"&gt;equal&lt;/span&gt;(&lt;span class="pl-c1"&gt;7&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; in Swift you also have the option to use the || operator to achieve a similar function&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;82&lt;/span&gt;).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;beLessThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;50&lt;/span&gt;) &lt;span class="pl-k"&gt;||&lt;/span&gt; &lt;span class="pl-c1"&gt;beGreaterThan&lt;/span&gt;(&lt;span class="pl-c1"&gt;80&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if actual is either less than 10 or greater than 20&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to(satisfyAnyOf(beLessThan(@&lt;span class="pl-c1"&gt;10&lt;/span&gt;), beGreaterThan(@&lt;span class="pl-c1"&gt;20&lt;/span&gt;)))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; can include any number of matchers -- the following will pass&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; **be careful** -- too many matchers can be the sign of an unfocused test&lt;/span&gt;
expect(@&lt;span class="pl-c1"&gt;6&lt;/span&gt;).to(satisfyAnyOf(equal(@&lt;span class="pl-c1"&gt;2&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;3&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;4&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;5&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;6&lt;/span&gt;), equal(@&lt;span class="pl-c1"&gt;7&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: This matcher allows you to chain any number of matchers together. This provides flexibility,
but if you find yourself chaining many matchers together in one test, consider whether you
could instead refactor that single test into multiple, more precisely focused tests for
better coverage.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-custom-validation" class="anchor" aria-hidden="true" href="#custom-validation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Validation&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if .succeeded is returned from the closure&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;({
    &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;enumCaseWithAssociatedValueThatIDontCareAbout&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; actual &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-c1"&gt;failed&lt;/span&gt;(&lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;wrong enum case&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }

    &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;succeeded&lt;/span&gt;
}).&lt;span class="pl-c1"&gt;to&lt;/span&gt;(&lt;span class="pl-c1"&gt;succeed&lt;/span&gt;())

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes if .failed is returned from the closure&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;expect&lt;/span&gt;({
    &lt;span class="pl-k"&gt;guard&lt;/span&gt; &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;enumCaseWithAssociatedValueThatIDontCareAbout&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; actual &lt;span class="pl-k"&gt;else&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-c1"&gt;failed&lt;/span&gt;(&lt;span class="pl-c1"&gt;reason&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;wrong enum case&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }

    &lt;span class="pl-k"&gt;return&lt;/span&gt; .&lt;span class="pl-smi"&gt;succeeded&lt;/span&gt;
}).&lt;span class="pl-c1"&gt;notTo&lt;/span&gt;(&lt;span class="pl-c1"&gt;succeed&lt;/span&gt;())&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;String&lt;/code&gt; provided with &lt;code&gt;.failed()&lt;/code&gt; is shown when the test fails.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;toEventually()&lt;/code&gt; be careful not to make state changes or run process intensive code since this closure will be ran many times.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-writing-your-own-matchers" class="anchor" aria-hidden="true" href="#writing-your-own-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing Your Own Matchers&lt;/h1&gt;
&lt;p&gt;In Nimble, matchers are Swift functions that take an expected
value and return a &lt;code&gt;Predicate&lt;/code&gt; closure. Take &lt;code&gt;equal&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;equal&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt;&lt;/span&gt;&amp;gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;expectedValue&lt;/span&gt;&lt;/span&gt;: T&lt;span class="pl-k"&gt;?&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;T&amp;gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Can be shortened to:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;   Predicate { actual in  ... }&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; But shown with types here for clarity.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate { (&lt;span class="pl-c1"&gt;actualExpression&lt;/span&gt;: Expression&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;T&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;throws&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; PredicateResult &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; msg &lt;span class="pl-k"&gt;=&lt;/span&gt; ExpectationMessage.&lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;equal &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;expectedValue&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(
                &lt;span class="pl-c1"&gt;bool&lt;/span&gt;: actualValue &lt;span class="pl-k"&gt;==&lt;/span&gt; expectedValue&lt;span class="pl-k"&gt;!&lt;/span&gt;,
                &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg
            )
        } &lt;span class="pl-k"&gt;else&lt;/span&gt; {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(
                &lt;span class="pl-c1"&gt;status&lt;/span&gt;: .&lt;span class="pl-smi"&gt;fail&lt;/span&gt;,
                &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg.&lt;span class="pl-c1"&gt;appendedBeNilHint&lt;/span&gt;()
            )
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The return value of a &lt;code&gt;Predicate&lt;/code&gt; closure is a &lt;code&gt;PredicateResult&lt;/code&gt; that indicates
whether the actual value matches the expectation and what error message to
display on failure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The actual &lt;code&gt;equal&lt;/code&gt; matcher function does not match when
&lt;code&gt;expected&lt;/code&gt; are nil; the example above has been edited for brevity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since matchers are just Swift functions, you can define them anywhere:
at the top of your test file, in a file shared by all of your tests, or
in an Xcode project you distribute to others.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you write a matcher you think everyone can use, consider adding it
to Nimble's built-in set of matchers by sending a pull request! Or
distribute it yourself via GitHub.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For examples of how to write your own matchers, just check out the
&lt;a href="https://github.com/Quick/Nimble/tree/master/Sources/Nimble/Matchers"&gt;&lt;code&gt;Matchers&lt;/code&gt; directory&lt;/a&gt;
to see how Nimble's built-in set of matchers are implemented. You can
also check out the tips below.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-predicateresult" class="anchor" aria-hidden="true" href="#predicateresult"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PredicateResult&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;PredicateResult&lt;/code&gt; is the return struct that &lt;code&gt;Predicate&lt;/code&gt; return to indicate
success and failure. A &lt;code&gt;PredicateResult&lt;/code&gt; is made up of two values:
&lt;code&gt;PredicateStatus&lt;/code&gt; and &lt;code&gt;ExpectationMessage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead of a boolean, &lt;code&gt;PredicateStatus&lt;/code&gt; captures a trinary set of values:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;PredicateStatus&lt;/span&gt; {
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The predicate "passes" with the given expression&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - expect(1).to(equal(1))&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;matches&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The predicate "fails" with the given expression&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - expect(1).toNot(equal(1))&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;doesNotMatch&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The predicate never "passes" with the given expression, even if negated&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - expect(nil as Int?).toNot(equal(1))&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;fail&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Meanwhile, &lt;code&gt;ExpectationMessage&lt;/code&gt; provides messaging semantics for error reporting.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;indirect&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ExpectationMessage&lt;/span&gt; {
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Emits standard error message:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "expected to &amp;lt;string&amp;gt;, got &amp;lt;actual&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Allows any free-form message&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "&amp;lt;string&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;fail&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Predicates should usually depend on either &lt;code&gt;.expectedActualValueTo(..)&lt;/code&gt; or
&lt;code&gt;.fail(..)&lt;/code&gt; when reporting errors. Special cases can be used for the other enum
cases.&lt;/p&gt;
&lt;p&gt;Finally, if your Predicate utilizes other Predicates, you can utilize
&lt;code&gt;.appended(details:)&lt;/code&gt; and &lt;code&gt;.appended(message:)&lt;/code&gt; methods to annotate an existing
error with more details.&lt;/p&gt;
&lt;p&gt;A common message to append is failing on nils. For that, &lt;code&gt;.appendedBeNilHint()&lt;/code&gt;
can be used.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-lazy-evaluation" class="anchor" aria-hidden="true" href="#lazy-evaluation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lazy Evaluation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;actualExpression&lt;/code&gt; is a lazy, memoized closure around the value provided to the
&lt;code&gt;expect&lt;/code&gt; function. The expression can either be a closure or a value directly
passed to &lt;code&gt;expect(...)&lt;/code&gt;. In order to determine whether that value matches,
custom matchers should call &lt;code&gt;actualExpression.evaluate()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beNil&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;T&lt;/span&gt;&amp;gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;T&amp;gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Predicate.simpleNilable(..) automatically generates ExpectationMessage for&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; us based on the string we provide to it. Also, the 'Nilable' postfix indicates&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; that this Predicate supports matching against nil actualExpressions, instead of&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; always resulting in a PredicateStatus.fail result -- which is true for&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Predicate.simple(..)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate.&lt;span class="pl-c1"&gt;simpleNilable&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;be nil&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { actualExpression &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;()
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateStatus&lt;/span&gt;(&lt;span class="pl-c1"&gt;bool&lt;/span&gt;: actualValue &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, &lt;code&gt;actualExpression&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt; -- it is a closure
that returns a value. The value it returns, which is accessed via the
&lt;code&gt;evaluate()&lt;/code&gt; method, may be &lt;code&gt;nil&lt;/code&gt;. If that value is &lt;code&gt;nil&lt;/code&gt;, the &lt;code&gt;beNil&lt;/code&gt;
matcher function returns &lt;code&gt;true&lt;/code&gt;, indicating that the expectation passed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-type-checking-via-swift-generics" class="anchor" aria-hidden="true" href="#type-checking-via-swift-generics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type Checking via Swift Generics&lt;/h2&gt;
&lt;p&gt;Using Swift's generics, matchers can constrain the type of the actual value
passed to the &lt;code&gt;expect&lt;/code&gt; function by modifying the return type.&lt;/p&gt;
&lt;p&gt;For example, the following matcher, &lt;code&gt;haveDescription&lt;/code&gt;, only accepts actual
values that implement the &lt;code&gt;Printable&lt;/code&gt; protocol. It checks their &lt;code&gt;description&lt;/code&gt;
against the one provided to the matcher function, and passes if they are the same:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;haveDescription&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;description&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;Printable&lt;span class="pl-k"&gt;?&lt;/span&gt;&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate.&lt;span class="pl-c1"&gt;simple&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;have description&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { actual &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateStatus&lt;/span&gt;(&lt;span class="pl-c1"&gt;bool&lt;/span&gt;: actual.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;().&lt;span class="pl-c1"&gt;description&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; description)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-customizing-failure-messages" class="anchor" aria-hidden="true" href="#customizing-failure-messages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customizing Failure Messages&lt;/h2&gt;
&lt;p&gt;When using &lt;code&gt;Predicate.simple(..)&lt;/code&gt; or &lt;code&gt;Predicate.simpleNilable(..)&lt;/code&gt;, Nimble
outputs the following failure message when an expectation fails:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; where `message` is the first string argument and&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; `actual` is the actual value received in `expect(..)`&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;expected to &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;message&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;, got &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;actual&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can customize this message by modifying the way you create a &lt;code&gt;Predicate&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basic-customization" class="anchor" aria-hidden="true" href="#basic-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Customization&lt;/h3&gt;
&lt;p&gt;For slightly more complex error messaging, receive the created failure message
with &lt;code&gt;Predicate.define(..)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;equal&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt;&lt;/span&gt;&amp;gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;expectedValue&lt;/span&gt;: T&lt;span class="pl-k"&gt;?&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;T&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate.&lt;span class="pl-c1"&gt;define&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;equal &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;stringify&lt;/span&gt;(expectedValue)&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) { actualExpression, msg &lt;span class="pl-k"&gt;in&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;()
        &lt;span class="pl-k"&gt;let&lt;/span&gt; matches &lt;span class="pl-k"&gt;=&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;==&lt;/span&gt; expectedValue &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; expectedValue &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
        &lt;span class="pl-k"&gt;if&lt;/span&gt; expectedValue &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;||&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; {
            &lt;span class="pl-k"&gt;if&lt;/span&gt; expectedValue &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;!=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; {
                &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(
                    &lt;span class="pl-c1"&gt;status&lt;/span&gt;: .&lt;span class="pl-smi"&gt;fail&lt;/span&gt;,
                    &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg.&lt;span class="pl-c1"&gt;appendedBeNilHint&lt;/span&gt;()
                )
            }
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(&lt;span class="pl-c1"&gt;status&lt;/span&gt;: .&lt;span class="pl-smi"&gt;fail&lt;/span&gt;, &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg)
        }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;PredicateResult&lt;/span&gt;(&lt;span class="pl-c1"&gt;bool&lt;/span&gt;: matches, &lt;span class="pl-c1"&gt;message&lt;/span&gt;: msg)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example above, &lt;code&gt;msg&lt;/code&gt; is defined based on the string given to
&lt;code&gt;Predicate.define&lt;/code&gt;. The code looks akin to:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; msg &lt;span class="pl-k"&gt;=&lt;/span&gt; ExpectationMessage.&lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;equal &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;&lt;span class="pl-c1"&gt;stringify&lt;/span&gt;(expectedValue)&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-full-customization" class="anchor" aria-hidden="true" href="#full-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Full Customization&lt;/h3&gt;
&lt;p&gt;To fully customize the behavior of the Predicate, use the overload that expects
a &lt;code&gt;PredicateResult&lt;/code&gt; to be returned.&lt;/p&gt;
&lt;p&gt;Along with &lt;code&gt;PredicateResult&lt;/code&gt;, there are other &lt;code&gt;ExpectationMessage&lt;/code&gt; enum values you can use:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;indirect&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ExpectationMessage&lt;/span&gt; {
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Emits standard error message:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "expected to &amp;lt;message&amp;gt;, got &amp;lt;actual&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Allows any free-form message&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "&amp;lt;message&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;fail&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Emits standard error message with a custom actual value instead of the default.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "expected to &amp;lt;message&amp;gt;, got &amp;lt;actual&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;expectedCustomValueTo&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; actual: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Emits standard error message without mentioning the actual value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; eg - "expected to &amp;lt;message&amp;gt;"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;expectedTo&lt;/span&gt;(&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; message: &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ...&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For matchers that compose other matchers, there are a handful of helper
functions to annotate messages.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;appended(message: String)&lt;/code&gt; is used to append to the original failure message:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; produces "expected to be true, got &amp;lt;actual&amp;gt; (use beFalse() for inverse)"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; appended message do show up inline in Xcode.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;.&lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;be true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;appended&lt;/span&gt;(&lt;span class="pl-c1"&gt;message&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; (use beFalse() for inverse)&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a more comprehensive message that spans multiple lines, use
&lt;code&gt;appended(details: String)&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; produces "expected to be true, got &amp;lt;actual&amp;gt;\n\nuse beFalse() for inverse\nor use beNil()"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; details do not show inline in Xcode, but do show up in test logs.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;.&lt;span class="pl-c1"&gt;expectedActualValueTo&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;be true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).&lt;span class="pl-c1"&gt;appended&lt;/span&gt;(&lt;span class="pl-c1"&gt;details&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;use beFalse() for inverse&lt;span class="pl-cce"&gt;\n&lt;/span&gt;or use beNil()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-supporting-objective-c" class="anchor" aria-hidden="true" href="#supporting-objective-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supporting Objective-C&lt;/h2&gt;
&lt;p&gt;To use a custom matcher written in Swift from Objective-C, you'll have
to extend the &lt;code&gt;NMBObjCMatcher&lt;/code&gt; class, adding a new class method for your
custom matcher. The example below defines the class method
&lt;code&gt;+[NMBObjCMatcher beNilMatcher]&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;NMBObjCMatcher&lt;/span&gt; {
    &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beNilMatcher&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; NMBObjCMatcher {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; NMBObjCMatcher { actualBlock, failureMessage, location &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;let&lt;/span&gt; block &lt;span class="pl-k"&gt;=&lt;/span&gt; ({ &lt;span class="pl-c1"&gt;actualBlock&lt;/span&gt;() &lt;span class="pl-k"&gt;as&lt;/span&gt; NSObject&lt;span class="pl-k"&gt;?&lt;/span&gt; })
            &lt;span class="pl-k"&gt;let&lt;/span&gt; expr &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Expression&lt;/span&gt;(&lt;span class="pl-c1"&gt;expression&lt;/span&gt;: block, &lt;span class="pl-c1"&gt;location&lt;/span&gt;: location)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;beNil&lt;/span&gt;().&lt;span class="pl-c1"&gt;matches&lt;/span&gt;(expr, &lt;span class="pl-c1"&gt;failureMessage&lt;/span&gt;: failureMessage)
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above allows you to use the matcher from Objective-C:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(actual).to([NMBObjCMatcher &lt;span class="pl-c1"&gt;beNilMatcher&lt;/span&gt;]());&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make the syntax easier to use, define a C function that calls the
class method:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

FOUNDATION_EXPORT &lt;span class="pl-k"&gt;id&lt;/span&gt;&amp;lt;NMBMatcher&amp;gt; &lt;span class="pl-en"&gt;beNil&lt;/span&gt;() {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; [NMBObjCMatcher &lt;span class="pl-c1"&gt;beNilMatcher&lt;/span&gt;];
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-properly-handling-nil-in-objective-c-matchers" class="anchor" aria-hidden="true" href="#properly-handling-nil-in-objective-c-matchers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Properly Handling &lt;code&gt;nil&lt;/code&gt; in Objective-C Matchers&lt;/h3&gt;
&lt;p&gt;When supporting Objective-C, make sure you handle &lt;code&gt;nil&lt;/code&gt; appropriately.
Like &lt;a href="https://github.com/pivotal/cedar/issues/100"&gt;Cedar&lt;/a&gt;,
&lt;strong&gt;most matchers do not match with nil&lt;/strong&gt;. This is to bring prevent test
writers from being surprised by &lt;code&gt;nil&lt;/code&gt; values where they did not expect
them.&lt;/p&gt;
&lt;p&gt;Nimble provides the &lt;code&gt;beNil&lt;/code&gt; matcher function for test writer that want
to make expectations on &lt;code&gt;nil&lt;/code&gt; objects:&lt;/p&gt;
&lt;div class="highlight highlight-source-objc"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Objective-C&lt;/span&gt;

&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;).to(equal(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;)); &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; fails&lt;/span&gt;
&lt;span class="pl-en"&gt;expect&lt;/span&gt;(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;).to(beNil());    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; passes&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your matcher does not want to match with nil, you use &lt;code&gt;NonNilMatcherFunc&lt;/code&gt;
and the &lt;code&gt;canMatchNil&lt;/code&gt; constructor on &lt;code&gt;NMBObjCMatcher&lt;/code&gt;. Using both types will
automatically generate expected value failure messages when they're nil.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beginWith&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;S&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Sequence&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt; &lt;/span&gt;&lt;span class="pl-k"&gt;where&lt;/span&gt; S.&lt;span class="pl-c1"&gt;Iterator&lt;/span&gt;.&lt;span class="pl-c1"&gt;Element&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; T&amp;gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;startingElement&lt;/span&gt;&lt;/span&gt;: T) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; NonNilMatcherFunc&amp;lt;S&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; NonNilMatcherFunc { actualExpression, failureMessage &lt;span class="pl-k"&gt;in&lt;/span&gt;
        failureMessage.&lt;span class="pl-smi"&gt;postfixMessage&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;begin with &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;startingElement&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;var&lt;/span&gt; actualGenerator &lt;span class="pl-k"&gt;=&lt;/span&gt; actualValue.&lt;span class="pl-c1"&gt;makeIterator&lt;/span&gt;()
            &lt;span class="pl-k"&gt;return&lt;/span&gt; actualGenerator.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; startingElement
        }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    }
}

&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;NMBObjCMatcher&lt;/span&gt; {
    &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beginWithMatcher&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;expected&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;AnyObject&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; NMBObjCMatcher {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;NMBObjCMatcher&lt;/span&gt;(&lt;span class="pl-c1"&gt;canMatchNil&lt;/span&gt;: &lt;span class="pl-c1"&gt;false&lt;/span&gt;) { actualExpression, failureMessage &lt;span class="pl-k"&gt;in&lt;/span&gt;
            &lt;span class="pl-k"&gt;let&lt;/span&gt; actual &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;()
            &lt;span class="pl-k"&gt;let&lt;/span&gt; expr &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-smi"&gt;cast&lt;/span&gt; { &lt;span class="pl-c1"&gt;$0&lt;/span&gt; &lt;span class="pl-k"&gt;as?&lt;/span&gt; NMBOrderedCollection }
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;beginWith&lt;/span&gt;(expected).&lt;span class="pl-c1"&gt;matches&lt;/span&gt;(expr, &lt;span class="pl-c1"&gt;failureMessage&lt;/span&gt;: failureMessage)
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-migrating-from-the-old-matcher-api" class="anchor" aria-hidden="true" href="#migrating-from-the-old-matcher-api"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Migrating from the Old Matcher API&lt;/h2&gt;
&lt;p&gt;Previously (&lt;code&gt;&amp;lt;7.0.0&lt;/code&gt;), Nimble supported matchers via the following types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Matcher&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NonNilMatcherFunc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MatcherFunc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of those types have been replaced by &lt;code&gt;Predicate&lt;/code&gt;. While migrating can be a
lot of work, Nimble currently provides several steps to aid migration of your
custom matchers:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-minimal-step---use-predicate" class="anchor" aria-hidden="true" href="#minimal-step---use-predicate"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Minimal Step - Use &lt;code&gt;.predicate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Nimble provides an extension to the old types that automatically naively
converts those types to the newer &lt;code&gt;Predicate&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beginWith&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;S&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Sequence&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt; &lt;/span&gt;&lt;span class="pl-k"&gt;where&lt;/span&gt; S.&lt;span class="pl-c1"&gt;Iterator&lt;/span&gt;.&lt;span class="pl-c1"&gt;Element&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; T&amp;gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;startingElement&lt;/span&gt;&lt;/span&gt;: T) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;S&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; NonNilMatcherFunc { actualExpression, failureMessage &lt;span class="pl-k"&gt;in&lt;/span&gt;
        failureMessage.&lt;span class="pl-smi"&gt;postfixMessage&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;begin with &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;startingElement&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;var&lt;/span&gt; actualGenerator &lt;span class="pl-k"&gt;=&lt;/span&gt; actualValue.&lt;span class="pl-c1"&gt;makeIterator&lt;/span&gt;()
            &lt;span class="pl-k"&gt;return&lt;/span&gt; actualGenerator.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; startingElement
        }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    }.&lt;span class="pl-smi"&gt;predicate&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the simpliest way to externally support &lt;code&gt;Predicate&lt;/code&gt; which allows easier
composition than the old Nimble matcher interface, with minimal effort to change.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-convert-to-use-predicate-type-with-old-matcher-constructor" class="anchor" aria-hidden="true" href="#convert-to-use-predicate-type-with-old-matcher-constructor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Convert to use &lt;code&gt;Predicate&lt;/code&gt; Type with Old Matcher Constructor&lt;/h3&gt;
&lt;p&gt;The second most convenient step is to utilize special constructors that
&lt;code&gt;Predicate&lt;/code&gt; supports that closely align to the constructors of the old Nimble
matcher types.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Swift&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;beginWith&lt;/span&gt;&amp;lt;&lt;span class="pl-c1"&gt;S&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Sequence&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;T&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;Equatable&lt;/span&gt; &lt;/span&gt;&lt;span class="pl-k"&gt;where&lt;/span&gt; S.&lt;span class="pl-c1"&gt;Iterator&lt;/span&gt;.&lt;span class="pl-c1"&gt;Element&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; T&amp;gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;startingElement&lt;/span&gt;&lt;/span&gt;: T) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; Predicate&amp;lt;S&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; Predicate.&lt;span class="pl-smi"&gt;fromDeprecatedClosure&lt;/span&gt; { actualExpression, failureMessage &lt;span class="pl-k"&gt;in&lt;/span&gt;
        failureMessage.&lt;span class="pl-smi"&gt;postfixMessage&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;begin with &amp;lt;&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;startingElement&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; actualValue &lt;span class="pl-k"&gt;=&lt;/span&gt; actualExpression.&lt;span class="pl-c1"&gt;evaluate&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;var&lt;/span&gt; actualGenerator &lt;span class="pl-k"&gt;=&lt;/span&gt; actualValue.&lt;span class="pl-c1"&gt;makeIterator&lt;/span&gt;()
            &lt;span class="pl-k"&gt;return&lt;/span&gt; actualGenerator.&lt;span class="pl-c1"&gt;next&lt;/span&gt;() &lt;span class="pl-k"&gt;==&lt;/span&gt; startingElement
        }
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows you to completely drop the old types from your code, although the
intended behavior may alter slightly to what is desired.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-convert-to-predicate-type-with-preferred-constructor" class="anchor" aria-hidden="true" href="#convert-to-predicate-type-with-preferred-constructor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Convert to &lt;code&gt;Predicate&lt;/code&gt; Type with Preferred Constructor&lt;/h3&gt;
&lt;p&gt;Finally, you can convert to the native &lt;code&gt;Predicate&lt;/code&gt; format using one of the
constructors not used to assist in the migration.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-deprecation-roadmap" class="anchor" aria-hidden="true" href="#deprecation-roadmap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Deprecation Roadmap&lt;/h3&gt;
&lt;p&gt;Nimble 7 introduces &lt;code&gt;Predicate&lt;/code&gt; but will support the old types with warning
deprecations. A couple major releases of Nimble will remain backwards
compatible with the old matcher api, although new features may not be
backported.&lt;/p&gt;
&lt;p&gt;The deprecating plan is a 3 major versions removal. Which is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduce new &lt;code&gt;Predicate&lt;/code&gt; API, deprecation warning for old matcher APIs.
(Nimble &lt;code&gt;v7.x.x&lt;/code&gt;, &lt;code&gt;v8.x.x&lt;/code&gt; and &lt;code&gt;v9.x.x&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Introduce warnings on migration-path features (&lt;code&gt;.predicate&lt;/code&gt;,
&lt;code&gt;Predicate&lt;/code&gt;-constructors with similar arguments to old API). (Nimble
&lt;code&gt;v10.x.x&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Remove old API. (Nimble &lt;code&gt;v11.x.x&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;a id="user-content-installing-nimble" class="anchor" aria-hidden="true" href="#installing-nimble"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Nimble&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Nimble can be used on its own, or in conjunction with its sister
project, &lt;a href="https://github.com/Quick/Quick"&gt;Quick&lt;/a&gt;. To install both
Quick and Nimble, follow &lt;a href="https://github.com/Quick/Quick/blob/master/Documentation/en-us/InstallingQuick.md"&gt;the installation instructions in the Quick
Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nimble can currently be installed in one of two ways: using CocoaPods, or with
git submodules.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-nimble-as-a-submodule" class="anchor" aria-hidden="true" href="#installing-nimble-as-a-submodule"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Nimble as a Submodule&lt;/h2&gt;
&lt;p&gt;To use Nimble as a submodule to test your macOS, iOS or tvOS applications, follow
these 4 easy steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the Nimble repository&lt;/li&gt;
&lt;li&gt;Add Nimble.xcodeproj to the Xcode workspace for your project&lt;/li&gt;
&lt;li&gt;Link Nimble.framework to your test target&lt;/li&gt;
&lt;li&gt;Start writing expectations!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more detailed instructions on each of these steps,
read &lt;a href="https://github.com/Quick/Quick#how-to-install-quick"&gt;How to Install Quick&lt;/a&gt;.
Ignore the steps involving adding Quick to your project in order to
install just Nimble.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-nimble-via-cocoapods" class="anchor" aria-hidden="true" href="#installing-nimble-via-cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Nimble via CocoaPods&lt;/h2&gt;
&lt;p&gt;To use Nimble in CocoaPods to test your macOS, iOS or tvOS applications, add
Nimble to your podfile and add the &lt;code&gt;use_frameworks!&lt;/code&gt; line to enable Swift
support for CocoaPods.&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;platform &lt;span class="pl-c1"&gt;:ios&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;8.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

source &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://github.com/CocoaPods/Specs.git&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Whatever pods you need for your app go here&lt;/span&gt;

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;YOUR_APP_NAME_HERE_Tests&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;:exclusive&lt;/span&gt; =&amp;gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  use_frameworks!
  pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Nimble&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 6.0.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing-nimble-via-accio" class="anchor" aria-hidden="true" href="#installing-nimble-via-accio"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing Nimble via Accio&lt;/h2&gt;
&lt;p&gt;Add the following to your Package.swift:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;.&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/Quick/Nimble.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, .&lt;span class="pl-c1"&gt;upToNextMajor&lt;/span&gt;(&lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;8.0.1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)),&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, add &lt;code&gt;Nimble&lt;/code&gt; to your App targets dependencies like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;.&lt;span class="pl-c1"&gt;testTarget&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AppTests&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nimble&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    ]
),&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;accio update&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-nimble-without-xctest" class="anchor" aria-hidden="true" href="#using-nimble-without-xctest"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Nimble without XCTest&lt;/h2&gt;
&lt;p&gt;Nimble is integrated with XCTest to allow it work well when used in Xcode test
bundles, however it can also be used in a standalone app. After installing
Nimble using one of the above methods, there are two additional steps required
to make this work.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a custom assertion handler and assign an instance of it to the
global &lt;code&gt;NimbleAssertionHandler&lt;/code&gt; variable. For example:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MyAssertionHandler&lt;/span&gt; : &lt;span class="pl-e"&gt;AssertionHandler &lt;/span&gt;{
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;assert&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;assertion&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;message&lt;/span&gt;&lt;/span&gt;: FailureMessage, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;location&lt;/span&gt;&lt;/span&gt;: SourceLocation) {
        &lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-k"&gt;!&lt;/span&gt;assertion) {
            &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Expectation failed: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;message.&lt;span class="pl-c1"&gt;stringValue&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        }
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Somewhere before you use any assertions&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;NimbleAssertionHandler &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;MyAssertionHandler&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Add a post-build action to fix an issue with the Swift XCTest support
library being unnecessarily copied into your app&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Edit your scheme in Xcode, and navigate to Build -&amp;gt; Post-actions&lt;/li&gt;
&lt;li&gt;Click the "+" icon and select "New Run Script Action"&lt;/li&gt;
&lt;li&gt;Open the "Provide build settings from" dropdown and select your target&lt;/li&gt;
&lt;li&gt;Enter the following script contents:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;rm "${SWIFT_STDLIB_TOOL_DESTINATION_DIR}/libswiftXCTest.dylib"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can now use Nimble assertions in your code and handle failures as you see
fit.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Quick</author><guid isPermaLink="false">https://github.com/Quick/Nimble</guid><pubDate>Sun, 05 Jan 2020 00:14:00 GMT</pubDate></item><item><title>ioscreator/ioscreator #15 in Swift, Today</title><link>https://github.com/ioscreator/ioscreator</link><description>&lt;p&gt;&lt;i&gt;Tutorials from ioscreator.com&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-ioscreator" class="anchor" aria-hidden="true" href="#ioscreator"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOScreator&lt;/h1&gt;
&lt;p&gt;Source Code of iOS tutorials at ioscreator.com&lt;/p&gt;
&lt;p&gt;===========================================================================================================
CODE EXAMPLES REPOSITORY&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://ioscreator.com" rel="nofollow"&gt;https://ioscreator.com&lt;/a&gt; for a detailed description&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-this-readme-last-updated-12-18-2019" class="anchor" aria-hidden="true" href="#this-readme-last-updated-12-18-2019"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;This README last updated: 12-18-2019&lt;/h1&gt;
&lt;h1&gt;&lt;a id="user-content-index" class="anchor" aria-hidden="true" href="#index"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INDEX&lt;/h1&gt;
&lt;h3&gt;&lt;a id="user-content-ios13" class="anchor" aria-hidden="true" href="#ios13"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS13&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-circular-progress-bar-tutorial" rel="nofollow"&gt;SwiftUICircularPorgressBarTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-context-menu-tutorial" rel="nofollow"&gt;SwiftUIContextMenuTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-divider-tutorial" rel="nofollow"&gt;SwiftUIDividerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-calculator-tutorial" rel="nofollow"&gt;SwiftUICalculatorTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-long-press-gesture-tutorial" rel="nofollow"&gt;SwiftUILongPressGestureTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-scroll-view-tutorial" rel="nofollow"&gt;SwiftUIScrollViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-add-rows-list-tutorial" rel="nofollow"&gt;SwiftUIAddRowsListTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/layout-anchors-ios-tutorial" rel="nofollow"&gt;IOSLayoutAnchorsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-geometryreader-tutorial" rel="nofollow"&gt;SwiftUIGeometryReaderTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-delete-rows-list-tutorial" rel="nofollow"&gt;SwiftUIDeleteRowsListTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-spacer-tutorial" rel="nofollow"&gt;SwiftUISpacerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-overlay-views-tutorial" rel="nofollow"&gt;SwiftUIOverlayViewsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-header-footer-list-tutorial" rel="nofollow"&gt;SwiftUIHeaderFooterListTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-spring-animation-tutorial" rel="nofollow"&gt;SwiftUISpringAnimationTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-mapkit-tutorial" rel="nofollow"&gt;SwiftUIMapKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/move-rows-list-tutorial" rel="nofollow"&gt;SwiftUIMoveRowsListTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/customize-navigation-bar-tutorial" rel="nofollow"&gt;SwiftUICustomizeNavBarTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-rotation-gesture-tutorial" rel="nofollow"&gt;SwiftUIRotateGestureTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-draw-gradient-tutorial" rel="nofollow"&gt;SwiftUIDrawGradientTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-animation-tutorial" rel="nofollow"&gt;SwiftUIAnimationTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-magnification-gesture-tutorial" rel="nofollow"&gt;SwiftUIMagnificationGestureTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-secure-textfield-tutorial" rel="nofollow"&gt;SwiftUISecureTextFieldTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-dark-mode-preview-tutorial" rel="nofollow"&gt;SwiftUIDarkModePreviewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-date-picker-tutorial" rel="nofollow"&gt;SwiftUIDatePickerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-modal-tutorial" rel="nofollow"&gt;SwiftUIModalTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-forms-tutorial" rel="nofollow"&gt;SwiftUIFormsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-drag-gesture-tutorial" rel="nofollow"&gt;SwiftUIDragGestureTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-preview-multiple-devices-tutorial" rel="nofollow"&gt;SwiftUIPreviewDevicesTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-environment-object-tutorial" rel="nofollow"&gt;SwiftUIEnvironmentObjectTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-tab-view-tutorial" rel="nofollow"&gt;SwiftUITabViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-observable-object-tutorial" rel="nofollow"&gt;SwiftUIObservableObjectTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-circular-image-tutorial" rel="nofollow"&gt;SwiftUICircularImageTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-background-color-tutorial" rel="nofollow"&gt;SwiftUIBackgroundColorTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-basic-shapes-tutorial" rel="nofollow"&gt;SwiftUIBasicShapesTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-button-tutorial" rel="nofollow"&gt;SwiftUIButtonTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-scale-image-tutorial" rel="nofollow"&gt;SwiftUIScaleImageTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-textfield-tutorial" rel="nofollow"&gt;SwiftUITextFieldTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-rotate-view-tutorial" rel="nofollow"&gt;SwiftUIRotateViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-shadow-tutorial" rel="nofollow"&gt;SwiftUIShadowTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-gesture-tutorial" rel="nofollow"&gt;SwiftUIGestureTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-stepper-tutorial" rel="nofollow"&gt;SwiftUIStepperTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-action-sheet-tutorial" rel="nofollow"&gt;SwiftUIActionSheetTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-slider-tutorial" rel="nofollow"&gt;SwiftUISliderTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-picker-tutorial" rel="nofollow"&gt;SwiftUIPickerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-segmented-control-tutorial" rel="nofollow"&gt;SwiftUISegmentedControlTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-integrate-uikit-tutorial" rel="nofollow"&gt;SwiftUIIntegrateUIKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-alert-tutorial" rel="nofollow"&gt;SwiftUIAlertTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-state-tutorial" rel="nofollow"&gt;SwiftUIStateTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-list-tutorial" rel="nofollow"&gt;SwiftUIListTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-text-view-tutorial" rel="nofollow"&gt;SwiftUITextViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-stack-tutorial" rel="nofollow"&gt;SwiftUIStackTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swiftui-getting-started-tutorial" rel="nofollow"&gt;SwiftUIGettingStartedTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-ios12" class="anchor" aria-hidden="true" href="#ios12"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS12&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/navigation-controller-ios-tutorial" rel="nofollow"&gt;IOSNavigationControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/multipeer-connectivity-ios-tutorial" rel="nofollow"&gt;IOSMultipeerConnectivityTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/spell-checker-ios-tutorial" rel="nofollow"&gt;IOSSpellingCheckerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/background-fetch-ios-tutorial" rel="nofollow"&gt;IOSBackgroundFetchTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/circular-image-view-ios-tutorial" rel="nofollow"&gt;IOSCircularImageTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/display-popover-ios-tutorial" rel="nofollow"&gt;IOSPopoverTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/delete-item-collection-view-controller-ios-tutorial" rel="nofollow"&gt;IOSDeleteItemsCollectionViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/mapkit-flyover-ios-tutorial" rel="nofollow"&gt;IOSFlyOverMapKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/volume-view-ios-tutorial" rel="nofollow"&gt;IOSVolumeViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/activity-view-controller-ios-tutorial" rel="nofollow"&gt;IOSActivityViewControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swipe-gesture-ios-tutorial" rel="nofollow"&gt;IOSSwipeGestureTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/webview-ios-tutorial" rel="nofollow"&gt;IOSWebViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/uikit-dynamics-attachment-behaviour-ios-tutorial" rel="nofollow"&gt;IOSAttachmentBehaviourTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/add-item-collection-view-controller-ios-tutorial" rel="nofollow"&gt;IOSAddItemsCollectionViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/particle-emitter-ios-tutorial" rel="nofollow"&gt;IOSParticleEmitterTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/progress-view-ios-tutorial" rel="nofollow"&gt;IOSProgressViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/pass-data-view-controller-ios-tutorial" rel="nofollow"&gt;IOSPassDataViewControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/mapkit-ios-tutorial" rel="nofollow"&gt;IOSMapKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/airprint-ios-tutorial" rel="nofollow"&gt;IOSAirPrintTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/switch-ios-tutorial" rel="nofollow"&gt;IOSSwitchTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/dynamic-types-ios-tutorial" rel="nofollow"&gt;IOSDynamicTypesTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/collection-view-controller-ios-tutorial" rel="nofollow"&gt;IOSCollectionViewControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/slider-ios-tutorial" rel="nofollow"&gt;IOSSliderTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/touch-id-ios-tutorial" rel="nofollow"&gt;IOSTouchIDTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/spring-animation-ios-tutorial" rel="nofollow"&gt;IOSSpringAnimationTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/long-press-gesture-ios-tutorial" rel="nofollow"&gt;IOSLongPressGestureTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/pull-to-refresh-ios-tutorial" rel="nofollow"&gt;IOSPullToRefreshTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/swipe-table-view-cell-custom-actions-ios-tutorial" rel="nofollow"&gt;IOSActionsTableViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/snap-behaviour-ios-tutorial" rel="nofollow"&gt;IOSSnapBehaviourTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/blur-effect-ios-tutorial" rel="nofollow"&gt;IOSBlurEffectTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/rotate-image-ios-tutorial" rel="nofollow"&gt;IOSRotateImageTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/sprite-movement-actions-ios-tutorial" rel="nofollow"&gt;IOSSpriteKitActionsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/picker-ios-tutorial" rel="nofollow"&gt;IOSPickerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/collision-detection-uikit-dynamics-ios-tutorial" rel="nofollow"&gt;IOSCollectionDetectionTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/shake-gesture-ios-tutorial" rel="nofollow"&gt;IOSShakeGestureTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/attributed-strings-ios-tutorial" rel="nofollow"&gt;IOSAttributedStringsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/customize-navigation-bar-ios-tutorial" rel="nofollow"&gt;IOSDragViewsGesturesTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/drag-views-gestures-ios-tutorial" rel="nofollow"&gt;IOSDragViewsGesturesTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/scale-images-pinch-gesture-ios-tutorial" rel="nofollow"&gt;IOSScaleImageTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/display-date-date-picker-ios-tutorial" rel="nofollow"&gt;IOSDatePickerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/fade-in-fade-out-ios-tutorial" rel="nofollow"&gt;IOSFadeMusicTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/prototype-cells-table-view-ios-tutorial" rel="nofollow"&gt;IOSPrototypeCellsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/add-shadow-button-ios-tutorial" rel="nofollow"&gt;IOSShadowButtonTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/stepper-ios-tutorial" rel="nofollow"&gt;IOSStepperTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/local-notification-ios-tutorial" rel="nofollow"&gt;IOSLocalNotificationTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/display-background-spritekit-ios-tutorial" rel="nofollow"&gt;IOSSpriteKitBackgroundTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/context-menu-table-view-ios-tutorial" rel="nofollow"&gt;IOSContextMenuTableViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/display-alert-ios-tutorial" rel="nofollow"&gt;IOSDisplayAlertTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/tab-bar-customization-ios-tutorial" rel="nofollow"&gt;IOSTabBarCustomizationTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/request-permission-core-location-ios-tutorial" rel="nofollow"&gt;IOSRequestPermissionTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/multiple-outlets-ios-tutorial" rel="nofollow"&gt;IOSMultipleOutletsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/change-display-name-ios-tutorial" rel="nofollow"&gt;IOSChangeDisplayNameTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/parse-xml-ios-tutorial" rel="nofollow"&gt;IOSParseXMLTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/segmented-controller-ios-tutorial" rel="nofollow"&gt;IOSSegmentedControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/change-color-status-bar-ios-tutorial" rel="nofollow"&gt;IOSColorStatusBarTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/sprite-kit-physics-ios-tutorial" rel="nofollow"&gt;IOSSpriteKitPhysicsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/editable-text-field-alert-controller-ios-tutorial" rel="nofollow"&gt;IOSTextFieldAlertControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/play-vibration-ios-tutorial" rel="nofollow"&gt;IOSVibrationTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/open-pdf-ios-tutorial" rel="nofollow"&gt;IOSOpenPDFTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/disable-apple-transport-security-ios-tutorial" rel="nofollow"&gt;IOSDisableATSTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/reorder-collection-view-ios-tutorial" rel="nofollow"&gt;IOSReorderCollectionViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/draw-shapes-core-graphics-ios-tutorial" rel="nofollow"&gt;IOSDrawShapesTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/safari-view-controller-ios-tutorial" rel="nofollow"&gt;IOSSafariViewControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/take-photo-ios-tutorial" rel="nofollow"&gt;IOSTakePhotoTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/move-sprites-accelerometer-ios-tutorial" rel="nofollow"&gt;IOSMoveSpritesAccelerometerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/customizing-table-view-ios-tutorial" rel="nofollow"&gt;IOSCustomizingTableViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/json-ios-tutorial" rel="nofollow"&gt;IOSJSONTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/scroll-view-poging-ios-tutorial" rel="nofollow"&gt;IOSScrollViewPagingTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/add-search-table-view-ios-tutorial" rel="nofollow"&gt;IOSAddSearchTableViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/pasteboard-ios-tutorial" rel="nofollow"&gt;IOSPasteBoardTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/custom-font-ios-tutorial" rel="nofollow"&gt;IOSCustomFontTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/screen-edge-pan-gesture-ios-tutorial" rel="nofollow"&gt;IOSScreenEdgePanGestureTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/live-rendering-ios-tutorial" rel="nofollow"&gt;IOSLiveRenderingTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/load-data-property-list-ios-tutorial" rel="nofollow"&gt;IOSDataLoadPropertyListTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/play-music-avaudioplayer-ios-tutorial" rel="nofollow"&gt;IOSPlayMusicAVAudioPlayTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/custom-collection-view-cell-ios-tutorial" rel="nofollow"&gt;IOSCustomCollectionViewCellTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/cocoapods-ios-tutorial" rel="nofollow"&gt;IOSCocoapodsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/move-view-keyboard-ios-tutorial" rel="nofollow"&gt;IOSMoveViewKeyboardTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/spritekit-move-sprite-path-ios-tutorial" rel="nofollow"&gt;IOSSpriteKitMoveSpritePathTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/add-event-calendar-ios-tutorial" rel="nofollow"&gt;IOSAddEventTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/airdrop-ios-tutorial" rel="nofollow"&gt;IOSAirdropTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/user-defaults-ios-tutorial" rel="nofollow"&gt;IOSUserDefaultsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/delete-multiple-rows-table-view-ios-tutorial" rel="nofollow"&gt;IOS12DeleteMultipleRowsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/take-video-ios-tutorial" rel="nofollow"&gt;IOS12TakeVideoTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/send-imessage-ios-tutorial" rel="nofollow"&gt;IOS12SendiMessageTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/reorder-rows-table-view-ios-tutorial-ios12" rel="nofollow"&gt;IOS12ReorderRowsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/activity-indicator-statusbar-ios-tutorial-ios12" rel="nofollow"&gt;IOS12ActivityStatusBarTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/spritekit-scenes-ios-tutorial-ios12" rel="nofollow"&gt;IOS12SpriteKitScenesTutroial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/delete-rows-table-view-ios-tutorial-ios12" rel="nofollow"&gt;IOS12DeleteTableViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/core-image-ios-tutorial-ios12" rel="nofollow"&gt;IOS12CoreImageTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/send-mail-ios-tutorial-ios12" rel="nofollow"&gt;IOS12SendEmailTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/tab-bar-controller-ios-tutorial-ios12" rel="nofollow"&gt;IOS12TabBarControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreatpr.com/tutorials/scroll-view-ios-tutorial-ios12" rel="nofollow"&gt;IOS12ScrollViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/animate-view-auto-layout-ios-tutorial-ios12" rel="nofollow"&gt;IOS12AnimateViewsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/spritekit-labels-ios-tutorial-ios12" rel="nofollow"&gt;IOS12SpriteKitLabelsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/add-rows-table-view-ios-tutorial-ios12" rel="nofollow"&gt;IOS12AddRowsTableViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/search-map-kit-ios-tutorial-ios12" rel="nofollow"&gt;IOS12SearchMapKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/action-sheet-ios-tutorial-ios12" rel="nofollow"&gt;IOS12ActionSheetTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/hide-navigation-bar-ios-tutorial-ios12" rel="nofollow"&gt;IOS12HideNavBarTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/primitives-scene-kit-ios-tutorial-ios12" rel="nofollow"&gt;IOS12SceneKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/draw-circles-ios-tutorial-ios12" rel="nofollow"&gt;IOS12DrawCirclesTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/activity-indicator-ios-tutorial-ios12" rel="nofollow"&gt;IOS12ActivityIndicatorTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-ios11" class="anchor" aria-hidden="true" href="#ios11"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS11&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/mapkit-flyover-ios-tutorial-ios11" rel="nofollow"&gt;IOS11FlyOverMApKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/activity-view-controller-ios-tutorial-ios11" rel="nofollow"&gt;IOS11ActivityViewControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/today-extension-ios-tutorial-ios11" rel="nofollow"&gt;IOS11TodayExtensionTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/uikit-dynamics-attachment-behaviour-ios-tutorial-ios11" rel="nofollow"&gt;IOS11AttachBehaviourTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/touch-id-tutorial-ios-tutorial-ios11" rel="nofollow"&gt;IOS11TouchIDTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/indexed-table-view-ios-tutorial-ios11" rel="nofollow"&gt;IOS11IndexedTableViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-ios10" class="anchor" aria-hidden="true" href="#ios10"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS10&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/facebook-ios-tutorial-ios10" rel="nofollow"&gt;IOS10FacebookTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/picker-view-ios-tutorial-ios10" rel="nofollow"&gt;IOS10PickerViewkTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/twitter-ios-tutorial-ios10" rel="nofollow"&gt;IOS10TwitterTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/stopwatch-tutorial" rel="nofollow"&gt;IOS10StopWatchTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/draw-gradients-core-graphics-tutorial-ios10" rel="nofollow"&gt;IOS10DrawGradientsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-ios9" class="anchor" aria-hidden="true" href="#ios9"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS9&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/persistent-data-property-list-tutorial" rel="nofollow"&gt;IOS9PersistentPropertytutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/draw-route-mapkit-tutorial" rel="nofollow"&gt;IOS9DrawRouteMapKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/spelling-checker-tutorial" rel="nofollow"&gt;IOS9SpellingCheckerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/index-app-content-core-spotlight-tutorial" rel="nofollow"&gt;IOS9CoreSpotlightTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/stack-view-tutorial" rel="nofollow"&gt;IOS9StackViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-ios8" class="anchor" aria-hidden="true" href="#ios8"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS8&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/play-music-avaudioplayer-ios8-swift" rel="nofollow"&gt;IOS8SwiftPlayMusicAVAudioPlayerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/file-management-tutorial-ios8-swift" rel="nofollow"&gt;IOS8SwiftFileManagementTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/scenes-tutorial-spritekit-swift" rel="nofollow"&gt;SpriteKitSwiftScenesTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/scroll-view-tutorial-ios8-swift" rel="nofollow"&gt;IOS8SwiftScrollViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/add-event-calendar-tutorial-ios8-swift" rel="nofollow"&gt;IOS8SwiftAddEventTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/customizing-header-footer-table-view-ios8-swift" rel="nofollow"&gt;IOS8SWiftHeaderFooterTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/positioning-tutorial-watchkit" rel="nofollow"&gt;WatchKitPositioningTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/display-label-tutorial-watchkit" rel="nofollow"&gt;WatchKitLabelTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/using-labels-spritekit-swift" rel="nofollow"&gt;SpriteKitSwiftLabelTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/volume-view-tutorial-ios8-swift" rel="nofollow"&gt;IOS8SwiftVolumeTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/drawing-circles-uitouch-ios8-swift" rel="nofollow"&gt;IOS8SwiftDrawingCirclesTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/dragging-views-gestures-tutorial-ios8-swift" rel="nofollow"&gt;IOS8SwiftDraggingViewsTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/calculator-tutorial-in-ios8-with-swift" rel="nofollow"&gt;iOS8SwiftCalculatorTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/tableview-tutorial-in-ios8-with-swift" rel="nofollow"&gt;iOS8SwiftTableViewTurorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-ios7" class="anchor" aria-hidden="true" href="#ios7"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS7&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/navigate-with-uinavigationcontroller-in-ios7" rel="nofollow"&gt;iOS7NavigationControllerTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/scrolling-in-sprite-kit-tutorial" rel="nofollow"&gt;ScrollingSpriteKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/stretchable-images-ios7-tutorial" rel="nofollow"&gt;iOS7StretchableImageTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/display-region-map-kit-ios7" rel="nofollow"&gt;iOS7ShowRegionMapKitTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/add-contacts-to-the-address-book-in-ios7" rel="nofollow"&gt;iOS7AddressBookTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/get-current-location-with-core-location" rel="nofollow"&gt;iOS7CurrentLocationTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/ios-7-views-image-view" rel="nofollow"&gt;iOS7ImageViewTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/using-background-fetch-in-ios-7" rel="nofollow"&gt;iOS7BackgroundFetchTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/animating-sprites-with-sprite-kit" rel="nofollow"&gt;SpriteAnimationTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/using-auto-layout-xcode-5" rel="nofollow"&gt;iOS7AutoLayoutTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/ios-7-views-setting-tint-color" rel="nofollow"&gt;iOS7TintColorTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-ios6" class="anchor" aria-hidden="true" href="#ios6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;iOS6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/changing-screens-with-uipagecontrol" rel="nofollow"&gt;ChangeScreensDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/objective-c-add-a-category" rel="nofollow"&gt;CategoryDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/create-a-splitviewcontroller-on-the-ipad" rel="nofollow"&gt;SplitViewControllerDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/auto-layout-in-ios-6-centering-views" rel="nofollow"&gt;CenteringViewsDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/auto-layout-in-ios-6-keep-aspect-ratio-of-image" rel="nofollow"&gt;ImageAspectRatioDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/scaling-views" rel="nofollow"&gt;ScalingViewDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/display-placemarks-with-mapkit" rel="nofollow"&gt;PlacemarkDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/ios-file-management" rel="nofollow"&gt;FileManagementDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/simple-calculator" rel="nofollow"&gt;SimpleCalculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/retrieving-contacts-from-the-address-book" rel="nofollow"&gt;AddressBookDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/auto-layout-in-ios-6-adding-constraints-through-code" rel="nofollow"&gt;ConstraintsCodeDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/introduction-to-core-data" rel="nofollow"&gt;CoreDataDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/customize-tableviewcells-with-storyboards" rel="nofollow"&gt;CustomizingTableviewCell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ioscreator.com/tutorials/read-values-of-the-accelerometer" rel="nofollow"&gt;AccelerometerDemo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ioscreator</author><guid isPermaLink="false">https://github.com/ioscreator/ioscreator</guid><pubDate>Sun, 05 Jan 2020 00:15:00 GMT</pubDate></item><item><title>SwiftyJSON/SwiftyJSON #16 in Swift, Today</title><link>https://github.com/SwiftyJSON/SwiftyJSON</link><description>&lt;p&gt;&lt;i&gt;The better way to deal with JSON data in Swift.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-swiftyjson" class="anchor" aria-hidden="true" href="#swiftyjson"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftyJSON&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/61f99ab5fa040b3e040ca6016b09cece412988eb/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f5377696674794a534f4e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/61f99ab5fa040b3e040ca6016b09cece412988eb/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f5377696674794a534f4e2e737667" alt="CocoaPods" data-canonical-src="https://img.shields.io/cocoapods/v/SwiftyJSON.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/34be126e9cb8e20a199d6c9b05eef5b2add84dbb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d694f53253230382e302532302537432532306d61634f5325323031302e313025323025374325323074764f53253230392e3025323025374325323077617463684f53253230332e302d4632384430302e737667"&gt;&lt;img src="https://camo.githubusercontent.com/34be126e9cb8e20a199d6c9b05eef5b2add84dbb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d694f53253230382e302532302537432532306d61634f5325323031302e313025323025374325323074764f53253230392e3025323025374325323077617463684f53253230332e302d4632384430302e737667" alt="Platform" data-canonical-src="https://img.shields.io/badge/platforms-iOS%208.0%20%7C%20macOS%2010.10%20%7C%20tvOS%209.0%20%7C%20watchOS%203.0-F28D00.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://houndci.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1c940d021ef775a44e0880bc3ba124a6bee5fefb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657669657765645f62792d486f756e642d3845363442302e737667" alt="Reviewed by Hound" data-canonical-src="https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SwiftyJSON makes it easy to deal with JSON data in Swift.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Build Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*OS&lt;/td&gt;
&lt;td&gt;&lt;a href="https://travis-ci.org/SwiftyJSON/SwiftyJSON" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7232829ff03cc805ceaa102c95cc92116e086196/68747470733a2f2f7472617669732d63692e6f72672f5377696674794a534f4e2f5377696674794a534f4e2e7376673f6272616e63683d6d6173746572" alt="Travis CI" data-canonical-src="https://travis-ci.org/SwiftyJSON/SwiftyJSON.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/IBM-Swift/SwiftyJSON"&gt;Linux&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://travis-ci.org/IBM-Swift/SwiftyJSON" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b48a8adabc1d92acc9353815a8ffd92201303a53/68747470733a2f2f7472617669732d63692e6f72672f49424d2d53776966742f5377696674794a534f4e2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/IBM-Swift/SwiftyJSON.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#why-is-the-typical-json-handling-in-swift-not-good"&gt;Why is the typical JSON handling in Swift NOT good&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integration"&gt;Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#initialization"&gt;Initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#subscript"&gt;Subscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loop"&gt;Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#error"&gt;Error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optional-getter"&gt;Optional getter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#non-optional-getter"&gt;Non-optional getter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setter"&gt;Setter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#raw-object"&gt;Raw object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#literal-convertibles"&gt;Literal convertibles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#merging"&gt;Merging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#work-with-alamofire"&gt;Work with Alamofire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#work-with-moya"&gt;Work with Moya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swiftyjson-model-generator"&gt;SwiftyJSON Model Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://tangplin.github.io/swiftyjson/" rel="nofollow"&gt;中文介绍&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-why-is-the-typical-json-handling-in-swift-not-good" class="anchor" aria-hidden="true" href="#why-is-the-typical-json-handling-in-swift-not-good"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why is the typical JSON handling in Swift NOT good?&lt;/h2&gt;
&lt;p&gt;Swift is very strict about types. But although explicit typing is good for saving us from mistakes, it becomes painful when dealing with JSON and other areas that are, by nature, implicit about types.&lt;/p&gt;
&lt;p&gt;Take the Twitter API for example. Say we want to retrieve a user's "name" value of some tweet in Swift (according to &lt;a href="https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline" rel="nofollow"&gt;Twitter's API&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The code would look like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; statusesArray &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt; JSONSerialization.&lt;span class="pl-c1"&gt;jsonObject&lt;/span&gt;(&lt;span class="pl-c1"&gt;with&lt;/span&gt;: data, &lt;span class="pl-c1"&gt;options&lt;/span&gt;: .&lt;span class="pl-smi"&gt;allowFragments&lt;/span&gt;) &lt;span class="pl-k"&gt;as?&lt;/span&gt; [[&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;]],
    &lt;span class="pl-k"&gt;let&lt;/span&gt; user &lt;span class="pl-k"&gt;=&lt;/span&gt; statusesArray[&lt;span class="pl-c1"&gt;0&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;as?&lt;/span&gt; [&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;],
    &lt;span class="pl-k"&gt;let&lt;/span&gt; username &lt;span class="pl-k"&gt;=&lt;/span&gt; user[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;as?&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Finally we got the username&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's not good.&lt;/p&gt;
&lt;p&gt;Even if we use optional chaining, it would be messy:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; JSONObject &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; JSONSerialization.&lt;span class="pl-c1"&gt;jsonObject&lt;/span&gt;(&lt;span class="pl-c1"&gt;with&lt;/span&gt;: data, &lt;span class="pl-c1"&gt;options&lt;/span&gt;: .&lt;span class="pl-smi"&gt;allowFragments&lt;/span&gt;) &lt;span class="pl-k"&gt;as?&lt;/span&gt; [[&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;]],
    &lt;span class="pl-k"&gt;let&lt;/span&gt; username &lt;span class="pl-k"&gt;=&lt;/span&gt; (JSONObject[&lt;span class="pl-c1"&gt;0&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;as?&lt;/span&gt; [&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;])&lt;span class="pl-k"&gt;?&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;as?&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; There's our username&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An unreadable mess--for something that should really be simple!&lt;/p&gt;
&lt;p&gt;With SwiftyJSON all you have to do is:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(&lt;span class="pl-c1"&gt;data&lt;/span&gt;: dataFromNetworking)
&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; userName &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-c1"&gt;0&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;string&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Now you got your value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And don't worry about the Optional Wrapping thing. It's done for you automatically.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(&lt;span class="pl-c1"&gt;data&lt;/span&gt;: dataFromNetworking)
&lt;span class="pl-k"&gt;let&lt;/span&gt; result &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-c1"&gt;999999&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;wrong_key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;wrong_name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; userName &lt;span class="pl-k"&gt;=&lt;/span&gt; result.&lt;span class="pl-smi"&gt;string&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Calm down, take it easy, the ".string" property still produces the correct Optional String type with safety&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Print the error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(result.&lt;span class="pl-c1"&gt;error&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 8.0+ | macOS 10.10+ | tvOS 9.0+ | watchOS 2.0+&lt;/li&gt;
&lt;li&gt;Xcode 8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-integration" class="anchor" aria-hidden="true" href="#integration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration&lt;/h2&gt;
&lt;h4&gt;&lt;a id="user-content-cocoapods-ios-8-os-x-109" class="anchor" aria-hidden="true" href="#cocoapods-ios-8-os-x-109"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods (iOS 8+, OS X 10.9+)&lt;/h4&gt;
&lt;p&gt;You can use &lt;a href="http://cocoapods.org/" rel="nofollow"&gt;CocoaPods&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;platform &lt;span class="pl-c1"&gt;:ios&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;8.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
use_frameworks!

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;MyApp&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;SwiftyJSON&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 4.0&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-carthage-ios-8-os-x-109" class="anchor" aria-hidden="true" href="#carthage-ios-8-os-x-109"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage (iOS 8+, OS X 10.9+)&lt;/h4&gt;
&lt;p&gt;You can use &lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github "SwiftyJSON/SwiftyJSON" ~&amp;gt; 4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use Carthage to build your dependencies, make sure you have added &lt;code&gt;SwiftyJSON.framework&lt;/code&gt; to the "Linked Frameworks and Libraries" section of your target, and have included them in your Carthage framework copying build phase.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Package Manager&lt;/h4&gt;
&lt;p&gt;You can use &lt;a href="https://swift.org/package-manager" rel="nofollow"&gt;The Swift Package Manager&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding the proper description to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swift-tools-version:4.0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;PackageDescription&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; package &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Package&lt;/span&gt;(
    &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;YOUR_PROJECT_NAME&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [
        .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/SwiftyJSON/SwiftyJSON.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;4.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
    ]
)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;swift build&lt;/code&gt; whenever you get prepared.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-manually-ios-7-os-x-109" class="anchor" aria-hidden="true" href="#manually-ios-7-os-x-109"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually (iOS 7+, OS X 10.9+)&lt;/h4&gt;
&lt;p&gt;To use this library in your project manually you may:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;for Projects, just drag SwiftyJSON.swift to the project tree&lt;/li&gt;
&lt;li&gt;for Workspaces, include the whole SwiftyJSON.xcodeproj&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;h4&gt;&lt;a id="user-content-initialization" class="anchor" aria-hidden="true" href="#initialization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Initialization&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;SwiftyJSON&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(&lt;span class="pl-c1"&gt;data&lt;/span&gt;: dataFromNetworking)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(jsonObject)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; dataFromString &lt;span class="pl-k"&gt;=&lt;/span&gt; jsonString.&lt;span class="pl-c1"&gt;data&lt;/span&gt;(&lt;span class="pl-c1"&gt;using&lt;/span&gt;: .&lt;span class="pl-c1"&gt;utf8&lt;/span&gt;, &lt;span class="pl-c1"&gt;allowLossyConversion&lt;/span&gt;: &lt;span class="pl-c1"&gt;false&lt;/span&gt;) {
    &lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(&lt;span class="pl-c1"&gt;data&lt;/span&gt;: dataFromString)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-subscript" class="anchor" aria-hidden="true" href="#subscript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Subscript&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Getting a double from a JSON Array&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-c1"&gt;0&lt;/span&gt;].&lt;span class="pl-c1"&gt;double&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Getting an array of string from a JSON Array&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; arrayNames &lt;span class="pl-k"&gt;=&lt;/span&gt;  json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;arrayValue&lt;/span&gt;.&lt;span class="pl-c1"&gt;map&lt;/span&gt; {&lt;span class="pl-c1"&gt;$0&lt;/span&gt;[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;stringValue&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Getting a string from a JSON Dictionary&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;stringValue&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Getting a string using a path to the element&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; path&lt;span class="pl-k"&gt;:&lt;/span&gt; [JSONSubscriptType] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[path].&lt;span class="pl-smi"&gt;string&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Just the same&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-c1"&gt;1&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-c1"&gt;2&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;string&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Alternatively&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; With a hard way&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[].&lt;span class="pl-smi"&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; With a custom way&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keys&lt;span class="pl-k"&gt;:&lt;/span&gt;[JSONSubscriptType] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[keys].&lt;span class="pl-smi"&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-loop" class="anchor" aria-hidden="true" href="#loop"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Loop&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; If json is .Dictionary&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt; (key,subJson)&lt;span class="pl-k"&gt;:&lt;/span&gt;(&lt;span class="pl-c1"&gt;String&lt;/span&gt;, JSON) &lt;span class="pl-k"&gt;in&lt;/span&gt; json {
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The first element is always a String, even if the JSON is an Array&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; If json is .Array&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; The `index` is 0..&amp;lt;json.count's string value&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt; (index,subJson)&lt;span class="pl-k"&gt;:&lt;/span&gt;(&lt;span class="pl-c1"&gt;String&lt;/span&gt;, JSON) &lt;span class="pl-k"&gt;in&lt;/span&gt; json {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-error" class="anchor" aria-hidden="true" href="#error"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Error&lt;/h4&gt;
&lt;h5&gt;&lt;a id="user-content-swiftyjson-4x" class="anchor" aria-hidden="true" href="#swiftyjson-4x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftyJSON 4.x&lt;/h5&gt;
&lt;p&gt;SwiftyJSON 4.x introduces an enum type called &lt;code&gt;SwiftyJSONError&lt;/code&gt;, which includes &lt;code&gt;unsupportedType&lt;/code&gt;, &lt;code&gt;indexOutOfBounds&lt;/code&gt;, &lt;code&gt;elementTooDeep&lt;/code&gt;, &lt;code&gt;wrongType&lt;/code&gt;, &lt;code&gt;notExist&lt;/code&gt; and &lt;code&gt;invalidJSON&lt;/code&gt;, at the same time, &lt;code&gt;ErrorDomain&lt;/code&gt; are being replaced by &lt;code&gt;SwiftyJSONError.errorDomain&lt;/code&gt;.
Note: Those old error types are deprecated in SwiftyJSON 4.x and will be removed in the future release.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-swiftyjson-3x" class="anchor" aria-hidden="true" href="#swiftyjson-3x"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftyJSON 3.x&lt;/h5&gt;
&lt;p&gt;Use a subscript to get/set a value in an Array or Dictionary&lt;/p&gt;
&lt;p&gt;If the JSON is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an array, the app may crash with "index out-of-bounds."&lt;/li&gt;
&lt;li&gt;a dictionary, it will be assigned to &lt;code&gt;nil&lt;/code&gt; without a reason.&lt;/li&gt;
&lt;li&gt;not an array or a dictionary, the app may crash with an "unrecognised selector" exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will never happen in SwiftyJSON.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;age&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-c1"&gt;999&lt;/span&gt;].&lt;span class="pl-smi"&gt;string&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-c1"&gt;999&lt;/span&gt;].&lt;span class="pl-c1"&gt;error&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "Array[999] is out of bounds"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Jack&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;age&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;25&lt;/span&gt;])
&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;address&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;string&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;address&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;error&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "Dictionary["address"] does not exist"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(&lt;span class="pl-c1"&gt;12345&lt;/span&gt;)
&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; age &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-c1"&gt;0&lt;/span&gt;].&lt;span class="pl-smi"&gt;string&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-c1"&gt;0&lt;/span&gt;])       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "Array[0] failure, It is not an array"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-c1"&gt;0&lt;/span&gt;].&lt;span class="pl-c1"&gt;error&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "Array[0] failure, It is not an array"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}

&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; name &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;string&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "Dictionary[\"name"] failure, It is not an dictionary"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;error&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; "Dictionary[\"name"] failure, It is not an dictionary"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-optional-getter" class="anchor" aria-hidden="true" href="#optional-getter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optional getter&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; NSNumber&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;favourites_count&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;number&lt;/span&gt; {
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Print the error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;favourites_count&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;error&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; String&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;string&lt;/span&gt; {
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Print the error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;error&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Bool&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;is_translator&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;bool&lt;/span&gt; {
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Print the error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;is_translator&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;error&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; id &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;int&lt;/span&gt; {
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
   &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Print the error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;error&lt;/span&gt;&lt;span class="pl-k"&gt;!&lt;/span&gt;)
}
&lt;span class="pl-k"&gt;...&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-non-optional-getter" class="anchor" aria-hidden="true" href="#non-optional-getter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Non-optional getter&lt;/h4&gt;
&lt;p&gt;Non-optional getter is named &lt;code&gt;xxxValue&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; If not a Number or nil, return 0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; id&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;intValue&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; If not a String or nil, return ""&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; name&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;stringValue&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; If not an Array or nil, return []&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; list&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Array&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;JSON&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;arrayValue&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; If not a Dictionary or nil, return [:]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; user&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Dictionary&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;, JSON&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;dictionaryValue&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-setter" class="anchor" aria-hidden="true" href="#setter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setter&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;new-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
json[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;int&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;  &lt;span class="pl-c1"&gt;1234567890&lt;/span&gt;
json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;coordinate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;double&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;  &lt;span class="pl-c1"&gt;8766.766&lt;/span&gt;
json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-smi"&gt;string&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Jack&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
json.&lt;span class="pl-smi"&gt;arrayObject&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;,&lt;span class="pl-c1"&gt;4&lt;/span&gt;]
json.&lt;span class="pl-smi"&gt;dictionaryObject&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Jack&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;age&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-c1"&gt;25&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-raw-object" class="anchor" aria-hidden="true" href="#raw-object"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Raw object&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rawObject&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; json.&lt;span class="pl-smi"&gt;object&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; rawValue&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; json.&lt;span class="pl-c1"&gt;rawValue&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;convert the JSON to raw NSData&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;do&lt;/span&gt; {
	&lt;span class="pl-k"&gt;let&lt;/span&gt; rawData &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; json.&lt;span class="pl-c1"&gt;rawData&lt;/span&gt;()
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;catch&lt;/span&gt; {
	&lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Error &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;error&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;convert the JSON to a raw String&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; rawString &lt;span class="pl-k"&gt;=&lt;/span&gt; json.&lt;span class="pl-c1"&gt;rawString&lt;/span&gt;() {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;Do something you want&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
	&lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;json.rawString is nil&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-existence" class="anchor" aria-hidden="true" href="#existence"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Existence&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; shows you whether value specified in JSON or not&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;].&lt;span class="pl-c1"&gt;exists&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-literal-convertibles" class="anchor" aria-hidden="true" href="#literal-convertibles"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Literal convertibles&lt;/h4&gt;
&lt;p&gt;For more info about literal convertibles: &lt;a href="http://nshipster.com/swift-literal-convertible/" rel="nofollow"&gt;Swift Literal Convertibles&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; StringLiteralConvertible&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I'm a json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt; &lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;IntegerLiteralConvertible&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; json&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt;  &lt;span class="pl-c1"&gt;12345&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; BooleanLiteralConvertible&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt;  &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; FloatLiteralConvertible&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt;  &lt;span class="pl-c1"&gt;2.8765&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; DictionaryLiteralConvertible&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt;  [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ArrayLiteralConvertible&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; json&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt;  [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;I&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;am&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; With subscript in array&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; json&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt;  [&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;]
json[&lt;span class="pl-c1"&gt;0&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;
json[&lt;span class="pl-c1"&gt;1&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;
json[&lt;span class="pl-c1"&gt;2&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;300&lt;/span&gt;
json[&lt;span class="pl-c1"&gt;999&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;300&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Don't worry, nothing will happen&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; With subscript in dictionary&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; json&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt;  [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Jack&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;age&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;25&lt;/span&gt;]
json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Mike&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;age&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;25&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; It's OK to set String&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;address&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;L.A.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Add the "address": "L.A." in json&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Array &amp;amp; Dictionary&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; json&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt;  [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Jack&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;age&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;25&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;what&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;this&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]]]
json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-c1"&gt;3&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;what&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;that&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
json[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;what&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;that&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; path&lt;span class="pl-k"&gt;:&lt;/span&gt; [JSONSubscriptType] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;span class="pl-c1"&gt;3&lt;/span&gt;,&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;what&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
json[path] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;that&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; With other JSON objects&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; user&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;username&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Steve&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;supersecurepassword&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; auth&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; user.&lt;span class="pl-smi"&gt;object&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; use user.object instead of just user&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;apikey&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;supersecretapitoken&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
]&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-merging" class="anchor" aria-hidden="true" href="#merging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Merging&lt;/h4&gt;
&lt;p&gt;It is possible to merge one JSON into another JSON. Merging a JSON into another JSON adds all non existing values to the original JSON which are only present in the &lt;code&gt;other&lt;/code&gt; JSON.&lt;/p&gt;
&lt;p&gt;If both JSONs contain a value for the same key, &lt;em&gt;mostly&lt;/em&gt; this value gets overwritten in the original JSON, but there are two cases where it provides some special treatment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.array&lt;/code&gt; the values form the array found in the &lt;code&gt;other&lt;/code&gt; JSON getting appended to the original JSON's array value.&lt;/li&gt;
&lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.dictionary&lt;/code&gt; both JSON-values are getting merged the same way the encapsulating JSON is merged.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case, where two fields in a JSON have a different types, the value will get always overwritten.&lt;/p&gt;
&lt;p&gt;There are two different fashions for merging: &lt;code&gt;merge&lt;/code&gt; modifies the original JSON, whereas &lt;code&gt;merged&lt;/code&gt; works non-destructively on a copy.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; original&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt; [
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;first_name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;John&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;age&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;20&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;skills&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Coding&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Reading&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;address&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; [
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;street&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Front St&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;zip&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;12345&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    ]
]

&lt;span class="pl-k"&gt;let&lt;/span&gt; update&lt;span class="pl-k"&gt;:&lt;/span&gt; JSON &lt;span class="pl-k"&gt;=&lt;/span&gt; [
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;last_name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Doe&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;age&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;21&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;skills&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Writing&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;address&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; [
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;zip&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;12342&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;city&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;New York City&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    ]
]

&lt;span class="pl-k"&gt;let&lt;/span&gt; updated &lt;span class="pl-k"&gt;=&lt;/span&gt; original.&lt;span class="pl-c1"&gt;merge&lt;/span&gt;(&lt;span class="pl-c1"&gt;with&lt;/span&gt;: update)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     "first_name": "John",&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     "last_name": "Doe",&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     "age": 21,&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     "skills": ["Coding", "Reading", "Writing"],&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     "address": [&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;         "street": "Front St",&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;         "zip": "12342",&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;         "city": "New York City"&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt;     ]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; ]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-string-representation" class="anchor" aria-hidden="true" href="#string-representation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String representation&lt;/h2&gt;
&lt;p&gt;There are two options available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use the default Swift one&lt;/li&gt;
&lt;li&gt;use a custom one that will handle optionals well and represent &lt;code&gt;nil&lt;/code&gt; as &lt;code&gt;"null"&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dict &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;two&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;] &lt;span class="pl-k"&gt;as&lt;/span&gt; [&lt;span class="pl-c1"&gt;String&lt;/span&gt;: &lt;span class="pl-c1"&gt;Any&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;]
&lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(dict)
&lt;span class="pl-k"&gt;let&lt;/span&gt; representation &lt;span class="pl-k"&gt;=&lt;/span&gt; json.&lt;span class="pl-c1"&gt;rawString&lt;/span&gt;(&lt;span class="pl-c1"&gt;options&lt;/span&gt;: [.&lt;span class="pl-smi"&gt;castNilToNSNull&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;])
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; representation is "{\"1\":2,\"2\":\"two\",\"3\":null}", which represents {"1":2,"2":"two","3":null}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-work-with-alamofire" class="anchor" aria-hidden="true" href="#work-with-alamofire"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Work with &lt;a href="https://github.com/Alamofire/Alamofire"&gt;Alamofire&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SwiftyJSON nicely wraps the result of the Alamofire JSON response handler:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;Alamofire.&lt;span class="pl-c1"&gt;request&lt;/span&gt;(url, &lt;span class="pl-c1"&gt;method&lt;/span&gt;: .&lt;span class="pl-smi"&gt;get&lt;/span&gt;).&lt;span class="pl-c1"&gt;validate&lt;/span&gt;().&lt;span class="pl-smi"&gt;responseJSON&lt;/span&gt; { response &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;switch&lt;/span&gt; response.&lt;span class="pl-smi"&gt;result&lt;/span&gt; {
    &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;success&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; value)&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(value)
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;JSON: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;json&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;failure&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; error)&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(error)
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also provide an extension of Alamofire for serializing NSData to SwiftyJSON's JSON.&lt;/p&gt;
&lt;p&gt;See: &lt;a href="https://github.com/SwiftyJSON/Alamofire-SwiftyJSON"&gt;Alamofire-SwiftyJSON&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-work-with-moya" class="anchor" aria-hidden="true" href="#work-with-moya"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Work with &lt;a href="https://github.com/Moya/Moya"&gt;Moya&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SwiftyJSON parse data to JSON:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; provider &lt;span class="pl-k"&gt;=&lt;/span&gt; MoyaProvider&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;Backend&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;()
provider.&lt;span class="pl-c1"&gt;request&lt;/span&gt;(.&lt;span class="pl-smi"&gt;showProducts&lt;/span&gt;) { result &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;switch&lt;/span&gt; result {
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; .&lt;span class="pl-c1"&gt;success&lt;/span&gt;(moyaResponse)&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; data &lt;span class="pl-k"&gt;=&lt;/span&gt; moyaResponse.&lt;span class="pl-smi"&gt;data&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; json &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSON&lt;/span&gt;(&lt;span class="pl-c1"&gt;data&lt;/span&gt;: data) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; convert network data to json&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(json)
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; .&lt;span class="pl-c1"&gt;failure&lt;/span&gt;(error)&lt;span class="pl-k"&gt;:&lt;/span&gt;
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;error: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;error&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-swiftyjson-model-generator" class="anchor" aria-hidden="true" href="#swiftyjson-model-generator"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftyJSON Model Generator&lt;/h2&gt;
&lt;p&gt;Tools to generate SwiftyJSON Models&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jsoncafe.com/" rel="nofollow"&gt;JSON Cafe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Ahmed-Ali/JSONExport"&gt;JSON Export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>SwiftyJSON</author><guid isPermaLink="false">https://github.com/SwiftyJSON/SwiftyJSON</guid><pubDate>Sun, 05 Jan 2020 00:16:00 GMT</pubDate></item><item><title>RxSwiftCommunity/RxDataSources #17 in Swift, Today</title><link>https://github.com/RxSwiftCommunity/RxDataSources</link><description>&lt;p&gt;&lt;i&gt;UITableView and UICollectionView Data Sources for RxSwift (sections, animated updates, editing ...)&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/RxSwiftCommunity/RxDataSources" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a429cbc2966f3bdacdf4b729207539869488220f/68747470733a2f2f7472617669732d63692e6f72672f52785377696674436f6d6d756e6974792f527844617461536f75726365732e7376673f6272616e63683d6d6173746572" alt="Travis CI" data-canonical-src="https://travis-ci.org/RxSwiftCommunity/RxDataSources.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-table-and-collection-view-data-sources" class="anchor" aria-hidden="true" href="#table-and-collection-view-data-sources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table and Collection view data sources&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; &lt;strong&gt;O(N)&lt;/strong&gt; algorithm for calculating differences
&lt;ul&gt;
&lt;li&gt;the algorithm has the assumption that all sections and items are unique so there is no ambiguity&lt;/li&gt;
&lt;li&gt;in case there is ambiguity, fallbacks automagically on non animated refresh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; it applies additional heuristics to send the least number of commands to sectioned view
&lt;ul&gt;
&lt;li&gt;even though the running time is linear, preferred number of sent commands is usually a lot less than linear&lt;/li&gt;
&lt;li&gt;it is preferred (and possible) to cap the number of changes to some small number, and in case the number of changes grows towards linear, just do normal reload&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Supports &lt;strong&gt;extending your item and section structures&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;just extend your item with &lt;code&gt;IdentifiableType&lt;/code&gt; and &lt;code&gt;Equatable&lt;/code&gt;, and your section with &lt;code&gt;AnimatableSectionModelType&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Supports all combinations of two level hierarchical animations for &lt;strong&gt;both sections and items&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Section animations: Insert, Delete, Move&lt;/li&gt;
&lt;li&gt;Item animations: Insert, Delete, Move, Reload (if old value is not equal to new value)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Configurable animation types for &lt;code&gt;Insert&lt;/code&gt;, &lt;code&gt;Reload&lt;/code&gt; and &lt;code&gt;Delete&lt;/code&gt; (Automatic, Fade, ...)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Example app&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Randomized stress tests (example app)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Supports editing out of the box (example app)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Works with &lt;code&gt;UITableView&lt;/code&gt; and &lt;code&gt;UICollectionView&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-why" class="anchor" aria-hidden="true" href="#why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why&lt;/h2&gt;
&lt;p&gt;Writing table and collection view data sources is tedious. There is a large number of delegate methods that need to be implemented for the simplest case possible.&lt;/p&gt;
&lt;p&gt;RxSwift helps alleviate some of the burden with a simple data binding mechanism:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Turn your data into an Observable sequence&lt;/li&gt;
&lt;li&gt;Bind the data to the tableView/collectionView using one of:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rx.items(dataSource:protocol&amp;lt;RxTableViewDataSourceType, UITableViewDataSource&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rx.items(cellIdentifier:String)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rx.items(cellIdentifier:String:Cell.Type:_:)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rx.items(_:_:)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; data &lt;span class="pl-k"&gt;=&lt;/span&gt; Observable&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;[&lt;span class="pl-c1"&gt;String&lt;/span&gt;]&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;.&lt;span class="pl-c1"&gt;just&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;first element&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;second element&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;third element&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])

data.&lt;span class="pl-c1"&gt;bind&lt;/span&gt;(&lt;span class="pl-c1"&gt;to&lt;/span&gt;: tableView.&lt;span class="pl-smi"&gt;rx&lt;/span&gt;.&lt;span class="pl-c1"&gt;items&lt;/span&gt;(&lt;span class="pl-c1"&gt;cellIdentifier&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Cell&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)) { index, model, cell &lt;span class="pl-k"&gt;in&lt;/span&gt;
  cell.&lt;span class="pl-smi"&gt;textLabel&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;.&lt;span class="pl-c1"&gt;text&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; model
}
.&lt;span class="pl-c1"&gt;disposed&lt;/span&gt;(&lt;span class="pl-c1"&gt;by&lt;/span&gt;: disposeBag)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works well with simple data sets but does not handle cases where you need to bind complex data sets with multiples sections, or when you need to perform animations when adding/modifying/deleting items.&lt;/p&gt;
&lt;p&gt;These are precisely the use cases that RxDataSources helps solve.&lt;/p&gt;
&lt;p&gt;With RxDataSources, it is super easy to just write&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dataSource &lt;span class="pl-k"&gt;=&lt;/span&gt; RxTableViewSectionedReloadDataSource&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;SectionModel&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;, &lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-c1"&gt;configureCell&lt;/span&gt;: configureCell)
Observable.&lt;span class="pl-c1"&gt;just&lt;/span&gt;([&lt;span class="pl-c1"&gt;SectionModel&lt;/span&gt;(&lt;span class="pl-c1"&gt;model&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;items&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;])])
    .&lt;span class="pl-c1"&gt;bind&lt;/span&gt;(&lt;span class="pl-c1"&gt;to&lt;/span&gt;: tableView.&lt;span class="pl-smi"&gt;rx&lt;/span&gt;.&lt;span class="pl-c1"&gt;items&lt;/span&gt;(&lt;span class="pl-c1"&gt;dataSource&lt;/span&gt;: dataSource))
    .&lt;span class="pl-c1"&gt;disposed&lt;/span&gt;(&lt;span class="pl-c1"&gt;by&lt;/span&gt;: disposeBag)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/kzaher/rxswiftcontent/rxdatasources/RxDataSources.gif"&gt;&lt;img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/rxdatasources/RxDataSources.gif" alt="RxDataSources example app" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-how" class="anchor" aria-hidden="true" href="#how"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How&lt;/h2&gt;
&lt;p&gt;Given the following custom data structure:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;CustomData&lt;/span&gt; {
  &lt;span class="pl-k"&gt;var&lt;/span&gt; anInt&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt;
  &lt;span class="pl-k"&gt;var&lt;/span&gt; aString&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;
  &lt;span class="pl-k"&gt;var&lt;/span&gt; aCGPoint&lt;span class="pl-k"&gt;:&lt;/span&gt; CGPoint
}&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Start by defining your sections with a struct that conforms to the &lt;code&gt;SectionModelType&lt;/code&gt; protocol:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;define the &lt;code&gt;Item&lt;/code&gt; typealias: equal to the type of items that the section will contain&lt;/li&gt;
&lt;li&gt;declare an &lt;code&gt;items&lt;/code&gt; property: of type array of &lt;code&gt;Item&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;SectionOfCustomData&lt;/span&gt; {
  &lt;span class="pl-k"&gt;var&lt;/span&gt; header&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt;    
  &lt;span class="pl-k"&gt;var&lt;/span&gt; items&lt;span class="pl-k"&gt;:&lt;/span&gt; [Item]
}
&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;SectionOfCustomData&lt;/span&gt;: &lt;span class="pl-e"&gt;SectionModelType &lt;/span&gt;{
  &lt;span class="pl-k"&gt;typealias&lt;/span&gt; &lt;span class="pl-en"&gt;Item&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; CustomData

   &lt;span class="pl-k"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;original&lt;/span&gt;&lt;/span&gt;: SectionOfCustomData, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;items&lt;/span&gt;&lt;/span&gt;: [Item]) {
    &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; original
    &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-smi"&gt;items&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; items
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Create a dataSource object and pass it your &lt;code&gt;SectionOfCustomData&lt;/code&gt; type:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dataSource &lt;span class="pl-k"&gt;=&lt;/span&gt; RxTableViewSectionedReloadDataSource&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;SectionOfCustomData&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(
  &lt;span class="pl-c1"&gt;configureCell&lt;/span&gt;: { dataSource, tableView, indexPath, item &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; cell &lt;span class="pl-k"&gt;=&lt;/span&gt; tableView.&lt;span class="pl-c1"&gt;dequeueReusableCell&lt;/span&gt;(&lt;span class="pl-c1"&gt;withIdentifier&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Cell&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;for&lt;/span&gt;: indexPath)
    cell.&lt;span class="pl-smi"&gt;textLabel&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;.&lt;span class="pl-c1"&gt;text&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Item &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;item.&lt;span class="pl-smi"&gt;anInt&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;item.&lt;span class="pl-smi"&gt;aString&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt; - &lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;item.&lt;span class="pl-smi"&gt;aCGPoint&lt;/span&gt;.&lt;span class="pl-smi"&gt;x&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;span class="pl-pse"&gt;\(&lt;/span&gt;&lt;span class="pl-s1"&gt;item.&lt;span class="pl-smi"&gt;aCGPoint&lt;/span&gt;.&lt;span class="pl-smi"&gt;y&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pse"&gt;&lt;span class="pl-s1"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; cell
})&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Customize closures on the dataSource as needed:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;titleForHeaderInSection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;titleForFooterInSection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;dataSource.&lt;span class="pl-smi"&gt;titleForHeaderInSection&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { dataSource, index &lt;span class="pl-k"&gt;in&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; dataSource.&lt;span class="pl-smi"&gt;sectionModels&lt;/span&gt;[index].&lt;span class="pl-c1"&gt;header&lt;/span&gt;
}

dataSource.&lt;span class="pl-smi"&gt;titleForFooterInSection&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { dataSource, indexPath &lt;span class="pl-k"&gt;in&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; dataSource.&lt;span class="pl-smi"&gt;sectionModels&lt;/span&gt;[index].&lt;span class="pl-smi"&gt;footer&lt;/span&gt;
}

dataSource.&lt;span class="pl-smi"&gt;canEditRowAtIndexPath&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { dataSource, indexPath &lt;span class="pl-k"&gt;in&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
}

dataSource.&lt;span class="pl-smi"&gt;canMoveRowAtIndexPath&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; { dataSource, indexPath &lt;span class="pl-k"&gt;in&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="4"&gt;
&lt;li&gt;Define the actual data as an Observable sequence of CustomData objects and bind it to the tableView&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; sections &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  &lt;span class="pl-c1"&gt;SectionOfCustomData&lt;/span&gt;(&lt;span class="pl-c1"&gt;header&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;First section&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;items&lt;/span&gt;: [&lt;span class="pl-c1"&gt;CustomData&lt;/span&gt;(&lt;span class="pl-c1"&gt;anInt&lt;/span&gt;: &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;aString&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;zero&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;aCGPoint&lt;/span&gt;: CGPoint.&lt;span class="pl-smi"&gt;zero&lt;/span&gt;), &lt;span class="pl-c1"&gt;CustomData&lt;/span&gt;(&lt;span class="pl-c1"&gt;anInt&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;aString&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;one&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;aCGPoint&lt;/span&gt;: &lt;span class="pl-c1"&gt;CGPoint&lt;/span&gt;(&lt;span class="pl-c1"&gt;x&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;y&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt;)) ]),
  &lt;span class="pl-c1"&gt;SectionOfCustomData&lt;/span&gt;(&lt;span class="pl-c1"&gt;header&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Second section&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;items&lt;/span&gt;: [&lt;span class="pl-c1"&gt;CustomData&lt;/span&gt;(&lt;span class="pl-c1"&gt;anInt&lt;/span&gt;: &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;aString&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;two&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;aCGPoint&lt;/span&gt;: &lt;span class="pl-c1"&gt;CGPoint&lt;/span&gt;(&lt;span class="pl-c1"&gt;x&lt;/span&gt;: &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;y&lt;/span&gt;: &lt;span class="pl-c1"&gt;2&lt;/span&gt;)), &lt;span class="pl-c1"&gt;CustomData&lt;/span&gt;(&lt;span class="pl-c1"&gt;anInt&lt;/span&gt;: &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;aString&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;three&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;aCGPoint&lt;/span&gt;: &lt;span class="pl-c1"&gt;CGPoint&lt;/span&gt;(&lt;span class="pl-c1"&gt;x&lt;/span&gt;: &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;y&lt;/span&gt;: &lt;span class="pl-c1"&gt;3&lt;/span&gt;)) ])
]

Observable.&lt;span class="pl-c1"&gt;just&lt;/span&gt;(sections)
  .&lt;span class="pl-c1"&gt;bind&lt;/span&gt;(&lt;span class="pl-c1"&gt;to&lt;/span&gt;: tableView.&lt;span class="pl-smi"&gt;rx&lt;/span&gt;.&lt;span class="pl-c1"&gt;items&lt;/span&gt;(&lt;span class="pl-c1"&gt;dataSource&lt;/span&gt;: dataSource))
  .&lt;span class="pl-c1"&gt;disposed&lt;/span&gt;(&lt;span class="pl-c1"&gt;by&lt;/span&gt;: disposeBag)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-animated-data-sources" class="anchor" aria-hidden="true" href="#animated-data-sources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Animated Data Sources&lt;/h3&gt;
&lt;p&gt;RxDataSources provides two special data source types that automatically take care of animating changes in the bound data source: &lt;code&gt;RxTableViewSectionedAnimatedDataSource&lt;/code&gt; and &lt;code&gt;RxCollectionViewSectionedAnimatedDataSource&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To use one of the two animated data sources, you must take a few extra steps on top of those outlined above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SectionOfCustomData needs to conform to &lt;code&gt;AnimatableSectionModelType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Your data model must conform to
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IdentifiableType&lt;/code&gt;: The &lt;code&gt;identity&lt;/code&gt; provided by the &lt;code&gt;IdentifiableType&lt;/code&gt; protocol must be an &lt;strong&gt;immutable identifier representing an instance of the model&lt;/strong&gt;. For example, in case of a &lt;code&gt;Car&lt;/code&gt; model, you might want to use the car's &lt;code&gt;plateNumber&lt;/code&gt; as its identity.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Equatable&lt;/code&gt;: Conforming to &lt;code&gt;Equatable&lt;/code&gt; helps &lt;code&gt;RxDataSources&lt;/code&gt; determine which cells have changed so it can animate only these specific cells. Meaning, changing &lt;strong&gt;any&lt;/strong&gt; of the &lt;code&gt;Car&lt;/code&gt; model's properties will trigger an animated reload of that cell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Xcode 10.2&lt;/p&gt;
&lt;p&gt;Swift 5.0&lt;/p&gt;
&lt;p&gt;For Swift 4.x version please use versions &lt;code&gt;3.0.0 ... 3.1.0&lt;/code&gt;
For Swift 3.x version please use versions &lt;code&gt;1.0 ... 2.0.2&lt;/code&gt;
For Swift 2.3 version please use versions &lt;code&gt;0.1 ... 0.9&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;We'll try to keep the API as stable as possible, but breaking API changes can occur.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CocoaPods&lt;/h3&gt;
&lt;p&gt;Podfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pod 'RxDataSources', '~&amp;gt; 4.0'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage&lt;/h3&gt;
&lt;p&gt;Cartfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github "RxSwiftCommunity/RxDataSources" ~&amp;gt; 4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>RxSwiftCommunity</author><guid isPermaLink="false">https://github.com/RxSwiftCommunity/RxDataSources</guid><pubDate>Sun, 05 Jan 2020 00:17:00 GMT</pubDate></item><item><title>JohnSundell/Splash #18 in Swift, Today</title><link>https://github.com/JohnSundell/Splash</link><description>&lt;p&gt;&lt;i&gt;A fast, lightweight and flexible Swift syntax highlighter for blogs, tools and fun!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
    &lt;a target="_blank" rel="noopener noreferrer" href="Images/Logo.png"&gt;&lt;img src="Images/Logo.png" width="528" alt="Splash" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ee0daa6ce485b12e85b3878732b203bcdbd8ebba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742d352e302d6f72616e67652e737667"&gt;&lt;img src="https://camo.githubusercontent.com/ee0daa6ce485b12e85b3878732b203bcdbd8ebba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742d352e302d6f72616e67652e737667" data-canonical-src="https://img.shields.io/badge/Swift-5.0-orange.svg" style="max-width:100%;"&gt;&lt;/a&gt;
    &lt;a href="https://swift.org/package-manager" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/57aa80b42087a088cdf607fb98c0224bccf1b441/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73706d2d636f6d70617469626c652d627269676874677265656e2e7376673f7374796c653d666c6174" alt="Swift Package Manager" data-canonical-src="https://img.shields.io/badge/spm-compatible-brightgreen.svg?style=flat" style="max-width:100%;"&gt;
    &lt;/a&gt;
     &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/297472a97b068b4ca634402a1eacd9b623a1fe06/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d6d61632b6c696e75782d627269676874677265656e2e7376673f7374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/297472a97b068b4ca634402a1eacd9b623a1fe06/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d6d61632b6c696e75782d627269676874677265656e2e7376673f7374796c653d666c6174" alt="Mac + Linux" data-canonical-src="https://img.shields.io/badge/platforms-mac+linux-brightgreen.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
    &lt;a href="https://twitter.com/johnsundell" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/abe7c44c68304371aca82c9a40796b576c17716e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747769747465722d406a6f686e73756e64656c6c2d626c75652e7376673f7374796c653d666c6174" alt="Twitter: @johnsundell" data-canonical-src="https://img.shields.io/badge/twitter-@johnsundell-blue.svg?style=flat" style="max-width:100%;"&gt;
    &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Welcome to &lt;strong&gt;Splash&lt;/strong&gt; - a fast, lightweight and flexible Swift syntax highlighter. It can be used to generate code sample HTML for a blog post, to turn a string of Swift code into a fully syntax highlighted image, or to build custom developer tools.&lt;/p&gt;
&lt;p&gt;It's used to highlight all articles on &lt;a href="https://swiftbysundell.com" rel="nofollow"&gt;swiftbysundell.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Splash can be used either as a library in your own Swift Package Manager-powered tool or script, or by using one of the four built-in command line tools that act as frontends for the Splash library.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content--on-the-web" class="anchor" aria-hidden="true" href="#-on-the-web"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="earth_africa" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f30d.png"&gt;🌍&lt;/g-emoji&gt; On the web&lt;/h3&gt;
&lt;p&gt;Thanks to my good friend &lt;a href="https://twitter.com/_inside" rel="nofollow"&gt;Gui Rambo&lt;/a&gt;, you can &lt;a href="https://splash.rambo.codes" rel="nofollow"&gt;try out Splash directly in your browser&lt;/a&gt;! His web tool lets you use Splash to generate either HTML or an image, by simply pasting Swift code into a text box.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;👉&lt;/g-emoji&gt; &lt;a href="https://splash.rambo.codes" rel="nofollow"&gt;splash.rambo.codes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're using Jekyll, there's also a custom &lt;code&gt;{% splash %}&lt;/code&gt; tag available for the Liquid templating language.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="point_right" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png"&gt;👉&lt;/g-emoji&gt; &lt;a href="https://github.com/mannberg/splashtag"&gt;splashtag&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content--on-the-command-line" class="anchor" aria-hidden="true" href="#-on-the-command-line"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="desktop_computer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f5a5.png"&gt;🖥&lt;/g-emoji&gt; On the command line&lt;/h3&gt;
&lt;p&gt;The easiest way to get started building things with Splash is to use one of the four built-in command line tools that each enable you to use Splash in different ways.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-splashhtmlgen" class="anchor" aria-hidden="true" href="#splashhtmlgen"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SplashHTMLGen&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SplashHTMLGen&lt;/code&gt; uses Splash's HTML output format to generate an HTML string from Swift code. You simply pass it the code you want to highlight as an argument and HTML is returned as standard output.&lt;/p&gt;
&lt;p&gt;For example, if you call it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ SplashHTMLGen "func hello(world: String) -&amp;gt; Int"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You'll get the following output back:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic"&gt;&lt;pre&gt;&amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keyword&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;func&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt; hello(world: &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;String&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;) -&amp;gt; &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;Int&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To be as flexible as possible, Splash doesn't hardcode any colors or other CSS attributes in the HTML it generates. Instead it simply assigns a CSS class to each token. For an example of a CSS file that can be used to style Splash-generated HTML, see &lt;a href="https://github.com/JohnSundell/Splash/blob/master/Examples/sundellsColors.css"&gt;Examples/sundellsColors.css&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When rendering your outputted html, make sure to wrap your output code in the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags and properly link to your &lt;code&gt;.css&lt;/code&gt; file. Like this:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic"&gt;&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;&lt;span class="pl-ent"&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;title&lt;/span&gt;&amp;gt;Hello World&amp;lt;/&lt;span class="pl-ent"&gt;title&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;link&lt;/span&gt; &lt;span class="pl-e"&gt;rel&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;stylesheet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-e"&gt;href&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sundellsColors.css&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class="pl-ent"&gt;head&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span class="pl-ent"&gt;pre&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;code&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keyword&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;func&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt; hello(world: &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;String&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;) -&amp;gt; &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;Int&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="pl-ent"&gt;code&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class="pl-ent"&gt;pre&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information about HTML generation with Splash and how to customize it, see &lt;code&gt;HTMLOutputFormat&lt;/code&gt; &lt;a href="https://github.com/JohnSundell/Splash/blob/master/Sources/Splash/Output/HTMLOutputFormat.swift"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-splashmarkdown" class="anchor" aria-hidden="true" href="#splashmarkdown"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SplashMarkdown&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SplashMarkdown&lt;/code&gt; builds on top of &lt;code&gt;SplashHTMLGen&lt;/code&gt; to enable easy Splash decoration of any Markdown file. Pass it a path to a Markdown file, and it will iterate through all code blocks within that file and convert them into Splash-highlighted HTML.&lt;/p&gt;
&lt;p&gt;Just like the HTML generated by &lt;code&gt;SplashHTMLGen&lt;/code&gt; itself, a CSS file should also be added to any page serving the processed Markdown, since Splash only adds CSS classes to tokens — rather than hardcoding styles inline. See the above &lt;code&gt;SplashHTMLGen&lt;/code&gt; documentation for more information.&lt;/p&gt;
&lt;p&gt;Here’s an example call to decorate a Markdown file at the path &lt;code&gt;~/Documents/Article.md&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ SplashMarkdown ~/Documents/Article.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The decorated Markdown will be returned as standard output.&lt;/p&gt;
&lt;p&gt;Highlighting can be skipped for any code block by adding &lt;code&gt;no-highlight&lt;/code&gt; next to the block’s opening row of backticks — like this: &lt;em&gt;“```no-highlight”&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-splashimagegen" class="anchor" aria-hidden="true" href="#splashimagegen"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SplashImageGen&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SplashImageGen&lt;/code&gt; uses Splash to generate an &lt;code&gt;NSAttributedString&lt;/code&gt; from Swift code, then draws that attributed string into a graphics context to turn it into an image, which is then written to disk.&lt;/p&gt;
&lt;p&gt;For example, if you call it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ SplashImageGen "func hello(world: String) -&amp;gt; Int" "MyImage.png"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following image will be generated (and written to disk as &lt;code&gt;MyImage.png&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Images/Code.png"&gt;&lt;img src="Images/Code.png" alt="Code sample" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;SplashImageGen&lt;/code&gt; is currently only available on macOS.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-splashtokenizer" class="anchor" aria-hidden="true" href="#splashtokenizer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SplashTokenizer&lt;/h4&gt;
&lt;p&gt;The final built-in command line tool, &lt;code&gt;SplashTokenizer&lt;/code&gt;, is mostly useful as a debugging tool when working on Splash - but can also be interesting to use in order to see how Splash breaks down code into tokens. Given a string of Swift code, it simply outputs all of its components (excluding whitespaces).&lt;/p&gt;
&lt;p&gt;So if you call it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ SplashTokenizer "func hello(world: String) -&amp;gt; Int"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You'll get the following standard output back:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Keyword token: func
Plain text: hello(world:
Type token: String
Plain text: )
Plain text: -&amp;gt;
Type token: Int
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content--as-a-package" class="anchor" aria-hidden="true" href="#-as-a-package"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="package" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png"&gt;📦&lt;/g-emoji&gt; As a package&lt;/h3&gt;
&lt;p&gt;To include Splash in your own script or Swift package, &lt;a href="#installation"&gt;add it as a dependency&lt;/a&gt; and use the &lt;code&gt;SyntaxHighlighter&lt;/code&gt; class combined with your output format of choice to highlight a string of code:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Splash&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; highlighter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;SyntaxHighlighter&lt;/span&gt;(&lt;span class="pl-c1"&gt;format&lt;/span&gt;: &lt;span class="pl-c1"&gt;HTMLOutputFormat&lt;/span&gt;())
&lt;span class="pl-k"&gt;let&lt;/span&gt; html &lt;span class="pl-k"&gt;=&lt;/span&gt; highlighter.&lt;span class="pl-c1"&gt;highlight&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;func hello() -&amp;gt; String&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Splash ships with two built-in output formats - HTML and &lt;code&gt;NSAttributedString&lt;/code&gt;, but you can also easily add your own by implementing the &lt;code&gt;OutputFormat&lt;/code&gt; protocol.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Splash is distributed as a Swift package, making it easy to install for use in scripts, developer tools, server-side applications, or to use its built-in command line tools.&lt;/p&gt;
&lt;p&gt;Splash supports both macOS and Linux.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Before you begin, make sure that you have a Swift 4.2-compatible toolchain installed (for example Xcode 10 if you're on a Mac).&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content--as-a-package-1" class="anchor" aria-hidden="true" href="#-as-a-package-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="package" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png"&gt;📦&lt;/g-emoji&gt; As a package&lt;/h3&gt;
&lt;p&gt;To install Splash for use in a Swift Package Manager-powered tool or server-side application, add Splash as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt; file. For more information, please see the &lt;a href="https://github.com/apple/swift-package-manager/tree/master/Documentation"&gt;Swift Package Manager documentation&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.package(url: "https://github.com/JohnSundell/Splash", from: "0.1.0")
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content--command-line-tools" class="anchor" aria-hidden="true" href="#-command-line-tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="hammer_and_wrench" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png"&gt;🛠&lt;/g-emoji&gt; Command line tools&lt;/h3&gt;
&lt;p&gt;If you want to use Splash through one of its built-in command line tools, start by cloning the repo to your local machine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/johnsundell/splash.git
$ cd Splash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run a tool without installing it, you can use the Swift Package Manager's &lt;code&gt;run&lt;/code&gt; command, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ swift run SplashHTMLGen "func hello(world: String) -&amp;gt; Int"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install all four command line tools globally on your system, use Make:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will install the following four tools in your &lt;code&gt;/usr/local/bin&lt;/code&gt; folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SplashHTMLGen
SplashMarkdown
SplashImageGen
SplashTokenizer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you only wish to install one of these, compile it and then move it to &lt;code&gt;/usr/local/bin&lt;/code&gt;, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ swift build -c release -Xswiftc -static-stdlib
$ install .build/Release/SplashHTMLGen /usr/local/bin/SplashHTMLGen
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-contributions-and-support" class="anchor" aria-hidden="true" href="#contributions-and-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributions and support&lt;/h2&gt;
&lt;p&gt;Splash is developed completely in the open, and your contributions are more than welcome. It's still a very new project, so I'm sure there are bugs to be found and improvements to be made - and hopefully we can work on those together as a community.&lt;/p&gt;
&lt;p&gt;You might notice that this project does not have GitHub issues enabled. That's because with Splash, I'm trying out a new 100% PR-based open source workflow. This is a bit of an experiment, so let's see how it works out.&lt;/p&gt;
&lt;p&gt;To read more about suggested workflows when contributing to Splash, how to report bugs and feature requests, as well as technical details and an architectural overview - check out the &lt;a href="https://github.com/JohnSundell/Splash/blob/master/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hope-you-enjoy-using-splash" class="anchor" aria-hidden="true" href="#hope-you-enjoy-using-splash"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hope you enjoy using Splash!&lt;/h2&gt;
&lt;p&gt;I had a lot of fun building Splash, and I'm looking forward to continue working on it in the open together with you! I hope you'll like it and that you'll find it useful. Let me know what you think on on &lt;a href="https://twitter.com/johnsundell" rel="nofollow"&gt;Twitter&lt;/a&gt; &lt;g-emoji class="g-emoji" alias="blush" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png"&gt;😊&lt;/g-emoji&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>JohnSundell</author><guid isPermaLink="false">https://github.com/JohnSundell/Splash</guid><pubDate>Sun, 05 Jan 2020 00:18:00 GMT</pubDate></item><item><title>evgenyneu/keychain-swift #19 in Swift, Today</title><link>https://github.com/evgenyneu/keychain-swift</link><description>&lt;p&gt;&lt;i&gt;Helper functions for saving text in Keychain securely for iOS, OS X, tvOS and watchOS.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-helper-functions-for-storing-text-in-keychain-for-ios-macos-tvos-and-watchos" class="anchor" aria-hidden="true" href="#helper-functions-for-storing-text-in-keychain-for-ios-macos-tvos-and-watchos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Helper functions for storing text in Keychain for iOS, macOS, tvOS and WatchOS&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoadocs.org/docsets/KeychainSwift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/170354153ef2f9b7d08c54a876c51f5571771572/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f4b6579636861696e53776966742e7376673f7374796c653d666c6174" alt="CocoaPods Version" data-canonical-src="https://img.shields.io/cocoapods/v/KeychainSwift.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/apple/swift-package-manager"&gt;&lt;img src="https://camo.githubusercontent.com/ad744674ba25cccb6e683eb78b7c485e1b63b2d2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742532305061636b6167652532304d616e616765722d636f6d70617469626c652d627269676874677265656e2e737667" alt="Swift Package Manager compatible" data-canonical-src="https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoadocs.org/docsets/KeychainSwift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c8713ca2b7de925186fc99c78be44bd288480921/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f4b6579636861696e53776966742e7376673f7374796c653d666c6174" alt="License" data-canonical-src="https://img.shields.io/cocoapods/l/KeychainSwift.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoadocs.org/docsets/KeychainSwift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/15ceffb9d0d23b681fa75ce220ec668a8f2ba0c5/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f4b6579636861696e53776966742e7376673f7374796c653d666c6174" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/KeychainSwift.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a collection of helper functions for saving text and data in the Keychain.
As you probably noticed Apple's keychain API is a bit verbose. This library was designed to provide shorter syntax for accomplishing a simple task: reading/writing text values for specified keys:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;()
keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
keychain.&lt;span class="pl-c1"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Keychain library includes the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#usage"&gt;Get, set and delete string, boolean and Data Keychain items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keychain_item_access"&gt;Specify item access security level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keychain_synchronization"&gt;Synchronize items through iCloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keychain_access_groups"&gt;Share Keychain items with other apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-whats-keychain" class="anchor" aria-hidden="true" href="#whats-keychain"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What's Keychain?&lt;/h2&gt;
&lt;p&gt;Keychain is a secure storage. You can store all kind of sensitive data in it: user passwords, credit card numbers, secret tokens etc. Once stored in Keychain this information is only available to your app, other apps can't see it. Besides that, operating system makes sure this information is kept and processed securely. For example, text stored in Keychain can not be extracted from iPhone backup or from its file system. Apple recommends storing only small amount of data in the Keychain. If you need to secure something big you can encrypt it manually, save to a file and store the key in the Keychain.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;p&gt;There are four ways you can add KeychainSwift to your project.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-add-source-ios-7" class="anchor" aria-hidden="true" href="#add-source-ios-7"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add source (iOS 7+)&lt;/h4&gt;
&lt;p&gt;Simply add &lt;a href="https://github.com/evgenyneu/keychain-swift/blob/master/Distrib/KeychainSwiftDistrib.swift"&gt;KeychainSwiftDistrib.swift&lt;/a&gt; file into your Xcode project.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-setup-with-carthage-ios-8" class="anchor" aria-hidden="true" href="#setup-with-carthage-ios-8"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup with Carthage (iOS 8+)&lt;/h4&gt;
&lt;p&gt;Alternatively, add &lt;code&gt;github "evgenyneu/keychain-swift" ~&amp;gt; 19.0&lt;/code&gt; to your Cartfile and run &lt;code&gt;carthage update&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-setup-with-cocoapods-ios-8" class="anchor" aria-hidden="true" href="#setup-with-cocoapods-ios-8"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup with CocoaPods (iOS 8+)&lt;/h4&gt;
&lt;p&gt;If you are using CocoaPods add this text to your Podfile and run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use_frameworks!
target 'Your target name'
pod 'KeychainSwift', '~&amp;gt; 19.0'
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-setup-with-swift-package-manager" class="anchor" aria-hidden="true" href="#setup-with-swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup with Swift Package Manager&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In Xcode 11+ select &lt;em&gt;File &amp;gt; Packages &amp;gt; Add Package Dependency...&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Enter this project's URL: &lt;a href="https://github.com/evgenyneu/keychain-swift.git"&gt;https://github.com/evgenyneu/keychain-swift.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-legacy-swift-versions" class="anchor" aria-hidden="true" href="#legacy-swift-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Legacy Swift versions&lt;/h2&gt;
&lt;p&gt;Setup a &lt;a href="https://github.com/evgenyneu/keychain-swift/wiki/Legacy-Swift-versions"&gt;previous version&lt;/a&gt; of the library if you use an older version of Swift.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Add &lt;code&gt;import KeychainSwift&lt;/code&gt; to your source code unless you used the file setup method.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-string-values" class="anchor" aria-hidden="true" href="#string-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String values&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;()
keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
keychain.&lt;span class="pl-c1"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-boolean-values" class="anchor" aria-hidden="true" href="#boolean-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Boolean values&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;()
keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(&lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
keychain.&lt;span class="pl-c1"&gt;getBool&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-data-values" class="anchor" aria-hidden="true" href="#data-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Data values&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;()
keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(dataObject, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
keychain.&lt;span class="pl-c1"&gt;getData&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-removing-keys-from-keychain" class="anchor" aria-hidden="true" href="#removing-keys-from-keychain"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Removing keys from Keychain&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;keychain.&lt;span class="pl-c1"&gt;delete&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Remove single key&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;keychain.&lt;span class="pl-c1"&gt;clear&lt;/span&gt;() &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Delete everything from app's Keychain. Does not work on macOS.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-return-all-keys" class="anchor" aria-hidden="true" href="#return-all-keys"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Return all keys&lt;/h4&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;()
keychain.&lt;span class="pl-smi"&gt;allKeys&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Returns the names of all keys&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-advanced-options" class="anchor" aria-hidden="true" href="#advanced-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advanced options&lt;/h2&gt;
&lt;h3 id="user-content-keychain_item_access"&gt;&lt;a id="user-content-keychain-item-access" class="anchor" aria-hidden="true" href="#keychain-item-access"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Keychain item access&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;withAccess&lt;/code&gt; parameter to specify the security level of the keychain storage.
By default the &lt;code&gt;.accessibleWhenUnlocked&lt;/code&gt; option is used. It is one of the most restrictive options and provides good data protection.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KeychainSwift().set("Hello world", forKey: "key 1", withAccess: .accessibleWhenUnlocked)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;code&gt;.accessibleAfterFirstUnlock&lt;/code&gt; if you need your app to access the keychain item while in the background. Note that it is less secure than the &lt;code&gt;.accessibleWhenUnlocked&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;See the list of all available &lt;a href="https://github.com/evgenyneu/keychain-swift/blob/master/Sources/KeychainSwiftAccessOptions.swift"&gt;access options&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="user-content-keychain_synchronization"&gt;&lt;a id="user-content-synchronizing-keychain-items-with-other-devices" class="anchor" aria-hidden="true" href="#synchronizing-keychain-items-with-other-devices"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Synchronizing keychain items with other devices&lt;/h3&gt;
&lt;p&gt;Set &lt;code&gt;synchronizable&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; to enable keychain items synchronization across user's multiple devices. The synchronization will work for users who have the "Keychain" enabled in the iCloud settings on their devices.&lt;/p&gt;
&lt;p&gt;Setting &lt;code&gt;synchronizable&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; will add the item to other devices with the &lt;code&gt;set&lt;/code&gt; method and obtain synchronizable items with the &lt;code&gt;get&lt;/code&gt; command. Deleting a synchronizable item will remove it from all devices.&lt;/p&gt;
&lt;p&gt;Note that you do NOT need to enable iCloud or Keychain Sharing capabilities in your app's target for this feature to work.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; First device&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;()
keychain.&lt;span class="pl-smi"&gt;synchronizable&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Second device&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;()
keychain.&lt;span class="pl-smi"&gt;synchronizable&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
keychain.&lt;span class="pl-c1"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Returns "hello world"&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could not get the Keychain synchronization work on macOS.&lt;/p&gt;
&lt;h3 id="user-content-keychain_access_groups"&gt;&lt;a id="user-content-sharing-keychain-items-with-other-apps" class="anchor" aria-hidden="true" href="#sharing-keychain-items-with-other-apps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sharing keychain items with other apps&lt;/h3&gt;
&lt;p&gt;In order to share keychain items between apps on the same device they need to have common &lt;em&gt;Keychain Groups&lt;/em&gt; registered in &lt;em&gt;Capabilities &amp;gt; Keychain Sharing&lt;/em&gt; settings. &lt;a href="http://evgenii.com/blog/sharing-keychain-in-ios/" rel="nofollow"&gt;This tutorial&lt;/a&gt; shows how to set it up.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;accessGroup&lt;/code&gt; property to access shared keychain items. In the following example we specify an access group "CS671JRA62.com.myapp.KeychainGroup" that will be used to set, get and delete an item "my key".&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;()
keychain.&lt;span class="pl-smi"&gt;accessGroup&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CS671JRA62.com.myapp.KeychainGroup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Use your own access goup&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
keychain.&lt;span class="pl-c1"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
keychain.&lt;span class="pl-c1"&gt;delete&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
keychain.&lt;span class="pl-c1"&gt;clear&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: there is no way of sharing a keychain item between the watchOS 2.0 and its paired device: &lt;a href="https://forums.developer.apple.com/thread/5938" rel="nofollow"&gt;https://forums.developer.apple.com/thread/5938&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-setting-key-prefix" class="anchor" aria-hidden="true" href="#setting-key-prefix"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setting key prefix&lt;/h3&gt;
&lt;p&gt;One can pass a &lt;code&gt;keyPrefix&lt;/code&gt; argument when initializing a &lt;code&gt;KeychainSwift&lt;/code&gt; object. The string passed in &lt;code&gt;keyPrefix&lt;/code&gt; argument will be used as a prefix to &lt;strong&gt;all the keys&lt;/strong&gt; used in &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;getData&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; methods. Adding a prefix to the keychain keys can be useful in unit tests. This prevents the tests from changing the Keychain keys that are used when the app is launched manually.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;clear&lt;/code&gt; method still clears everything from the Keychain regardless of the prefix used.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;(&lt;span class="pl-c1"&gt;keyPrefix&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;myTestKey_&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Value will be stored under "myTestKey_hello" key&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-check-if-operation-was-successful" class="anchor" aria-hidden="true" href="#check-if-operation-was-successful"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Check if operation was successful&lt;/h3&gt;
&lt;p&gt;One can verify if &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;clear&lt;/code&gt; methods finished successfully by checking their return values. Those methods return &lt;code&gt;true&lt;/code&gt; on success and &lt;code&gt;false&lt;/code&gt; on error.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;if&lt;/span&gt; keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Keychain item is saved successfully&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;else&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Report error&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To get a specific failure reason use the &lt;code&gt;lastResultCode&lt;/code&gt; property containing result code for the last operation. See &lt;a href="https://developer.apple.com/documentation/security/1542001-security_framework_result_codes" rel="nofollow"&gt;Keychain Result Codes&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;if&lt;/span&gt; keychain.&lt;span class="pl-smi"&gt;lastResultCode&lt;/span&gt; &lt;span class="pl-k"&gt;!=&lt;/span&gt; noErr { &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;/*&lt;/span&gt; Report error &lt;span class="pl-c"&gt;*/&lt;/span&gt;&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-returning-data-as-reference" class="anchor" aria-hidden="true" href="#returning-data-as-reference"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Returning data as reference&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;asReference: true&lt;/code&gt; parameter to return the data as reference, which is needed for  &lt;a href="https://developer.apple.com/documentation/networkextension/nevpnprotocol" rel="nofollow"&gt;NEVPNProtocol&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; keychain &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;KeychainSwift&lt;/span&gt;()
keychain.&lt;span class="pl-c1"&gt;set&lt;/span&gt;(dataObject, &lt;span class="pl-c1"&gt;forKey&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
keychain.&lt;span class="pl-c1"&gt;getData&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;asReference&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-using-keychainswift-from-objective-c" class="anchor" aria-hidden="true" href="#using-keychainswift-from-objective-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using KeychainSwift from Objective-C&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/evgenyneu/keychain-swift/wiki/Using-KeychainSwift-in-Objective-C-project"&gt;This manual&lt;/a&gt; describes how to use KeychainSwift in Objective-C apps.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-️known-critical-issue---call-to-action️" class="anchor" aria-hidden="true" href="#️known-critical-issue---call-to-action️"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="exclamation" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png"&gt;❗️&lt;/g-emoji&gt;Known critical issue - call to action&lt;g-emoji class="g-emoji" alias="exclamation" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png"&gt;❗️&lt;/g-emoji&gt;&lt;/h2&gt;
&lt;p&gt;It &lt;a href="https://github.com/evgenyneu/keychain-swift/issues/15"&gt;has been reported&lt;/a&gt; that the library sometimes returns &lt;code&gt;nil&lt;/code&gt;  instead of the stored Keychain value. It may be connected with &lt;a href="https://forums.developer.apple.com/thread/4743" rel="nofollow"&gt;the Keychain issue&lt;/a&gt; reported on Apple developer forums. The issue is random and hard to reproduce. If you experienced this problem feel free to create an issue and share your story, so we can find solutions.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-video-tutorial" class="anchor" aria-hidden="true" href="#video-tutorial"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Video tutorial&lt;/h2&gt;
&lt;p&gt;Thanks to Alex Nagy from &lt;a href="https://rebeloper.com/" rel="nofollow"&gt;rebeloper.com&lt;/a&gt; for creating this two-part &lt;a href="https://www.youtube.com/watch?v=1R-VIzjD4yo&amp;amp;list=PL_csAAO9PQ8bLfPF7JsnF-t4q63WKZ9O9" rel="nofollow"&gt;video tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=1R-VIzjD4yo&amp;amp;list=PL_csAAO9PQ8bLfPF7JsnF-t4q63WKZ9O9" rel="nofollow"&gt;&lt;img src="graphics/keychain_swift_video_tutorial.jpg" width="800" alt="Keychain Swift video tutorial" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-demo-app" class="anchor" aria-hidden="true" href="#demo-app"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Demo app&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/evgenyneu/keychain-swift/master/graphics/keychain-swift-demo-3.png"&gt;&lt;img src="https://raw.githubusercontent.com/evgenyneu/keychain-swift/master/graphics/keychain-swift-demo-3.png" alt="Keychain Swift demo app" width="320" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-alternative-solutions" class="anchor" aria-hidden="true" href="#alternative-solutions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternative solutions&lt;/h2&gt;
&lt;p&gt;Here are some other Keychain libraries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DanielTomlinson/Latch"&gt;DanielTomlinson/Latch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jrendel/SwiftKeychainWrapper"&gt;jrendel/SwiftKeychainWrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kishikawakatsumi/KeychainAccess"&gt;kishikawakatsumi/KeychainAccess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matthewpalmer/Locksmith"&gt;matthewpalmer/Locksmith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/s-aska/KeyClip"&gt;s-aska/KeyClip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yankodimitrov/SwiftKeychain"&gt;yankodimitrov/SwiftKeychain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-thanks-" class="anchor" aria-hidden="true" href="#thanks-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks &lt;g-emoji class="g-emoji" alias="+1" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png"&gt;👍&lt;/g-emoji&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The code is based on this example: &lt;a href="https://gist.github.com/s-aska/e7ad24175fb7b04f78e7"&gt;https://gist.github.com/s-aska/e7ad24175fb7b04f78e7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/diogoguimaraes"&gt;diogoguimaraes&lt;/a&gt; for adding Swift Package Manager setup option.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/glyuck"&gt;glyuck&lt;/a&gt; for taming booleans.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/pepibumur"&gt;pepibumur&lt;/a&gt; for adding macOS, watchOS and tvOS support.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/ezura"&gt;ezura&lt;/a&gt; for iOS 7 support.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/mikaoj"&gt;mikaoj&lt;/a&gt; for adding keychain synchronization.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/tcirwin"&gt;tcirwin&lt;/a&gt; for adding Swift 3.0 support.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/Tulleb"&gt;Tulleb&lt;/a&gt; for adding Xcode 8 beta 6 support.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/CraigSiemens"&gt;CraigSiemens&lt;/a&gt; for adding Swift 3.1 support.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/maxkramerbcgdv"&gt;maxkramerbcgdv&lt;/a&gt; for fixing Package Manager setup in Xcode 8.2.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/elikohen"&gt;elikohen&lt;/a&gt; for fixing concurrency issues.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/beny"&gt;beny&lt;/a&gt; for adding Swift 4.2 support.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/xuaninbox"&gt;xuaninbox&lt;/a&gt; for fixing watchOS deployment target for Xcode 10.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/schayes04"&gt;schayes04&lt;/a&gt; for adding Swift 5.0 support.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/mediym41"&gt;mediym41&lt;/a&gt; for adding ability to return data as reference.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/AnthonyOliveri"&gt;AnthonyOliveri&lt;/a&gt; for adding ability to run unit tests from Swift Package Manager.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/philippec"&gt;philippec&lt;/a&gt; for removing deprecated access options.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href="https://github.com/lucasmpaim"&gt;lucasmpaim&lt;/a&gt; for adding ability to return the names of all keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-feedback-is-welcome" class="anchor" aria-hidden="true" href="#feedback-is-welcome"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Feedback is welcome&lt;/h2&gt;
&lt;p&gt;If you notice any issue, got stuck or just want to chat feel free to create an issue. We will be happy to help you.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Keychain Swift is released under the &lt;a href="LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>evgenyneu</author><guid isPermaLink="false">https://github.com/evgenyneu/keychain-swift</guid><pubDate>Sun, 05 Jan 2020 00:19:00 GMT</pubDate></item><item><title>kudoleh/iOS-Clean-Architecture-MVVM #20 in Swift, Today</title><link>https://github.com/kudoleh/iOS-Clean-Architecture-MVVM</link><description>&lt;p&gt;&lt;i&gt;Template iOS application using Clean Architecture and MVVM&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-template-ios-app-using-clean-architecture-and-mvvm" class="anchor" aria-hidden="true" href="#template-ios-app-using-clean-architecture-and-mvvm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Template iOS App using Clean Architecture and MVVM&lt;/h1&gt;
&lt;p&gt;iOS Project implemented with Clean Architecture and MVVM. (Can be used as Template project by replacing item name “Movie”). &lt;strong&gt;More information in medium post&lt;/strong&gt;: &lt;a href="https://tech.olx.com/clean-architecture-and-mvvm-on-ios-c9d167d9f5b3" rel="nofollow"&gt;Medium Post about Clean Architecture + MVVM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="README_FILES/CleanArchitecture+MVVM.png?raw=true"&gt;&lt;img src="README_FILES/CleanArchitecture+MVVM.png?raw=true" alt="Alt text" title="Modules Dependencies" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-architecture-concepts-used-here" class="anchor" aria-hidden="true" href="#architecture-concepts-used-here"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Architecture concepts used here:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clean Architecture &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" rel="nofollow"&gt;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced iOS App Architecture &lt;a href="https://www.raywenderlich.com/8477-introducing-advanced-ios-app-architecture" rel="nofollow"&gt;https://www.raywenderlich.com/8477-introducing-advanced-ios-app-architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MVVM&lt;/li&gt;
&lt;li&gt;Data Binding&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;li&gt;SwiftUI and UKit view implementations by reusing same ViewModel (at least Xcode 11 required)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-includes" class="anchor" aria-hidden="true" href="#includes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Includes:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Unit Tests for Use Cases(Domain Layer), ViewModels(Presentation Layer), NetworkService(Infrastructure Layer)&lt;/li&gt;
&lt;li&gt;UI test with XCUITests&lt;/li&gt;
&lt;li&gt;Size Classes in Detail view&lt;/li&gt;
&lt;li&gt;SwiftUI example, demostration that presentation layer does not change, only UI (at least Xcode 11 required)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Xcode Version 11.2.1+  Swift 5.0+&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-how-to-use-app" class="anchor" aria-hidden="true" href="#how-to-use-app"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to use app:&lt;/h1&gt;
&lt;p&gt;To search a movie, write a name of a movie inside searchbar and hit search button. There are two network calls: request movies and request poster images. Every successful search query is stored persistently.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>kudoleh</author><guid isPermaLink="false">https://github.com/kudoleh/iOS-Clean-Architecture-MVVM</guid><pubDate>Sun, 05 Jan 2020 00:20:00 GMT</pubDate></item><item><title>apple/swift-nio #21 in Swift, Today</title><link>https://github.com/apple/swift-nio</link><description>&lt;p&gt;&lt;i&gt;Event-driven network application framework for high performance protocol servers &amp; clients, non-blocking.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-swiftnio" class="anchor" aria-hidden="true" href="#swiftnio"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftNIO&lt;/h1&gt;
&lt;p&gt;SwiftNIO is a cross-platform asynchronous event-driven network application framework
for rapid development of maintainable high performance protocol servers &amp;amp; clients.&lt;/p&gt;
&lt;p&gt;It's like &lt;a href="https://netty.io" rel="nofollow"&gt;Netty&lt;/a&gt;, but written for Swift.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-repository-organization" class="anchor" aria-hidden="true" href="#repository-organization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Repository organization&lt;/h3&gt;
&lt;p&gt;The SwiftNIO project is split across multiple repositories:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Repository&lt;/th&gt;
&lt;th&gt;NIO 2 (Swift 5+)&lt;/th&gt;
&lt;th&gt;NIO 1 (Swift 4+)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio"&gt;https://github.com/apple/swift-nio&lt;/a&gt; &lt;br&gt; SwiftNIO core&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "2.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-ssl"&gt;https://github.com/apple/swift-nio-ssl&lt;/a&gt; &lt;br&gt; TLS (SSL) support&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "2.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-http2"&gt;https://github.com/apple/swift-nio-http2&lt;/a&gt;&lt;br&gt; HTTP/2 support&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "0.1.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-extras"&gt;https://github.com/apple/swift-nio-extras&lt;/a&gt; &lt;br&gt;useful additions around SwiftNIO&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "0.1.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-transport-services"&gt;https://github.com/apple/swift-nio-transport-services&lt;/a&gt; &lt;br&gt; first-class support for macOS, iOS, and tvOS&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "1.0.0"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;from: "0.1.0"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-protocol-implementations" class="anchor" aria-hidden="true" href="#protocol-implementations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Protocol Implementations&lt;/h3&gt;
&lt;p&gt;Below you can find a list of a few protocol implementations that are done with SwiftNIO. This is a non-exhaustive list of protocols that are either part of the SwiftNIO project or are accepted into the &lt;a href="https://swift.org/server" rel="nofollow"&gt;SSWG&lt;/a&gt;'s incubation process. All of the libraries listed below do all of their I/O in a non-blocking fashion using SwiftNIO.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-low-level-protocol-implementations" class="anchor" aria-hidden="true" href="#low-level-protocol-implementations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Low-level protocol implementations&lt;/h4&gt;
&lt;p&gt;Low-level protocol implementations are often a collection of &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s that implement a protocol but still require the user to have a good understanding of SwiftNIO. Often, low-level protocol implementations will then be wrapped in high-level libraries with a nicer, more user-friendly API.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Client&lt;/th&gt;
&lt;th&gt;Server&lt;/th&gt;
&lt;th&gt;Repository&lt;/th&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP/1&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio"&gt;apple/swift-nio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIOHTTP1/index.html" rel="nofollow"&gt;&lt;code&gt;NIOHTTP1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;official NIO project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP/2&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-http2"&gt;apple/swift-nio-http2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://apple.github.io/swift-nio-http2/docs/current/NIOHTTP2/index.html" rel="nofollow"&gt;&lt;code&gt;NIOHTTP2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;official NIO project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WebSocket&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio"&gt;apple/swift-nio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIOWebSocket/index.html" rel="nofollow"&gt;&lt;code&gt;NIOWebSocket&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;official NIO project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TLS&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift-nio-ssl"&gt;apple/swift-nio-ssl&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://apple.github.io/swift-nio-ssl/docs/current/NIOSSL/index.html" rel="nofollow"&gt;&lt;code&gt;NIOSSL&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;official NIO project&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;a id="user-content-high-level-implementations" class="anchor" aria-hidden="true" href="#high-level-implementations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;High-level implementations&lt;/h4&gt;
&lt;p&gt;High-level implementations are usually libraries that come with an API that doesn't expose SwiftNIO's &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; and can therefore be used with very little (or no) SwiftNIO-specific knowledge. The implementations listed below do still do all of their I/O in SwiftNIO and integrate really well with the SwiftNIO ecosystem.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Client&lt;/th&gt;
&lt;th&gt;Server&lt;/th&gt;
&lt;th&gt;Repository&lt;/th&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="x" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png"&gt;❌&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/swift-server/async-http-client"&gt;swift-server/async-http-client&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AsyncHTTPClient&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SSWG community project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gRPC&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/grpc/grpc-swift"&gt;grpc/grpc-swift&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;also offers a low-level API; community project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;APNS&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="x" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png"&gt;❌&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kylebrowning/APNSwift"&gt;kylebrowning/APNSwift&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;APNSwift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SSWG community project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="x" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png"&gt;❌&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vapor/postgres-nio"&gt;vapor/postgres-nio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PostgresNIO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SSWG community project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Redis&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png"&gt;✅&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;g-emoji class="g-emoji" alias="x" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png"&gt;❌&lt;/g-emoji&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://gitlab.com/Mordil/swift-redi-stack" rel="nofollow"&gt;mordil/swift-redi-stack&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RediStack&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SSWG community project&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-supported-platforms" class="anchor" aria-hidden="true" href="#supported-platforms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported Platforms&lt;/h3&gt;
&lt;p&gt;SwiftNIO aims to support all of the platforms where Swift is supported. Currently, it is developed and tested on macOS and Linux, and is known to support the following operating system versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04+&lt;/li&gt;
&lt;li&gt;macOS 10.12+; (macOS 10.14+, iOS 12+, or tvOS 12+ with &lt;a href="https://github.com/apple/swift-nio-transport-services"&gt;swift-nio-transport-services&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-swift-versions" class="anchor" aria-hidden="true" href="#swift-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift versions&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-swiftnio-1" class="anchor" aria-hidden="true" href="#swiftnio-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftNIO 1&lt;/h4&gt;
&lt;p&gt;The latest released SwiftNIO 1 version supports Swift 4.0, 4.1, 4.2, and 5.0.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-swiftnio-2" class="anchor" aria-hidden="true" href="#swiftnio-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftNIO 2&lt;/h4&gt;
&lt;p&gt;The latest released SwiftNIO 2 version supports only Swift 5.0 &amp;amp; 5.1. If you have a SwiftNIO 1 application or library that you would like to migrate to SwiftNIO 2, please check out the &lt;a href="docs/migration-guide-NIO1-to-NIO2.md"&gt;migration guide&lt;/a&gt; we prepared for you.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compatibility&lt;/h3&gt;
&lt;p&gt;SwiftNIO follows &lt;a href="https://semver.org/#semantic-versioning-200" rel="nofollow"&gt;SemVer 2.0.0&lt;/a&gt; with a separate document declaring &lt;a href="docs/public-api.md"&gt;SwiftNIO's Public API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What this means for you is that you should depend on SwiftNIO with a version range that covers everything from the minimum SwiftNIO version you require up to the next major version.
In SwiftPM that can be easily done specifying for example &lt;code&gt;from: "2.0.0"&lt;/code&gt; meaning that you support SwiftNIO in every version starting from 2.0.0 up to (excluding) 3.0.0.
SemVer and SwiftNIO's Public API guarantees should result in a working program without having to worry about testing every single version for compatibility.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-conceptual-overview" class="anchor" aria-hidden="true" href="#conceptual-overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conceptual Overview&lt;/h2&gt;
&lt;p&gt;SwiftNIO is fundamentally a low-level tool for building high-performance networking applications in Swift. It particularly targets those use-cases where using a "thread-per-connection" model of concurrency is inefficient or untenable. This is a common limitation when building servers that use a large number of relatively low-utilization connections, such as HTTP servers.&lt;/p&gt;
&lt;p&gt;To achieve its goals SwiftNIO extensively uses "non-blocking I/O": hence the name! Non-blocking I/O differs from the more common blocking I/O model because the application does not wait for data to be sent to or received from the network: instead, SwiftNIO asks for the kernel to notify it when I/O operations can be performed without waiting.&lt;/p&gt;
&lt;p&gt;SwiftNIO does not aim to provide high-level solutions like, for example, web frameworks do. Instead, SwiftNIO is focused on providing the low-level building blocks for these higher-level applications. When it comes to building a web application, most users will not want to use SwiftNIO directly: instead, they'll want to use one of the many great web frameworks available in the Swift ecosystem. Those web frameworks, however, may choose to use SwiftNIO under the covers to provide their networking support.&lt;/p&gt;
&lt;p&gt;The following sections will describe the low-level tools that SwiftNIO provides, and provide a quick overview of how to work with them. If you feel comfortable with these concepts, then you can skip right ahead to the other sections of this README.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basic-architecture" class="anchor" aria-hidden="true" href="#basic-architecture"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Architecture&lt;/h3&gt;
&lt;p&gt;The basic building blocks of SwiftNIO are the following 8 types of objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoopGroup.html" rel="nofollow"&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt;, a protocol&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;, a protocol&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;, a protocol&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;, a protocol&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bootstrap&lt;/code&gt;, several related structures&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, a struct&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&lt;/code&gt;&lt;/a&gt;, a generic class&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/EventLoopPromise.html" rel="nofollow"&gt;&lt;code&gt;EventLoopPromise&lt;/code&gt;&lt;/a&gt;, a generic struct.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All SwiftNIO applications are ultimately constructed of these various components.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-eventloops-and-eventloopgroups" class="anchor" aria-hidden="true" href="#eventloops-and-eventloopgroups"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;EventLoops and EventLoopGroups&lt;/h4&gt;
&lt;p&gt;The basic I/O primitive of SwiftNIO is the event loop. The event loop is an object that waits for events (usually I/O related events, such as "data received") to happen and then fires some kind of callback when they do. In almost all SwiftNIO applications there will be relatively few event loops: usually only one or two per CPU core the application wants to use. Generally speaking event loops run for the entire lifetime of your application, spinning in an endless loop dispatching events.&lt;/p&gt;
&lt;p&gt;Event loops are gathered together into event loop &lt;em&gt;groups&lt;/em&gt;. These groups provide a mechanism to distribute work around the event loops. For example, when listening for inbound connections the listening socket will be registered on one event loop. However, we don't want all connections that are accepted on that listening socket to be registered with the same event loop, as that would potentially overload one event loop while leaving the others empty. For that reason, the event loop group provides the ability to spread load across multiple event loops.&lt;/p&gt;
&lt;p&gt;In SwiftNIO today there is one &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoopGroup.html" rel="nofollow"&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt; implementation, and two &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; implementations. For production applications there is the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/MultiThreadedEventLoopGroup.html" rel="nofollow"&gt;&lt;code&gt;MultiThreadedEventLoopGroup&lt;/code&gt;&lt;/a&gt;, an &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoopGroup.html" rel="nofollow"&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt; that creates a number of threads (using the POSIX &lt;a href="https://en.wikipedia.org/wiki/POSIX_Threads" rel="nofollow"&gt;&lt;code&gt;pthreads&lt;/code&gt;&lt;/a&gt; library) and places one &lt;code&gt;SelectableEventLoop&lt;/code&gt; on each one. The &lt;code&gt;SelectableEventLoop&lt;/code&gt; is an event loop that uses a selector (either &lt;a href="https://en.wikipedia.org/wiki/Kqueue" rel="nofollow"&gt;&lt;code&gt;kqueue&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Epoll" rel="nofollow"&gt;&lt;code&gt;epoll&lt;/code&gt;&lt;/a&gt; depending on the target system) to manage I/O events from file descriptors and to dispatch work. Additionally, there is the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EmbeddedEventLoop.html" rel="nofollow"&gt;&lt;code&gt;EmbeddedEventLoop&lt;/code&gt;&lt;/a&gt;, which is a dummy event loop that is used primarily for testing purposes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s have a number of important properties. Most vitally, they are the way all work gets done in SwiftNIO applications. In order to ensure thread-safety, any work that wants to be done on almost any of the other objects in SwiftNIO must be dispatched via an &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;. &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; objects own almost all the other objects in a SwiftNIO application, and understanding their execution model is critical for building high-performance SwiftNIO applications.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-channels-channel-handlers-channel-pipelines-and-channel-contexts" class="anchor" aria-hidden="true" href="#channels-channel-handlers-channel-pipelines-and-channel-contexts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Channels, Channel Handlers, Channel Pipelines, and Channel Contexts&lt;/h4&gt;
&lt;p&gt;While &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s are critical to the way SwiftNIO works, most users will not interact with them substantially beyond asking them to create &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/EventLoopPromise.html" rel="nofollow"&gt;&lt;code&gt;EventLoopPromise&lt;/code&gt;&lt;/a&gt;s and to schedule work. The parts of a SwiftNIO application most users will spend the most time interacting with are &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s and &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s.&lt;/p&gt;
&lt;p&gt;Almost every file descriptor that a user interacts with in a SwiftNIO program is associated with a single &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. The &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; owns this file descriptor, and is responsible for managing its lifetime. It is also responsible for processing inbound and outbound events on that file descriptor: whenever the event loop has an event that corresponds to a file descriptor, it will notify the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; that owns that file descriptor.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s by themselves, however, are not useful. After all, it is a rare application that doesn't want to do anything with the data it sends or receives on a socket! So the other important part of the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; is a sequence of objects, called &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s, that process events on a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. The &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s process these events one after another, in order, mutating and transforming events as they go. This can be thought of as a data processing pipeline; hence the name &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are either Inbound or Outbound handlers, or both. Inbound handlers process "inbound" events: events like reading data from a socket, reading socket close, or other kinds of events initiated by remote peers. Outbound handlers process "outbound" events, such as writes, connection attempts, and local socket closes.&lt;/p&gt;
&lt;p&gt;Each handler processes the events in order. For example, read events are passed from the front of the pipeline to the back, one handler at a time, while write events are passed from the back of the pipeline to the front. Each handler may, at any time, generate either inbound or outbound events that will be sent to the next handler in whichever direction is appropriate. This allows handlers to split up reads, coalesce writes, delay connection attempts, and generally perform arbitrary transformations of events.&lt;/p&gt;
&lt;p&gt;In general, &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are designed to be highly re-usable components. This means they tend to be designed to be as small as possible, performing one specific data transformation. This allows handlers to be composed together in novel and flexible ways, which helps with code reuse and encapsulation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are able to keep track of where they are in a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; by using a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelHandlerContext.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandlerContext&lt;/code&gt;&lt;/a&gt;. These objects contain references to the previous and next channel handler in the pipeline, ensuring that it is always possible for a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt; to emit events while it remains in a pipeline.&lt;/p&gt;
&lt;p&gt;SwiftNIO ships with many &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s built in that provide useful functionality, such as HTTP parsing. In addition, high-performance applications will want to provide as much of their logic as possible in &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s, as it helps avoid problems with context switching.&lt;/p&gt;
&lt;p&gt;Additionally, SwiftNIO ships with a few &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; implementations. In particular, it ships with &lt;code&gt;ServerSocketChannel&lt;/code&gt;, a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for sockets that accept inbound connections; &lt;code&gt;SocketChannel&lt;/code&gt;, a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for TCP connections; &lt;code&gt;DatagramChannel&lt;/code&gt;, a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for UDP sockets; and &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EmbeddedChannel.html" rel="nofollow"&gt;&lt;code&gt;EmbeddedChannel&lt;/code&gt;&lt;/a&gt;, a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; primarily used for testing.&lt;/p&gt;
&lt;h5&gt;&lt;a id="user-content-a-note-on-blocking" class="anchor" aria-hidden="true" href="#a-note-on-blocking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Note on Blocking&lt;/h5&gt;
&lt;p&gt;One of the important notes about &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;s is that they are thread-safe. This is very important for writing SwiftNIO applications, as it allows you to write much simpler &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s in the knowledge that they will not require synchronization.&lt;/p&gt;
&lt;p&gt;However, this is achieved by dispatching all code on the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; on the same thread as the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;. This means that, as a general rule, &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s &lt;strong&gt;must not&lt;/strong&gt; call blocking code without dispatching it to a background thread. If a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html" rel="nofollow"&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt; blocks for any reason, all &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s attached to the parent &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; will be unable to progress until the blocking call completes.&lt;/p&gt;
&lt;p&gt;This is a common concern while writing SwiftNIO applications. If it is useful to write code in a blocking style, it is highly recommended that you dispatch work to a different thread when you're done with it in your pipeline.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-bootstrap" class="anchor" aria-hidden="true" href="#bootstrap"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bootstrap&lt;/h4&gt;
&lt;p&gt;While it is possible to configure and register &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s with &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/EventLoop.html" rel="nofollow"&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s directly, it is generally more useful to have a higher-level abstraction to handle this work.&lt;/p&gt;
&lt;p&gt;For this reason, SwiftNIO ships a number of &lt;code&gt;Bootstrap&lt;/code&gt; objects whose purpose is to streamline the creation of channels. Some &lt;code&gt;Bootstrap&lt;/code&gt; objects also provide other functionality, such as support for Happy Eyeballs for making TCP connection attempts.&lt;/p&gt;
&lt;p&gt;Currently SwiftNIO ships with three &lt;code&gt;Bootstrap&lt;/code&gt; objects: &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ServerBootstrap.html" rel="nofollow"&gt;&lt;code&gt;ServerBootstrap&lt;/code&gt;&lt;/a&gt;, for bootstrapping listening channels; &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ClientBootstrap.html" rel="nofollow"&gt;&lt;code&gt;ClientBootstrap&lt;/code&gt;&lt;/a&gt;, for bootstrapping client TCP channels; and &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/DatagramBootstrap.html" rel="nofollow"&gt;&lt;code&gt;DatagramBootstrap&lt;/code&gt;&lt;/a&gt; for bootstrapping UDP channels.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-bytebuffer" class="anchor" aria-hidden="true" href="#bytebuffer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ByteBuffer&lt;/h4&gt;
&lt;p&gt;The majority of the work in a SwiftNIO application involves shuffling buffers of bytes around. At the very least, data is sent and received to and from the network in the form of buffers of bytes. For this reason it's very important to have a high-performance data structure that is optimized for the kind of work SwiftNIO applications perform.&lt;/p&gt;
&lt;p&gt;For this reason, SwiftNIO provides &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, a fast copy-on-write byte buffer that forms a key building block of most SwiftNIO applications.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt; provides a number of useful features, and in addition provides a number of hooks to use it in an "unsafe" mode. This turns off bounds checking for improved performance, at the cost of potentially opening your application up to memory correctness problems.&lt;/p&gt;
&lt;p&gt;In general, it is highly recommended that you use the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt; in its safe mode at all times.&lt;/p&gt;
&lt;p&gt;For more details on the API of &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/ByteBuffer.html" rel="nofollow"&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, please see our API documentation, linked below.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-promises-and-futures" class="anchor" aria-hidden="true" href="#promises-and-futures"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Promises and Futures&lt;/h4&gt;
&lt;p&gt;One major difference between writing concurrent code and writing synchronous code is that not all actions will complete immediately. For example, when you write data on a channel, it is possible that the event loop will not be able to immediately flush that write out to the network. For this reason, SwiftNIO provides &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/EventLoopPromise.html" rel="nofollow"&gt;&lt;code&gt;EventLoopPromise&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; to manage operations that complete &lt;em&gt;asynchronously&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;An &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is essentially a container for the return value of a function that will be populated &lt;em&gt;at some time in the future&lt;/em&gt;. Each &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; has a corresponding &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Structs/EventLoopPromise.html" rel="nofollow"&gt;&lt;code&gt;EventLoopPromise&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, which is the object that the result will be put into. When the promise is succeeded, the future will be fulfilled.&lt;/p&gt;
&lt;p&gt;If you had to poll the future to detect when it completed that would be quite inefficient, so &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is designed to have managed callbacks. Essentially, you can hang callbacks off the future that will be executed when a result is available. The &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; will even carefully arrange the scheduling to ensure that these callbacks always execute on the event loop that initially created the promise, which helps ensure that you don't need too much synchronization around &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; callbacks.&lt;/p&gt;
&lt;p&gt;Another important topic for consideration is the difference between how the promise passed to &lt;code&gt;close&lt;/code&gt; works as opposed to &lt;code&gt;closeFuture&lt;/code&gt; on a &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. For example, the promise passed into &lt;code&gt;close&lt;/code&gt; will succeed after the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is closed down but before the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; is completely cleared out. This will allow you to take action on the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; before it is completely cleared out, if needed. If it is desired to wait for the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Protocols/Channel.html" rel="nofollow"&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; to close down and the &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/ChannelPipeline.html" rel="nofollow"&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; to be cleared out without any further action, then the better option would be to wait for the &lt;code&gt;closeFuture&lt;/code&gt; to succeed.&lt;/p&gt;
&lt;p&gt;There are several functions for applying callbacks to &lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/Classes/EventLoopFuture.html" rel="nofollow"&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, depending on how and when you want them to execute. Details of these functions is left to the API documentation.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-design-philosophy" class="anchor" aria-hidden="true" href="#design-philosophy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Design Philosophy&lt;/h3&gt;
&lt;p&gt;SwiftNIO is designed to be a powerful tool for building networked applications and frameworks, but it is not intended to be the perfect solution for all levels of abstraction. SwiftNIO is tightly focused on providing the basic I/O primitives and protocol implementations at low levels of abstraction, leaving more expressive but slower abstractions to the wider community to build. The intention is that SwiftNIO will be a building block for server-side applications, not necessarily the framework those applications will use directly.&lt;/p&gt;
&lt;p&gt;Applications that need extremely high performance from their networking stack may choose to use SwiftNIO directly in order to reduce the overhead of their abstractions. These applications should be able to maintain extremely high performance with relatively little maintenance cost. SwiftNIO also focuses on providing useful abstractions for this use-case, such that extremely high performance network servers can be built directly.&lt;/p&gt;
&lt;p&gt;The core SwiftNIO repository will contain a few extremely important protocol implementations, such as HTTP, directly in tree. However, we believe that most protocol implementations should be decoupled from the release cycle of the underlying networking stack, as the release cadence is likely to be very different (either much faster or much slower). For this reason, we actively encourage the community to develop and maintain their protocol implementations out-of-tree. Indeed, some first-party SwiftNIO protocol implementations, including our TLS and HTTP/2 bindings, are developed out-of-tree!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apple.github.io/swift-nio/docs/current/NIO/index.html" rel="nofollow"&gt;API documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example Usage&lt;/h2&gt;
&lt;p&gt;There are currently several example projects that demonstrate how to use SwiftNIO.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;chat client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOChatClient"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOChatClient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chat server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOChatServer"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOChatServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOEchoClient"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOEchoClient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOEchoServer"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOEchoServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP echo client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOUDPEchoClient"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOUDPEchoClient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP echo server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOUDPEchoServer"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOUDPEchoServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOHTTP1Client"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOHTTP1Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOHTTP1Server"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOHTTP1Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket client&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOWebSocketClient"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOWebSocketClient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket server&lt;/strong&gt; &lt;a href="https://github.com/apple/swift-nio/tree/master/Sources/NIOWebSocketServer"&gt;https://github.com/apple/swift-nio/tree/master/Sources/NIOWebSocketServer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To build &amp;amp; run them, run following command, replace TARGET_NAME with the folder name under &lt;code&gt;./Sources&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;swift run TARGET_NAME&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, to run NIOHTTP1Server, run following command:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;swift run NIOHTTP1Server&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;SwiftNIO primarily uses &lt;a href="https://swift.org/package-manager/" rel="nofollow"&gt;SwiftPM&lt;/a&gt; as its build tool, so we recommend using that as well. If you want to depend on SwiftNIO in your own project, it's as simple as adding a &lt;code&gt;dependencies&lt;/code&gt; clause to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;dependencies&lt;span class="pl-k"&gt;:&lt;/span&gt; [
    .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/apple/swift-nio.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then adding the appropriate SwiftNIO module(s) to your target dependencies.&lt;/p&gt;
&lt;p&gt;If your project is set up as an Xcode project and you're using Xcode 11+, you can add SwiftNIO as a dependency to your
Xcode project by clicking File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency. In the upcoming dialog, please enter
&lt;code&gt;https://github.com/apple/swift-nio.git&lt;/code&gt; and click Next twice. Finally, select the targets you are planning to use (for
example &lt;code&gt;NIO&lt;/code&gt;, &lt;code&gt;NIOHTTP1&lt;/code&gt;, and &lt;code&gt;NIOFoundationCompat&lt;/code&gt;) and click finish. Now will be able to &lt;code&gt;import NIO&lt;/code&gt; (as well as all
the other targets you have selected) in your project.&lt;/p&gt;
&lt;p&gt;To work on SwiftNIO itself, or to investigate some of the demonstration applications, you can clone the repository directly and use SwiftPM to help build it. For example, you can run the following commands to compile and run the example echo server:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;swift build
swift &lt;span class="pl-c1"&gt;test&lt;/span&gt;
swift run NIOEchoServer&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To verify that it is working, you can use another shell to attempt to connect to it:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello SwiftNIO&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; nc localhost 9999&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all goes well, you'll see the message echoed back to you.&lt;/p&gt;
&lt;p&gt;To work on SwiftNIO in Xcode 11+, you can just open the &lt;code&gt;Package.swift&lt;/code&gt;
file in Xcode and use Xcode's support for SwiftPM Packages.&lt;/p&gt;
&lt;p&gt;If you want to develop SwiftNIO with Xcode 10, you have to generate an Xcode project:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;swift package generate-xcodeproj&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-an-alternative-using-docker-compose" class="anchor" aria-hidden="true" href="#an-alternative-using-docker-compose"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;An alternative: using &lt;code&gt;docker-compose&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Alternatively, you may want to develop or test with &lt;code&gt;docker-compose&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First make sure you have &lt;a href="https://www.docker.com/community-edition" rel="nofollow"&gt;Docker&lt;/a&gt; installed, next run the following commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml run test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Will create a base image with Swift runtime and other build and test dependencies, compile SwiftNIO and run the unit and integration tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml up echo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Will create a base image, compile SwiftNIO, and run a sample &lt;code&gt;NIOEchoServer&lt;/code&gt; on
&lt;code&gt;localhost:9999&lt;/code&gt;. Test it by &lt;code&gt;echo Hello SwiftNIO | nc localhost 9999&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml up http&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Will create a base image, compile SwiftNIO, and run a sample &lt;code&gt;NIOHTTP1Server&lt;/code&gt; on
&lt;code&gt;localhost:8888&lt;/code&gt;. Test it by &lt;code&gt;curl http://localhost:8888&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-developing-swiftnio" class="anchor" aria-hidden="true" href="#developing-swiftnio"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Developing SwiftNIO&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This section is only relevant if you would like to develop SwiftNIO yourself. You can ignore the information here if you just want to use SwiftNIO as a SwiftPM package.&lt;/p&gt;
&lt;p&gt;For the most part, SwiftNIO development is as straightforward as any other SwiftPM project. With that said, we do have a few processes that are worth understanding before you contribute. For details, please see &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; in this repository.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;SwiftNIO's &lt;code&gt;master&lt;/code&gt; branch is the development branch for the next releases of SwiftNIO 2, it's Swift 5-only.&lt;/p&gt;
&lt;p&gt;To be able to compile and run SwiftNIO and the integration tests, you need to
have a few prerequisites installed on your system.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-macos" class="anchor" aria-hidden="true" href="#macos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 10.2 or newer, Xcode 11 recommended.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-linux" class="anchor" aria-hidden="true" href="#linux"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Swift 5.0 or 5.1 (recommended) from &lt;a href="https://swift.org/download/#releases" rel="nofollow"&gt;swift.org/download&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;netcat (for integration tests only)&lt;/li&gt;
&lt;li&gt;lsof (for integration tests only)&lt;/li&gt;
&lt;li&gt;shasum (for integration tests only)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-ubuntu-1804" class="anchor" aria-hidden="true" href="#ubuntu-1804"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ubuntu 18.04&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# install swift tarball from https://swift.org/downloads
apt-get install -y git curl libatomic1 libxml2 netcat-openbsd lsof perl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-fedora-28" class="anchor" aria-hidden="true" href="#fedora-28"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fedora 28+&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;dnf install swift-lang /usr/bin/nc /usr/bin/lsof /usr/bin/shasum
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>apple</author><guid isPermaLink="false">https://github.com/apple/swift-nio</guid><pubDate>Sun, 05 Jan 2020 00:21:00 GMT</pubDate></item><item><title>Yummypets/YPImagePicker #22 in Swift, Today</title><link>https://github.com/Yummypets/YPImagePicker</link><description>&lt;p&gt;&lt;i&gt;📸 Instagram-like image picker &amp; filters for iOS&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1 align="center"&gt;&lt;a id="user-content---" class="anchor" aria-hidden="true" href="#--"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; &lt;br&gt;&lt;a target="_blank" rel="noopener noreferrer" href="Images/logo/logotype_horizontal.png?raw=true"&gt;&lt;img src="Images/logo/logotype_horizontal.png?raw=true" alt="ypimagepicker" width="512" style="max-width:100%;"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/visual.jpg"&gt;&lt;img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/visual.jpg" width="400px" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/h1&gt;&lt;h2&gt;&lt;a id="user-content-ypimagepicker" class="anchor" aria-hidden="true" href="#ypimagepicker"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;YPImagePicker&lt;/h2&gt;
&lt;p&gt;YPImagePicker is an instagram-like photo/video picker for iOS written in pure Swift. It is feature-rich and highly customizable to match your App's requirements.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/swift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0cd4410f8f72568f15d2b810d615624dfed74928/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c616e67756167652d7377696674253230352d6634383034312e7376673f7374796c653d666c6174" alt="Language: Swift 5" data-canonical-src="https://img.shields.io/badge/language-swift%205-f48041.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoapods.org/pods/YPImagePicker" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/104f6bb974053ea1b2d1ccafc68aabd7f27ddbab/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f5950496d6167655069636b65722e7376673f7374796c653d666c6174" alt="Version" data-canonical-src="https://img.shields.io/cocoapods/v/YPImagePicker.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoapods.org/pods/YPImagePicker" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/96afff406fc8bdbed110c49c7778335becc671d9/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f5950496d6167655069636b65722e7376673f7374796c653d666c6174" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/YPImagePicker.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://codebeat.co/projects/github-com-yummypets-ypimagepicker-master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d0a9e8717b7203dd5a629829915deda079454939/68747470733a2f2f636f6465626561742e636f2f6261646765732f39373130613839642d623165322d346535352d613461322d336165316639386634633533" alt="codebeat badge" data-canonical-src="https://codebeat.co/badges/9710a89d-b1e2-4e55-a4a2-3ae1f98f4c53" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Yummypets/YPImagePicker/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/68bd6ae864303283e8ce78ecc2a2544e1fb1d2ae/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6c69676874677265792e7376673f7374796c653d666c6174" alt="License: MIT" data-canonical-src="http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href=""&gt;&lt;img src="https://camo.githubusercontent.com/e22834611537d183adf6ca37d114db84aced263d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f59756d6d79706574732f5950496d6167655069636b65722e737667" alt="GitHub tag" data-canonical-src="https://img.shields.io/github/release/Yummypets/YPImagePicker.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt; - &lt;a href="#configuration"&gt;Configuration&lt;/a&gt; - &lt;a href="#usage"&gt;Usage&lt;/a&gt; - &lt;a href="#languages"&gt;Languages&lt;/a&gt; - &lt;a href="#ui-customization"&gt;UI Customization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Give it a quick try :
&lt;code&gt;pod repo update&lt;/code&gt; then &lt;code&gt;pod try YPImagePicker&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/library.PNG"&gt;&lt;img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/library.PNG" width="200px" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/photo.PNG"&gt;&lt;img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/photo.PNG" width="200px" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/video.PNG"&gt;&lt;img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/video.PNG" width="200px" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/filters.PNG"&gt;&lt;img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/filters.PNG" width="200px" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those features are available just with a few lines of code!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-notable-features" class="anchor" aria-hidden="true" href="#notable-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notable Features&lt;/h2&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="sunrise" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f305.png"&gt;🌅&lt;/g-emoji&gt; Library&lt;br&gt;
&lt;g-emoji class="g-emoji" alias="camera" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f7.png"&gt;📷&lt;/g-emoji&gt; Photo&lt;br&gt;
&lt;g-emoji class="g-emoji" alias="movie_camera" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png"&gt;🎥&lt;/g-emoji&gt; Video&lt;br&gt;
&lt;g-emoji class="g-emoji" alias="scissors" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2702.png"&gt;✂️&lt;/g-emoji&gt; Crop&lt;br&gt;
&lt;g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png"&gt;⚡️&lt;/g-emoji&gt; Flash&lt;br&gt;
&lt;g-emoji class="g-emoji" alias="framed_picture" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f5bc.png"&gt;🖼&lt;/g-emoji&gt; Filters&lt;br&gt;
&lt;g-emoji class="g-emoji" alias="file_folder" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png"&gt;📁&lt;/g-emoji&gt; Albums&lt;br&gt;
&lt;g-emoji class="g-emoji" alias="1234" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f522.png"&gt;🔢&lt;/g-emoji&gt; Multiple Selection&lt;br&gt;
&lt;g-emoji class="g-emoji" alias="straight_ruler" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cf.png"&gt;📏&lt;/g-emoji&gt; Video Trimming &amp;amp; Cover selection&lt;br&gt;
&lt;g-emoji class="g-emoji" alias="triangular_ruler" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d0.png"&gt;📐&lt;/g-emoji&gt; Output image size&lt;br&gt;
And many more...&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Drop in the Classes folder to your Xcode project.&lt;br&gt;
You can also use CocoaPods or Carthage.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-using-cocoapods" class="anchor" aria-hidden="true" href="#using-cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;a href="http://cocoapods.org/" rel="nofollow"&gt;CocoaPods&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;First be sure to run &lt;code&gt;pod repo update&lt;/code&gt; to get the latest version available.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;pod 'YPImagePicker'&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt; and run &lt;code&gt;pod install&lt;/code&gt;. Also add &lt;code&gt;use_frameworks!&lt;/code&gt; to the &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;target 'MyApp'
pod 'YPImagePicker'
use_frameworks!
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-using-carthage" class="anchor" aria-hidden="true" href="#using-carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Add &lt;code&gt;github "Yummypets/YPImagePicker"&lt;/code&gt; to your &lt;code&gt;Cartfile&lt;/code&gt; and run &lt;code&gt;carthage update&lt;/code&gt;. If unfamiliar with Carthage then checkout their &lt;a href="https://github.com/Carthage/Carthage#getting-started"&gt;Getting Started section&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github "Yummypets/YPImagePicker"
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-plist-entries" class="anchor" aria-hidden="true" href="#plist-entries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plist entries&lt;/h2&gt;
&lt;p&gt;In order for your app to access camera and photo libraries,
you'll need to ad these &lt;code&gt;plist entries&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Privacy - Camera Usage Description (photo/videos)&lt;/li&gt;
&lt;li&gt;Privacy - Photo Library Usage Description (library)&lt;/li&gt;
&lt;li&gt;Privacy - Microphone Usage Description (videos)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-text-xml"&gt;&lt;pre&gt;&amp;lt;&lt;span class="pl-ent"&gt;key&lt;/span&gt;&amp;gt;NSCameraUsageDescription&amp;lt;/&lt;span class="pl-ent"&gt;key&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class="pl-ent"&gt;string&lt;/span&gt;&amp;gt;yourWording&amp;lt;/&lt;span class="pl-ent"&gt;string&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class="pl-ent"&gt;key&lt;/span&gt;&amp;gt;NSPhotoLibraryUsageDescription&amp;lt;/&lt;span class="pl-ent"&gt;key&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class="pl-ent"&gt;string&lt;/span&gt;&amp;gt;yourWording&amp;lt;/&lt;span class="pl-ent"&gt;string&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class="pl-ent"&gt;key&lt;/span&gt;&amp;gt;NSMicrophoneUsageDescription&amp;lt;/&lt;span class="pl-ent"&gt;key&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class="pl-ent"&gt;string&lt;/span&gt;&amp;gt;yourWording&amp;lt;/&lt;span class="pl-ent"&gt;string&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p&gt;All the configuration endpoints are in the &lt;a href="https://github.com/Yummypets/YPImagePicker/blob/master/Source/Configuration/YPImagePickerConfiguration.swift"&gt;YPImagePickerConfiguration&lt;/a&gt; struct.
Below are the default value for reference, feel free to play around :)&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;YPImagePickerConfiguration&lt;/span&gt;()
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; [Edit configuration here ...]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Build a picker with your configuration&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; picker &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;YPImagePicker&lt;/span&gt;(&lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-general" class="anchor" aria-hidden="true" href="#general"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;config.&lt;span class="pl-smi"&gt;isScrollToChangeModesEnabled&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;onlySquareImagesFromCamera&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;usesFrontCamera&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;showsPhotoFilters&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;showsVideoTrimmer&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;shouldSaveNewPicturesToAlbum&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;albumName&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DefaultYPImagePickerAlbumName&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;startOnScreen&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; YPPickerScreen.&lt;span class="pl-smi"&gt;photo&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;screens&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [.&lt;span class="pl-smi"&gt;library&lt;/span&gt;, .&lt;span class="pl-smi"&gt;photo&lt;/span&gt;]
config.&lt;span class="pl-smi"&gt;showsCrop&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-c1"&gt;none&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;targetImageSize&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; YPImageSize.&lt;span class="pl-smi"&gt;original&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;overlayView&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIView&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;hidesStatusBar&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;hidesBottomBar&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;preferredStatusBarStyle&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; UIStatusBarStyle.&lt;span class="pl-smi"&gt;default&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;bottomMenuItemSelectedColour&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIColor&lt;/span&gt;(&lt;span class="pl-c1"&gt;r&lt;/span&gt;: &lt;span class="pl-c1"&gt;38&lt;/span&gt;, &lt;span class="pl-c1"&gt;g&lt;/span&gt;: &lt;span class="pl-c1"&gt;38&lt;/span&gt;, &lt;span class="pl-c1"&gt;b&lt;/span&gt;: &lt;span class="pl-c1"&gt;38&lt;/span&gt;)
config.&lt;span class="pl-smi"&gt;bottomMenuItemUnSelectedColour&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIColor&lt;/span&gt;(&lt;span class="pl-c1"&gt;r&lt;/span&gt;: &lt;span class="pl-c1"&gt;153&lt;/span&gt;, &lt;span class="pl-c1"&gt;g&lt;/span&gt;: &lt;span class="pl-c1"&gt;153&lt;/span&gt;, &lt;span class="pl-c1"&gt;b&lt;/span&gt;: &lt;span class="pl-c1"&gt;153&lt;/span&gt;)
config.&lt;span class="pl-smi"&gt;filters&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [DefaultYPFilters&lt;span class="pl-k"&gt;...&lt;/span&gt;]
config.&lt;span class="pl-smi"&gt;maxCameraZoomFactor&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1.0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-library" class="anchor" aria-hidden="true" href="#library"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Library&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;options&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;onlySquare&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;isSquareByDefault&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;minWidthForItem&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;mediaType&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; YPlibraryMediaType.&lt;span class="pl-smi"&gt;photo&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;defaultMultipleSelection&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;maxNumberOfItems&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;minNumberOfItems&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;numberOfItemsInRow&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;spacingBetweenItems&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1.0&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;skipSelectionsGallery&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;preselectedItems&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-video" class="anchor" aria-hidden="true" href="#video"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Video&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;config.&lt;span class="pl-smi"&gt;video&lt;/span&gt;.&lt;span class="pl-smi"&gt;compression&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; AVAssetExportPresetHighestQuality
config.&lt;span class="pl-smi"&gt;video&lt;/span&gt;.&lt;span class="pl-smi"&gt;fileType&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;mov&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;video&lt;/span&gt;.&lt;span class="pl-smi"&gt;recordingTimeLimit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;60.0&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;video&lt;/span&gt;.&lt;span class="pl-smi"&gt;libraryTimeLimit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;60.0&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;video&lt;/span&gt;.&lt;span class="pl-smi"&gt;minimumTimeLimit&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;3.0&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;video&lt;/span&gt;.&lt;span class="pl-smi"&gt;trimmerMaxDuration&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;60.0&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;video&lt;/span&gt;.&lt;span class="pl-smi"&gt;trimmerMinDuration&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;3.0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-gallery" class="anchor" aria-hidden="true" href="#gallery"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gallery&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;config.&lt;span class="pl-smi"&gt;gallery&lt;/span&gt;.&lt;span class="pl-smi"&gt;hidesRemoveButton&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-default-configuration" class="anchor" aria-hidden="true" href="#default-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default Configuration&lt;/h2&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Set the default configuration for all pickers&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;YPImagePickerConfiguration.&lt;span class="pl-smi"&gt;shared&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; config

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; And then use the default configuration like so:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; picker &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;YPImagePicker&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;First things first &lt;code&gt;import YPImagePicker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The picker only has one callback &lt;code&gt;didFinishPicking&lt;/code&gt; enabling you to handle all the cases. Let's see some typical use cases &lt;g-emoji class="g-emoji" alias="nerd_face" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f913.png"&gt;🤓&lt;/g-emoji&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-single-photo" class="anchor" aria-hidden="true" href="#single-photo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Single Photo&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; picker &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;YPImagePicker&lt;/span&gt;()
picker.&lt;span class="pl-smi"&gt;didFinishPicking&lt;/span&gt; { [&lt;span class="pl-k"&gt;unowned&lt;/span&gt; picker] items, &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; photo &lt;span class="pl-k"&gt;=&lt;/span&gt; items.&lt;span class="pl-smi"&gt;singlePhoto&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(photo.&lt;span class="pl-smi"&gt;fromCamera&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Image source (camera or library)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(photo.&lt;span class="pl-c1"&gt;image&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Final image selected by the user&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(photo.&lt;span class="pl-smi"&gt;originalImage&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; original image selected by the user, unfiltered&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(photo.&lt;span class="pl-smi"&gt;modifiedImage&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Transformed image, can be nil&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(photo.&lt;span class="pl-smi"&gt;exifMeta&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Print exif meta data of original image.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    }
    picker.&lt;span class="pl-c1"&gt;dismiss&lt;/span&gt;(&lt;span class="pl-c1"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
}
&lt;span class="pl-c1"&gt;present&lt;/span&gt;(picker, &lt;span class="pl-c1"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-single-video" class="anchor" aria-hidden="true" href="#single-video"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Single video&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Here we configure the picker to only show videos, no photos.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;YPImagePickerConfiguration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;screens&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [.&lt;span class="pl-smi"&gt;library&lt;/span&gt;, .&lt;span class="pl-smi"&gt;video&lt;/span&gt;]
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;mediaType&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;video&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; picker &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;YPImagePicker&lt;/span&gt;(&lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)
picker.&lt;span class="pl-smi"&gt;didFinishPicking&lt;/span&gt; { [&lt;span class="pl-k"&gt;unowned&lt;/span&gt; picker] items, &lt;span class="pl-c1"&gt;_&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; video &lt;span class="pl-k"&gt;=&lt;/span&gt; items.&lt;span class="pl-smi"&gt;singleVideo&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(video.&lt;span class="pl-smi"&gt;fromCamera&lt;/span&gt;)
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(video.&lt;span class="pl-smi"&gt;thumbnail&lt;/span&gt;)
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(video.&lt;span class="pl-c1"&gt;url&lt;/span&gt;)
    }
    picker.&lt;span class="pl-c1"&gt;dismiss&lt;/span&gt;(&lt;span class="pl-c1"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
}
&lt;span class="pl-c1"&gt;present&lt;/span&gt;(picker, &lt;span class="pl-c1"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see &lt;code&gt;singlePhoto&lt;/code&gt; and &lt;code&gt;singleVideo&lt;/code&gt; helpers are here to help you handle single media which are very common, while using the same callback for all your use-cases \o/&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-multiple-selection" class="anchor" aria-hidden="true" href="#multiple-selection"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Multiple selection&lt;/h3&gt;
&lt;p&gt;To enable multiple selection make sure to set &lt;code&gt;library.maxNumberOfItems&lt;/code&gt; in the configuration like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; config &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;YPImagePickerConfiguration&lt;/span&gt;()
config.&lt;span class="pl-smi"&gt;library&lt;/span&gt;.&lt;span class="pl-smi"&gt;maxNumberOfItems&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; picker &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;YPImagePicker&lt;/span&gt;(&lt;span class="pl-c1"&gt;configuration&lt;/span&gt;: config)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can handle multiple selection in the same callback you know and love :&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;picker.&lt;span class="pl-smi"&gt;didFinishPicking&lt;/span&gt; { [&lt;span class="pl-k"&gt;unowned&lt;/span&gt; picker] items, cancelled &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;for&lt;/span&gt; item &lt;span class="pl-k"&gt;in&lt;/span&gt; items {
        &lt;span class="pl-k"&gt;switch&lt;/span&gt; item {
        &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;photo&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; photo)&lt;span class="pl-k"&gt;:&lt;/span&gt;
            &lt;span class="pl-c1"&gt;print&lt;/span&gt;(photo)
        &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-c1"&gt;video&lt;/span&gt;(&lt;span class="pl-k"&gt;let&lt;/span&gt; video)&lt;span class="pl-k"&gt;:&lt;/span&gt;
            &lt;span class="pl-c1"&gt;print&lt;/span&gt;(video)
        }
    }
    picker.&lt;span class="pl-c1"&gt;dismiss&lt;/span&gt;(&lt;span class="pl-c1"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-handle-cancel-event-if-needed" class="anchor" aria-hidden="true" href="#handle-cancel-event-if-needed"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Handle Cancel event (if needed)&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;picker.&lt;span class="pl-smi"&gt;didFinishPicking&lt;/span&gt; { [&lt;span class="pl-k"&gt;unowned&lt;/span&gt; picker] items, cancelled &lt;span class="pl-k"&gt;in&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; cancelled {
        &lt;span class="pl-c1"&gt;print&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Picker was canceled&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    }
    picker.&lt;span class="pl-c1"&gt;dismiss&lt;/span&gt;(&lt;span class="pl-c1"&gt;animated&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;, &lt;span class="pl-c1"&gt;completion&lt;/span&gt;: &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it !&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-languages" class="anchor" aria-hidden="true" href="#languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Languages&lt;/h2&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="us" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png"&gt;🇺🇸&lt;/g-emoji&gt; English, &lt;g-emoji class="g-emoji" alias="es" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f8.png"&gt;🇪🇸&lt;/g-emoji&gt; Spanish, &lt;g-emoji class="g-emoji" alias="fr" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f7.png"&gt;🇫🇷&lt;/g-emoji&gt; French &lt;g-emoji class="g-emoji" alias="ru" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1fa.png"&gt;🇷🇺&lt;/g-emoji&gt; Russian, &lt;g-emoji class="g-emoji" alias="netherlands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f3-1f1f1.png"&gt;🇳🇱&lt;/g-emoji&gt; Dutch, &lt;g-emoji class="g-emoji" alias="brazil" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e7-1f1f7.png"&gt;🇧🇷&lt;/g-emoji&gt; Brazilian, &lt;g-emoji class="g-emoji" alias="tr" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1f7.png"&gt;🇹🇷&lt;/g-emoji&gt; Turkish, &lt;g-emoji class="g-emoji" alias="syria" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f8-1f1fe.png"&gt;🇸🇾&lt;/g-emoji&gt; Arabic, &lt;g-emoji class="g-emoji" alias="de" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ea.png"&gt;🇩🇪&lt;/g-emoji&gt; German, &lt;g-emoji class="g-emoji" alias="it" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f9.png"&gt;🇮🇹&lt;/g-emoji&gt; Italian, &lt;g-emoji class="g-emoji" alias="jp" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f5.png"&gt;🇯🇵&lt;/g-emoji&gt; Japanese, &lt;g-emoji class="g-emoji" alias="cn" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png"&gt;🇨🇳&lt;/g-emoji&gt; Chinese, &lt;g-emoji class="g-emoji" alias="indonesia" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1e9.png"&gt;🇮🇩&lt;/g-emoji&gt; Indonesian, &lt;g-emoji class="g-emoji" alias="kr" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f7.png"&gt;🇰🇷&lt;/g-emoji&gt; Korean, &lt;g-emoji class="g-emoji" alias="taiwan" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1fc.png"&gt;🇹🇼&lt;/g-emoji&gt; Traditional Chinese（Taiwan), &lt;g-emoji class="g-emoji" alias="vietnam" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fb-1f1f3.png"&gt;🇻🇳&lt;/g-emoji&gt; Vietnamese, &lt;g-emoji class="g-emoji" alias="thailand" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f9-1f1ed.png"&gt;🇹🇭&lt;/g-emoji&gt; Thai.&lt;/p&gt;
&lt;p&gt;If your language is not supported, you can still customize the wordings via the &lt;code&gt;configuration.wordings&lt;/code&gt; api:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;config.&lt;span class="pl-smi"&gt;wordings&lt;/span&gt;.&lt;span class="pl-smi"&gt;libraryTitle&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Gallery&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;wordings&lt;/span&gt;.&lt;span class="pl-smi"&gt;cameraTitle&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Camera&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
config.&lt;span class="pl-smi"&gt;wordings&lt;/span&gt;.&lt;span class="pl-smi"&gt;next&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;OK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better yet you can submit an issue or pull request with your &lt;code&gt;Localizable.strings&lt;/code&gt; file to add a new language !&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-ui-customization" class="anchor" aria-hidden="true" href="#ui-customization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UI Customization&lt;/h2&gt;
&lt;p&gt;We tried to keep things as native as possible, so this is done mostly through native Apis.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-navigation-bar-color" class="anchor" aria-hidden="true" href="#navigation-bar-color"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Navigation bar color&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; coloredImage &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;color&lt;/span&gt;: .&lt;span class="pl-smi"&gt;red&lt;/span&gt;)
UINavigationBar.&lt;span class="pl-c1"&gt;appearance&lt;/span&gt;().&lt;span class="pl-c1"&gt;setBackgroundImage&lt;/span&gt;(coloredImage, &lt;span class="pl-c1"&gt;for&lt;/span&gt;: UIBarMetrics.&lt;span class="pl-smi"&gt;default&lt;/span&gt;)
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; UIImage+color helper https://stackoverflow.com/questions/26542035/create-uiimage-with-solid-color-in-swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-navigation-bar-fonts" class="anchor" aria-hidden="true" href="#navigation-bar-fonts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Navigation bar fonts&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; attributes &lt;span class="pl-k"&gt;=&lt;/span&gt; [NSAttributedStringKey.&lt;span class="pl-smi"&gt;font&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; UIFont.&lt;span class="pl-c1"&gt;systemFont&lt;/span&gt;(&lt;span class="pl-c1"&gt;ofSize&lt;/span&gt;: &lt;span class="pl-c1"&gt;30&lt;/span&gt;, &lt;span class="pl-c1"&gt;weight&lt;/span&gt;: .&lt;span class="pl-smi"&gt;bold&lt;/span&gt;) ]
UINavigationBar.&lt;span class="pl-c1"&gt;appearance&lt;/span&gt;().&lt;span class="pl-smi"&gt;titleTextAttributes&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; attributes &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Title fonts&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;UIBarButtonItem.&lt;span class="pl-c1"&gt;appearance&lt;/span&gt;().&lt;span class="pl-c1"&gt;setTitleTextAttributes&lt;/span&gt;(attributes, &lt;span class="pl-c1"&gt;for&lt;/span&gt;: .&lt;span class="pl-smi"&gt;normal&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Bar Button fonts&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-navigation-bar-text-colors" class="anchor" aria-hidden="true" href="#navigation-bar-text-colors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Navigation bar Text colors&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;UINavigationBar.&lt;span class="pl-c1"&gt;appearance&lt;/span&gt;().&lt;span class="pl-smi"&gt;titleTextAttributes&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; [NSAttributedStringKey.&lt;span class="pl-smi"&gt;foregroundColor&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; UIColor.&lt;span class="pl-smi"&gt;yellow&lt;/span&gt; ] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Title color&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;UINavigationBar.&lt;span class="pl-c1"&gt;appearance&lt;/span&gt;().&lt;span class="pl-smi"&gt;tintColor&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;red&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Left. bar buttons&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;config.&lt;span class="pl-smi"&gt;colors&lt;/span&gt;.&lt;span class="pl-smi"&gt;tintColor&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; .&lt;span class="pl-smi"&gt;green&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Right bar buttons (actions)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-original-project--author" class="anchor" aria-hidden="true" href="#original-project--author"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Original Project &amp;amp; Author&lt;/h2&gt;
&lt;p&gt;This project has been first inspired by &lt;a href="https://github.com/ytakzk/Fusuma"&gt;Fusuma&lt;/a&gt;
Considering the big code, design changes and all the additional features added along the way, this moved form a fork to a standalone separate repo, also for discoverability purposes.
Original Fusuma author is &lt;a href="http://ytakzk.me" rel="nofollow"&gt;ytakz&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-core-team" class="anchor" aria-hidden="true" href="#core-team"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Core Team&lt;/h2&gt;
&lt;a href="https://github.com/S4cha"&gt;
  &lt;img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/coreTeam1.png" width="70px" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;a href="https://github.com/NikKovIos"&gt;
  &lt;img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/coreTeam2.png" width="70px" style="max-width:100%;"&gt;
&lt;/a&gt;
&lt;h2&gt;&lt;a id="user-content-contributors-" class="anchor" aria-hidden="true" href="#contributors-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors &lt;g-emoji class="g-emoji" alias="pray" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png"&gt;🙏&lt;/g-emoji&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ezisazis"&gt;ezisazis&lt;/a&gt;,
&lt;a href="https://github.com/hanikeddah"&gt;hanikeddah&lt;/a&gt;,
&lt;a href="https://github.com/tahaburak"&gt;tahaburak&lt;/a&gt;,
&lt;a href="https://github.com/ajkolean"&gt;ajkolean&lt;/a&gt;,
&lt;a href="https://github.com/Anarchoschnitzel"&gt;Anarchoschnitzel&lt;/a&gt;,
&lt;a href="https://github.com/heitara"&gt;Emil&lt;/a&gt;,
&lt;a href="https://github.com/DamascenoRafael"&gt;Rafael Damasceno&lt;/a&gt;,
&lt;a href="https://github.com/https://github.com/cenkingunlugu"&gt;cenkingunlugu&lt;/a&gt;
&lt;a href="https://github.com/heitara"&gt;heitara&lt;/a&gt;
&lt;a href="https://github.com/portellaa"&gt;portellaa&lt;/a&gt;
&lt;a href="https://github.com/romixery"&gt;Romixery&lt;/a&gt;
&lt;a href="https://github.com/shotat"&gt;shotat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href="https://github.com/ihtiht"&gt;ihtiht&lt;/a&gt; for the cool looking logo!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-they-helped-us-one-way-or-another-" class="anchor" aria-hidden="true" href="#they-helped-us-one-way-or-another-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;They helped us one way or another &lt;g-emoji class="g-emoji" alias="clap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png"&gt;👏&lt;/g-emoji&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/userdar"&gt;userdar&lt;/a&gt;,
&lt;a href="https://github.com/Ewg777"&gt;Evgeniy&lt;/a&gt;,
&lt;a href="https://github.com/MehdiMahdloo"&gt;MehdiMahdloo&lt;/a&gt;,
&lt;a href="https://github.com/om-ha"&gt;om-ha&lt;/a&gt;,
&lt;a href="https://github.com/userdar"&gt;userdar&lt;/a&gt;,
&lt;a href="https://github.com/ChintanWeapp"&gt;ChintanWeapp&lt;/a&gt;,
&lt;a href="https://github.com/eddieespinal"&gt;eddieespinal&lt;/a&gt;,
&lt;a href="https://github.com/viktorgardart"&gt;viktorgardart&lt;/a&gt;,
&lt;a href="https://github.com/gdelarosa"&gt;gdelarosa&lt;/a&gt;,
&lt;a href="https://github.com/cwestMobile"&gt;cwestMobile&lt;/a&gt;,
&lt;a href="https://github.com/Tinyik"&gt;Tinyik&lt;/a&gt;,
&lt;a href="https://github.com/Vivekthakur647"&gt;Vivekthakur647&lt;/a&gt;,
&lt;a href="https://github.com/tomasbykowski"&gt;tomasbykowski&lt;/a&gt;,
&lt;a href="https://github.com/artemsmikh"&gt;artemsmikh&lt;/a&gt;,
&lt;a href="https://github.com/theolof"&gt;theolof&lt;/a&gt;,
&lt;a href="https://github.com/dongdong3344"&gt;dongdong3344&lt;/a&gt;,
&lt;a href="https://github.com/MHX792"&gt;MHX792&lt;/a&gt;,
&lt;a href="https://github.com/CIronfounderson"&gt;CIronfounderson&lt;/a&gt;,
&lt;a href="https://github.com/Guerrix"&gt;Guerrix&lt;/a&gt;,
&lt;a href="https://github.com/Zedd0202"&gt;Zedd0202&lt;/a&gt;,
&lt;a href="https://github.com/mohammadZ74"&gt;mohammadZ74&lt;/a&gt;,
&lt;a href="https://github.com/SalmanGhumsani"&gt;SalmanGhumsani&lt;/a&gt;,
&lt;a href="https://github.com/wegweiser6"&gt;wegweiser6&lt;/a&gt;,
&lt;a href="https://github.com/BilalAkram"&gt;BilalAkram&lt;/a&gt;,
&lt;a href="https://github.com/KazimAhmad"&gt;KazimAhmad&lt;/a&gt;,
&lt;a href="https://github.com/JustinBeBoy"&gt;JustinBeBoy&lt;/a&gt;,
&lt;a href="https://github.com/SashaMeyer"&gt;SashaMeyer&lt;/a&gt;,
&lt;a href="https://github.com/GShushanik"&gt;GShushanik&lt;/a&gt;,
&lt;a href="https://github.com/Cez95"&gt;Cez95&lt;/a&gt;,
&lt;a href="https://github.com/Palando"&gt;Palando&lt;/a&gt;,
&lt;a href="https://github.com/sebastienboulogne"&gt;sebastienboulogne&lt;/a&gt;,
&lt;a href="https://github.com/JigneshParekh7165"&gt;JigneshParekh7165&lt;/a&gt;,
&lt;a href="https://github.com/Deepakepaisa"&gt;Deepakepaisa&lt;/a&gt;,
&lt;a href="https://github.com/AndreiBoariu"&gt;AndreiBoariu&lt;/a&gt;,
&lt;a href="https://github.com/nathankonrad1"&gt;nathankonrad1&lt;/a&gt;,
&lt;a href="https://github.com/wawilliams003"&gt;wawilliams003&lt;/a&gt;,
&lt;a href="https://github.com/pngo-hypewell"&gt;pngo-hypewell&lt;/a&gt;,
&lt;a href="https://github.com/PawanManjani"&gt;PawanManjani&lt;/a&gt;,
&lt;a href="https://github.com/devender54321"&gt;devender54321&lt;/a&gt;,
&lt;a href="https://github.com/Didar1994"&gt;Didar1994&lt;/a&gt;,
&lt;a href="https://github.com/relaxsus"&gt;relaxsus&lt;/a&gt;
&lt;a href="https://github.com/restoflash"&gt;restoflash&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dependency" class="anchor" aria-hidden="true" href="#dependency"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependency&lt;/h2&gt;
&lt;p&gt;YPImagePicker relies on &lt;a href="https://github.com/prynt/PryntTrimmerView"&gt;prynt/PryntTrimmerView&lt;/a&gt; for provide video trimming and cover features. Big thanks to @HHK1 for making this open source :)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-obj-c-support" class="anchor" aria-hidden="true" href="#obj-c-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Obj-C support&lt;/h2&gt;
&lt;p&gt;Objective-C is not supported and this is not on our roadmap.
Swift is the future and dropping Obj-C is the price to pay to keep our velocity on this library :)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;YPImagePicker is released under the MIT license.&lt;br&gt;
See &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-swift-version" class="anchor" aria-hidden="true" href="#swift-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift Version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Swift 3 -&amp;gt; version &lt;a href="https://github.com/Yummypets/YPImagePicker/releases/tag/1.2.0"&gt;&lt;strong&gt;1.2.0&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swift 4.1 -&amp;gt; version &lt;a href="https://github.com/Yummypets/YPImagePicker/releases/tag/3.4.0"&gt;&lt;strong&gt;3.4.1&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swift 4.2 -&amp;gt; version &lt;a href="https://github.com/Yummypets/YPImagePicker/releases/tag/3.5.2"&gt;&lt;strong&gt;3.5.2&lt;/strong&gt;&lt;/a&gt;
releases/tag/3.4.0)&lt;/li&gt;
&lt;li&gt;Swift 5.0 -&amp;gt; version &lt;a href="https://github.com/Yummypets/YPImagePicker/releases/tag/4.0.0"&gt;&lt;strong&gt;4.0.0&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swift 5.1 -&amp;gt; version &lt;a href="https://github.com/Yummypets/YPImagePicker/releases/tag/4.1.2"&gt;&lt;strong&gt;4.1.2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Yummypets</author><guid isPermaLink="false">https://github.com/Yummypets/YPImagePicker</guid><pubDate>Sun, 05 Jan 2020 00:22:00 GMT</pubDate></item><item><title>tensorflow/swift #23 in Swift, Today</title><link>https://github.com/tensorflow/swift</link><description>&lt;p&gt;&lt;i&gt;Swift for TensorFlow Project Home Page&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="images/logo.png"&gt;&lt;img src="images/logo.png" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-swift-for-tensorflow" class="anchor" aria-hidden="true" href="#swift-for-tensorflow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swift for TensorFlow&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Swift for TensorFlow: No boundaries.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Swift for TensorFlow is a next-generation platform for machine learning,
incorporating the latest research across machine learning, compilers,
differentiable programming, systems design, and beyond. This is an early-stage
project: it is not feature-complete nor production-ready, but it is ready for
&lt;em&gt;pioneers&lt;/em&gt; to try in projects, give feedback, and help shape the future!&lt;/p&gt;
&lt;p&gt;The Swift for TensorFlow project is currently focusing on 2 kinds of users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advanced ML researchers&lt;/strong&gt; who are limited by current ML frameworks. Swift
for TensorFlow's advantages include seamless integration with a modern
general-purpose language, allowing for more dynamic and sophisticated
models. Fast abstractions can be developed in "user-space" (as opposed to in
C/C++, aka "framework-space"), resulting in modular APIs that can be easily
customized.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ML learners&lt;/strong&gt; who are just getting started with machine learning. Thanks
to Swift's support for quality tooling (e.g. context-aware autocompletion),
Swift for TensorFlow can be one of the most productive ways to start
learning the fundamentals of machine learning.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-using-swift-for-tensorflow" class="anchor" aria-hidden="true" href="#using-swift-for-tensorflow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Swift for TensorFlow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Google Colaboratory&lt;/strong&gt;: The fastest way to get started is to try out Swift
for TensorFlow right in your browser. Just open up &lt;a href="#tutorials-"&gt;a tutorial&lt;/a&gt;, or start from a &lt;a href="https://colab.research.google.com/github/tensorflow/swift/blob/master/notebooks/blank_swift.ipynb" rel="nofollow"&gt;blank
notebook&lt;/a&gt;!
Read more in our &lt;a href="Usage.md"&gt;usage guide&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Install locally&lt;/strong&gt;: you can &lt;a href="Installation.md"&gt;download a pre-built Swift for TensorFlow
package&lt;/a&gt;. After installation, you can follow these
&lt;a href="Usage.md"&gt;step-by-step instructions&lt;/a&gt; to build and execute a Swift script on
your computer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Compile from source&lt;/strong&gt;: If you'd like to customize Swift for TensorFlow or
contribute back, follow our &lt;a href="https://github.com/apple/swift/tree/tensorflow#building-swift-for-tensorflow"&gt;instructions&lt;/a&gt;
on building Swift for TensorFlow from source.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-tutorials-" class="anchor" aria-hidden="true" href="#tutorials-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tutorials &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/dfbf50eed8dd2dea5f3e0beaaf2001eeca77f314/68747470733a2f2f7777772e74656e736f72666c6f772e6f72672f696d616765732f636f6c61625f6c6f676f5f333270782e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/dfbf50eed8dd2dea5f3e0beaaf2001eeca77f314/68747470733a2f2f7777772e74656e736f72666c6f772e6f72672f696d616765732f636f6c61625f6c6f676f5f333270782e706e67" alt="" data-canonical-src="https://www.tensorflow.org/images/colab_logo_32px.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tutorial&lt;/th&gt;
&lt;th&gt;Last Updated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/a_swift_tour.ipynb" rel="nofollow"&gt;A Swift Tour&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;March 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/protocol_oriented_generics.ipynb" rel="nofollow"&gt;Protocol-Oriented Programming &amp;amp; Generics&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;August 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb" rel="nofollow"&gt;Python Interoperability&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;March 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/custom_differentiation.ipynb" rel="nofollow"&gt;Custom Differentiation&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;March 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/model_training_walkthrough.ipynb" rel="nofollow"&gt;Model Training Walkthrough&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;March 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/raw_tensorflow_operators.ipynb" rel="nofollow"&gt;Raw TensorFlow Operators&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;December 2019&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/swift-models"&gt;Models and Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tensorflow.org/api_docs/swift/Structs/Tensor" rel="nofollow"&gt;TensorFlow Swift API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="RELEASES.md"&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="KNOWN_ISSUES.md"&gt;Known Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="FAQ.md"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-forums" class="anchor" aria-hidden="true" href="#forums"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Forums&lt;/h3&gt;
&lt;p&gt;Please join the
&lt;a href="https://groups.google.com/a/tensorflow.org/d/forum/swift" rel="nofollow"&gt;swift@tensorflow.org mailing list&lt;/a&gt;
to hear the latest announcements, get help, and share your thoughts!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-why-swift-for-tensorflow" class="anchor" aria-hidden="true" href="#why-swift-for-tensorflow"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why Swift for TensorFlow?&lt;/h2&gt;
&lt;p&gt;Swift for TensorFlow is a new way to develop machine learning models. It
gives you the power of
&lt;a href="https://www.tensorflow.org" rel="nofollow"&gt;TensorFlow&lt;/a&gt; directly integrated into the
&lt;a href="https://swift.org/about" rel="nofollow"&gt;Swift programming language&lt;/a&gt;. We believe that
machine learning paradigms are so important that they deserve
&lt;strong&gt;first-class language and compiler support&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A fundamental primitive in machine learning is gradient-based optimization:
computing function derivatives to optimize parameters. With Swift for
TensorFlow, you can easily differentiate functions using differential
operators like &lt;a href="https://www.tensorflow.org/swift/api_docs/Functions#/s:10TensorFlow8gradient2of15CotangentVectorQzxcq_xc_tAA14DifferentiableRzSFR_AaFR_AdaFPQy_Rs_r0_lF" rel="nofollow"&gt;&lt;code&gt;gradient(of:)&lt;/code&gt;&lt;/a&gt;, or differentiate with respect to an entire
model by calling method &lt;a href="https://www.tensorflow.org/swift/api_docs/Protocols/Differentiable#/s:10TensorFlow14DifferentiablePAAE8gradient2in15CotangentVectorQzqd__xXE_tSFRd__AaBRd__AfCQyd__Rsd__lF" rel="nofollow"&gt;&lt;code&gt;gradient(in:)&lt;/code&gt;&lt;/a&gt;. These differentiation APIs
are not just available for &lt;code&gt;Tensor&lt;/code&gt;-related concepts—they are
generalized for all types that conform to the &lt;a href="https://www.tensorflow.org/swift/api_docs/Protocols/Differentiable" rel="nofollow"&gt;&lt;code&gt;Differentiable&lt;/code&gt;&lt;/a&gt;
protocol, including &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, SIMD vectors, and your own data
structures.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Custom differentiable type.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;Model&lt;/span&gt;: &lt;span class="pl-e"&gt;Differentiable &lt;/span&gt;{
    &lt;span class="pl-k"&gt;var&lt;/span&gt; w&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Float&lt;/span&gt;
    &lt;span class="pl-k"&gt;var&lt;/span&gt; b&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Float&lt;/span&gt;
    &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;applied&lt;/span&gt;(&lt;span class="pl-en"&gt;to&lt;/span&gt; &lt;span class="pl-smi"&gt;input&lt;/span&gt;: &lt;span class="pl-c1"&gt;Float&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;Float&lt;/span&gt; {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; w &lt;span class="pl-k"&gt;*&lt;/span&gt; input &lt;span class="pl-k"&gt;+&lt;/span&gt; b
    }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Differentiate using `Differentiable.gradient(at:in:)`.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; model &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Model&lt;/span&gt;(&lt;span class="pl-c1"&gt;w&lt;/span&gt;: &lt;span class="pl-c1"&gt;4.0&lt;/span&gt;, &lt;span class="pl-c1"&gt;b&lt;/span&gt;: &lt;span class="pl-c1"&gt;3.0&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; (𝛁model, 𝛁input) &lt;span class="pl-k"&gt;=&lt;/span&gt; model.&lt;span class="pl-c1"&gt;gradient&lt;/span&gt;(&lt;span class="pl-c1"&gt;at&lt;/span&gt;: &lt;span class="pl-c1"&gt;2.0&lt;/span&gt;) { model, input &lt;span class="pl-k"&gt;in&lt;/span&gt;
    model.&lt;span class="pl-c1"&gt;applied&lt;/span&gt;(&lt;span class="pl-c1"&gt;to&lt;/span&gt;: input)
}

&lt;span class="pl-c1"&gt;print&lt;/span&gt;(𝛁model) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Model.TangentVector(w: 2.0, b: 1.0)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;print&lt;/span&gt;(𝛁input) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; 4.0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Beyond derivatives, the Swift for TensorFlow project comes with a sophisticated toolchain
to make users more productive. You can run Swift interactively in a Jupyter
notebook, and get helpful autocomplete suggestions to help you explore the
massive API surface of a modern deep learning library. You can &lt;a href="https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/model_training_walkthrough.ipynb" rel="nofollow"&gt;get started
right in your browser in
seconds&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Migrating to Swift for TensorFlow is really easy thanks to Swift's powerful
Python integration. You can incrementally migrate your Python code over (or
continue to use your favorite Python libraries), because you can easily call
your favorite Python library with a familiar syntax:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;TensorFlow&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Python&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; np &lt;span class="pl-k"&gt;=&lt;/span&gt; Python.&lt;span class="pl-c1"&gt;import&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;numpy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-k"&gt;let&lt;/span&gt; array &lt;span class="pl-k"&gt;=&lt;/span&gt; np.&lt;span class="pl-c1"&gt;arange&lt;/span&gt;(&lt;span class="pl-c1"&gt;100&lt;/span&gt;).&lt;span class="pl-c1"&gt;reshape&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;, &lt;span class="pl-c1"&gt;10&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Create a 10x10 numpy array.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; tensor &lt;span class="pl-k"&gt;=&lt;/span&gt; Tensor&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;Float&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-c1"&gt;numpy&lt;/span&gt;: array)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Seamless integration!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Beware: the project is moving very quickly, and thus some of these documents
are slightly out of date as compared to the current state-of-the-art.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Document&lt;/th&gt;
&lt;th&gt;Last Updated&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="docs/WhySwiftForTensorFlow.md"&gt;Why &lt;em&gt;Swift&lt;/em&gt; for TensorFlow?&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;April 2018&lt;/td&gt;
&lt;td&gt;Current&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="docs/DesignOverview.md"&gt;Swift for TensorFlow Design Overview&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;April 2018&lt;/td&gt;
&lt;td&gt;Outdated&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-technology-deep-dive" class="anchor" aria-hidden="true" href="#technology-deep-dive"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Technology deep dive&lt;/h3&gt;
&lt;p&gt;The Swift for TensorFlow project builds on top of powerful theoretical
foundations. For insight into some of the underlying technologies, check
out the following documentation.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Document&lt;/th&gt;
&lt;th&gt;Last Updated&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/apple/swift/blob/master/docs/DifferentiableProgramming.md"&gt;Differentiable Programming Mega-Proposal&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;September 2019&lt;/td&gt;
&lt;td&gt;Current&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.google.com/document/d/1bPepWLfRQa6CtXqKA8CDQ87uZHixNav-TFjLSisuKag/edit?usp=sharing" rel="nofollow"&gt;Swift Differentiable Programming Design Overview&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;June 2019&lt;/td&gt;
&lt;td&gt;Current&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.google.com/document/d/1_BirmTqdotglwNTOcYAW-ib6mx_jl-gH9Dbg4WmHZh0" rel="nofollow"&gt;Swift Differentiable Programming Implementation Overview&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;August 2019&lt;/td&gt;
&lt;td&gt;Current&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="docs/DifferentiableTypes.md"&gt;Differentiable Types&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;March 2019&lt;/td&gt;
&lt;td&gt;Outdated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="docs/DifferentiableFunctions.md"&gt;Differentiable Functions and Differentiation APIs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;March 2019&lt;/td&gt;
&lt;td&gt;Outdated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="docs/DynamicPropertyIteration.md"&gt;Dynamic Property Iteration using Key Paths&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;March 2019&lt;/td&gt;
&lt;td&gt;Current&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="docs/ParameterOptimization.md"&gt;Hierarchical Parameter Iteration and Optimization&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;March 2019&lt;/td&gt;
&lt;td&gt;Current&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://gist.github.com/rxwei/30ba75ce092ab3b0dce4bde1fc2c9f1d"&gt;First-Class Automatic Differentiation in Swift: A Manifesto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;October 2018&lt;/td&gt;
&lt;td&gt;Outdated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="docs/AutomaticDifferentiation.md"&gt;Automatic Differentiation Whitepaper&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;April 2018&lt;/td&gt;
&lt;td&gt;Outdated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="docs/PythonInteroperability.md"&gt;Python Interoperability&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;April 2018&lt;/td&gt;
&lt;td&gt;Current&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="docs/GraphProgramExtraction.md"&gt;Graph Program Extraction&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;April 2018&lt;/td&gt;
&lt;td&gt;Outdated&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-source-code" class="anchor" aria-hidden="true" href="#source-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Source code&lt;/h2&gt;
&lt;p&gt;Compiler and standard library development happens on the &lt;code&gt;tensorflow&lt;/code&gt; branch of
the &lt;a href="https://github.com/apple/swift/tree/tensorflow"&gt;apple/swift&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Additional code repositories that make up the core of the project include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/apple/swift-lldb/tree/tensorflow"&gt;Swift fork of LLDB&lt;/a&gt;:
debugger and REPL support.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/swift-apis"&gt;Deep learning library&lt;/a&gt;: high-level
API familiar to Keras users.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Swift for TensorFlow is &lt;strong&gt;not&lt;/strong&gt; intended to remain a long-term fork of the official
Swift language. Language additions are designed to fit with the direction of
Swift and will go through the &lt;a href="https://github.com/apple/swift-evolution"&gt;Swift
Evolution&lt;/a&gt; process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-jupyter-notebook-support" class="anchor" aria-hidden="true" href="#jupyter-notebook-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jupyter Notebook support&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://jupyter.org/" rel="nofollow"&gt;Jupyter Notebook&lt;/a&gt; support for Swift is under development at
&lt;a href="https://github.com/google/swift-jupyter"&gt;google/swift-jupyter&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-community" class="anchor" aria-hidden="true" href="#community"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Community&lt;/h2&gt;
&lt;p&gt;Swift for TensorFlow discussions happen on the
&lt;a href="https://groups.google.com/a/tensorflow.org/d/forum/swift" rel="nofollow"&gt;swift@tensorflow.org mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-bugs-reports-and-feature-requests" class="anchor" aria-hidden="true" href="#bugs-reports-and-feature-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bugs reports and feature requests&lt;/h3&gt;
&lt;p&gt;Before reporting an issue, please check the &lt;a href="FAQ.md"&gt;Frequently Asked Questions&lt;/a&gt;
to see if your question has already been addressed.&lt;/p&gt;
&lt;p&gt;For questions about general use or feature requests, please send an email to
the &lt;a href="mailto:swift@tensorflow.org"&gt;mailing list&lt;/a&gt; or search for relevant issues
in the &lt;a href="https://bugs.swift.org/projects/TF/issues/?filter=allopenissues" rel="nofollow"&gt;JIRA issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the most part, the core team's development is also tracked in
&lt;a href="https://bugs.swift.org/secure/RapidBoard.jspa?rapidView=17&amp;amp;projectKey=TF&amp;amp;view=planning" rel="nofollow"&gt;JIRA&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h3&gt;
&lt;p&gt;We welcome contributions from everyone. Read the &lt;a href="Contributing.md"&gt;contributing
guide&lt;/a&gt; for information on how to get started.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-code-of-conduct" class="anchor" aria-hidden="true" href="#code-of-conduct"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code of conduct&lt;/h3&gt;
&lt;p&gt;In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, gender identity and expression, level of
experience, education, socio-economic status, nationality, personal appearance,
race, religion, or sexual identity and orientation.&lt;/p&gt;
&lt;p&gt;The Swift for TensorFlow community is guided by our &lt;a href="CODE_OF_CONDUCT.md"&gt;Code of
Conduct&lt;/a&gt;, which we encourage everybody to read before
participating.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>tensorflow</author><guid isPermaLink="false">https://github.com/tensorflow/swift</guid><pubDate>Sun, 05 Jan 2020 00:23:00 GMT</pubDate></item><item><title>ReactiveX/RxSwift #24 in Swift, Today</title><link>https://github.com/ReactiveX/RxSwift</link><description>&lt;p&gt;&lt;i&gt;Reactive Programming in Swift&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content--rxswift-reactivex-for-swift" class="anchor" aria-hidden="true" href="#-rxswift-reactivex-for-swift"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/ReactiveX/RxSwift/master/assets/Rx_Logo_M.png"&gt;&lt;img src="https://raw.githubusercontent.com/ReactiveX/RxSwift/master/assets/Rx_Logo_M.png" alt="Miss Electric Eel 2016" width="36" height="36" style="max-width:100%;"&gt;&lt;/a&gt; RxSwift: ReactiveX for Swift&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/ReactiveX/RxSwift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d6899870ec82f2a13bcbdc55834ee9718be7678a/68747470733a2f2f7472617669732d63692e6f72672f5265616374697665582f527853776966742e7376673f6272616e63683d6d6173746572" alt="Travis CI" data-canonical-src="https://travis-ci.org/ReactiveX/RxSwift.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/cad98e8f98045360e4b82f574b86b45952b3feb1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d694f532532302537432532306d61634f5325323025374325323074764f5325323025374325323077617463684f532532302537432532304c696e75782d3333333333332e737667"&gt;&lt;img src="https://camo.githubusercontent.com/cad98e8f98045360e4b82f574b86b45952b3feb1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d732d694f532532302537432532306d61634f5325323025374325323074764f5325323025374325323077617463684f532532302537432532304c696e75782d3333333333332e737667" alt="platforms" data-canonical-src="https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-333333.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://cocoapods.org/pods/RxSwift" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/91ac251cd8e6775af6ec6807fc0c354827c6878f/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f527853776966742e737667" alt="pod" data-canonical-src="https://img.shields.io/cocoapods/v/RxSwift.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/Carthage/Carthage"&gt;&lt;img src="https://camo.githubusercontent.com/3dc8a44a2c3f7ccd5418008d1295aae48466c141/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43617274686167652d636f6d70617469626c652d3442433531442e7376673f7374796c653d666c6174" alt="Carthage compatible" data-canonical-src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://github.com/apple/swift-package-manager"&gt;&lt;img src="https://camo.githubusercontent.com/ad744674ba25cccb6e683eb78b7c485e1b63b2d2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53776966742532305061636b6167652532304d616e616765722d636f6d70617469626c652d627269676874677265656e2e737667" alt="Swift Package Manager compatible" data-canonical-src="https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rx is a &lt;a href="https://youtu.be/looJcaeboBY" rel="nofollow"&gt;generic abstraction of computation&lt;/a&gt; expressed through &lt;code&gt;Observable&amp;lt;Element&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;This is a Swift version of &lt;a href="https://github.com/Reactive-Extensions/Rx.NET"&gt;Rx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It tries to port as many concepts from the original version as possible, but some concepts were adapted for more pleasant and performant integration with iOS/macOS environment.&lt;/p&gt;
&lt;p&gt;Cross platform documentation can be found on &lt;a href="http://reactivex.io/" rel="nofollow"&gt;ReactiveX.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like the original Rx, its intention is to enable easy composition of asynchronous operations and event/data streams.&lt;/p&gt;
&lt;p&gt;KVO observing, async operations and streams are all unified under &lt;a href="Documentation/GettingStarted.md#observables-aka-sequences"&gt;abstraction of sequence&lt;/a&gt;. This is the reason why Rx is so simple, elegant and powerful.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-i-came-here-because-i-want-to-" class="anchor" aria-hidden="true" href="#i-came-here-because-i-want-to-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I came here because I want to ...&lt;/h2&gt;
&lt;h6&gt;&lt;a id="user-content--understand" class="anchor" aria-hidden="true" href="#-understand"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... understand&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/Why.md"&gt;why use rx?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/GettingStarted.md"&gt;the basics, getting started with RxSwift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Traits.md"&gt;traits&lt;/a&gt; - what are &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Completable&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Driver&lt;/code&gt;, and &lt;code&gt;ControlProperty&lt;/code&gt; ... and why do they exist?&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/UnitTests.md"&gt;testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Tips.md"&gt;tips and common errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/GettingStarted.md#debugging"&gt;debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/MathBehindRx.md"&gt;the math behind Rx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/HotAndColdObservables.md"&gt;what are hot and cold observable sequences?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--install" class="anchor" aria-hidden="true" href="#-install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... install&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;Integrate RxSwift/RxCocoa with my app. &lt;a href="#installation"&gt;Installation Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--hack-around" class="anchor" aria-hidden="true" href="#-hack-around"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... hack around&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;with the example app. &lt;a href="Documentation/ExampleApp.md"&gt;Running Example App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;with operators in playgrounds. &lt;a href="Documentation/Playgrounds.md"&gt;Playgrounds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--interact" class="anchor" aria-hidden="true" href="#-interact"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... interact&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;All of this is great, but it would be nice to talk with other people using RxSwift and exchange experiences. &lt;br&gt;&lt;a href="http://slack.rxswift.org" rel="nofollow"&gt;Join Slack Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report a problem using the library. &lt;a href=".github/ISSUE_TEMPLATE.md"&gt;Open an Issue With Bug Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Request a new feature. &lt;a href="Documentation/NewFeatureRequestTemplate.md"&gt;Open an Issue With Feature Request Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Help out &lt;a href="CONTRIBUTING.md"&gt;Check out contribution guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--compare" class="anchor" aria-hidden="true" href="#-compare"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... compare&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/ComparisonWithOtherLibraries.md"&gt;with other libraries&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--understand-the-structure" class="anchor" aria-hidden="true" href="#-understand-the-structure"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... understand the structure&lt;/h6&gt;
&lt;p&gt;RxSwift comprises five separate components depending on eachother in the following way:&lt;/p&gt;
&lt;pre lang="none"&gt;&lt;code&gt;┌──────────────┐    ┌──────────────┐
│   RxCocoa    ├────▶   RxRelay    │
└───────┬──────┘    └──────┬───────┘
        │                  │        
┌───────▼──────────────────▼───────┐
│             RxSwift              │
└───────▲──────────────────▲───────┘
        │                  │        
┌───────┴──────┐    ┌──────┴───────┐
│    RxTest    │    │  RxBlocking  │
└──────────────┘    └──────────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RxSwift&lt;/strong&gt;: The core of RxSwift, providing the Rx standard as (mostly) defined by &lt;a href="https://reactivex.io" rel="nofollow"&gt;ReactiveX&lt;/a&gt;. It has no other dependencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RxCocoa&lt;/strong&gt;: Provides Cocoa-specific capabilities for general iOS/macOS/watchOS &amp;amp; tvOS app development, such as Binders, Traits, and much more. It depends on both &lt;code&gt;RxSwift&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RxRelay&lt;/strong&gt;: Provides &lt;code&gt;PublishRelay&lt;/code&gt; and &lt;code&gt;BehaviorRelay&lt;/code&gt;, two &lt;a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Subjects.md#relays"&gt;simple wrappers around Subjects&lt;/a&gt;. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RxTest&lt;/strong&gt; and &lt;strong&gt;RxBlocking&lt;/strong&gt;: Provides testing capabilities for Rx-based systems. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--find-compatible" class="anchor" aria-hidden="true" href="#-find-compatible"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... find compatible&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;libraries from &lt;a href="https://github.com/RxSwiftCommunity"&gt;RxSwiftCommunity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cocoapods.org/?q=uses%3Arxswift" rel="nofollow"&gt;Pods using RxSwift&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;a id="user-content--see-the-broader-vision" class="anchor" aria-hidden="true" href="#-see-the-broader-vision"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;... see the broader vision&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;Does this exist for Android? &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Where is all of this going, what is the future, what about reactive architectures, how do you design entire apps this way? &lt;a href="https://github.com/cyclejs/cycle-core"&gt;Cycle.js&lt;/a&gt; - this is javascript, but &lt;a href="https://github.com/Reactive-Extensions/RxJS"&gt;RxJS&lt;/a&gt; is javascript version of Rx.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th width="30%"&gt;Here's an example&lt;/th&gt;
    &lt;th width="30%"&gt;In Action&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Define search for GitHub repositories ...&lt;/td&gt;
    &lt;th rowspan="9"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif"&gt;&lt;img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;div&gt;&lt;pre&gt;let searchResults = searchBar.rx.text.orEmpty
    .throttle(.milliseconds(300), scheduler: MainScheduler.instance)
    .distinctUntilChanged()
    .flatMapLatest { query -&amp;gt; Observable&amp;lt;[Repository]&amp;gt; in
        if query.isEmpty {
            return .just([])
        }
        return searchGitHub(query)
            .catchErrorJustReturn([])
    }
    .observeOn(MainScheduler.instance)&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;... then bind the results to your tableview&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="30%"&gt;&lt;div&gt;&lt;pre&gt;searchResults
    .bind(to: tableView.rx.items(cellIdentifier: "Cell")) {
        (index, repository: Repository, cell) in
        cell.textLabel?.text = repository.name
        cell.detailTextLabel?.text = repository.url
    }
    .disposed(by: disposeBag)&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 10.2&lt;/li&gt;
&lt;li&gt;Swift 5.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Xcode 10.1 and below, &lt;a href="https://github.com/ReactiveX/RxSwift/releases/tag/4.5.0"&gt;use RxSwift 4.5&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Rx doesn't contain any external dependencies.&lt;/p&gt;
&lt;p&gt;These are currently the supported options:&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manual&lt;/h3&gt;
&lt;p&gt;Open Rx.xcworkspace, choose &lt;code&gt;RxExample&lt;/code&gt; and hit run. This method will build everything and run the sample app&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cocoapods" class="anchor" aria-hidden="true" href="#cocoapods"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://guides.cocoapods.org/using/using-cocoapods.html" rel="nofollow"&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight highlight-source-ruby"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Podfile&lt;/span&gt;
use_frameworks!

target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;YOUR_TARGET_NAME&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;RxSwift&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 5&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;RxCocoa&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 5&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; RxTest and RxBlocking make the most sense in the context of unit/integration tests&lt;/span&gt;
target &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;YOUR_TESTING_TARGET&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;RxBlocking&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 5&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    pod &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;RxTest&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&amp;gt; 5&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace &lt;code&gt;YOUR_TARGET_NAME&lt;/code&gt; and then, in the &lt;code&gt;Podfile&lt;/code&gt; directory, type:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ pod install&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-carthage" class="anchor" aria-hidden="true" href="#carthage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Officially supported: Carthage 0.33 and up.&lt;/p&gt;
&lt;p&gt;Add this to &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github "ReactiveX/RxSwift" ~&amp;gt; 5.0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ carthage update&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-carthage-as-a-static-library" class="anchor" aria-hidden="true" href="#carthage-as-a-static-library"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Carthage as a Static Library&lt;/h4&gt;
&lt;p&gt;Carthage defaults to building RxSwift as a Dynamic Library.&lt;/p&gt;
&lt;p&gt;If you wish to build RxSwift as a Static Library using Carthage you may use the script below to manually modify the framework type before building with Carthage:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;carthage update RxSwift --platform iOS --no-build
sed -i -e &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;s/MACH_O_TYPE = mh_dylib/MACH_O_TYPE = staticlib/g&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; Carthage/Checkouts/RxSwift/Rx.xcodeproj/project.pbxproj
carthage build RxSwift --platform iOS&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-swift-package-manager" class="anchor" aria-hidden="true" href="#swift-package-manager"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/apple/swift-package-manager"&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create a &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; swift-tools-version:5.0&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;PackageDescription&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; package &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;Package&lt;/span&gt;(
  &lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RxTestProject&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [
    .&lt;span class="pl-c1"&gt;package&lt;/span&gt;(&lt;span class="pl-c1"&gt;url&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/ReactiveX/RxSwift.git&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;from&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  ],
  &lt;span class="pl-c1"&gt;targets&lt;/span&gt;: [
    .&lt;span class="pl-c1"&gt;target&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RxTestProject&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;dependencies&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RxSwift&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RxCocoa&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
  ]
)&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ swift build&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build or test a module with RxTest dependency, set &lt;code&gt;TEST=1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ TEST=1 swift &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-manually-using-git-submodules" class="anchor" aria-hidden="true" href="#manually-using-git-submodules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Manually using git submodules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add RxSwift as a submodule&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ git submodule add git@github.com:ReactiveX/RxSwift.git&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Drag &lt;code&gt;Rx.xcodeproj&lt;/code&gt; into Project Navigator&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Project &amp;gt; Targets &amp;gt; Build Phases &amp;gt; Link Binary With Libraries&lt;/code&gt;, click &lt;code&gt;+&lt;/code&gt; and select &lt;code&gt;RxSwift-[Platform]&lt;/code&gt; and &lt;code&gt;RxCocoa-[Platform]&lt;/code&gt; targets&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-references" class="anchor" aria-hidden="true" href="#references"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://reactivex.io/" rel="nofollow"&gt;http://reactivex.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Reactive-Extensions"&gt;Reactive Extensions GitHub (GitHub)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.raywenderlich.com/products/rxswift-reactive-programming-with-swift" rel="nofollow"&gt;RxSwift RayWenderlich.com Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boxueio.com/series/rxswift-101" rel="nofollow"&gt;Boxue.io RxSwift Online Course&lt;/a&gt; (Chinese &lt;g-emoji class="g-emoji" alias="cn" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png"&gt;🇨🇳&lt;/g-emoji&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Erik_Meijer_%28computer_scientist%29" rel="nofollow"&gt;Erik Meijer (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/looJcaeboBY" rel="nofollow"&gt;Expert to Expert: Brian Beckman and Erik Meijer - Inside the .NET Reactive Framework (Rx) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dwP1TNXE6fc" rel="nofollow"&gt;Reactive Programming Overview (Jafar Husain from Netflix)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf" rel="nofollow"&gt;Subject/Observer is Dual to Iterator (paper)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rxmarbles.com/" rel="nofollow"&gt;Rx standard sequence operators visualized (visualization tool)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.haskell.org/" rel="nofollow"&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ReactiveX</author><guid isPermaLink="false">https://github.com/ReactiveX/RxSwift</guid><pubDate>Sun, 05 Jan 2020 00:24:00 GMT</pubDate></item><item><title>SwiftGen/SwiftGen #25 in Swift, Today</title><link>https://github.com/SwiftGen/SwiftGen</link><description>&lt;p&gt;&lt;i&gt;The Swift code generator for your assets, storyboards, Localizable.strings, … — Get rid of all String-based APIs!&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-swiftgen" class="anchor" aria-hidden="true" href="#swiftgen"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SwiftGen&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/SwiftGen/SwiftGen/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f317ee732036fa91ae97affe623a1eb81a3af588/68747470733a2f2f636972636c6563692e636f6d2f67682f537769667447656e2f537769667447656e2f747265652f6d61737465722e7376673f7374796c653d737667" alt="CircleCI" data-canonical-src="https://circleci.com/gh/SwiftGen/SwiftGen/tree/master.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://img.shields.io/cocoapods/v/SwiftGen.svg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a9779bb47293e61074c5c819227167a2817070b1/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f537769667447656e2e737667" alt="CocoaPods Compatible" data-canonical-src="https://img.shields.io/cocoapods/v/SwiftGen.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://cocoadocs.org/docsets/SwiftGen" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1cba8f8fd41170e237e9f214cd7fc0587ab9d651/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f537769667447656e2e7376673f7374796c653d666c6174" alt="Platform" data-canonical-src="https://img.shields.io/cocoapods/p/SwiftGen.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SwiftGen is a tool to auto-generate Swift code for resources of your projects, to make them type-safe to use.&lt;/p&gt;
&lt;table border="0"&gt;&lt;tbody&gt;&lt;tr&gt;
  &lt;td&gt;
    &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/SwiftGen/Eve/raw/master/logo/logo-256.png"&gt;&lt;img alt="SwiftGen Logo" src="https://github.com/SwiftGen/Eve/raw/master/logo/logo-256.png" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;/td&gt;&lt;td&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;
        &lt;/li&gt;&lt;li&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;
        &lt;/li&gt;&lt;li&gt;&lt;a href="#choosing-your-template"&gt;Choosing your template&lt;/a&gt;
        &lt;/li&gt;&lt;li&gt;&lt;a href="#additional-documentation"&gt;Additional documentation&lt;/a&gt;
    &lt;/li&gt;&lt;/ul&gt;
    Then generate constants for:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#asset-catalog"&gt;Assets Catalogs&lt;/a&gt;
      &lt;/li&gt;&lt;li&gt;&lt;a href="#colors"&gt;Colors&lt;/a&gt;
      &lt;/li&gt;&lt;li&gt;&lt;a href="#core-data"&gt;Core Data&lt;/a&gt;
      &lt;/li&gt;&lt;li&gt;&lt;a href="#fonts"&gt;Fonts&lt;/a&gt;
      &lt;/li&gt;&lt;li&gt;&lt;a href="#interface-builder"&gt;Interface Builder files&lt;/a&gt;
      &lt;/li&gt;&lt;li&gt;&lt;a href="#json-and-yaml"&gt;JSON and YAML files&lt;/a&gt;
      &lt;/li&gt;&lt;li&gt;&lt;a href="#plists"&gt;Plists&lt;/a&gt;
      &lt;/li&gt;&lt;li&gt;&lt;a href="#strings"&gt;Localizable strings&lt;/a&gt;
    &lt;/li&gt;&lt;/ul&gt;
  &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;span&gt;
&lt;p&gt;There are multiple benefits in using this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid any typo you could have when using a String&lt;/li&gt;
&lt;li&gt;Free auto-completion&lt;/li&gt;
&lt;li&gt;Avoid the risk to use an non-existing asset name&lt;/li&gt;
&lt;li&gt;All this will be ensured by the compiler.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, it's fully customizable thanks to Stencil templates, so even if it comes with predefined templates, you can make your own to generate whatever code fits your needs and your guidelines!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;There are multiple possibilities to install SwiftGen on your machine or in your project, depending on your preferences and needs:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;&lt;strong&gt;Download the ZIP&lt;/strong&gt; for the latest release&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SwiftGen/SwiftGen/releases/latest"&gt;Go to the GitHub page for the latest release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download the &lt;code&gt;swiftgen-x.y.z.zip&lt;/code&gt; file associated with that release&lt;/li&gt;
&lt;li&gt;Extract the content of the zip archive in your project directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend that you &lt;strong&gt;unarchive the ZIP inside your project directory&lt;/strong&gt; and &lt;strong&gt;commit its content&lt;/strong&gt; to git. This way, &lt;strong&gt;all coworkers will use the same version of SwiftGen for this project&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you unarchived the ZIP file in a folder e.g. called &lt;code&gt;swiftgen&lt;/code&gt; at the root of your project directory, you can then invoke SwiftGen in your Script Build Phase using:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;$PROJECT_DIR&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;/swiftgen/bin/swiftgen …&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Via &lt;strong&gt;CocoaPods&lt;/strong&gt;&lt;/summary&gt;
&lt;p&gt;If you're using CocoaPods, simply add &lt;code&gt;pod 'SwiftGen', '~&amp;gt; 6.0'&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then execute &lt;code&gt;pod install --repo-update&lt;/code&gt; (or &lt;code&gt;pod update SwiftGen&lt;/code&gt; if you want to update an existing SwiftGen installation) to download and install the &lt;code&gt;SwiftGen&lt;/code&gt; binaries and dependencies in &lt;code&gt;Pods/SwiftGen/bin/swiftgen&lt;/code&gt; next to your project.&lt;/p&gt;
&lt;p&gt;Given that you can specify an exact version for &lt;code&gt;SwiftGen&lt;/code&gt; in your &lt;code&gt;Podfile&lt;/code&gt;, this allows you to ensure &lt;strong&gt;all coworkers will use the same version of SwiftGen for this project&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can then invoke SwiftGen in your Script Build Phase using:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-smi"&gt;$PODS_ROOT&lt;/span&gt;/SwiftGen/bin/swiftgen …&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Similarly, be sure to use &lt;code&gt;Pods/SwiftGen/bin/swiftgen&lt;/code&gt; instead of just &lt;code&gt;swiftgen&lt;/code&gt; where we mention commands with &lt;code&gt;swiftgen&lt;/code&gt; in the rest of the documentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: SwiftGen isn't really a pod, as it's not a library your code will depend on at runtime; so the installation via CocoaPods is just a trick that installs the SwiftGen binaries in the Pods/ folder, but you won't see any swift files in the Pods/SwiftGen group in your Xcode's Pods.xcodeproj. That's normal: the SwiftGen binary is still present in that folder in the Finder.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Via &lt;strong&gt;Homebrew&lt;/strong&gt; &lt;em&gt;(system-wide installation)&lt;/em&gt;&lt;/summary&gt;
&lt;p&gt;To install SwiftGen via &lt;a href="http://brew.sh" rel="nofollow"&gt;Homebrew&lt;/a&gt;, simply use:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew update
$ brew install swiftgen&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will install SwiftGen &lt;strong&gt;system-wide&lt;/strong&gt;. The same version of SwiftGen will be used for all projects on that machine, and you should make sure all your coworkers have the same version of SwiftGen installed on their machine too.&lt;/p&gt;
&lt;p&gt;You can then invoke &lt;code&gt;swiftgen&lt;/code&gt; directly in your Script Build Phase (as it will be in your &lt;code&gt;$PATH&lt;/code&gt; already):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;swiftgen … &lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note: SwiftGen needs Xcode 8.3 to build, so installing via Homebrew requires you to have Xcode 8.3 installed (which in turn requires macOS 10.12). If you use an earlier version of macOS, you'll have to use one of the other installation methods instead.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Via &lt;strong&gt;Mint&lt;/strong&gt; &lt;em&gt;(system-wide installation)&lt;/em&gt;&lt;/summary&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="exclamation" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png"&gt;❗️&lt;/g-emoji&gt;SwiftGen 6.0 or higher only.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To install SwiftGen via &lt;a href="https://github.com/yonaskolb/Mint"&gt;Mint&lt;/a&gt;, simply use:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ brew install libxml2
$ mint install SwiftGen/SwiftGen&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;&lt;strong&gt;Compile from source&lt;/strong&gt; &lt;em&gt;(only recommended if you need features from master or want to test a PR)&lt;/em&gt;&lt;/summary&gt;
&lt;p&gt;This solution is when you want to build and install the latest version from &lt;code&gt;master&lt;/code&gt; and have access to features which might not have been released yet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you have &lt;code&gt;homebrew&lt;/code&gt; installed, you can use the following command to build and install the latest commit:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;brew install swiftgen --HEAD&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Alternatively, you can clone the repository and use &lt;code&gt;rake cli:install&lt;/code&gt; to build the tool and install it from any branch, which could be useful to test SwiftGen in a fork or a Pull Request branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some Ruby tools are used in the build process, and the system Ruby works well if you are running a recent macOS.  However, if you are using &lt;code&gt;rbenv&lt;/code&gt; you can run &lt;code&gt;rbenv install&lt;/code&gt; to make sure you have a matching version of Ruby installed.&lt;/p&gt;
&lt;p&gt;Then install the Ruby Gems:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install bundle if it isn't installed&lt;/span&gt;
gem install bundle
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install the Ruby gems from Gemfile&lt;/span&gt;
bundle install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now install to the default locations (no parameter) or to custom locations:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Binary is installed in `./build/swiftgen/bin`, frameworks in `./build/swiftgen/lib` and templates in `./build/swiftgen/templates`&lt;/span&gt;
$ rake cli:install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; - OR -&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Binary will be installed in `~/swiftgen/bin`, frameworks in `~/swiftgen/fmk` and templates in `~/swiftgen/tpl`&lt;/span&gt;
$ rake cli:install[~/swiftgen/bin,~/swiftgen/fmk,~/swiftgen/tpl]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then invoke SwiftGen using the path to the binary where you installed it:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;~&lt;/span&gt;/swiftgen/bin/swiftgen …&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or add the path to the &lt;code&gt;bin&lt;/code&gt; folder to your &lt;code&gt;$PATH&lt;/code&gt; and invoke &lt;code&gt;swiftgen&lt;/code&gt; directly.&lt;/p&gt;
&lt;hr&gt;
&lt;/details&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="exclamation" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png"&gt;❗️&lt;/g-emoji&gt; If you're migrating from older SwiftGen versions, don't forget to &lt;a href="Documentation/MigrationGuide.md"&gt;read the Migration Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SwiftGen is provided as a single command-line tool which uses a configuration file to run various actions (subcommands).&lt;/p&gt;
&lt;p&gt;Each action described in the configuration file (&lt;code&gt;strings&lt;/code&gt;, &lt;code&gt;fonts&lt;/code&gt;, &lt;code&gt;ib&lt;/code&gt;, …) typically corresponds to a type of input resources to parse (strings files, IB files, Font files, JSON files, …), allowing you to generate constants for each types of those input files.&lt;/p&gt;
&lt;p&gt;To use SwiftGen, simply create a &lt;code&gt;swiftgen.yml&lt;/code&gt; YAML file to list all the subcommands to invoke, and for each subcommand, the list of arguments to pass to it. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;strings&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;Resources/Base.lproj&lt;/span&gt;
  &lt;span class="pl-ent"&gt;filter&lt;/span&gt;: &lt;span class="pl-s"&gt;.+\.strings$&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    - &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;structured-swift4&lt;/span&gt;
      &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Generated/strings.swift&lt;/span&gt;
&lt;span class="pl-ent"&gt;xcassets&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;:
    - &lt;span class="pl-s"&gt;Resources/Images.xcassets&lt;/span&gt;
    - &lt;span class="pl-s"&gt;Resources/MoreImages.xcassets&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    - &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;swift4&lt;/span&gt;
      &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Generated/assets-images.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you just have to invoke &lt;code&gt;swiftgen config run&lt;/code&gt;, or even just &lt;code&gt;swiftgen&lt;/code&gt; for short, and it will execute what's described in the configuration file&lt;/p&gt;
&lt;p&gt;To learn more about the configuration file — its more detailed syntax and possibilities, how to pass custom parameters, using &lt;code&gt;swiftgen config lint&lt;/code&gt; to validate it, how to use alternate config files, and other tips — &lt;a href="Documentation/ConfigFile.md"&gt;see the dedicated documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are also additional subcommands you can invoke from the command line to manage and configure SwiftGen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The  &lt;code&gt;swiftgen config&lt;/code&gt; subcommand to help you with the configuration file, especially &lt;code&gt;swiftgen config lint&lt;/code&gt; to validate that your Config file is valid and has no errors&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;swiftgen templates&lt;/code&gt; subcommands helps you print, duplicate, find and manage templates (both bundled and custom)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, you can use &lt;code&gt;--help&lt;/code&gt; on &lt;code&gt;swiftgen&lt;/code&gt; or one of its subcommand to see the detailed usage.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;&lt;strong&gt;Directly invoking a subcommand&lt;/strong&gt;&lt;/summary&gt;
&lt;p&gt;While we highly recommend the use a configuration file for performance reasons (especially if you have multiple outputs, but also because it's more flexible), it's also possible to directly invoke the available subcommands to parse various resource types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;swiftgen colors [OPTIONS] DIRORFILE1 …&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swiftgen coredata [OPTIONS] DIRORFILE1 …&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swiftgen fonts [OPTIONS] DIRORFILE1 …&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swiftgen ib [OPTIONS] DIRORFILE1 …&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swiftgen json [OPTIONS] DIRORFILE1 …&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swiftgen plist [OPTIONS] DIRORFILE1 …&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swiftgen strings [OPTIONS] DIRORFILE1 …&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swiftgen xcassets [OPTIONS] DIRORFILE1 …&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swiftgen yaml [OPTIONS] DIRORFILE1 …&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One rare cases where this might be useful — as opposed to using a config file — is if you are working on a custom template and want to quickly test the specific subcommand you're working on at each iteration/version of your custom template, until you're happy with it.&lt;/p&gt;
&lt;p&gt;Each subcommand generally accepts the same options and syntax, and they mirror the options and parameters from the configuration file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--output FILE&lt;/code&gt; or &lt;code&gt;-o FILE&lt;/code&gt;: set the file where to write the generated code. If omitted, the generated code will be printed on &lt;code&gt;stdout&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--templateName NAME&lt;/code&gt; or &lt;code&gt;-n NAME&lt;/code&gt;: define the Stencil template to use (by name, see &lt;a href="Documentation/templates"&gt;here for more info&lt;/a&gt;) to generate the output.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--templatePath PATH&lt;/code&gt; or &lt;code&gt;-p PATH&lt;/code&gt;: define the Stencil template to use, using a full path.&lt;/li&gt;
&lt;li&gt;Note: you should specify one and only one template when invoking SwiftGen. You have to use either &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; but should not use both at the same time (it wouldn't make sense anyway and you'll get an error if you try)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--filter REGEX&lt;/code&gt; or &lt;code&gt;-f REGEX&lt;/code&gt;: the filter to apply to each input path. Filters are applied to actual (relative) paths, not just the filename. Each command has a default filter that you can override with this option.&lt;/li&gt;
&lt;li&gt;Note: use &lt;code&gt;.+&lt;/code&gt; to match multiple characters (at least one), and don't forget to escape the dot (&lt;code&gt;\.&lt;/code&gt;) if you want to match a literal dot like for an extension. Add &lt;code&gt;$&lt;/code&gt; at the end to ensure the path ends with the extension you want. Regular expressions will be case sensitive by default, and not anchored to the start/end of a path. For example, use &lt;code&gt;.+\.xib$&lt;/code&gt; to match files with a &lt;code&gt;.xib&lt;/code&gt; extension. Use a tool such as &lt;a href="https://regexr.com" rel="nofollow"&gt;RegExr&lt;/a&gt; to ensure you're using a valid regular expression.&lt;/li&gt;
&lt;li&gt;Each command supports multiple input files (or directories where applicable).&lt;/li&gt;
&lt;li&gt;You can always use the &lt;code&gt;--help&lt;/code&gt; flag to see what options a command accept, e.g. &lt;code&gt;swiftgen xcassets --help&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;h2&gt;&lt;a id="user-content-choosing-your-template" class="anchor" aria-hidden="true" href="#choosing-your-template"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Choosing your template&lt;/h2&gt;
&lt;p&gt;SwiftGen is based on templates (it uses &lt;a href="https://github.com/kylef/Stencil"&gt;Stencil&lt;/a&gt; as its template engine). This means that &lt;strong&gt;you can choose the template that fits the Swift version you're using&lt;/strong&gt; — and also the one that best fits your preferences — to &lt;strong&gt;adapt the generated code to your own conventions and Swift version&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-bundled-templates-vs-custom-ones" class="anchor" aria-hidden="true" href="#bundled-templates-vs-custom-ones"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bundled templates vs. Custom ones&lt;/h3&gt;
&lt;p&gt;SwiftGen comes bundled with some templates for each of the subcommand (&lt;code&gt;colors&lt;/code&gt;, &lt;code&gt;coredata&lt;/code&gt;, &lt;code&gt;fonts&lt;/code&gt;, &lt;code&gt;ib&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;plist&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt;, &lt;code&gt;xcassets&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt;), which will fit most needs. But you can also create your own templates if the bundled ones don't suit your coding conventions or needs. Simply either use the &lt;code&gt;templateName&lt;/code&gt; output option to specify the name of the template to use, or store them somewhere else (like in your project repository) and use &lt;code&gt;templatePath&lt;/code&gt; output option to specify a full path.&lt;/p&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="bulb" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png"&gt;💡&lt;/g-emoji&gt; You can use the &lt;code&gt;swiftgen templates list&lt;/code&gt; command to list all the available templates (both custom and bundled templates) for each subcommand, list the template content and dupliate them to create your own.&lt;/p&gt;
&lt;p&gt;For more information about how to create your own templates, &lt;a href="Documentation/Creating-your-templates.md"&gt;see the dedicated documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-templates-bundled-with-swiftgen" class="anchor" aria-hidden="true" href="#templates-bundled-with-swiftgen"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Templates bundled with SwiftGen:&lt;/h3&gt;
&lt;p&gt;As explained above, you can use &lt;code&gt;swiftgen templates list&lt;/code&gt; to list all templates bundled with SwiftGen. For most SwiftGen subcommands, we provide, among others:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;swift3&lt;/code&gt; template, compatible with Swift 3&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;swift4&lt;/code&gt; template, compatible with Swift 4&lt;/li&gt;
&lt;li&gt;Other variants, like &lt;code&gt;flat-swift3/4&lt;/code&gt; and &lt;code&gt;structured-swift3/4&lt;/code&gt; templates for Strings, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can &lt;strong&gt;find the documentation for each bundled template &lt;a href="Documentation/templates"&gt;here in the repo&lt;/a&gt;&lt;/strong&gt;, with documentation organized as one folder per SwiftGen subcommand, then one MarkDown file per template.&lt;br&gt;
Each MarkDown file documents the Swift Version it's aimed for, the use case for that template (in which cases you might favor that template over others), the available parameters to customize it on invocation (using the &lt;code&gt;params:&lt;/code&gt; key in your config file), and some code examples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't hesitate to make PRs to share your improvements suggestions on the bundled templates &lt;g-emoji class="g-emoji" alias="wink" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png"&gt;😉&lt;/g-emoji&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-additional-documentation" class="anchor" aria-hidden="true" href="#additional-documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional documentation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-playground" class="anchor" aria-hidden="true" href="#playground"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Playground&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;SwiftGen.playground&lt;/code&gt; available in this repository will allow you to play with the code that the tool typically generates, and see some examples of how you can take advantage of it.&lt;/p&gt;
&lt;p&gt;This allows you to have a quick look at how typical code generated by SwiftGen looks like, and how you will then use the generated constants in your code.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-dedicated-documentation-in-markdown" class="anchor" aria-hidden="true" href="#dedicated-documentation-in-markdown"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dedicated Documentation in Markdown&lt;/h3&gt;
&lt;p&gt;There is a lot of documentation in the form of Markdown files in this repository, and in the related &lt;a href="https://github.com/SwiftGen/StencilSwiftKit"&gt;StencilSwiftKit&lt;/a&gt; repository as well.&lt;/p&gt;
&lt;p&gt;Be sure to &lt;a href="Documentation/"&gt;check the "Documentation" folder&lt;/a&gt; of each repository.&lt;/p&gt;
&lt;p&gt;Especially, in addition to the previously mentioned &lt;a href="Documentation/MigrationGuide.md"&gt;Migration Guide&lt;/a&gt; and &lt;a href="Documentation/ConfigFile.md"&gt;Configuration File&lt;/a&gt; documentation, the &lt;code&gt;Documentation/&lt;/code&gt; folder in the SwiftGen repository also includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="Documentation/templates/"&gt;&lt;code&gt;templates&lt;/code&gt; subdirectory&lt;/a&gt; that details the documentation for each of the templates bundled with SwiftGen (when to use each template, what the output will look like, and custom parameters to adjust them, …)&lt;/li&gt;
&lt;li&gt;A &lt;a href="Documentation/SwiftGenKit%20Contexts/"&gt;&lt;code&gt;SwiftGenKit Contexts&lt;/code&gt; subdirectory&lt;/a&gt; that details the structure of the "Stencil Contexts", i.e. the Dictionary/YAML representation resulting of parsing your input files. This documentation is useful for people wanting to write their own templates, so that they know the structure and various keys available when writing their template, to construct the wanted generated output accordingly.&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Articles/"&gt;Various articles&lt;/a&gt; to provide best practices &amp;amp; tips on how to better take advantage of SwiftGen in your projects:
&lt;ul&gt;
&lt;li&gt;&lt;a href="Documentation/Articles/Xcode-Integration.md"&gt;Integrate SwiftGen in your Xcode project&lt;/a&gt; — so it rebuilds the constants every time you build&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Articles/SwiftLint-Integration.md"&gt;Configure SwiftLint to help your developers use constants generated by SwiftGen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Documentation/Creating-your-templates.md"&gt;Create a custom template&lt;/a&gt;, and &lt;a href="Documentation/Articles/Watch-a-folder-for-changes.md"&gt;watch a folder to auto-regenerate an output every time you save the template you're working on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…and more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-tutorials" class="anchor" aria-hidden="true" href="#tutorials"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tutorials&lt;/h3&gt;
&lt;p&gt;You can also find other help &amp;amp; tutorial material on the internet, like &lt;a href="https://github.com/FrenchKit/Mastering-code-generation-Classroom"&gt;this classroom about Code Generation I gave at FrenchKit in Sept'17&lt;/a&gt; — and its wiki detailing a step-by-step tutorial about installing and using SwiftGen (and Sourcery too)&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a id="user-content-asset-catalog" class="anchor" aria-hidden="true" href="#asset-catalog"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Asset Catalog&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;xcassets&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;/dir/to/search/for/imageset/assets&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;swift4&lt;/span&gt;
    &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Assets.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate an &lt;code&gt;enum Asset&lt;/code&gt; with one &lt;code&gt;case&lt;/code&gt; per image set in your assets catalog, so that you can use them as constants.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Asset&lt;/span&gt; {
  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Exotic&lt;/span&gt; {
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; banana&lt;span class="pl-k"&gt;:&lt;/span&gt; AssetType &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Exotic/Banana&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; mango&lt;span class="pl-k"&gt;:&lt;/span&gt; AssetType &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Exotic/Mango&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  }
  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; `&lt;span class="pl-k"&gt;private&lt;/span&gt;`&lt;span class="pl-k"&gt;:&lt;/span&gt; AssetType &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;private&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;&lt;a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Example&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; You can create new images with the convenience constructor like this:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; bananaImage &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;asset&lt;/span&gt;: Asset.&lt;span class="pl-smi"&gt;Exotic&lt;/span&gt;.&lt;span class="pl-smi"&gt;banana&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; iOS&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; privateImage &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSImage&lt;/span&gt;(&lt;span class="pl-c1"&gt;asset&lt;/span&gt;: Asset.&lt;span class="pl-smi"&gt;private&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; macOS&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Or as an alternative, you can refer to enum instance and call .image on it:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; sameBananaImage &lt;span class="pl-k"&gt;=&lt;/span&gt; Asset.&lt;span class="pl-smi"&gt;Exotic&lt;/span&gt;.&lt;span class="pl-smi"&gt;banana&lt;/span&gt;.&lt;span class="pl-c1"&gt;image&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; samePrivateImage &lt;span class="pl-k"&gt;=&lt;/span&gt; Asset.&lt;span class="pl-smi"&gt;private&lt;/span&gt;.&lt;span class="pl-c1"&gt;image&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-colors" class="anchor" aria-hidden="true" href="#colors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Colors&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;colors&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;/path/to/colors-file.txt&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;swift4&lt;/span&gt;
    &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Colors.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate a &lt;code&gt;enum ColorName&lt;/code&gt; with one &lt;code&gt;case&lt;/code&gt; per color listed in the text file passed as argument.&lt;/p&gt;
&lt;p&gt;The input file is expected to be either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;a href="Tests/Fixtures/Resources/Colors/extra.txt"&gt;plain text file&lt;/a&gt;, with one line per color to register, each line being composed by the Name to give to the color, followed by ":", followed by the Hex representation of the color (like &lt;code&gt;rrggbb&lt;/code&gt; or &lt;code&gt;rrggbbaa&lt;/code&gt;, optionally prefixed by &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;0x&lt;/code&gt;) or the name of another color in the file. Whitespaces are ignored.&lt;/li&gt;
&lt;li&gt;a &lt;a href="Tests/Fixtures/Resources/Colors/colors.json"&gt;JSON file&lt;/a&gt;, representing a dictionary of names -&amp;gt; values, each value being the hex representation of the color&lt;/li&gt;
&lt;li&gt;a &lt;a href="Tests/Fixtures/Resources/Colors/colors.xml"&gt;XML file&lt;/a&gt;, expected to be the same format as the Android colors.xml files, containing tags &lt;code&gt;&amp;lt;color name="AColorName"&amp;gt;AColorHexRepresentation&amp;lt;/color&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a &lt;a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/DrawColor/Concepts/AboutColorLists.html#//apple_ref/doc/uid/20000757-BAJHJEDI" rel="nofollow"&gt;&lt;code&gt;*.clr&lt;/code&gt; file&lt;/a&gt; used by Apple's Color Palettes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example you can use this command to generate colors from one of your system color lists:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;colors&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;~/Library/Colors/MyColors.clr&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;swift4&lt;/span&gt;
    &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Colors.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generated code will look the same as if you'd use a text file.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt;
&lt;p&gt;Given the following &lt;code&gt;colors.txt&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Cyan-Color       : 0xff66ccff
ArticleTitle     : #33fe66
ArticleBody      : 339666
ArticleFootnote  : ff66ccff
Translucent      : ffffffcc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated code will look like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;struct&lt;/span&gt; &lt;span class="pl-en"&gt;ColorName&lt;/span&gt; {
  &lt;span class="pl-k"&gt;let&lt;/span&gt; rgbaValue&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;UInt32&lt;/span&gt;
  &lt;span class="pl-k"&gt;var&lt;/span&gt; color&lt;span class="pl-k"&gt;:&lt;/span&gt; Color { &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;Color&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt;) }

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; &amp;lt;span style="display:block;width:3em;height:2em;border:1px solid black;background:#339666"&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Alpha: 100% &amp;lt;br/&amp;gt; (0x339666ff)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; articleBody &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ColorName&lt;/span&gt;(&lt;span class="pl-c1"&gt;rgbaValue&lt;/span&gt;: &lt;span class="pl-c1"&gt;0x339666ff&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; &amp;lt;span style="display:block;width:3em;height:2em;border:1px solid black;background:#ff66cc"&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Alpha: 100% &amp;lt;br/&amp;gt; (0xff66ccff)&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; articleFootnote &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;ColorName&lt;/span&gt;(&lt;span class="pl-c1"&gt;rgbaValue&lt;/span&gt;: &lt;span class="pl-c1"&gt;0xff66ccff&lt;/span&gt;)

  &lt;span class="pl-k"&gt;...&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;&lt;a id="user-content-usage-example-1" class="anchor" aria-hidden="true" href="#usage-example-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Example&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; You can create colors with the convenience constructor like this:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; title &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIColor&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: .&lt;span class="pl-smi"&gt;articleBody&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; iOS&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; footnote &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSColor&lt;/span&gt;(&lt;span class="pl-c1"&gt;named&lt;/span&gt;: .&lt;span class="pl-smi"&gt;articleFootnote&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; macOS&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Or as an alternative, you can refer to enum instance and call .color on it:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; sameTitle &lt;span class="pl-k"&gt;=&lt;/span&gt; ColorName.&lt;span class="pl-smi"&gt;articleBody&lt;/span&gt;.&lt;span class="pl-c1"&gt;color&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; sameFootnote &lt;span class="pl-k"&gt;=&lt;/span&gt; ColorName.&lt;span class="pl-smi"&gt;articleFootnote&lt;/span&gt;.&lt;span class="pl-c1"&gt;color&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, no need to enter the color red, green, blue, alpha values each time and create ugly constants in the global namespace for them.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-core-data" class="anchor" aria-hidden="true" href="#core-data"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Core Data&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;coredata&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;/path/to/model.xcdatamodeld&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;swift4&lt;/span&gt;
    &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;CoreData.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will parse the specified core data model(s), generate a class for each entity in your model containing all the attributes, and a few extensions if needed for relationships and predefined fetch requests.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MainEntity&lt;/span&gt;: &lt;span class="pl-e"&gt;NSManagedObject &lt;/span&gt;{
  &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;entityName&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MainEntity&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  }

  &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;entity&lt;/span&gt;(&lt;span class="pl-en"&gt;in&lt;/span&gt; &lt;span class="pl-smi"&gt;managedObjectContext&lt;/span&gt;: NSManagedObjectContext) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; NSEntityDescription&lt;span class="pl-k"&gt;?&lt;/span&gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; NSEntityDescription.&lt;span class="pl-c1"&gt;entity&lt;/span&gt;(&lt;span class="pl-c1"&gt;forEntityName&lt;/span&gt;: &lt;span class="pl-c1"&gt;entityName&lt;/span&gt;(), &lt;span class="pl-c1"&gt;in&lt;/span&gt;: managedObjectContext)
  }

  &lt;span class="pl-k"&gt;@nonobjc&lt;/span&gt; &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;fetchRequest&lt;/span&gt;() &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; NSFetchRequest&amp;lt;MainEntity&amp;gt; {
    &lt;span class="pl-k"&gt;return&lt;/span&gt; NSFetchRequest&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;MainEntity&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-c1"&gt;entityName&lt;/span&gt;: &lt;span class="pl-c1"&gt;entityName&lt;/span&gt;())
  }

  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; attributedString&lt;span class="pl-k"&gt;:&lt;/span&gt; NSAttributedString&lt;span class="pl-k"&gt;?&lt;/span&gt;
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; binaryData&lt;span class="pl-k"&gt;:&lt;/span&gt; Data&lt;span class="pl-k"&gt;?&lt;/span&gt;
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; boolean&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Bool&lt;/span&gt;
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; date&lt;span class="pl-k"&gt;:&lt;/span&gt; Date&lt;span class="pl-k"&gt;?&lt;/span&gt;
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; float&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Float&lt;/span&gt;
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; int64&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int64&lt;/span&gt;
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; manyToMany&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Set&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;SecondaryEntity&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; MARK: Relationship ManyToMany&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;extension&lt;/span&gt; &lt;span class="pl-en"&gt;MainEntity&lt;/span&gt; {
  &lt;span class="pl-k"&gt;@objc&lt;/span&gt;(&lt;span class="pl-en"&gt;addManyToManyObject:&lt;/span&gt;)
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;addToManyToMany&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;value&lt;/span&gt;: SecondaryEntity)

  &lt;span class="pl-k"&gt;@objc&lt;/span&gt;(&lt;span class="pl-en"&gt;removeManyToManyObject:&lt;/span&gt;)
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;removeFromManyToMany&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;value&lt;/span&gt;: SecondaryEntity)

  &lt;span class="pl-k"&gt;@objc&lt;/span&gt;(&lt;span class="pl-en"&gt;addManyToMany:&lt;/span&gt;)
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;addToManyToMany&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;values&lt;/span&gt;: &lt;span class="pl-c1"&gt;Set&lt;/span&gt;&amp;lt;SecondaryEntity&amp;gt;)

  &lt;span class="pl-k"&gt;@objc&lt;/span&gt;(&lt;span class="pl-en"&gt;removeManyToMany:&lt;/span&gt;)
  &lt;span class="pl-k"&gt;@NSManaged&lt;/span&gt; &lt;span class="pl-k"&gt;public&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;removeFromManyToMany&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;values&lt;/span&gt;: &lt;span class="pl-c1"&gt;Set&lt;/span&gt;&amp;lt;SecondaryEntity&amp;gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;&lt;a id="user-content-usage-example-2" class="anchor" aria-hidden="true" href="#usage-example-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Example&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Fetch all the instances of MainEntity&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; request &lt;span class="pl-k"&gt;=&lt;/span&gt; MainEntity.&lt;span class="pl-c1"&gt;fetchRequest&lt;/span&gt;()
&lt;span class="pl-k"&gt;let&lt;/span&gt; mainItems &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;try&lt;/span&gt; myContext.&lt;span class="pl-c1"&gt;execute&lt;/span&gt;(request)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Type-safe relationships: `relatedItem` will be a `SecondaryEntity?` in this case&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; relatedItem &lt;span class="pl-k"&gt;=&lt;/span&gt; myMainItem.&lt;span class="pl-smi"&gt;manyToMany&lt;/span&gt;.&lt;span class="pl-c1"&gt;first&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-fonts" class="anchor" aria-hidden="true" href="#fonts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fonts&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;fonts&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;/path/to/font/dir&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;swift4&lt;/span&gt;
    &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Fonts.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will recursively go through the specified directory, finding any typeface files (TTF, OTF, …), defining a &lt;code&gt;struct FontFamily&lt;/code&gt; for each family, and an enum nested under that family that will represent the font styles.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;FontFamily&lt;/span&gt; {
  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;SFNSDisplay&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;FontConvertible &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; regular &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;FontConvertible&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.SFNSDisplay-Regular&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;family&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.SF NS Display&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SFNSDisplay-Regular.otf&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  }
  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;ZapfDingbats&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;FontConvertible &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; regular &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;FontConvertible&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ZapfDingbatsITC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;family&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Zapf Dingbats&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ZapfDingbats.ttf&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;&lt;a id="user-content-usage-example-3" class="anchor" aria-hidden="true" href="#usage-example-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Example&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; You can create fonts with the convenience constructor like this:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; displayRegular &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;UIFont&lt;/span&gt;(&lt;span class="pl-c1"&gt;font&lt;/span&gt;: FontFamily.&lt;span class="pl-smi"&gt;SFNSDisplay&lt;/span&gt;.&lt;span class="pl-smi"&gt;regular&lt;/span&gt;, &lt;span class="pl-c1"&gt;size&lt;/span&gt;: &lt;span class="pl-c1"&gt;20.0&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; iOS&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; dingbats &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;NSFont&lt;/span&gt;(&lt;span class="pl-c1"&gt;font&lt;/span&gt;: FontFamily.&lt;span class="pl-smi"&gt;ZapfDingbats&lt;/span&gt;.&lt;span class="pl-smi"&gt;regular&lt;/span&gt;, &lt;span class="pl-c1"&gt;size&lt;/span&gt;: &lt;span class="pl-c1"&gt;20.0&lt;/span&gt;)  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; macOS&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Or as an alternative, you can refer to enum instance and call .font on it:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; sameDisplayRegular &lt;span class="pl-k"&gt;=&lt;/span&gt; FontFamily.&lt;span class="pl-smi"&gt;SFNSDisplay&lt;/span&gt;.&lt;span class="pl-smi"&gt;regular&lt;/span&gt;.&lt;span class="pl-c1"&gt;font&lt;/span&gt;(&lt;span class="pl-c1"&gt;size&lt;/span&gt;: &lt;span class="pl-c1"&gt;20.0&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; sameDingbats &lt;span class="pl-k"&gt;=&lt;/span&gt; FontFamily.&lt;span class="pl-smi"&gt;ZapfDingbats&lt;/span&gt;.&lt;span class="pl-smi"&gt;regular&lt;/span&gt;.&lt;span class="pl-c1"&gt;font&lt;/span&gt;(&lt;span class="pl-c1"&gt;size&lt;/span&gt;: &lt;span class="pl-c1"&gt;20.0&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-interface-builder" class="anchor" aria-hidden="true" href="#interface-builder"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interface Builder&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;ib&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;/dir/to/search/for/storyboards&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    - &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;scenes-swift4&lt;/span&gt;
      &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Storyboard Scenes.swift&lt;/span&gt;
    - &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;segues-swift4&lt;/span&gt;
      &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Storyboard Segues.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate an &lt;code&gt;enum&lt;/code&gt; for each of your &lt;code&gt;NSStoryboard&lt;/code&gt;/&lt;code&gt;UIStoryboard&lt;/code&gt;, with respectively one &lt;code&gt;case&lt;/code&gt; per storyboard scene or segue.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt;
&lt;p&gt;The generated code will look like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; output from the scenes template&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;StoryboardScene&lt;/span&gt; {
  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Dependency&lt;/span&gt;: &lt;span class="pl-e"&gt;StoryboardType &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; storyboardName &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Dependency&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; dependent &lt;span class="pl-k"&gt;=&lt;/span&gt; SceneType&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;UIViewController&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-c1"&gt;storyboard&lt;/span&gt;: Dependency.&lt;span class="pl-k"&gt;self&lt;/span&gt;, &lt;span class="pl-c1"&gt;identifier&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Dependent&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  }
  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Message&lt;/span&gt;: &lt;span class="pl-e"&gt;StoryboardType &lt;/span&gt;{
    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; storyboardName &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; messagesList &lt;span class="pl-k"&gt;=&lt;/span&gt; SceneType&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;UITableViewController&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="pl-c1"&gt;storyboard&lt;/span&gt;: Message.&lt;span class="pl-k"&gt;self&lt;/span&gt;, &lt;span class="pl-c1"&gt;identifier&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;MessagesList&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  }
}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; output from the segues template&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;StoryboardSegue&lt;/span&gt; {
  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Message&lt;/span&gt;: &lt;span class="pl-e"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-e"&gt;SegueType &lt;/span&gt;{
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;customBack&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;CustomBack&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;embed&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Embed&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;nonCustom&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NonCustom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;showNavCtrl&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Show-NavCtrl&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;&lt;a id="user-content-usage-example-4" class="anchor" aria-hidden="true" href="#usage-example-4"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Example&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; You can instantiate scenes using the `instantiate` method:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; vc &lt;span class="pl-k"&gt;=&lt;/span&gt; StoryboardScene.&lt;span class="pl-smi"&gt;Dependency&lt;/span&gt;.&lt;span class="pl-smi"&gt;dependent&lt;/span&gt;.&lt;span class="pl-c1"&gt;instantiate&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; You can perform segues using:&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;vc.&lt;span class="pl-c1"&gt;perform&lt;/span&gt;(&lt;span class="pl-c1"&gt;segue&lt;/span&gt;: StoryboardSegue.&lt;span class="pl-smi"&gt;Message&lt;/span&gt;.&lt;span class="pl-smi"&gt;embed&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; or match them (in prepareForSegue):&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;override&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;prepare&lt;/span&gt;(&lt;span class="pl-en"&gt;for&lt;/span&gt; &lt;span class="pl-smi"&gt;segue&lt;/span&gt;: UIStoryboardSegue, &lt;span class="pl-smi"&gt;&lt;span class="pl-en"&gt;sender&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;Any&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;) {
  &lt;span class="pl-k"&gt;switch&lt;/span&gt; StoryboardSegue.&lt;span class="pl-c1"&gt;Message&lt;/span&gt;(segue) {
  &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;embed&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prepare for your custom segue transition, passing information to the destionation VC&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;case&lt;/span&gt; .&lt;span class="pl-smi"&gt;customBack&lt;/span&gt;&lt;span class="pl-k"&gt;?&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Prepare for your custom segue transition, passing information to the destionation VC&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;default&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Other segues from other scenes, not handled by this VC&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;break&lt;/span&gt;
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-json-and-yaml" class="anchor" aria-hidden="true" href="#json-and-yaml"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JSON and YAML&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;json&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;/path/to/json/dir-or-file&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;runtime-swift4&lt;/span&gt;
    &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;JSON.swift&lt;/span&gt;
&lt;span class="pl-ent"&gt;yaml&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;/path/to/yaml/dir-or-file&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;inline-swift4&lt;/span&gt;
    &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;YAML.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will parse the given file, or when given a directory, recursively search for JSON and YAML files. It will define an &lt;code&gt;enum&lt;/code&gt; for each file (and documents in a file where needed), and type-safe constants for the content of the file.&lt;/p&gt;
&lt;p&gt;Unlike other subcommands, this parser is intended to allow you to use more custom inputs (as the formats are quite open to your needs) to generate your code. This means that for these subcommands (and the &lt;code&gt;plist&lt;/code&gt; one), you'll probably be more likely to use custom templates to generate code properly adapted/tuned to your inputs, rather than using the bundled templates. To read more about writing your own custom templates, see &lt;a href="Documentation/Creating-your-templates.md"&gt;see the dedicated documentation&lt;/a&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;JSONFiles&lt;/span&gt; {
  &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Info&lt;/span&gt; {
    &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; _document &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;JSONDocument&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;info.json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; key1&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; _document[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; key2&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; _document[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; key3&lt;span class="pl-k"&gt;:&lt;/span&gt; [&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; _document[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
  }
  &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Sequence&lt;/span&gt; {
    &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; items&lt;span class="pl-k"&gt;:&lt;/span&gt; [&lt;span class="pl-c1"&gt;Int&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;objectFromJSON&lt;/span&gt;(&lt;span class="pl-c1"&gt;at&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sequence.json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;&lt;a id="user-content-usage-example-5" class="anchor" aria-hidden="true" href="#usage-example-5"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Example&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This will be an dictionary&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; foo &lt;span class="pl-k"&gt;=&lt;/span&gt; JSONFiles.&lt;span class="pl-smi"&gt;Info&lt;/span&gt;.&lt;span class="pl-smi"&gt;key3&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This will be an [Int]&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; bar &lt;span class="pl-k"&gt;=&lt;/span&gt; JSONFiles.&lt;span class="pl-c1"&gt;Sequence&lt;/span&gt;.&lt;span class="pl-smi"&gt;items&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-plists" class="anchor" aria-hidden="true" href="#plists"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plists&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;plist&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;/path/to/plist/dir-or-file&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;runtime-swift4&lt;/span&gt;
    &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Plist.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will parse the given file, or when given a directory, recursively search for Plist files. It will define an &lt;code&gt;enum&lt;/code&gt; for each file (and documents in a file where needed), and type-safe constants for the content of the file.&lt;/p&gt;
&lt;p&gt;Unlike other subcommands, this parser is intended to allow you to use more custom inputs (as the format is quite open to your needs) to generate your code. This means that for this subcommand (and the &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;yaml&lt;/code&gt; ones), you'll probably be more likely to use custom templates to generate code properly adapted/tuned to your inputs, rather than using the bundled templates. To read more about writing your own custom templates, see &lt;a href="Documentation/Creating-your-templates.md"&gt;see the dedicated documentation&lt;/a&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;PlistFiles&lt;/span&gt; {
  &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Test&lt;/span&gt; {
    &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; items&lt;span class="pl-k"&gt;:&lt;/span&gt; [&lt;span class="pl-c1"&gt;String&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;arrayFromPlist&lt;/span&gt;(&lt;span class="pl-c1"&gt;at&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;array.plist&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  }
  &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Stuff&lt;/span&gt; {
    &lt;span class="pl-k"&gt;private&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; _document &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;PlistDocument&lt;/span&gt;(&lt;span class="pl-c1"&gt;path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dictionary.plist&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; key1&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Int&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; _document[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    &lt;span class="pl-k"&gt;internal&lt;/span&gt; &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; key2&lt;span class="pl-k"&gt;:&lt;/span&gt; [&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;Any&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; _document[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;&lt;a id="user-content-usage-example-6" class="anchor" aria-hidden="true" href="#usage-example-6"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Example&lt;/h3&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This will be an array&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; foo &lt;span class="pl-k"&gt;=&lt;/span&gt; PlistFiles.&lt;span class="pl-smi"&gt;Test&lt;/span&gt;.&lt;span class="pl-smi"&gt;items&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; This will be an Int&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; bar &lt;span class="pl-k"&gt;=&lt;/span&gt; PlistFiles.&lt;span class="pl-smi"&gt;Stuff&lt;/span&gt;.&lt;span class="pl-smi"&gt;key1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-strings" class="anchor" aria-hidden="true" href="#strings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Strings&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;strings&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;inputs&lt;/span&gt;: &lt;span class="pl-s"&gt;/path/to/Localizable.strings&lt;/span&gt;
  &lt;span class="pl-ent"&gt;outputs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;templateName&lt;/span&gt;: &lt;span class="pl-s"&gt;structured-swift4&lt;/span&gt;
    &lt;span class="pl-ent"&gt;output&lt;/span&gt;: &lt;span class="pl-s"&gt;Strings.swift&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate a Swift &lt;code&gt;enum L10n&lt;/code&gt; that will map all your &lt;code&gt;Localizable.strings&lt;/code&gt; (or other tables) keys to a &lt;code&gt;static let&lt;/code&gt; constant. And if it detects placeholders like &lt;code&gt;%@&lt;/code&gt;,&lt;code&gt;%d&lt;/code&gt;,&lt;code&gt;%f&lt;/code&gt;, it will generate a &lt;code&gt;static func&lt;/code&gt; with the proper argument types instead, to provide type-safe formatting. Note that all dots within the key are converted to dots in code.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Example of code generated by the structured bundled template&lt;/summary&gt;
&lt;p&gt;Given the following &lt;code&gt;Localizable.strings&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alert_title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Title of the alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alert_message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Some alert body there&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;apples.count&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;You have %d apples&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bananas.owner&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Those %d bananas belong to %@.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Reminder: Don't forget to end each line in your &lt;code&gt;*.strings&lt;/code&gt; files with a semicolon &lt;code&gt;;&lt;/code&gt;! Now that in Swift code we don't need semi-colons, it's easy to forget it's still required by the &lt;code&gt;Localizable.strings&lt;/code&gt; file format &lt;g-emoji class="g-emoji" alias="wink" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png"&gt;😉&lt;/g-emoji&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The generated code will contain this:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;L10n&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Some alert body there&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; alertMessage &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-c1"&gt;tr&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alert_message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Title of the alert&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;let&lt;/span&gt; alertTitle &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-c1"&gt;tr&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alert_title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Apples&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; You have %d apples&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;count&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;p1&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
      &lt;span class="pl-k"&gt;return&lt;/span&gt; L10n.&lt;span class="pl-c1"&gt;tr&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;apples.count&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, p1)
    }
  }

  &lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;Bananas&lt;/span&gt; {
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Those %d bananas belong to %@.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;    &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;owner&lt;/span&gt;(&lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;p1&lt;/span&gt;: &lt;span class="pl-c1"&gt;Int&lt;/span&gt;, &lt;span class="pl-en"&gt;_&lt;/span&gt; &lt;span class="pl-smi"&gt;p2&lt;/span&gt;: &lt;span class="pl-c1"&gt;String&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;String&lt;/span&gt; {
      &lt;span class="pl-k"&gt;return&lt;/span&gt; L10n.&lt;span class="pl-c1"&gt;tr&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bananas.owner&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, p1, p2)
    }
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3&gt;&lt;a id="user-content-usage-example-7" class="anchor" aria-hidden="true" href="#usage-example-7"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage Example&lt;/h3&gt;
&lt;p&gt;Once the code has been generated by the script, you can use it this way in your Swift code:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Simple strings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; message &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-smi"&gt;alertMessage&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; title &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-smi"&gt;alertTitle&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; with parameters, note that each argument needs to be of the correct type&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; apples &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-smi"&gt;Apples&lt;/span&gt;.&lt;span class="pl-c1"&gt;count&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; bananas &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-smi"&gt;Bananas&lt;/span&gt;.&lt;span class="pl-c1"&gt;owner&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Olivier&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-flat-strings-support" class="anchor" aria-hidden="true" href="#flat-strings-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Flat Strings Support&lt;/h3&gt;
&lt;p&gt;SwiftGen also has a template to support flat strings files (i.e. no dot syntax). The advantage is that your keys won't be mangled in any way, the disadvantage is worse auto-completion.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Example of code generated by the flat bundled template&lt;/summary&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;enum&lt;/span&gt; &lt;span class="pl-en"&gt;L10n&lt;/span&gt; {
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Some alert body there&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;alertMessage&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Title of the alert&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;alertTitle&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; You have %d apples&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;applesCount&lt;/span&gt;(&lt;span class="pl-c1"&gt;Int&lt;/span&gt;)
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;///&lt;/span&gt; Those %d bananas belong to %@.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;  &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-c1"&gt;bananasOwner&lt;/span&gt;(&lt;span class="pl-c1"&gt;Int&lt;/span&gt;, &lt;span class="pl-c1"&gt;String&lt;/span&gt;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Given the same &lt;code&gt;Localizable.strings&lt;/code&gt; as above the usage will now be:&lt;/p&gt;
&lt;div class="highlight highlight-source-swift"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Simple strings&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; message &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-smi"&gt;alertMessage&lt;/span&gt;
&lt;span class="pl-k"&gt;let&lt;/span&gt; title &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-smi"&gt;alertTitle&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; with parameters, note that each argument needs to be of the correct type&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;let&lt;/span&gt; apples &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-c1"&gt;applesCount&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)
&lt;span class="pl-k"&gt;let&lt;/span&gt; bananas &lt;span class="pl-k"&gt;=&lt;/span&gt; L10n.&lt;span class="pl-c1"&gt;bananasOwner&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Olivier&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;a id="user-content-licence" class="anchor" aria-hidden="true" href="#licence"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Licence&lt;/h1&gt;
&lt;p&gt;This code and tool is under the MIT Licence. See the &lt;code&gt;LICENCE&lt;/code&gt; file in this repository.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-attributions" class="anchor" aria-hidden="true" href="#attributions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Attributions&lt;/h2&gt;
&lt;p&gt;This tool is powered by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kylef/Stencil"&gt;Stencil&lt;/a&gt; and few other libs by &lt;a href="https://github.com/kylef"&gt;Kyle Fuller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SwiftGenKit and &lt;a href="https://github.com/SwiftGen/StencilSwiftKit"&gt;StencilSwiftKit&lt;/a&gt;, our internal frameworks at SwiftGen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is currently mainly maintained by &lt;a href="https://github.com/AliSoftware"&gt;@AliSoftware&lt;/a&gt; and &lt;a href="https://github.com/djbe"&gt;@djbe&lt;/a&gt;. But I couldn't thank enough all the other &lt;a href="https://github.com/SwiftGen/SwiftGen/graphs/contributors"&gt;contributors&lt;/a&gt; to this tool along the different versions which helped make SwiftGen awesome! &lt;g-emoji class="g-emoji" alias="tada" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png"&gt;🎉&lt;/g-emoji&gt;&lt;/p&gt;
&lt;p&gt;If you want to contribute, don't hesitate to open a Pull Request, or even join the team!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-other-libraries--tools" class="anchor" aria-hidden="true" href="#other-libraries--tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other Libraries / Tools&lt;/h2&gt;
&lt;p&gt;If you want to also get rid of String-based APIs not only for your ressources, but also for &lt;code&gt;UITableViewCell&lt;/code&gt;, &lt;code&gt;UICollectionViewCell&lt;/code&gt; and XIB-based views, you should take a look at my Mixin &lt;a href="https://github.com/AliSoftware/Reusable"&gt;Reusable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to generate Swift code from your own Swift code (so meta!), like generate &lt;code&gt;Equatable&lt;/code&gt; conformance to your types and a lot of other similar things, use &lt;a href="https://github.com/krzysztofzablocki/Sourcery"&gt;Sourcery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SwiftGen and Sourcery are complementary tools. In fact, Sourcery uses &lt;code&gt;Stencil&lt;/code&gt; too, as well as SwiftGen's &lt;code&gt;StencilSwiftKit&lt;/code&gt; so you can use the exact same syntax for your templates for both!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can also &lt;a href="http://twitter.com/aligatr" rel="nofollow"&gt;follow me on twitter&lt;/a&gt; for news/updates about other projects I am creating, or &lt;a href="https://alisoftware.github.io" rel="nofollow"&gt;read my blog&lt;/a&gt;.&lt;/p&gt;
&lt;/span&gt;&lt;/article&gt;&lt;/div&gt;</description><author>SwiftGen</author><guid isPermaLink="false">https://github.com/SwiftGen/SwiftGen</guid><pubDate>Sun, 05 Jan 2020 00:25:00 GMT</pubDate></item></channel></rss>