<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Cuda, Today</title><link>https://github.com/trending/cuda?since=daily</link><description>The top repositories on GitHub for cuda, measured daily</description><pubDate>Thu, 31 Oct 2019 00:04:19 GMT</pubDate><lastBuildDate>Thu, 31 Oct 2019 00:04:19 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>1400</ttl><item><title>rapidsai/cudf #1 in Cuda, Today</title><link>https://github.com/rapidsai/cudf</link><description>&lt;p&gt;&lt;i&gt;cuDF - GPU DataFrame Library&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-cudf---gpu-dataframes" class="anchor" aria-hidden="true" href="#cudf---gpu-dataframes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;div align="left"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="img/rapids_logo.png"&gt;&lt;img src="img/rapids_logo.png" width="90px" style="max-width:100%;"&gt;&lt;/a&gt; cuDF - GPU DataFrames&lt;/div&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gpuci.gpuopenanalytics.com/job/gpuCI/job/cudf/job/branches/job/cudf-gpu-branch-0.11/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4d7f2762e2c8e5b40f1e380bf83d8dd7512c3609/68747470733a2f2f67707563692e6770756f70656e616e616c79746963732e636f6d2f6275696c645374617475732f69636f6e3f6a6f623d6770754349253246637564662532466272616e63686573253246637564662d6770752d6272616e63682d302e3131" alt="Build Status" data-canonical-src="https://gpuci.gpuopenanalytics.com/buildStatus/icon?job=gpuCI%2Fcudf%2Fbranches%2Fcudf-gpu-branch-0.11" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; For the latest stable &lt;a href="https://github.com/rapidsai/cudf/blob/master/README.md"&gt;README.md&lt;/a&gt; ensure you are on the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;Built based on the &lt;a href="http://arrow.apache.org/" rel="nofollow"&gt;Apache Arrow&lt;/a&gt; columnar memory format, cuDF is a GPU DataFrame library for loading, joining, aggregating, filtering, and otherwise manipulating data.&lt;/p&gt;
&lt;p&gt;cuDF provides a pandas-like API that will be familiar to data engineers &amp;amp; data scientists, so they can use it to easily accelerate their workflows without going into the details of CUDA programming.&lt;/p&gt;
&lt;p&gt;For example, the following snippet downloads a CSV, then uses the GPU to parse it into rows and columns and run calculations:&lt;/p&gt;
&lt;div class="highlight highlight-source-python"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; cudf, io, requests
&lt;span class="pl-k"&gt;from&lt;/span&gt; io &lt;span class="pl-k"&gt;import&lt;/span&gt; StringIO

url&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/plotly/datasets/raw/master/tips.csv&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
content &lt;span class="pl-k"&gt;=&lt;/span&gt; requests.get(url).content.decode(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;utf-8&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)

tips_df &lt;span class="pl-k"&gt;=&lt;/span&gt; cudf.read_csv(StringIO(content))
tips_df[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;tip_percentage&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; tips_df[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;tip&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;span class="pl-k"&gt;/&lt;/span&gt;tips_df[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;total_bill&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-c1"&gt;100&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; display average tip by dining party size&lt;/span&gt;
&lt;span class="pl-c1"&gt;print&lt;/span&gt;(tips_df.groupby(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;size&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;).tip_percentage.mean())&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;size
1    21.729201548727808
2    16.571919173482897
3    15.215685473711837
4    14.594900639351332
5    14.149548965142023
6    15.622920072028379
Name: tip_percentage, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For additional examples, browse our complete &lt;a href="https://docs.rapids.ai/api/cudf/stable/" rel="nofollow"&gt;API documentation&lt;/a&gt;, or check out our more detailed &lt;a href="https://github.com/rapidsai/notebooks-contrib"&gt;notebooks&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
&lt;p&gt;Please see the &lt;a href="https://hub.docker.com/r/rapidsai/rapidsai/" rel="nofollow"&gt;Demo Docker Repository&lt;/a&gt;, choosing a tag based on the NVIDIA CUDA version you’re running. This provides a ready to run Docker container with example notebooks and data, showcasing how you can utilize cuDF.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-conda" class="anchor" aria-hidden="true" href="#conda"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conda&lt;/h3&gt;
&lt;p&gt;cuDF can be installed with conda (&lt;a href="https://conda.io/miniconda.html" rel="nofollow"&gt;miniconda&lt;/a&gt;, or the full &lt;a href="https://www.anaconda.com/download" rel="nofollow"&gt;Anaconda distribution&lt;/a&gt;) from the &lt;code&gt;rapidsai&lt;/code&gt; channel:&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;cudf version == 0.10&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; for CUDA 9.2&lt;/span&gt;
conda install -c rapidsai -c nvidia -c numba -c conda-forge \
    cudf=0.10 python=3.6 cudatoolkit=9.2

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or, for CUDA 10.0&lt;/span&gt;
conda install -c rapidsai -c nvidia -c numba -c conda-forge \
    cudf=0.10 python=3.6 cudatoolkit=10.0

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or, for CUDA 10.1&lt;/span&gt;
conda install -c rapidsai -c nvidia -c numba -c conda-forge \
    cudf=0.10 python=3.6 cudatoolkit=10.1&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the nightly version of &lt;code&gt;cudf&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; for CUDA 9.2&lt;/span&gt;
conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \
    cudf python=3.6 cudatoolkit=9.2

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or, for CUDA 10.0&lt;/span&gt;
conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \
    cudf python=3.6 cudatoolkit=10.0&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: cuDF is supported only on Linux, and with Python versions 3.6 or 3.7.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://rapids.ai/start.html" rel="nofollow"&gt;Get RAPIDS version picker&lt;/a&gt; for more OS and version info.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-buildinstall-from-source" class="anchor" aria-hidden="true" href="#buildinstall-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build/Install from Source&lt;/h2&gt;
&lt;p&gt;See build &lt;a href="CONTRIBUTING.md#setting-up-your-build-environment"&gt;instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please see our &lt;a href="CONTRIBUTING.md"&gt;guide for contributing to cuDF&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contact&lt;/h2&gt;
&lt;p&gt;Find out more details on the &lt;a href="https://rapids.ai/community.html" rel="nofollow"&gt;RAPIDS site&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content--open-gpu-data-science" class="anchor" aria-hidden="true" href="#-open-gpu-data-science"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;div align="left"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="img/rapids_logo.png"&gt;&lt;img src="img/rapids_logo.png" width="265px" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/div&gt; Open GPU Data Science&lt;/h2&gt;
&lt;p&gt;The RAPIDS suite of open source software libraries aim to enable execution of end-to-end data science and analytics pipelines entirely on GPUs. It relies on NVIDIA® CUDA® primitives for low-level compute optimization, but exposing that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.&lt;/p&gt;
&lt;p align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="img/rapids_arrow.png"&gt;&lt;img src="img/rapids_arrow.png" width="80%" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-apache-arrow-on-gpu" class="anchor" aria-hidden="true" href="#apache-arrow-on-gpu"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Apache Arrow on GPU&lt;/h3&gt;
&lt;p&gt;The GPU version of &lt;a href="https://arrow.apache.org/" rel="nofollow"&gt;Apache Arrow&lt;/a&gt; is a common API that enables efficient interchange of tabular data between processes running on the GPU. End-to-end computation on the GPU avoids unnecessary copying and converting of data off the GPU, reducing compute time and cost for high-performance analytics common in artificial intelligence workloads. As the name implies, cuDF uses the Apache Arrow columnar data format on the GPU. Currently, a subset of the features in Apache Arrow are supported.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>rapidsai</author><guid isPermaLink="false">https://github.com/rapidsai/cudf</guid><pubDate>Thu, 31 Oct 2019 00:00:00 GMT</pubDate></item><item><title>NVlabs/cub #2 in Cuda, Today</title><link>https://github.com/NVlabs/cub</link><description>&lt;p&gt;&lt;i&gt;CUB is a flexible library of cooperative threadblock primitives and other utilities for CUDA kernel programming.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;hr&gt;
&lt;h3&gt;&lt;a id="user-content-about-cub" class="anchor" aria-hidden="true" href="#about-cub"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About CUB&lt;/h3&gt;
&lt;p&gt;Current release: v1.8.0 (02/16/2018)&lt;/p&gt;
&lt;p&gt;We recommend the &lt;a href="http://nvlabs.github.com/cub"&gt;CUB Project Website&lt;/a&gt; for further information and examples.&lt;/p&gt;
&lt;p&gt;CUB provides state-of-the-art, reusable software components for every layer
of the CUDA programming model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;b&gt;&lt;em&gt;Device-wide primitives&lt;/em&gt;&lt;/b&gt;] (&lt;a href="https://nvlabs.github.com/cub/group___device_module.html"&gt;https://nvlabs.github.com/cub/group___device_module.html&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Sort, prefix scan, reduction, histogram, etc.&lt;/li&gt;
&lt;li&gt;Compatible with CUDA dynamic parallelism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[&lt;b&gt;&lt;em&gt;Block-wide "collective" primitives&lt;/em&gt;&lt;/b&gt;] (&lt;a href="https://nvlabs.github.com/cub/group___block_module.html"&gt;https://nvlabs.github.com/cub/group___block_module.html&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;I/O, sort, prefix scan, reduction, histogram, etc.&lt;/li&gt;
&lt;li&gt;Compatible with arbitrary thread block sizes and types&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[&lt;b&gt;&lt;em&gt;Warp-wide "collective" primitives&lt;/em&gt;&lt;/b&gt;] (&lt;a href="https://nvlabs.github.com/cub/group___warp_module.html"&gt;https://nvlabs.github.com/cub/group___warp_module.html&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Warp-wide prefix scan, reduction, etc.&lt;/li&gt;
&lt;li&gt;Safe and architecture-specific&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nvlabs.github.com/cub/group___thread_module.html"&gt;&lt;b&gt;&lt;em&gt;Thread and resource utilities&lt;/em&gt;&lt;/b&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;PTX intrinsics, device reflection, texture-caching iterators, caching memory allocators, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b7aff2a7fae615b6ab739bff7b0d3bc95b63b0f4/687474703a2f2f6e766c6162732e6769746875622e636f6d2f6375622f6375625f6f766572766965772e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/b7aff2a7fae615b6ab739bff7b0d3bc95b63b0f4/687474703a2f2f6e766c6162732e6769746875622e636f6d2f6375622f6375625f6f766572766965772e706e67" alt="Orientation of collective primitives within the CUDA software stack" data-canonical-src="http://nvlabs.github.com/cub/cub_overview.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-a-simple-example" class="anchor" aria-hidden="true" href="#a-simple-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Simple Example&lt;/h3&gt;
&lt;div class="highlight highlight-source-c++"&gt;&lt;pre&gt;#&lt;span class="pl-k"&gt;include&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;&amp;lt;&lt;/span&gt;cub/cub.cuh&lt;span class="pl-pds"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
 
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Block-sorting CUDA kernel&lt;/span&gt;
__global__ &lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;BlockSortKernel&lt;/span&gt;(&lt;span class="pl-k"&gt;int&lt;/span&gt; *d_in, &lt;span class="pl-k"&gt;int&lt;/span&gt; *d_out)
{
     &lt;span class="pl-k"&gt;using&lt;/span&gt; &lt;span class="pl-k"&gt;namespace&lt;/span&gt; &lt;span class="pl-en"&gt;cub&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt;

     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Specialize BlockRadixSort, BlockLoad, and BlockStore for 128 threads &lt;/span&gt;
     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; owning 16 integer items each&lt;/span&gt;
     &lt;span class="pl-k"&gt;typedef&lt;/span&gt; BlockRadixSort&amp;lt;&lt;span class="pl-k"&gt;int&lt;/span&gt;, &lt;span class="pl-c1"&gt;128&lt;/span&gt;, &lt;span class="pl-c1"&gt;16&lt;/span&gt;&amp;gt;                     BlockRadixSort;
     &lt;span class="pl-k"&gt;typedef&lt;/span&gt; BlockLoad&amp;lt;&lt;span class="pl-k"&gt;int&lt;/span&gt;, &lt;span class="pl-c1"&gt;128&lt;/span&gt;, &lt;span class="pl-c1"&gt;16&lt;/span&gt;, BLOCK_LOAD_TRANSPOSE&amp;gt;   BlockLoad;
     &lt;span class="pl-k"&gt;typedef&lt;/span&gt; BlockStore&amp;lt;&lt;span class="pl-k"&gt;int&lt;/span&gt;, &lt;span class="pl-c1"&gt;128&lt;/span&gt;, &lt;span class="pl-c1"&gt;16&lt;/span&gt;, BLOCK_STORE_TRANSPOSE&amp;gt; BlockStore;
 
     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Allocate shared memory&lt;/span&gt;
     __shared__ &lt;span class="pl-k"&gt;union&lt;/span&gt; {
         &lt;span class="pl-k"&gt;typename&lt;/span&gt; BlockRadixSort::TempStorage  sort;
         &lt;span class="pl-k"&gt;typename&lt;/span&gt; BlockLoad::TempStorage       load; 
         &lt;span class="pl-k"&gt;typename&lt;/span&gt; BlockStore::TempStorage      store; 
     } temp_storage; 

     &lt;span class="pl-k"&gt;int&lt;/span&gt; block_offset = blockIdx.&lt;span class="pl-smi"&gt;x&lt;/span&gt; * (&lt;span class="pl-c1"&gt;128&lt;/span&gt; * &lt;span class="pl-c1"&gt;16&lt;/span&gt;);	  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; OffsetT for this block's ment&lt;/span&gt;

     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Obtain a segment of 2048 consecutive keys that are blocked across threads&lt;/span&gt;
     &lt;span class="pl-k"&gt;int&lt;/span&gt; thread_keys[&lt;span class="pl-c1"&gt;16&lt;/span&gt;];
     &lt;span class="pl-c1"&gt;BlockLoad&lt;/span&gt;(temp_storage.&lt;span class="pl-smi"&gt;load&lt;/span&gt;).&lt;span class="pl-c1"&gt;Load&lt;/span&gt;(d_in + block_offset, thread_keys);
     &lt;span class="pl-c1"&gt;__syncthreads&lt;/span&gt;();

     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Collectively sort the keys&lt;/span&gt;
     &lt;span class="pl-c1"&gt;BlockRadixSort&lt;/span&gt;(temp_storage.&lt;span class="pl-smi"&gt;sort&lt;/span&gt;).&lt;span class="pl-c1"&gt;Sort&lt;/span&gt;(thread_keys);
     &lt;span class="pl-c1"&gt;__syncthreads&lt;/span&gt;();

     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Store the sorted segment &lt;/span&gt;
     &lt;span class="pl-c1"&gt;BlockStore&lt;/span&gt;(temp_storage.&lt;span class="pl-smi"&gt;store&lt;/span&gt;).&lt;span class="pl-c1"&gt;Store&lt;/span&gt;(d_out + block_offset, thread_keys);
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each thread block uses cub::BlockRadixSort to collectively sort
its own input segment.  The class is specialized by the
data type being sorted, by the number of threads per block, by the number of
keys per thread, and implicitly by the targeted compilation architecture.&lt;/p&gt;
&lt;p&gt;The cub::BlockLoad and cub::BlockStore classes are similarly specialized.&lt;br&gt;
Furthermore, to provide coalesced accesses to device memory, these primitives are
configured to access memory using a striped access pattern (where consecutive threads
simultaneously access consecutive items) and then &lt;em&gt;transpose&lt;/em&gt; the keys into
a &lt;a href="index.html#sec4sec3"&gt;&lt;em&gt;blocked arrangement&lt;/em&gt;&lt;/a&gt; of elements across threads.&lt;/p&gt;
&lt;p&gt;Once specialized, these classes expose opaque \p TempStorage member types.&lt;br&gt;
The thread block uses these storage types to statically allocate the union of
shared memory needed by the thread block.  (Alternatively these storage types
could be aliased to global memory allocations).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-stable-releases" class="anchor" aria-hidden="true" href="#stable-releases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stable Releases&lt;/h3&gt;
&lt;p&gt;CUB releases are labeled using version identifiers having three fields:
&lt;em&gt;epoch.feature.update&lt;/em&gt;.  The &lt;em&gt;epoch&lt;/em&gt; field corresponds to support for
a major change in the CUDA programming model.  The &lt;em&gt;feature&lt;/em&gt; field
corresponds to a stable set of features, functionality, and interface.  The
&lt;em&gt;update&lt;/em&gt; field corresponds to a bug-fix or performance update for that
feature set.  At the moment, we do not publicly provide non-stable releases
such as development snapshots, beta releases or rolling releases.  (Feel free
to contact us if you would like such things.)  See the
&lt;a href="http://nvlabs.github.com/cub"&gt;CUB Project Website&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h3&gt;
&lt;p&gt;CUB is developed as an open-source project by &lt;a href="http://research.nvidia.com" rel="nofollow"&gt;NVIDIA Research&lt;/a&gt;.  The primary contributor is &lt;a href="http://github.com/dumerrill"&gt;Duane Merrill&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-open-source-license" class="anchor" aria-hidden="true" href="#open-source-license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Open Source License&lt;/h3&gt;
&lt;p&gt;CUB is available under the "New BSD" open-source license:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Copyright (c) 2010-2011, Duane Merrill.  All rights reserved.
Copyright (c) 2011-2018, NVIDIA CORPORATION.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   *  Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   *  Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   *  Neither the name of the NVIDIA CORPORATION nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>NVlabs</author><guid isPermaLink="false">https://github.com/NVlabs/cub</guid><pubDate>Thu, 31 Oct 2019 00:00:00 GMT</pubDate></item></channel></rss>