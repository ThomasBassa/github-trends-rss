<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Cuda, Today</title><link>https://github.com/trending/cuda?since=daily</link><description>The top repositories on GitHub for cuda, measured daily</description><pubDate>Tue, 07 Jan 2020 01:11:29 GMT</pubDate><lastBuildDate>Tue, 07 Jan 2020 01:11:29 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>fixstars/libSGM #1 in Cuda, Today</title><link>https://github.com/fixstars/libSGM</link><description>&lt;p&gt;&lt;i&gt;Stereo Semi Global Matching by cuda&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-libsgm" class="anchor" aria-hidden="true" href="#libsgm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;libSGM&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;A CUDA implementation performing Semi-Global Matching.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;libSGM is library that implements in CUDA the Semi-Global Matching algorithm.&lt;br&gt;
From a pair of appropriately calibrated input images, we can obtain the disparity map.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Because it uses CUDA, we can compute the disparity map at high speed.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance&lt;/h2&gt;
&lt;p&gt;The libSGM performance obtained from benchmark sample&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-settings" class="anchor" aria-hidden="true" href="#settings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;image size : 1024 x 440&lt;/li&gt;
&lt;li&gt;disparity size : 128&lt;/li&gt;
&lt;li&gt;sgm path : 4 path&lt;/li&gt;
&lt;li&gt;subpixel : enabled&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-results" class="anchor" aria-hidden="true" href="#results"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Results&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Device&lt;/th&gt;
&lt;th&gt;Processing Time[Milliseconds]&lt;/th&gt;
&lt;th&gt;FPS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Tegra X2 (CUDA: v10.0)&lt;/td&gt;
&lt;td&gt;28.5&lt;/td&gt;
&lt;td&gt;35.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GTX 1080 Ti (CUDA: v10.1)&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;495.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;p&gt;libSGM needs CUDA (compute capabilities &amp;gt;= 3.5) to be installed.&lt;br&gt;
Moreover, to build the sample, we need the following libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenCV 3.0 or later&lt;/li&gt;
&lt;li&gt;CMake 3.1 or later&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-build-instructions" class="anchor" aria-hidden="true" href="#build-instructions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build Instructions&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/fixstars/libSGM.git
$ cd libSGM
$ git submodule update --init  # It is needed if ENABLE_TESTS option is set to ON
$ mkdir build
$ cd build
$ cmake ../  # Several options available
$ make
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-sample-execution" class="anchor" aria-hidden="true" href="#sample-execution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sample Execution&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ pwd
.../libSGM
$ cd build
$ cd sample/movie/
$ ./stereo_movie &amp;lt;left image path format&amp;gt; &amp;lt;right image path format&amp;gt; &amp;lt;disparity_size&amp;gt;
left image path format: the format used for the file paths to the left input images
right image path format: the format used for the file paths to the right input images
disparity_size: the maximum number of disparities (optional)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;"disparity_size" is optional. By default, it is 128.&lt;/p&gt;
&lt;p&gt;Next, we explain the meaning of the "left image path format" and "right image path format".&lt;br&gt;
When provided with the following set of files, we should pass the "path formats" given below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;left_image_0000.pgm
left_image_0001.pgm
left_image_0002.pgm
left_image_0003.pgm
...

right_image_0000.pgm
right_image_0001.pgm
right_image_0002.pgm
right_image_0003.pgm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ ./stereo_movie left_image_%04d.pgm right_image_%04d.pgm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The sample images available at &lt;a href="http://www.6d-vision.com/scene-labeling" rel="nofollow"&gt;Daimler Urban Scene Segmentation Benchmark Dataset 2014&lt;/a&gt; are used to test the software.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-test-execution" class="anchor" aria-hidden="true" href="#test-execution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Test Execution&lt;/h2&gt;
&lt;p&gt;libSGM uses &lt;a href="https://github.com/google/googletest"&gt;Google Test&lt;/a&gt; for tests as Git submodule.&lt;br&gt;
So, we need to init submodule by following command firstly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pwd
.../libSGM
$ git submodule update --init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can run tests after a build.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pwd
.../libSGM
$ cd build
$ cd test
$ ./sgm-test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test code compares our implementation of each functions to naive implementation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Authors&lt;/h2&gt;
&lt;p&gt;The "SGM Team": Samuel Audet, Yoriyuki Kitta, Yuta Noto, Ryo Sakamoto, Akihiro Takagi&lt;br&gt;
&lt;a href="http://www.fixstars.com/" rel="nofollow"&gt;Fixstars Corporation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Apache License 2.0&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>fixstars</author><guid isPermaLink="false">https://github.com/fixstars/libSGM</guid><pubDate>Tue, 07 Jan 2020 00:01:00 GMT</pubDate></item><item><title>luanfujun/deep-painterly-harmonization #2 in Cuda, Today</title><link>https://github.com/luanfujun/deep-painterly-harmonization</link><description>&lt;p&gt;&lt;i&gt;Code and data for paper "Deep Painterly Harmonization": https://arxiv.org/abs/1804.03189&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-deep-painterly-harmonization" class="anchor" aria-hidden="true" href="#deep-painterly-harmonization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;deep-painterly-harmonization&lt;/h1&gt;
&lt;p&gt;Code and data for paper "&lt;a href="https://arxiv.org/abs/1804.03189" rel="nofollow"&gt;Deep Painterly Harmonization&lt;/a&gt;"&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This software is published for academic and non-commercial use only.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;p&gt;This code is based on torch. It has been tested on Ubuntu 16.04 LTS.&lt;/p&gt;
&lt;p&gt;Dependencies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/torch/torch7"&gt;Torch&lt;/a&gt; (with &lt;a href="https://github.com/szagoruyko/loadcaffe"&gt;loadcaffe&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mathworks.com/" rel="nofollow"&gt;Matlab&lt;/a&gt; or &lt;a href="https://www.gnu.org/software/octave/" rel="nofollow"&gt;Octave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CUDA backend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.nvidia.com/cuda-downloads" rel="nofollow"&gt;CUDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.nvidia.com/cudnn" rel="nofollow"&gt;cudnn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download VGG-19:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sh models/download_models.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compile &lt;code&gt;cuda_utils.cu&lt;/code&gt; (Adjust &lt;code&gt;PREFIX&lt;/code&gt; and &lt;code&gt;NVCC_PREFIX&lt;/code&gt; in &lt;code&gt;makefile&lt;/code&gt; for your machine):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make clean &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;To generate all results (in  &lt;code&gt;data/&lt;/code&gt;) using the provided scripts, simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python gen_all.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in Python and then&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;run('filt_cnn_artifact.m')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in Matlab or Octave. The final output will be in &lt;code&gt;results/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that in the paper we trained a CNN on a dataset of 80,000 paintings collected from &lt;a href="https://www.wikiart.org" rel="nofollow"&gt;wikiart.org&lt;/a&gt;, which estimates the stylization level of a given painting and adjust weights accordingly. We will release the pre-trained model in the next update. Users will need to set those weights manually if running on their new paintings for now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Removed a few images due to copyright issue. Full set &lt;a href="https://github.com/luanfujun/deep-painterly-harmonization/blob/master/README2.md"&gt;here&lt;/a&gt; for testing use only.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Examples&lt;/h2&gt;
&lt;p&gt;Here are some results from our algorithm (from left to right are original painting, naive composite and our output):&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/0_target.jpg"&gt;&lt;img src="data/0_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/0_naive.jpg"&gt;&lt;img src="data/0_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/0_final_res2.png"&gt;&lt;img src="results/0_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/1_target.jpg"&gt;&lt;img src="data/1_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/1_naive.jpg"&gt;&lt;img src="data/1_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/1_final_res2.png"&gt;&lt;img src="results/1_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/2_target.jpg"&gt;&lt;img src="data/2_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/2_naive.jpg"&gt;&lt;img src="data/2_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/2_final_res2.png"&gt;&lt;img src="results/2_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/3_target.jpg"&gt;&lt;img src="data/3_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/3_naive.jpg"&gt;&lt;img src="data/3_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/3_final_res2.png"&gt;&lt;img src="results/3_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/4_target.jpg"&gt;&lt;img src="data/4_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/4_naive.jpg"&gt;&lt;img src="data/4_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/4_final_res2.png"&gt;&lt;img src="results/4_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/5_target.jpg"&gt;&lt;img src="data/5_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/5_naive.jpg"&gt;&lt;img src="data/5_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/5_final_res2.png"&gt;&lt;img src="results/5_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/6_target.jpg"&gt;&lt;img src="data/6_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/6_naive.jpg"&gt;&lt;img src="data/6_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/6_final_res2.png"&gt;&lt;img src="results/6_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/7_target.jpg"&gt;&lt;img src="results/7_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/7_naive_popeye.png"&gt;&lt;img src="results/7_naive_popeye.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/7_result_popeye.jpg"&gt;&lt;img src="results/7_result_popeye.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/8_target.jpg"&gt;&lt;img src="data/8_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/8_naive_aircraft.png"&gt;&lt;img src="results/8_naive_aircraft.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/8_result_aircraft.png"&gt;&lt;img src="results/8_result_aircraft.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/9_target.jpg"&gt;&lt;img src="data/9_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/9_naive_dragon.png"&gt;&lt;img src="results/9_naive_dragon.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/9_result_dragon.jpg"&gt;&lt;img src="results/9_result_dragon.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/10_target.jpg"&gt;&lt;img src="data/10_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/10_naive.jpg"&gt;&lt;img src="data/10_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/10_final_res2.png"&gt;&lt;img src="results/10_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/11_target.jpg"&gt;&lt;img src="data/11_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/11_naive.jpg"&gt;&lt;img src="data/11_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/11_final_res2.png"&gt;&lt;img src="results/11_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/12_target.jpg"&gt;&lt;img src="data/12_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/12_naive.jpg"&gt;&lt;img src="data/12_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/12_final_res2.png"&gt;&lt;img src="results/12_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/13_target.jpg"&gt;&lt;img src="data/13_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/13_naive.jpg"&gt;&lt;img src="data/13_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/13_final_res2.png"&gt;&lt;img src="results/13_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/14_target.jpg"&gt;&lt;img src="data/14_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/14_naive.jpg"&gt;&lt;img src="data/14_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/14_final_res2.png"&gt;&lt;img src="results/14_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/15_target.jpg"&gt;&lt;img src="data/15_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/15_naive.jpg"&gt;&lt;img src="data/15_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/15_final_res2.png"&gt;&lt;img src="results/15_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/16_target.jpg"&gt;&lt;img src="data/16_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/16_naive.jpg"&gt;&lt;img src="data/16_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/16_final_res2.png"&gt;&lt;img src="results/16_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/17_target.jpg"&gt;&lt;img src="data/17_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/17_naive_sherlock.jpg"&gt;&lt;img src="results/17_naive_sherlock.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/17_result_sherlock.jpg"&gt;&lt;img src="results/17_result_sherlock.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/18_target.jpg"&gt;&lt;img src="data/18_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/18_naive.jpg"&gt;&lt;img src="data/18_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/18_final_res2.png"&gt;&lt;img src="results/18_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/19_target.jpg"&gt;&lt;img src="data/19_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/19_naive.jpg"&gt;&lt;img src="data/19_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/19_final_res2.png"&gt;&lt;img src="results/19_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/20_target.jpg"&gt;&lt;img src="data/20_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/20_naive.jpg"&gt;&lt;img src="data/20_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/20_final_res2.png"&gt;&lt;img src="results/20_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/21_target.jpg"&gt;&lt;img src="data/21_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/21_naive.jpg"&gt;&lt;img src="data/21_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/21_final_res2.png"&gt;&lt;img src="results/21_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/22_target.jpg"&gt;&lt;img src="data/22_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/22_naive.jpg"&gt;&lt;img src="data/22_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/22_final_res2.png"&gt;&lt;img src="results/22_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/23_target.jpg"&gt;&lt;img src="data/23_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/23_naive.jpg"&gt;&lt;img src="data/23_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/23_final_res2.png"&gt;&lt;img src="results/23_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/24_target.jpg"&gt;&lt;img src="data/24_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/24_naive.jpg"&gt;&lt;img src="data/24_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/24_final_res2.png"&gt;&lt;img src="results/24_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/25_target.jpg"&gt;&lt;img src="data/25_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/25_naive.jpg"&gt;&lt;img src="data/25_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/25_final_res2.png"&gt;&lt;img src="results/25_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/26_target.jpg"&gt;&lt;img src="data/26_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/26_naive.jpg"&gt;&lt;img src="data/26_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/26_final_res2.png"&gt;&lt;img src="results/26_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/27_target.jpg"&gt;&lt;img src="data/27_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/27_naive.jpg"&gt;&lt;img src="data/27_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/27_final_res2.png"&gt;&lt;img src="results/27_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/28_target.jpg"&gt;&lt;img src="data/28_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/28_naive_cow.png"&gt;&lt;img src="results/28_naive_cow.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/28_result_cow.jpg"&gt;&lt;img src="results/28_result_cow.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/29_target.jpg"&gt;&lt;img src="data/29_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/29_naive.jpg"&gt;&lt;img src="data/29_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/29_final_res2.png"&gt;&lt;img src="results/29_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/30_target.jpg"&gt;&lt;img src="data/30_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/30_naive.jpg"&gt;&lt;img src="data/30_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/30_final_res2.png"&gt;&lt;img src="results/30_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/31_target.jpg"&gt;&lt;img src="data/31_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/31_naive.jpg"&gt;&lt;img src="data/31_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/31_final_res2.png"&gt;&lt;img src="results/31_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/32_target.jpg"&gt;&lt;img src="data/32_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/32_naive.jpg"&gt;&lt;img src="data/32_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/32_final_res2.png"&gt;&lt;img src="results/32_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/35_target.jpg"&gt;&lt;img src="data/35_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/35_naive.jpg"&gt;&lt;img src="results/35_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/35_result.png"&gt;&lt;img src="results/35_result.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/33_target.jpg"&gt;&lt;img src="data/33_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/33_naive_buddha.png"&gt;&lt;img src="results/33_naive_buddha.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/33_result_buddha.jpg"&gt;&lt;img src="results/33_result_buddha.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/34_target.jpg"&gt;&lt;img src="data/34_target.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="data/34_naive.jpg"&gt;&lt;img src="data/34_naive.jpg" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
  &lt;a target="_blank" rel="noopener noreferrer" href="results/34_final_res2.png"&gt;&lt;img src="results/34_final_res2.png" width="290" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Acknowledgement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Our torch implementation is based on Justin Johnson's &lt;a href="https://github.com/jcjohnson/neural-style"&gt;code&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Histogram loss is inspired by &lt;a href="https://arxiv.org/abs/1701.08893" rel="nofollow"&gt;Risser et al.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Citation&lt;/h2&gt;
&lt;p&gt;If you find this work useful for your research, please cite:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@article{luan2018deep,
  title={Deep Painterly Harmonization},
  author={Luan, Fujun and Paris, Sylvain and Shechtman, Eli and Bala, Kavita},
  journal={arXiv preprint arXiv:1804.03189},
  year={2018}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contact&lt;/h2&gt;
&lt;p&gt;Feel free to contact me if there is any question (Fujun Luan &lt;a href="mailto:fl356@cornell.edu"&gt;fl356@cornell.edu&lt;/a&gt;).&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>luanfujun</author><guid isPermaLink="false">https://github.com/luanfujun/deep-painterly-harmonization</guid><pubDate>Tue, 07 Jan 2020 00:02:00 GMT</pubDate></item><item><title>NVlabs/cub #3 in Cuda, Today</title><link>https://github.com/NVlabs/cub</link><description>&lt;p&gt;&lt;i&gt;CUB is a flexible library of cooperative threadblock primitives and other utilities for CUDA kernel programming.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;hr&gt;
&lt;h3&gt;&lt;a id="user-content-about-cub" class="anchor" aria-hidden="true" href="#about-cub"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About CUB&lt;/h3&gt;
&lt;p&gt;Current release: v1.8.0 (02/16/2018)&lt;/p&gt;
&lt;p&gt;We recommend the &lt;a href="http://nvlabs.github.com/cub"&gt;CUB Project Website&lt;/a&gt; for further information and examples.&lt;/p&gt;
&lt;p&gt;CUB provides state-of-the-art, reusable software components for every layer
of the CUDA programming model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;b&gt;&lt;em&gt;Device-wide primitives&lt;/em&gt;&lt;/b&gt;] (&lt;a href="https://nvlabs.github.com/cub/group___device_module.html"&gt;https://nvlabs.github.com/cub/group___device_module.html&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Sort, prefix scan, reduction, histogram, etc.&lt;/li&gt;
&lt;li&gt;Compatible with CUDA dynamic parallelism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[&lt;b&gt;&lt;em&gt;Block-wide "collective" primitives&lt;/em&gt;&lt;/b&gt;] (&lt;a href="https://nvlabs.github.com/cub/group___block_module.html"&gt;https://nvlabs.github.com/cub/group___block_module.html&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;I/O, sort, prefix scan, reduction, histogram, etc.&lt;/li&gt;
&lt;li&gt;Compatible with arbitrary thread block sizes and types&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[&lt;b&gt;&lt;em&gt;Warp-wide "collective" primitives&lt;/em&gt;&lt;/b&gt;] (&lt;a href="https://nvlabs.github.com/cub/group___warp_module.html"&gt;https://nvlabs.github.com/cub/group___warp_module.html&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Warp-wide prefix scan, reduction, etc.&lt;/li&gt;
&lt;li&gt;Safe and architecture-specific&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nvlabs.github.com/cub/group___thread_module.html"&gt;&lt;b&gt;&lt;em&gt;Thread and resource utilities&lt;/em&gt;&lt;/b&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;PTX intrinsics, device reflection, texture-caching iterators, caching memory allocators, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b7aff2a7fae615b6ab739bff7b0d3bc95b63b0f4/687474703a2f2f6e766c6162732e6769746875622e636f6d2f6375622f6375625f6f766572766965772e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/b7aff2a7fae615b6ab739bff7b0d3bc95b63b0f4/687474703a2f2f6e766c6162732e6769746875622e636f6d2f6375622f6375625f6f766572766965772e706e67" alt="Orientation of collective primitives within the CUDA software stack" data-canonical-src="http://nvlabs.github.com/cub/cub_overview.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-a-simple-example" class="anchor" aria-hidden="true" href="#a-simple-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Simple Example&lt;/h3&gt;
&lt;div class="highlight highlight-source-c++"&gt;&lt;pre&gt;#&lt;span class="pl-k"&gt;include&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;&amp;lt;&lt;/span&gt;cub/cub.cuh&lt;span class="pl-pds"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
 
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Block-sorting CUDA kernel&lt;/span&gt;
__global__ &lt;span class="pl-k"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;BlockSortKernel&lt;/span&gt;(&lt;span class="pl-k"&gt;int&lt;/span&gt; *d_in, &lt;span class="pl-k"&gt;int&lt;/span&gt; *d_out)
{
     &lt;span class="pl-k"&gt;using&lt;/span&gt; &lt;span class="pl-k"&gt;namespace&lt;/span&gt; &lt;span class="pl-en"&gt;cub&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt;

     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Specialize BlockRadixSort, BlockLoad, and BlockStore for 128 threads &lt;/span&gt;
     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; owning 16 integer items each&lt;/span&gt;
     &lt;span class="pl-k"&gt;typedef&lt;/span&gt; BlockRadixSort&amp;lt;&lt;span class="pl-k"&gt;int&lt;/span&gt;, &lt;span class="pl-c1"&gt;128&lt;/span&gt;, &lt;span class="pl-c1"&gt;16&lt;/span&gt;&amp;gt;                     BlockRadixSort;
     &lt;span class="pl-k"&gt;typedef&lt;/span&gt; BlockLoad&amp;lt;&lt;span class="pl-k"&gt;int&lt;/span&gt;, &lt;span class="pl-c1"&gt;128&lt;/span&gt;, &lt;span class="pl-c1"&gt;16&lt;/span&gt;, BLOCK_LOAD_TRANSPOSE&amp;gt;   BlockLoad;
     &lt;span class="pl-k"&gt;typedef&lt;/span&gt; BlockStore&amp;lt;&lt;span class="pl-k"&gt;int&lt;/span&gt;, &lt;span class="pl-c1"&gt;128&lt;/span&gt;, &lt;span class="pl-c1"&gt;16&lt;/span&gt;, BLOCK_STORE_TRANSPOSE&amp;gt; BlockStore;
 
     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Allocate shared memory&lt;/span&gt;
     __shared__ &lt;span class="pl-k"&gt;union&lt;/span&gt; {
         &lt;span class="pl-k"&gt;typename&lt;/span&gt; BlockRadixSort::TempStorage  sort;
         &lt;span class="pl-k"&gt;typename&lt;/span&gt; BlockLoad::TempStorage       load; 
         &lt;span class="pl-k"&gt;typename&lt;/span&gt; BlockStore::TempStorage      store; 
     } temp_storage; 

     &lt;span class="pl-k"&gt;int&lt;/span&gt; block_offset = blockIdx.&lt;span class="pl-smi"&gt;x&lt;/span&gt; * (&lt;span class="pl-c1"&gt;128&lt;/span&gt; * &lt;span class="pl-c1"&gt;16&lt;/span&gt;);	  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; OffsetT for this block's ment&lt;/span&gt;

     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Obtain a segment of 2048 consecutive keys that are blocked across threads&lt;/span&gt;
     &lt;span class="pl-k"&gt;int&lt;/span&gt; thread_keys[&lt;span class="pl-c1"&gt;16&lt;/span&gt;];
     &lt;span class="pl-c1"&gt;BlockLoad&lt;/span&gt;(temp_storage.&lt;span class="pl-smi"&gt;load&lt;/span&gt;).&lt;span class="pl-c1"&gt;Load&lt;/span&gt;(d_in + block_offset, thread_keys);
     &lt;span class="pl-c1"&gt;__syncthreads&lt;/span&gt;();

     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Collectively sort the keys&lt;/span&gt;
     &lt;span class="pl-c1"&gt;BlockRadixSort&lt;/span&gt;(temp_storage.&lt;span class="pl-smi"&gt;sort&lt;/span&gt;).&lt;span class="pl-c1"&gt;Sort&lt;/span&gt;(thread_keys);
     &lt;span class="pl-c1"&gt;__syncthreads&lt;/span&gt;();

     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; Store the sorted segment &lt;/span&gt;
     &lt;span class="pl-c1"&gt;BlockStore&lt;/span&gt;(temp_storage.&lt;span class="pl-smi"&gt;store&lt;/span&gt;).&lt;span class="pl-c1"&gt;Store&lt;/span&gt;(d_out + block_offset, thread_keys);
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each thread block uses cub::BlockRadixSort to collectively sort
its own input segment.  The class is specialized by the
data type being sorted, by the number of threads per block, by the number of
keys per thread, and implicitly by the targeted compilation architecture.&lt;/p&gt;
&lt;p&gt;The cub::BlockLoad and cub::BlockStore classes are similarly specialized.&lt;br&gt;
Furthermore, to provide coalesced accesses to device memory, these primitives are
configured to access memory using a striped access pattern (where consecutive threads
simultaneously access consecutive items) and then &lt;em&gt;transpose&lt;/em&gt; the keys into
a &lt;a href="index.html#sec4sec3"&gt;&lt;em&gt;blocked arrangement&lt;/em&gt;&lt;/a&gt; of elements across threads.&lt;/p&gt;
&lt;p&gt;Once specialized, these classes expose opaque \p TempStorage member types.&lt;br&gt;
The thread block uses these storage types to statically allocate the union of
shared memory needed by the thread block.  (Alternatively these storage types
could be aliased to global memory allocations).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-stable-releases" class="anchor" aria-hidden="true" href="#stable-releases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stable Releases&lt;/h3&gt;
&lt;p&gt;CUB releases are labeled using version identifiers having three fields:
&lt;em&gt;epoch.feature.update&lt;/em&gt;.  The &lt;em&gt;epoch&lt;/em&gt; field corresponds to support for
a major change in the CUDA programming model.  The &lt;em&gt;feature&lt;/em&gt; field
corresponds to a stable set of features, functionality, and interface.  The
&lt;em&gt;update&lt;/em&gt; field corresponds to a bug-fix or performance update for that
feature set.  At the moment, we do not publicly provide non-stable releases
such as development snapshots, beta releases or rolling releases.  (Feel free
to contact us if you would like such things.)  See the
&lt;a href="http://nvlabs.github.com/cub"&gt;CUB Project Website&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h3&gt;
&lt;p&gt;CUB is developed as an open-source project by &lt;a href="http://research.nvidia.com" rel="nofollow"&gt;NVIDIA Research&lt;/a&gt;.  The primary contributor is &lt;a href="http://github.com/dumerrill"&gt;Duane Merrill&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-open-source-license" class="anchor" aria-hidden="true" href="#open-source-license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Open Source License&lt;/h3&gt;
&lt;p&gt;CUB is available under the "New BSD" open-source license:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Copyright (c) 2010-2011, Duane Merrill.  All rights reserved.
Copyright (c) 2011-2018, NVIDIA CORPORATION.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   *  Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   *  Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   *  Neither the name of the NVIDIA CORPORATION nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>NVlabs</author><guid isPermaLink="false">https://github.com/NVlabs/cub</guid><pubDate>Tue, 07 Jan 2020 00:03:00 GMT</pubDate></item></channel></rss>