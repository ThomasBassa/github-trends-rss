<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Cuda, Today</title><link>https://github.com/trending/cuda?since=daily</link><description>The top repositories on GitHub for cuda, measured daily</description><pubDate>Thu, 30 Jan 2020 01:14:07 GMT</pubDate><lastBuildDate>Thu, 30 Jan 2020 01:14:07 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>clara-genomics/ClaraGenomicsAnalysis #1 in Cuda, Today</title><link>https://github.com/clara-genomics/ClaraGenomicsAnalysis</link><description>&lt;p&gt;&lt;i&gt;SDK for GPU accelerated genome assembly and analysis&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-clara-genomics-analysis" class="anchor" aria-hidden="true" href="#clara-genomics-analysis"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clara Genomics Analysis&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;Clara Genomics Analysis is a GPU-accelerated library for biological sequence analysis. This section provides a brief overview of the different components of ClaraGenomicsAnalysis.
For more detailed API documentation please refer to the &lt;a href="#enable-doc-generation"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cudapoa" class="anchor" aria-hidden="true" href="#cudapoa"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cudapoa&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;cudapoa&lt;/code&gt; package provides a GPU-accelerated implementation of the &lt;a href="https://simpsonlab.github.io/2015/05/01/understanding-poa/" rel="nofollow"&gt;Partial Order Alignment&lt;/a&gt;
algorithm. It is heavily influenced by &lt;a href="https://github.com/rvaser/spoa"&gt;SPOA&lt;/a&gt; and in many cases can be considered a GPU-accelerated replacement. Features include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generation of consensus sequences&lt;/li&gt;
&lt;li&gt;Generation of multi-sequence alignments (MSAs)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-cudaaligner" class="anchor" aria-hidden="true" href="#cudaaligner"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cudaaligner&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;cudaaligner&lt;/code&gt; package provides GPU-accelerated global alignment.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cudamapper" class="anchor" aria-hidden="true" href="#cudamapper"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cudamapper&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; cudamapper is still in pre-alpha stage and should be considered experimental.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cudamapper&lt;/code&gt; package provides minimizer-based GPU-accelerated approximate mapping. &lt;code&gt;cudamapper&lt;/code&gt; outputs mappings in
the PAF format and is currently optimised for all-vs-all long read (ONT, Pacific Biosciences) sequences.&lt;/p&gt;
&lt;p&gt;To run all-vs all overlaps use the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cudamapper in.fasta in.fasta&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A query fasta can be mapped to a reference as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cudamapper query.fasta target.fasta&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-cudamapper-usage-information" class="anchor" aria-hidden="true" href="#cudamapper-usage-information"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cudamapper usage information&lt;/h4&gt;
&lt;p&gt;To access more information about running cudamapper, run &lt;code&gt;cudamapper --help&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-clone-clara-genomics-analysis" class="anchor" aria-hidden="true" href="#clone-clara-genomics-analysis"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clone Clara Genomics Analysis&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-latest-released-version" class="anchor" aria-hidden="true" href="#latest-released-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Latest released version&lt;/h3&gt;
&lt;p&gt;This will clone the repo to the &lt;code&gt;master&lt;/code&gt; branch, which contains code for latest released version
and hot-fixes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone --recursive -b master git@github.com:clara-genomics/ClaraGenomicsAnalysis.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-latest-development-version" class="anchor" aria-hidden="true" href="#latest-development-version"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Latest development version&lt;/h3&gt;
&lt;p&gt;This will clone the repo to the default branch, which is set to be the latest development branch.
This branch is subject to change frequently as features and bug fixes are pushed.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone --recursive git@github.com:clara-genomics/ClaraGenomicsAnalysis.git&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-system-requirements" class="anchor" aria-hidden="true" href="#system-requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;System Requirements&lt;/h2&gt;
&lt;p&gt;Minimum requirements -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ubuntu 16.04 or Ubuntu 18.04&lt;/li&gt;
&lt;li&gt;CUDA 9.0+ (official instructions for installing CUDA are available &lt;a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html" rel="nofollow"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc/g++ 5.4.0+&lt;/li&gt;
&lt;li&gt;Python 3.6.7+&lt;/li&gt;
&lt;li&gt;htslib 1.9+&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-clara-genomics-analysis-setup" class="anchor" aria-hidden="true" href="#clara-genomics-analysis-setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clara Genomics Analysis Setup&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-build" class="anchor" aria-hidden="true" href="#build"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build&lt;/h3&gt;
&lt;p&gt;To build Clara Genomics Analysis -&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mkdir build
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install
make -j install&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h3&gt;
&lt;p&gt;To install the SDK -&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make install&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-package-generation" class="anchor" aria-hidden="true" href="#package-generation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Package generation&lt;/h3&gt;
&lt;p&gt;Package generation puts the libraries, headers and binaries built by the &lt;code&gt;make&lt;/code&gt; command above
into a &lt;code&gt;.deb&lt;/code&gt;/&lt;code&gt;.rpm&lt;/code&gt; for portability and easy installation. The package generation itself doesn't
guarantee any cross-platform compatibility.&lt;/p&gt;
&lt;p&gt;It is recommended that a separate build and packaging be performed for each distribution and
CUDA version that needs to be supported.&lt;/p&gt;
&lt;p&gt;The type of package (deb vs rpm) is determined automatically based on the platform the code
is being run on. To generate a package for the SDK -&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make package&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-enable-unit-tests" class="anchor" aria-hidden="true" href="#enable-unit-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enable Unit Tests&lt;/h2&gt;
&lt;p&gt;To enable unit tests, add &lt;code&gt;-Dcga_enable_tests=ON&lt;/code&gt; to the &lt;code&gt;cmake&lt;/code&gt; command in the build step.&lt;/p&gt;
&lt;p&gt;This builds GTest based unit tests for all applicable modules, and installs them under
&lt;code&gt;${CMAKE_INSTALL_PREFIX}/tests&lt;/code&gt;. These tests are standalone binaries and can be executed
directly.
e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd $INSTALL_DIR
./tests/cudapoatests
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-enable-benchmarks" class="anchor" aria-hidden="true" href="#enable-benchmarks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enable Benchmarks&lt;/h2&gt;
&lt;p&gt;To enable benchmarks, add &lt;code&gt;-Dcga_enable_benchmarks=ON&lt;/code&gt; to the &lt;code&gt;cmake&lt;/code&gt; command in the build step.&lt;/p&gt;
&lt;p&gt;This builds Google Benchmark based microbenchmarks for applicable modules. The built benchmarks
are installed under &lt;code&gt;${CMAKE_INSTALL_PREFIX}/benchmarks/&amp;lt;module&amp;gt;&lt;/code&gt; and can be run directly.&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#INSTALL_DIR/benchmarks/cudapoa/multibatch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A description of each of the benchmarks is present in a README under the module's benchmark folder.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-enable-doc-generation" class="anchor" aria-hidden="true" href="#enable-doc-generation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enable Doc Generation&lt;/h2&gt;
&lt;p&gt;To enable document generation for Clara Genomics Analysis, please install &lt;code&gt;Doxygen&lt;/code&gt; on your system.
Once&lt;code&gt;Doxygen&lt;/code&gt; has been installed, run the following to build documents.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make docs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docs are also generated as part of the default &lt;code&gt;all&lt;/code&gt; target when &lt;code&gt;Doxygen&lt;/code&gt; is available on the system.&lt;/p&gt;
&lt;p&gt;To disable documentation generation add &lt;code&gt;-Dcga_generate_docs=OFF&lt;/code&gt; to the &lt;code&gt;cmake&lt;/code&gt; command in the &lt;a href="#build"&gt;build step&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-code-formatting" class="anchor" aria-hidden="true" href="#code-formatting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code Formatting&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-c--cuda" class="anchor" aria-hidden="true" href="#c--cuda"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C++ / CUDA&lt;/h3&gt;
&lt;p&gt;Clara Genomics Analysis makes use of &lt;code&gt;clang-format&lt;/code&gt; to format it's source and header files. To make use of
auto-formatting, &lt;code&gt;clang-format&lt;/code&gt; would have to be installed from the LLVM package (for latest builds,
best to refer to &lt;a href="http://releases.llvm.org/download.html" rel="nofollow"&gt;http://releases.llvm.org/download.html&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Once &lt;code&gt;clang-format&lt;/code&gt; has been installed, make sure the binary is in your path.&lt;/p&gt;
&lt;p&gt;To add a folder to the auto-formatting list, use the macro &lt;code&gt;cga_enable_auto_formatting(FOLDER)&lt;/code&gt;. This
will add all cpp source/header files to the formatting list.&lt;/p&gt;
&lt;p&gt;To auto-format, run the following in your build directory.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make format&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To check if files are correct formatted, run the following in your build directory.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make check-format&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-python" class="anchor" aria-hidden="true" href="#python"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python&lt;/h3&gt;
&lt;p&gt;Clara Genomics Analysis follows the PEP-8 style guidelines for all its Python code. The automated
CI system for Clara Genomics Analysis run &lt;code&gt;flake8&lt;/code&gt; to check the style.&lt;/p&gt;
&lt;p&gt;To run style check manually, simply run the following from the top level folder.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install -r ci/checks/python-style-requirements.txt
./pyclaragenomics/style_check
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-running-ci-tests-locally" class="anchor" aria-hidden="true" href="#running-ci-tests-locally"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running CI Tests Locally&lt;/h2&gt;
&lt;p&gt;Please note, your git repository will be mounted to the container, any untracked files will be removed from it.
Before executing the CI locally, stash or add them to the index.&lt;/p&gt;
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;docker (&lt;a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" rel="nofollow"&gt;https://docs.docker.com/install/linux/docker-ce/ubuntu/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;nvidia-docker (&lt;a href="https://github.com/NVIDIA/nvidia-docker"&gt;https://github.com/NVIDIA/nvidia-docker&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;nvidia-container-runtime (&lt;a href="https://github.com/NVIDIA/nvidia-container-runtime"&gt;https://github.com/NVIDIA/nvidia-container-runtime&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Run the following command to execute the CI build steps inside a container locally:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;bash ci/local/build.sh -r &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;ClaraGenomicsAnalysis repo path&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ci/local/build.sh script was adapted from &lt;a href="https://github.com/rapidsai/cudf/tree/branch-0.11/ci/local"&gt;rapidsai/cudf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The default docker image is &lt;strong&gt;clara-genomics-base:cuda10.0-ubuntu16.04-gcc5-py3.7&lt;/strong&gt;.
Other images from &lt;a href="https://hub.docker.com/r/gpuci/clara-genomics-base/tags" rel="nofollow"&gt;gpuci/clara-genomics-base&lt;/a&gt; repository can be used instead, by using -i argument&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;bash ci/local/build.sh -r &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;ClaraGenomicsAnalysis repo path&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; -i gpuci/clara-genomics-base:cuda10.0-ubuntu18.04-gcc7-py3.6&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>clara-genomics</author><guid isPermaLink="false">https://github.com/clara-genomics/ClaraGenomicsAnalysis</guid><pubDate>Thu, 30 Jan 2020 00:01:00 GMT</pubDate></item><item><title>rapidsai/cudf #2 in Cuda, Today</title><link>https://github.com/rapidsai/cudf</link><description>&lt;p&gt;&lt;i&gt;cuDF - GPU DataFrame Library&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-cudf---gpu-dataframes" class="anchor" aria-hidden="true" href="#cudf---gpu-dataframes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;div align="left"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="img/rapids_logo.png"&gt;&lt;img src="img/rapids_logo.png" width="90px" style="max-width:100%;"&gt;&lt;/a&gt; cuDF - GPU DataFrames&lt;/div&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gpuci.gpuopenanalytics.com/job/gpuCI/job/cudf/job/branches/job/cudf-gpu-branch-0.12/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/82f403128eba7da948279ac3e7a13dd18041c401/68747470733a2f2f67707563692e6770756f70656e616e616c79746963732e636f6d2f6275696c645374617475732f69636f6e3f6a6f623d6770754349253246637564662532466272616e63686573253246637564662d6770752d6272616e63682d302e3132" alt="Build Status" data-canonical-src="https://gpuci.gpuopenanalytics.com/buildStatus/icon?job=gpuCI%2Fcudf%2Fbranches%2Fcudf-gpu-branch-0.12" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; For the latest stable &lt;a href="https://github.com/rapidsai/cudf/blob/master/README.md"&gt;README.md&lt;/a&gt; ensure you are on the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;Built based on the &lt;a href="http://arrow.apache.org/" rel="nofollow"&gt;Apache Arrow&lt;/a&gt; columnar memory format, cuDF is a GPU DataFrame library for loading, joining, aggregating, filtering, and otherwise manipulating data.&lt;/p&gt;
&lt;p&gt;cuDF provides a pandas-like API that will be familiar to data engineers &amp;amp; data scientists, so they can use it to easily accelerate their workflows without going into the details of CUDA programming.&lt;/p&gt;
&lt;p&gt;For example, the following snippet downloads a CSV, then uses the GPU to parse it into rows and columns and run calculations:&lt;/p&gt;
&lt;div class="highlight highlight-source-python"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; cudf, io, requests
&lt;span class="pl-k"&gt;from&lt;/span&gt; io &lt;span class="pl-k"&gt;import&lt;/span&gt; StringIO

url &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/plotly/datasets/raw/master/tips.csv&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
content &lt;span class="pl-k"&gt;=&lt;/span&gt; requests.get(url).content.decode(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;utf-8&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)

tips_df &lt;span class="pl-k"&gt;=&lt;/span&gt; cudf.read_csv(StringIO(content))
tips_df[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;tip_percentage&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; tips_df[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;tip&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;/&lt;/span&gt; tips_df[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;total_bill&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; display average tip by dining party size&lt;/span&gt;
&lt;span class="pl-c1"&gt;print&lt;/span&gt;(tips_df.groupby(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;size&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;).tip_percentage.mean())&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;size
1    21.729201548727808
2    16.571919173482897
3    15.215685473711837
4    14.594900639351332
5    14.149548965142023
6    15.622920072028379
Name: tip_percentage, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For additional examples, browse our complete &lt;a href="https://docs.rapids.ai/api/cudf/stable/" rel="nofollow"&gt;API documentation&lt;/a&gt;, or check out our more detailed &lt;a href="https://github.com/rapidsai/notebooks-contrib"&gt;notebooks&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
&lt;p&gt;Please see the &lt;a href="https://hub.docker.com/r/rapidsai/rapidsai/" rel="nofollow"&gt;Demo Docker Repository&lt;/a&gt;, choosing a tag based on the NVIDIA CUDA version you’re running. This provides a ready to run Docker container with example notebooks and data, showcasing how you can utilize cuDF.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-conda" class="anchor" aria-hidden="true" href="#conda"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conda&lt;/h3&gt;
&lt;p&gt;cuDF can be installed with conda (&lt;a href="https://conda.io/miniconda.html" rel="nofollow"&gt;miniconda&lt;/a&gt;, or the full &lt;a href="https://www.anaconda.com/download" rel="nofollow"&gt;Anaconda distribution&lt;/a&gt;) from the &lt;code&gt;rapidsai&lt;/code&gt; channel:&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;cudf version == 0.10&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; for CUDA 9.2&lt;/span&gt;
conda install -c rapidsai -c nvidia -c numba -c conda-forge \
    cudf=0.10 python=3.6 cudatoolkit=9.2

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or, for CUDA 10.0&lt;/span&gt;
conda install -c rapidsai -c nvidia -c numba -c conda-forge \
    cudf=0.10 python=3.6 cudatoolkit=10.0

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or, for CUDA 10.1&lt;/span&gt;
conda install -c rapidsai -c nvidia -c numba -c conda-forge \
    cudf=0.10 python=3.6 cudatoolkit=10.1&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the nightly version of &lt;code&gt;cudf&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; for CUDA 9.2&lt;/span&gt;
conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \
    cudf python=3.6 cudatoolkit=9.2

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or, for CUDA 10.0&lt;/span&gt;
conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \
    cudf python=3.6 cudatoolkit=10.0&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: cuDF is supported only on Linux, and with Python versions 3.6 or 3.7.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://rapids.ai/start.html" rel="nofollow"&gt;Get RAPIDS version picker&lt;/a&gt; for more OS and version info.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-buildinstall-from-source" class="anchor" aria-hidden="true" href="#buildinstall-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build/Install from Source&lt;/h2&gt;
&lt;p&gt;See build &lt;a href="CONTRIBUTING.md#setting-up-your-build-environment"&gt;instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Please see our &lt;a href="CONTRIBUTING.md"&gt;guide for contributing to cuDF&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contact" class="anchor" aria-hidden="true" href="#contact"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contact&lt;/h2&gt;
&lt;p&gt;Find out more details on the &lt;a href="https://rapids.ai/community.html" rel="nofollow"&gt;RAPIDS site&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content--open-gpu-data-science" class="anchor" aria-hidden="true" href="#-open-gpu-data-science"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;div align="left"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="img/rapids_logo.png"&gt;&lt;img src="img/rapids_logo.png" width="265px" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/div&gt; Open GPU Data Science&lt;/h2&gt;
&lt;p&gt;The RAPIDS suite of open source software libraries aim to enable execution of end-to-end data science and analytics pipelines entirely on GPUs. It relies on NVIDIA® CUDA® primitives for low-level compute optimization, but exposing that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.&lt;/p&gt;
&lt;p align="center"&gt;&lt;a target="_blank" rel="noopener noreferrer" href="img/rapids_arrow.png"&gt;&lt;img src="img/rapids_arrow.png" width="80%" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-apache-arrow-on-gpu" class="anchor" aria-hidden="true" href="#apache-arrow-on-gpu"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Apache Arrow on GPU&lt;/h3&gt;
&lt;p&gt;The GPU version of &lt;a href="https://arrow.apache.org/" rel="nofollow"&gt;Apache Arrow&lt;/a&gt; is a common API that enables efficient interchange of tabular data between processes running on the GPU. End-to-end computation on the GPU avoids unnecessary copying and converting of data off the GPU, reducing compute time and cost for high-performance analytics common in artificial intelligence workloads. As the name implies, cuDF uses the Apache Arrow columnar data format on the GPU. Currently, a subset of the features in Apache Arrow are supported.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>rapidsai</author><guid isPermaLink="false">https://github.com/rapidsai/cudf</guid><pubDate>Thu, 30 Jan 2020 00:02:00 GMT</pubDate></item></channel></rss>