<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Haskell, Today</title><link>https://github.com/trending/haskell?since=daily</link><description>The top repositories on GitHub for haskell, measured daily</description><pubDate>Thu, 14 Nov 2019 01:06:12 GMT</pubDate><lastBuildDate>Thu, 14 Nov 2019 01:06:12 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>ChrisPenner/mad-props #1 in Haskell, Today</title><link>https://github.com/ChrisPenner/mad-props</link><description>&lt;p&gt;&lt;i&gt;Forward-propagating Constraint Solver monad. Good for solving Sudoku, N-Queens, etc.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-mad-props" class="anchor" aria-hidden="true" href="#mad-props"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mad Props&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://hackage.haskell.org/package/mad-props" rel="nofollow"&gt;Hackage &amp;amp; Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mad props is a simple generalized propagator framework. This means it's pretty good at expressing and solving generalized &lt;a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem" rel="nofollow"&gt;constraint satisfaction problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;mad-props&lt;/code&gt; doesn't use lattice filters for propagation, nor does it yet support dynamic choice of propagator elements (though you can specify choice ordering through the container type you choose). Those things are more a bit more complicated.&lt;/p&gt;
&lt;p&gt;There are many other constraint solvers out there, probably most of them are faster than this one, but for those who like the comfort and type-safety of working in Haskell, I've gotcha covered.&lt;/p&gt;
&lt;p&gt;With other constraint solvers it can be a bit of a pain to express your problem; you either need to compress your problem down to relations between boolean variables, or try to cram your problem into their particular format. Mad Props uses a Monadic DSL for expressing the variables in your problem and the relationships between them, meaning you can use normal Haskell to express your problem.&lt;/p&gt;
&lt;p&gt;It's still unfinished and undergoing rapid iteration and experimentation, so I wouldn't base any major projects on it yet.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-example-sudoku" class="anchor" aria-hidden="true" href="#example-sudoku"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: Sudoku&lt;/h2&gt;
&lt;p&gt;We'll write a quick Sudoku solver using Propagators.&lt;/p&gt;
&lt;p&gt;Here's a problem which Telegraph has claimed to be &lt;a href="https://www.telegraph.co.uk/news/science/science-news/9359579/Worlds-hardest-sudoku-can-you-crack-it.html" rel="nofollow"&gt;"the world's hardest Sudoku"&lt;/a&gt;. Let's see if we can crack it.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;hardestProblem&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;]
hardestProblem &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;tail&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;lines&lt;/span&gt; &lt;span class="pl-k"&gt;$&lt;/span&gt; [&lt;span class="pl-ent"&gt;r&lt;/span&gt;|
8........
..36.....
.7..9.2..
.5...7...
....457..
...1...3.
..1....68
..85...1.
.9....4..|]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sudoku is a constraint satisfaction problem, the "constraints" are that each of the numbers 1-9 are represented in each row, column and 3x3 grid.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;txtToBoard&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [[&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]]
txtToBoard &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-c1"&gt;fmap&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;fmap&lt;/span&gt;) possibilities
  &lt;span class="pl-k"&gt;where&lt;/span&gt;
    &lt;span class="pl-en"&gt;possibilities&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Char&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;
    possibilities &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;S.&lt;/span&gt;fromList [&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;&lt;span class="pl-c1"&gt;9&lt;/span&gt;]
    possibilities a &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;S.&lt;/span&gt;fromList [&lt;span class="pl-c1"&gt;read&lt;/span&gt; [a]]

&lt;span class="pl-en"&gt;hardestBoard&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]]
hardestBoard &lt;span class="pl-k"&gt;=&lt;/span&gt; txtToBoard hardestProblem&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We've now got our problem as a list of rows of 'cells', each cell is a set containing the possible numbers for that cell.&lt;/p&gt;
&lt;p&gt;We need to express the constraint that each 'region' (i.e. row, column and 'block') can only have one of each number in them. We'll write some helper function for collecting the regions of the puzzle:&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;rowsOf&lt;/span&gt;, &lt;span class="pl-en"&gt;colsOf&lt;/span&gt;, &lt;span class="pl-en"&gt;blocksOf&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-smi"&gt;a&lt;/span&gt;]] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [[&lt;span class="pl-smi"&gt;a&lt;/span&gt;]]
rowsOf &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;id&lt;/span&gt;
colsOf &lt;span class="pl-k"&gt;=&lt;/span&gt; transpose
blocksOf &lt;span class="pl-k"&gt;=&lt;/span&gt; chunksOf &lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;fmap&lt;/span&gt; transpose &lt;span class="pl-k"&gt;.&lt;/span&gt; chunksOf &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; transpose&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can worry about telling the system about our constraints.&lt;/p&gt;
&lt;p&gt;We can now introduce the constraints of Sudoku as relations between cells. The cells in each region are related to one other in the sense that &lt;strong&gt;their values must be disjoint&lt;/strong&gt;. No two cells in each quadrant can have the same value.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Given a board of 'PVar's, link the appropriate cells with 'disjoint' constraints&lt;/span&gt;
&lt;span class="pl-en"&gt;linkBoardCells&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Prop&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;
linkBoardCells xs &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; rowsOf xs
    &lt;span class="pl-k"&gt;let&lt;/span&gt; cols &lt;span class="pl-k"&gt;=&lt;/span&gt; colsOf xs
    &lt;span class="pl-k"&gt;let&lt;/span&gt; blocks &lt;span class="pl-k"&gt;=&lt;/span&gt; blocksOf xs
    for_ (rows &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; cols &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; blocks) &lt;span class="pl-k"&gt;$&lt;/span&gt; &lt;span class="pl-k"&gt;\&lt;/span&gt;region &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; uniquePairings &lt;span class="pl-k"&gt;=&lt;/span&gt; [(a, b) &lt;span class="pl-k"&gt;|&lt;/span&gt; a &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; region, b &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; region, a &lt;span class="pl-k"&gt;/=&lt;/span&gt; b]
        for_ uniquePairings &lt;span class="pl-k"&gt;$&lt;/span&gt; &lt;span class="pl-k"&gt;\&lt;/span&gt;(a, b) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; constrain a b disj
  &lt;span class="pl-k"&gt;where&lt;/span&gt;
    &lt;span class="pl-en"&gt;disj&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-e"&gt;Ord&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;
    disj x xs &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;S.&lt;/span&gt;delete x xs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function introduces a few new types, namely &lt;code&gt;Prop&lt;/code&gt; and &lt;code&gt;Pvar&lt;/code&gt;. We'll show how &lt;code&gt;PVar&lt;/code&gt;s are actually created soon, but the gist of this function is that we map over each 'region' and relate every variable to every other one.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prop&lt;/code&gt; is a monad which allows us to create and link &lt;code&gt;PVar&lt;/code&gt;s together. It keeps track of the constraints on all of our variables and will eventually build a graph that the library uses to solve the problem.&lt;/p&gt;
&lt;p&gt;We call the &lt;code&gt;constrain&lt;/code&gt; function to state that no cell pairing within a region should have the same number.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;constrain&lt;/code&gt; accepts two &lt;code&gt;PVar&lt;/code&gt;s and a function, the function takes a 'choice' from the first variable and uses it to constrain the 'options' from the second. In this case, if the first variable is fixed to a specific value we 'propagate' by removing all matching values from the other variable's pool, you can see the implementation of the &lt;code&gt;disj&lt;/code&gt; helper above. The information about this constraint is stored inside the &lt;code&gt;Prop&lt;/code&gt; monad.&lt;/p&gt;
&lt;p&gt;Set disjunction is symmetric, propagators in general are not, so we'll need to 'constrain' in each direction. Luckily our loop will process each pair twice, so we'll run this once in each direction.&lt;/p&gt;
&lt;p&gt;Here's the real signature in case you're curious:&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;constrain&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-e"&gt;Monad&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;m&lt;/span&gt;
          &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;
          &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-smi"&gt;g&lt;/span&gt; &lt;span class="pl-smi"&gt;b&lt;/span&gt;
          &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;g&lt;/span&gt; &lt;span class="pl-smi"&gt;b&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;g&lt;/span&gt; &lt;span class="pl-smi"&gt;b&lt;/span&gt;)
          &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;PropT&lt;/span&gt; &lt;span class="pl-smi"&gt;m&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We're almost there; we've got a way to constrain a board of &lt;code&gt;PVar&lt;/code&gt;s, but we need to make the board of &lt;code&gt;PVar&lt;/code&gt;s somehow!&lt;/p&gt;
&lt;p&gt;This is pretty easy; we can make a &lt;code&gt;PVar&lt;/code&gt; by calling &lt;code&gt;newPVar&lt;/code&gt; and passing it a container full of possible options the variable could be. We'll convert our &lt;code&gt;[[S.Set Int]]&lt;/code&gt; into &lt;code&gt;[[PVar S.Set Int]]&lt;/code&gt; by traversing the structure using &lt;code&gt;newPVar&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Given a sudoku board, apply the necessary constraints and return a result board of 'PVar's.&lt;/span&gt;
&lt;span class="pl-en"&gt;constrainBoard&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]]&lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Prop&lt;/span&gt; [[&lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]]
constrainBoard board &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    vars &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; (&lt;span class="pl-c1"&gt;traverse&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;traverse&lt;/span&gt;) newPVar board
    linkBoardCells vars
    &lt;span class="pl-c1"&gt;return&lt;/span&gt; vars&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the signature of &lt;code&gt;newPVar&lt;/code&gt; in case you're curious:&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;newPVar&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; (&lt;span class="pl-en"&gt;&lt;span class="pl-e"&gt;Monad&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;m&lt;/span&gt;, &lt;span class="pl-en"&gt;&lt;span class="pl-e"&gt;Foldable&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt;, &lt;span class="pl-en"&gt;Typeable&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt;, &lt;span class="pl-en"&gt;Typeable&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;) 
        &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; 
        &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;PropT&lt;/span&gt; &lt;span class="pl-smi"&gt;m&lt;/span&gt; (&lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we've got our problem set up we need to execute it!&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Solve a given sudoku board and print it to screen&lt;/span&gt;
&lt;span class="pl-en"&gt;solvePuzzle&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;IO&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;
solvePuzzle puz &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; We know it will succeed, but in general you should handle failure safely&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-ent"&gt;Just&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; solve (&lt;span class="pl-c1"&gt;fmap&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;fmap&lt;/span&gt;) &lt;span class="pl-k"&gt;$&lt;/span&gt; constrainBoard puz
    &lt;span class="pl-c1"&gt;putStrLn&lt;/span&gt; &lt;span class="pl-k"&gt;$&lt;/span&gt; boardToText results&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;solvePuzzle&lt;/code&gt; will print a solution for any valid puzzle you pass it. It accepts a puzzle, builds and constrains the cells, then calls &lt;code&gt;solve&lt;/code&gt; which will find a valid solution for the constraints we provided if possible. We pass it a 'finalizer' function which accepts a function for resolving any &lt;code&gt;PVar&lt;/code&gt; to its 'solved' result. In our case we just use &lt;code&gt;fmap . fmap&lt;/code&gt; to map the resolver over every PVar in the board returned from &lt;code&gt;constrainBoard&lt;/code&gt;. If all went well we'll have the solution of each cell! Then we'll print it out.&lt;/p&gt;
&lt;p&gt;Unfortunately &lt;code&gt;solve&lt;/code&gt; has a bit of a complicated signature, there are simpler versions, but unfortunately they're not possible until GHC supports proper ImpredicativeTypes.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;solve&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-k"&gt;forall&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-smi"&gt;r&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; A finalizer which accepts a PVar 'resolver' as an argument&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; alongside the result of the Prop setup, and returns some result&lt;/span&gt;
        ((&lt;span class="pl-k"&gt;forall&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;x&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;x&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;x&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;r&lt;/span&gt;)
      &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Prop&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;
      &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Maybe&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;r&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can plug in our hardest sudoku and after a second or two we'll print out the answer!&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; solvePuzzle hardestBoard
&lt;span class="pl-c1"&gt;812753649&lt;/span&gt;
&lt;span class="pl-c1"&gt;943682175&lt;/span&gt;
&lt;span class="pl-c1"&gt;675491283&lt;/span&gt;
&lt;span class="pl-c1"&gt;154237896&lt;/span&gt;
&lt;span class="pl-c1"&gt;369845721&lt;/span&gt;
&lt;span class="pl-c1"&gt;287169534&lt;/span&gt;
&lt;span class="pl-c1"&gt;521974368&lt;/span&gt;
&lt;span class="pl-c1"&gt;438526917&lt;/span&gt;
&lt;span class="pl-c1"&gt;796318452&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can double check it for me, but I'm pretty sure that's a valid solution!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-example-n-queens" class="anchor" aria-hidden="true" href="#example-n-queens"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: N-Queens&lt;/h2&gt;
&lt;p&gt;Just for fun, here's the N-Queens problem&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;{-# &lt;span class="pl-k"&gt;LANGUAGE&lt;/span&gt; ScopedTypeVariables #-}
{-# &lt;span class="pl-k"&gt;LANGUAGE&lt;/span&gt; ViewPatterns #-}
&lt;span class="pl-k"&gt;module&lt;/span&gt; &lt;span class="pl-c1"&gt;Examples.NQueens&lt;/span&gt; &lt;span class="pl-k"&gt;where&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-k"&gt;qualified&lt;/span&gt; &lt;span class="pl-c1"&gt;Data.Set&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;S&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Props&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Data.Foldable&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Data.List&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; A board coordinate&lt;/span&gt;
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;Coord&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Given a number of queens, constrain them to not overlap&lt;/span&gt;
&lt;span class="pl-en"&gt;constrainQueens&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Prop&lt;/span&gt; [&lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;Coord&lt;/span&gt;]
constrainQueens n &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; All possible grid locations&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; locations &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;S.&lt;/span&gt;fromList [(x, y) &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; [&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;n &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;], y &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; [&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;n &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;]]
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Each queen could initially be placed anywhere&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; queens &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;replicate&lt;/span&gt; n locations
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Make a PVar for each queen's location&lt;/span&gt;
    queenVars &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;traverse&lt;/span&gt; newPVar queens
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Each pair of queens must not overlap&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; queenPairs &lt;span class="pl-k"&gt;=&lt;/span&gt; [(a, b) &lt;span class="pl-k"&gt;|&lt;/span&gt; a &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; queenVars, b &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; queenVars, a &lt;span class="pl-k"&gt;/=&lt;/span&gt; b]
    for_ queenPairs &lt;span class="pl-k"&gt;$&lt;/span&gt; &lt;span class="pl-k"&gt;\&lt;/span&gt;(a, b) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; require (&lt;span class="pl-k"&gt;\&lt;/span&gt;x y &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;$&lt;/span&gt; overlapping x y) a b
    &lt;span class="pl-c1"&gt;return&lt;/span&gt; queenVars

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Check whether two queens overlap with each other (i.e. could kill each other)&lt;/span&gt;
&lt;span class="pl-en"&gt;overlapping&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;Coord&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Coord&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Bool&lt;/span&gt;&lt;/span&gt;
overlapping (x, y) (x', y')
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Same Row&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;==&lt;/span&gt; x' &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Same Column&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; y &lt;span class="pl-k"&gt;==&lt;/span&gt; y' &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Same Diagonal 1&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;-&lt;/span&gt; x' &lt;span class="pl-k"&gt;==&lt;/span&gt; y &lt;span class="pl-k"&gt;-&lt;/span&gt; y' &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Same Diagonal 2&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;+&lt;/span&gt; y &lt;span class="pl-k"&gt;==&lt;/span&gt; x' &lt;span class="pl-k"&gt;+&lt;/span&gt; y' &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;otherwise&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;False&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Print an nQueens puzzle to a string.&lt;/span&gt;
&lt;span class="pl-en"&gt;showSolution&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="pl-en"&gt;Coord&lt;/span&gt;] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;
showSolution n (&lt;span class="pl-c1"&gt;S.&lt;/span&gt;fromList &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; qs) &lt;span class="pl-k"&gt;=&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; str &lt;span class="pl-k"&gt;=&lt;/span&gt; toChar &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-k"&gt;`S.member`&lt;/span&gt; qs) &lt;span class="pl-k"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; [(x, y) &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; [&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;n&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;], y &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; [&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;n&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;]]
     &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;unlines&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; chunksOf n &lt;span class="pl-k"&gt;$&lt;/span&gt; str
  &lt;span class="pl-k"&gt;where&lt;/span&gt;
    &lt;span class="pl-en"&gt;toChar&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Bool&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Char&lt;/span&gt;&lt;/span&gt;
    toChar &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Q&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    toChar &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;False&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

    &lt;span class="pl-en"&gt;chunksOf&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="pl-smi"&gt;a&lt;/span&gt;] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [[&lt;span class="pl-smi"&gt;a&lt;/span&gt;]]
    chunksOf n &lt;span class="pl-k"&gt;=&lt;/span&gt; unfoldr go
      &lt;span class="pl-k"&gt;where&lt;/span&gt;
        go &lt;span class="pl-c1"&gt;[]&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;Nothing&lt;/span&gt;
        go xs &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;Just&lt;/span&gt; (&lt;span class="pl-c1"&gt;take&lt;/span&gt; n xs, &lt;span class="pl-c1"&gt;drop&lt;/span&gt; n xs)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Solve and print an N-Queens puzzle&lt;/span&gt;
&lt;span class="pl-en"&gt;nQueens&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;IO&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;
nQueens n &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-ent"&gt;Just&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; solve &lt;span class="pl-c1"&gt;fmap&lt;/span&gt; (constrainQueens n)
    &lt;span class="pl-c1"&gt;putStrLn&lt;/span&gt; &lt;span class="pl-k"&gt;$&lt;/span&gt; showSolution n results

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Solve and print all possible solutions of an N-Queens puzzle&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; This will include duplicates.&lt;/span&gt;
&lt;span class="pl-en"&gt;nQueensAll&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;IO&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;
nQueensAll n &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; solveAll (constrainQueens n)
    traverse_ (&lt;span class="pl-c1"&gt;putStrLn&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; showSolution n) results&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance&lt;/h2&gt;
&lt;p&gt;This is a generalized solution, so performance suffers in relation to a tool built for the job (e.g. It's not as fast as dedicated Sudoku solvers); but it does "pretty well".&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ChrisPenner</author><guid isPermaLink="false">https://github.com/ChrisPenner/mad-props</guid><pubDate>Thu, 14 Nov 2019 00:01:00 GMT</pubDate></item><item><title>jgm/pandoc #2 in Haskell, Today</title><link>https://github.com/jgm/pandoc</link><description>&lt;p&gt;&lt;i&gt;Universal markup converter&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;
&lt;h1&gt;&lt;a id="user-content-pandoc" class="anchor" aria-hidden="true" href="#pandoc"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pandoc&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/jgm/pandoc/releases"&gt;&lt;img src="https://camo.githubusercontent.com/411f0ac7f05102f79a830ffdeb2ba4f087a667e9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6a676d2f70616e646f632e7376673f6c6162656c3d63757272656e742b72656c65617365" alt="github release" data-canonical-src="https://img.shields.io/github/release/jgm/pandoc.svg?label=current+release" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://hackage.haskell.org/package/pandoc" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4d03bb9489bd54187b8486c245dbc084d041e13f/68747470733a2f2f696d672e736869656c64732e696f2f6861636b6167652f762f70616e646f632e7376673f6c6162656c3d6861636b616765" alt="hackage release" data-canonical-src="https://img.shields.io/hackage/v/pandoc.svg?label=hackage" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://brewformulas.org/Pandoc" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/08d2230b9e9e2cbb12ea775d1bac8f50fd4275e8/68747470733a2f2f696d672e736869656c64732e696f2f686f6d65627265772f762f70616e646f632e737667" alt="homebrew" data-canonical-src="https://img.shields.io/homebrew/v/pandoc.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://stackage.org/lts/package/pandoc" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/44b5a4bcb04e663394157a419be74ff590f74ced/687474703a2f2f737461636b6167652e6f72672f7061636b6167652f70616e646f632f62616467652f6c7473" alt="stackage LTS package" data-canonical-src="http://stackage.org/package/pandoc/badge/lts" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://circleci.com/gh/jgm/pandoc" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aedf8f0e0910d305ec01f09e62cdd2932308fc8a/68747470733a2f2f636972636c6563692e636f6d2f67682f6a676d2f70616e646f632e7376673f7374796c653d737667" alt="CircleCI" data-canonical-src="https://circleci.com/gh/jgm/pandoc.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://github.com/jgm/pandoc/actions"&gt;&lt;img src="https://github.com/jgm/pandoc/workflows/CI%20tests/badge.svg" alt="CI tests" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.gnu.org/licenses/gpl.html" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/768ccc754b99092765bcf90953180fa0a2b7f3f0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c76322b2d6c69676874677261792e737667" alt="license" data-canonical-src="https://img.shields.io/badge/license-GPLv2+-lightgray.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://groups.google.com/forum/#!forum/pandoc-discuss" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/065ea70a67e226da3fb10642858cfd74f1a8307e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70616e646f632d646973637573732d7265642e7376673f7374796c653d736f6369616c" alt="pandoc-discuss on google groups" data-canonical-src="https://img.shields.io/badge/pandoc-discuss-red.svg?style=social" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-the-universal-markup-converter" class="anchor" aria-hidden="true" href="#the-universal-markup-converter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The universal markup converter&lt;/h2&gt;
&lt;p&gt;Pandoc is a &lt;a href="http://haskell.org" rel="nofollow"&gt;Haskell&lt;/a&gt; library for converting from
one markup format to another, and a command-line tool that uses this
library. It can convert &lt;em&gt;from&lt;/em&gt;&lt;/p&gt;
&lt;div id="user-content-input-formats"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href="http://commonmark.org" rel="nofollow"&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;creole&lt;/code&gt; (&lt;a href="http://www.wikicreole.org/wiki/Creole1.0" rel="nofollow"&gt;Creole 1.0&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; (&lt;a href="http://docbook.org" rel="nofollow"&gt;DocBook&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href="https://en.wikipedia.org/wiki/Office_Open_XML" rel="nofollow"&gt;Word docx&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href="https://www.dokuwiki.org/dokuwiki" rel="nofollow"&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epub&lt;/code&gt; (&lt;a href="http://idpf.org/epub" rel="nofollow"&gt;EPUB&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fb2&lt;/code&gt;
(&lt;a href="http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1" rel="nofollow"&gt;FictionBook2&lt;/a&gt;
e-book)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href="https://help.github.com/articles/github-flavored-markdown/"&gt;GitHub-Flavored
Markdown&lt;/a&gt;),
or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use
&lt;a href="#markdown-variants"&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions
not supported in &lt;a href="#markdown-variants"&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href="https://www.haskell.org/haddock/doc/html/ch03s08.html" rel="nofollow"&gt;Haddock
markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt; (&lt;a href="http://www.w3.org/html/" rel="nofollow"&gt;HTML&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href="https://nbformat.readthedocs.io/en/latest/" rel="nofollow"&gt;Jupyter
notebook&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (&lt;a href="https://jats.nlm.nih.gov" rel="nofollow"&gt;JATS&lt;/a&gt; XML)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href="http://latex-project.org" rel="nofollow"&gt;LaTeX&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href="#pandocs-markdown"&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt;
(&lt;a href="http://fletcherpenney.net/multimarkdown/" rel="nofollow"&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href="https://michelf.ca/projects/php-markdown/extra/" rel="nofollow"&gt;PHP Markdown
Extra&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended
&lt;a href="http://daringfireball.net/projects/markdown/" rel="nofollow"&gt;Markdown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href="https://www.mediawiki.org/wiki/Help:Formatting" rel="nofollow"&gt;MediaWiki
markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href="http://man7.org/linux/man-pages/man7/groff_man.7.html" rel="nofollow"&gt;roff
man&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href="https://amusewiki.org/library/manual" rel="nofollow"&gt;Muse&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href="http://en.wikipedia.org/wiki/OpenDocument" rel="nofollow"&gt;ODT&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href="http://dev.opml.org/spec2.html" rel="nofollow"&gt;OPML&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href="http://orgmode.org" rel="nofollow"&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rst&lt;/code&gt;
(&lt;a href="http://docutils.sourceforge.net/docs/ref/rst/introduction.html" rel="nofollow"&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t2t&lt;/code&gt; (&lt;a href="http://txt2tags.org" rel="nofollow"&gt;txt2tags&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href="http://redcloth.org/textile" rel="nofollow"&gt;Textile&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tikiwiki&lt;/code&gt; (&lt;a href="https://doc.tiki.org/Wiki-Syntax-Text#The_Markup_Language_Wiki-Syntax" rel="nofollow"&gt;TikiWiki
markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twiki&lt;/code&gt; (&lt;a href="http://twiki.org/cgi-bin/view/TWiki/TextFormattingRules" rel="nofollow"&gt;TWiki
markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vimwiki&lt;/code&gt; (&lt;a href="https://vimwiki.github.io" rel="nofollow"&gt;Vimwiki&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;It can convert &lt;em&gt;to&lt;/em&gt;&lt;/p&gt;
&lt;div id="user-content-output-formats"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;asciidoc&lt;/code&gt; (&lt;a href="http://www.methods.co.nz/asciidoc/" rel="nofollow"&gt;AsciiDoc&lt;/a&gt;) or
&lt;code&gt;asciidoctor&lt;/code&gt; (&lt;a href="https://asciidoctor.org/" rel="nofollow"&gt;AsciiDoctor&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beamer&lt;/code&gt; (&lt;a href="https://ctan.org/pkg/beamer" rel="nofollow"&gt;LaTeX beamer&lt;/a&gt; slide show)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href="http://commonmark.org" rel="nofollow"&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context&lt;/code&gt; (&lt;a href="http://www.contextgarden.net/" rel="nofollow"&gt;ConTeXt&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; or &lt;code&gt;docbook4&lt;/code&gt; (&lt;a href="http://docbook.org" rel="nofollow"&gt;DocBook&lt;/a&gt; 4)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docbook5&lt;/code&gt; (DocBook 5)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href="https://en.wikipedia.org/wiki/Office_Open_XML" rel="nofollow"&gt;Word docx&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href="https://www.dokuwiki.org/dokuwiki" rel="nofollow"&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epub&lt;/code&gt; or &lt;code&gt;epub3&lt;/code&gt; (&lt;a href="http://idpf.org/epub" rel="nofollow"&gt;EPUB&lt;/a&gt; v3 book)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epub2&lt;/code&gt; (EPUB v2)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fb2&lt;/code&gt;
(&lt;a href="http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1" rel="nofollow"&gt;FictionBook2&lt;/a&gt;
e-book)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href="https://help.github.com/articles/github-flavored-markdown/"&gt;GitHub-Flavored
Markdown&lt;/a&gt;),
or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use
&lt;a href="#markdown-variants"&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions
not supported in &lt;a href="#markdown-variants"&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href="https://www.haskell.org/haddock/doc/html/ch03s08.html" rel="nofollow"&gt;Haddock
markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt; or &lt;code&gt;html5&lt;/code&gt; (&lt;a href="http://www.w3.org/html/" rel="nofollow"&gt;HTML&lt;/a&gt;,
i.e. &lt;a href="http://www.w3.org/TR/html5/" rel="nofollow"&gt;HTML5&lt;/a&gt;/XHTML &lt;a href="https://www.w3.org/TR/html-polyglot/" rel="nofollow"&gt;polyglot
markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html4&lt;/code&gt; (&lt;a href="http://www.w3.org/TR/xhtml1/" rel="nofollow"&gt;XHTML&lt;/a&gt; 1.0 Transitional)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icml&lt;/code&gt; (&lt;a href="http://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/indesign/sdk/cs6/idml/idml-cookbook.pdf" rel="nofollow"&gt;InDesign
ICML&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href="https://nbformat.readthedocs.io/en/latest/" rel="nofollow"&gt;Jupyter
notebook&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (&lt;a href="https://jats.nlm.nih.gov" rel="nofollow"&gt;JATS&lt;/a&gt; XML)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jira&lt;/code&gt;
(&lt;a href="https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all" rel="nofollow"&gt;Jira&lt;/a&gt;
wiki markup)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href="http://latex-project.org" rel="nofollow"&gt;LaTeX&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href="http://man7.org/linux/man-pages/man7/groff_man.7.html" rel="nofollow"&gt;roff
man&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href="#pandocs-markdown"&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt;
(&lt;a href="http://fletcherpenney.net/multimarkdown/" rel="nofollow"&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href="https://michelf.ca/projects/php-markdown/extra/" rel="nofollow"&gt;PHP Markdown
Extra&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended
&lt;a href="http://daringfireball.net/projects/markdown/" rel="nofollow"&gt;Markdown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href="https://www.mediawiki.org/wiki/Help:Formatting" rel="nofollow"&gt;MediaWiki
markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (&lt;a href="http://man7.org/linux/man-pages/man7/groff_ms.7.html" rel="nofollow"&gt;roff
ms&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href="https://amusewiki.org/library/manual" rel="nofollow"&gt;Muse&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href="http://en.wikipedia.org/wiki/OpenDocument" rel="nofollow"&gt;OpenOffice text
document&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href="http://dev.opml.org/spec2.html" rel="nofollow"&gt;OPML&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opendocument&lt;/code&gt; (&lt;a href="http://opendocument.xml.org" rel="nofollow"&gt;OpenDocument&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href="http://orgmode.org" rel="nofollow"&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plain&lt;/code&gt; (plain text),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pptx&lt;/code&gt;
(&lt;a href="https://en.wikipedia.org/wiki/Microsoft_PowerPoint" rel="nofollow"&gt;PowerPoint&lt;/a&gt;
slide show)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rst&lt;/code&gt;
(&lt;a href="http://docutils.sourceforge.net/docs/ref/rst/introduction.html" rel="nofollow"&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href="http://en.wikipedia.org/wiki/Rich_Text_Format" rel="nofollow"&gt;Rich Text
Format&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texinfo&lt;/code&gt; (&lt;a href="http://www.gnu.org/software/texinfo/" rel="nofollow"&gt;GNU Texinfo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href="http://redcloth.org/textile" rel="nofollow"&gt;Textile&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slideous&lt;/code&gt; (&lt;a href="http://goessner.net/articles/slideous/" rel="nofollow"&gt;Slideous&lt;/a&gt; HTML
and JavaScript slide show)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slidy&lt;/code&gt; (&lt;a href="http://www.w3.org/Talks/Tools/Slidy/" rel="nofollow"&gt;Slidy&lt;/a&gt; HTML and
JavaScript slide show)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dzslides&lt;/code&gt; (&lt;a href="http://paulrouget.com/dzslides/" rel="nofollow"&gt;DZSlides&lt;/a&gt; HTML5 +
JavaScript slide show),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;revealjs&lt;/code&gt; (&lt;a href="http://lab.hakim.se/reveal-js/" rel="nofollow"&gt;reveal.js&lt;/a&gt; HTML5 +
JavaScript slide show)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s5&lt;/code&gt; (&lt;a href="http://meyerweb.com/eric/tools/s5/" rel="nofollow"&gt;S5&lt;/a&gt; HTML and JavaScript
slide show)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tei&lt;/code&gt; (&lt;a href="https://github.com/TEIC/TEI-Simple"&gt;TEI Simple&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xwiki&lt;/code&gt; (&lt;a href="https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiSyntax/" rel="nofollow"&gt;XWiki
markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zimwiki&lt;/code&gt; (&lt;a href="http://zim-wiki.org/manual/Help/Wiki_Syntax.html" rel="nofollow"&gt;ZimWiki
markup&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;the path of a custom lua writer, see &lt;a href="#custom-writers"&gt;Custom
writers&lt;/a&gt; below&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Pandoc can also produce PDF output via LaTeX, Groff ms, or HTML.&lt;/p&gt;
&lt;p&gt;Pandoc’s enhanced version of Markdown includes syntax for tables,
definition lists, metadata blocks, footnotes, citations, math, and much
more. See the User’s Manual below under &lt;a href="https://pandoc.org/MANUAL.html#pandocs-markdown" rel="nofollow"&gt;Pandoc’s
Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pandoc has a modular design: it consists of a set of readers, which
parse text in a given format and produce a native representation of the
document (an &lt;em&gt;abstract syntax tree&lt;/em&gt; or AST), and a set of writers, which
convert this native representation into a target format. Thus, adding an
input or output format requires only adding a reader or writer. Users
can also run custom pandoc filters to modify the intermediate AST (see
the documentation for &lt;a href="https://pandoc.org/filters.html" rel="nofollow"&gt;filters&lt;/a&gt; and
&lt;a href="https://pandoc.org/lua-filters.html" rel="nofollow"&gt;lua filters&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Because pandoc’s intermediate representation of a document is less
expressive than many of the formats it converts between, one should not
expect perfect conversions between every format and every other. Pandoc
attempts to preserve the structural elements of a document, but not
formatting details such as margin size. And some document elements, such
as complex tables, may not fit into pandoc’s simple document model.
While conversions from pandoc’s Markdown to all formats aspire to be
perfect, conversions from formats more expressive than pandoc’s Markdown
can be expected to be lossy.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing&lt;/h2&gt;
&lt;p&gt;Here’s &lt;a href="INSTALL.md"&gt;how to install pandoc&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Pandoc’s website contains a full &lt;a href="https://pandoc.org/MANUAL.html" rel="nofollow"&gt;User’s
Guide&lt;/a&gt;. It is also available
&lt;a href="MANUAL.txt"&gt;here&lt;/a&gt; as pandoc-flavored Markdown. The website also
contains some &lt;a href="https://pandoc.org/demos.html" rel="nofollow"&gt;examples of the use of
pandoc&lt;/a&gt; and a limited &lt;a href="https://pandoc.org/try" rel="nofollow"&gt;online
demo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Pull requests, bug reports, and feature requests are welcome. Please
make sure to read &lt;a href="CONTRIBUTING.md"&gt;the contributor guidelines&lt;/a&gt; before
opening a new issue.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;© 2006-2018 John MacFarlane (&lt;a href="mailto:jgm@berkeley.edu"&gt;jgm@berkeley.edu&lt;/a&gt;). Released under the
&lt;a href="http://www.gnu.org/copyleft/gpl.html" title="GNU General Public License" rel="nofollow"&gt;GPL&lt;/a&gt;,
version 2 or greater. This software carries no warranty of any kind.
(See COPYRIGHT for full copyright and warranty notices.)&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>jgm</author><guid isPermaLink="false">https://github.com/jgm/pandoc</guid><pubDate>Thu, 14 Nov 2019 00:02:00 GMT</pubDate></item><item><title>jtdaugherty/HaskellNet #3 in Haskell, Today</title><link>https://github.com/jtdaugherty/HaskellNet</link><description>&lt;p&gt;&lt;i&gt;Haskell library which provides client support for POP3, SMTP, and IMAP protocols.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-haskellnet" class="anchor" aria-hidden="true" href="#haskellnet"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HaskellNet&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/lemol/HaskellNet" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/06ff5bf35f9386b26670d28f51585021c58f5de7/68747470733a2f2f7472617669732d63692e6f72672f6c656d6f6c2f4861736b656c6c4e65742e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/lemol/HaskellNet.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: I am seeking a maintainer for this package. If you are interested, let me know!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This package provides client support for the E-mail protocols POP3,
SMTP, and IMAP.&lt;/p&gt;
&lt;p&gt;Some examples of how to use the library are contained in the example/
directory.  You should be able to run them by adjusting the file for
your mail server settings and then loading the file in ghci and type
'main'. eg.&lt;/p&gt;
&lt;p&gt;ghci -hide-package monads-fd example/smtpMimeMail.hs
main&lt;/p&gt;
&lt;p&gt;If you encounter problems and want to debug the ghci
debugger works well:&lt;/p&gt;
&lt;p&gt;:set -fbreak-on-exception
:trace main&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>jtdaugherty</author><guid isPermaLink="false">https://github.com/jtdaugherty/HaskellNet</guid><pubDate>Thu, 14 Nov 2019 00:03:00 GMT</pubDate></item><item><title>flipstone/redcard #4 in Haskell, Today</title><link>https://github.com/flipstone/redcard</link><description>&lt;p&gt;&lt;i&gt;Yet another applicative validator for haskell&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;This repo does not have a README.&lt;/i&gt;&lt;/p&gt;</description><author>flipstone</author><guid isPermaLink="false">https://github.com/flipstone/redcard</guid><pubDate>Thu, 14 Nov 2019 00:04:00 GMT</pubDate></item><item><title>flipstone/kioku #5 in Haskell, Today</title><link>https://github.com/flipstone/kioku</link><description>&lt;p&gt;&lt;i&gt;A simple db for ingesting and indexing static datasets on disk&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h2&gt;&lt;a id="user-content-default-branch-build-status" class="anchor" aria-hidden="true" href="#default-branch-build-status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Default Branch Build Status&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/flipstone/kioku" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9208eba171fd425033daf30d7de84c9554374505/68747470733a2f2f636972636c6563692e636f6d2f67682f666c697073746f6e652f6b696f6b752e7376673f7374796c653d737667" alt="CirclCI" data-canonical-src="https://circleci.com/gh/flipstone/kioku.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>flipstone</author><guid isPermaLink="false">https://github.com/flipstone/kioku</guid><pubDate>Thu, 14 Nov 2019 00:05:00 GMT</pubDate></item><item><title>unisonweb/unison #6 in Haskell, Today</title><link>https://github.com/unisonweb/unison</link><description>&lt;p&gt;&lt;i&gt;A friendly programming language from the future&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-the-unison-language" class="anchor" aria-hidden="true" href="#the-unison-language"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Unison language&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/unisonweb/unison" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1cf74060aa43b747ead8ff6ec02708dbdfb0b28a/68747470733a2f2f7472617669732d63692e6f72672f756e69736f6e7765622f756e69736f6e2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/unisonweb/unison.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://unisonweb.org" rel="nofollow"&gt;Unison&lt;/a&gt; is a new programming language, currently under active development. It's a modern, statically-typed purely functional language, similar to Haskell, but with a unique ability to describe entire distributed systems with a single program. Here's a simple example:&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; comments start with `--`&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; alice : Node, bob : Node&lt;/span&gt;

x &lt;span class="pl-k"&gt;=&lt;/span&gt; factorial &lt;span class="pl-c1"&gt;6&lt;/span&gt;
&lt;span class="pl-c1"&gt;Remote.&lt;/span&gt;transfer alice
y &lt;span class="pl-k"&gt;=&lt;/span&gt; foo x &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; happens on `alice` node&lt;/span&gt;
&lt;span class="pl-c1"&gt;Remote.&lt;/span&gt;transfer bob
bar x y &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; happens on `bob` node&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Remote.transfer&lt;/code&gt; function introduces a "remote effect", where computation may proceed on multiple Unison nodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Remote.transfer alice&lt;/code&gt; transfers control of the computation to the &lt;code&gt;alice&lt;/code&gt; node.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;foo x&lt;/code&gt; call happens on the &lt;code&gt;alice&lt;/code&gt; node.&lt;/li&gt;
&lt;li&gt;At each transfer, any required definitions (such as &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;) will be dynamically deployed to the &lt;code&gt;alice&lt;/code&gt; node and cached for future use.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Remote.transfer bob&lt;/code&gt; transfers control of the rest of the computation to the &lt;code&gt;bob&lt;/code&gt; node.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;bar x y&lt;/code&gt; computation happens on the &lt;code&gt;bob&lt;/code&gt; node. Again, any needed definitions (&lt;code&gt;bar&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt;) will be dynamically deployed to the &lt;code&gt;bob&lt;/code&gt; node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This dynamic transfer / deployment of arbitrary computations is possible because definitions in Unison are identified by a cryptographic hash of their content, &lt;em&gt;including the hashes of all dependencies&lt;/em&gt; (the hash is also "nameless" as it isn't affected by naming of variables). To transfer a computation, we send it to the recipient, and the recipient checks to see if the computation references any unknown hashes. Any unknown hashes are synced to the recipient before the transfer completes and the computation proceeds.&lt;/p&gt;
&lt;p&gt;If you'd like to learn more about the project, the talk &lt;a href="https://www.youtube.com/watch?v=f6yA3t0dO-k" rel="nofollow"&gt;How to write a search engine in 15 lines of code&lt;/a&gt; has more of an introduction to the language. For a more complete overview of the syntax look at the &lt;a href="https://www.unisonweb.org/docs/language-reference" rel="nofollow"&gt;unison language reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since Unison isn't terribly useful in its current form, the rest of this README will focus on stuff that will be of interest for potential contributors, namely, how to build the code, and a brief tour of the (fairly small but action-packed) codebase. If you're just interested in the project and want to follow along with the progress, &lt;a href="http://unisonweb.org" rel="nofollow"&gt;unisonweb.org&lt;/a&gt; is the place to go, or you can also say hello or lurk &lt;a href="http://tiny.cc/unisonslack" rel="nofollow"&gt;in the Slack chat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Still here? All right then! Let's get to it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-a-brief-code-tour" class="anchor" aria-hidden="true" href="#a-brief-code-tour"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A brief code tour&lt;/h2&gt;
&lt;p&gt;First, clone unison with &lt;code&gt;--recursive&lt;/code&gt;:
&lt;code&gt;git clone --recursive https://github.com/unisonweb/unison.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next, a bit of orientation. Here's the directory structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;editor-support/&lt;/code&gt; includes some very basic and probably incomplete text edit support (read: syntax highlighting)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yaks/&lt;/code&gt; has subprojects for various utilities not specific to Unison (the result of &lt;a href="https://en.wiktionary.org/wiki/yak_shaving" rel="nofollow"&gt;"yak-shaving"&lt;/a&gt;). Once mature, each of these might be moved to independent projects and published on Hackage.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parser-typechecker/&lt;/code&gt; has the meat: the Unison syntax tree, parser, typechecker, and runtime. Depends on &lt;code&gt;yaks/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-building-using-stack" class="anchor" aria-hidden="true" href="#building-using-stack"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building using Stack&lt;/h2&gt;
&lt;p&gt;If these instructions don't work for you or are incomplete, please file an issue.&lt;/p&gt;
&lt;p&gt;The build uses &lt;a href="http://docs.haskellstack.org/" rel="nofollow"&gt;Stack&lt;/a&gt;. If you don't already have it installed, &lt;a href="http://docs.haskellstack.org/en/stable/README.html#how-to-install" rel="nofollow"&gt;follow the install instructions&lt;/a&gt; for your platform.  (Hint: &lt;code&gt;brew update &amp;amp;&amp;amp; brew install stack&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ git clone --recursive https://github.com/unisonweb/unison.git
$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; unison
$ stack --version &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; we'll want to know this version if you run into trouble&lt;/span&gt;
$ stack build &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; stack &lt;span class="pl-c1"&gt;exec&lt;/span&gt; tests &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; stack &lt;span class="pl-c1"&gt;exec&lt;/span&gt; unison&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: If you get this error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Stack looks for packages in the directories configured in the 'packages' and 'extra-deps' fields defined in your stack.yaml
The current entry points to &amp;lt;root&amp;gt;/yaks/haskeline/ but no .cabal or package.yaml file could be found there.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then your local git repo is older than the haskeline submodule dependency; use this to get it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git submodule init
git submodule update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See &lt;a href="development.markdown"&gt;&lt;code&gt;development.markdown&lt;/code&gt;&lt;/a&gt; for a list of build commands you'll likely use during development.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-a-brief-tour-of-the-haskell-code" class="anchor" aria-hidden="true" href="#a-brief-tour-of-the-haskell-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A brief tour of the Haskell code&lt;/h2&gt;
&lt;p&gt;In the &lt;code&gt;parser-typechecker/&lt;/code&gt; project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Unison.Term&lt;/code&gt; and &lt;code&gt;Unison.Type&lt;/code&gt; have the syntax trees for terms and types. In both &lt;code&gt;Term&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, the same pattern is used. Each defines a 'base functor' type, &lt;code&gt;F a&lt;/code&gt;, which is nonrecursive, and the actual thing we use is an &lt;em&gt;abstract binding tree&lt;/em&gt; over this base functor, an &lt;code&gt;ABT F&lt;/code&gt;. &lt;code&gt;ABT&lt;/code&gt; (for 'abstract binding tree') is defined in &lt;code&gt;Unison.ABT&lt;/code&gt;. If you aren't familiar with abstract binding trees, &lt;a href="http://semantic-domain.blogspot.com/2015/03/abstract-binding-trees.html" rel="nofollow"&gt;here is a nice blog post explaining one formulation of the idea&lt;/a&gt;, which inspired the &lt;code&gt;Unison.ABT&lt;/code&gt; module. A lot of operations on terms and types just delegate to generic &lt;code&gt;ABT&lt;/code&gt; operations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unison.Parsers&lt;/code&gt; has the main entry point for the parser.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unison.Typechecker.Context&lt;/code&gt; is the implementation of the typechecker, and &lt;code&gt;Unison.Typechecker&lt;/code&gt; has the "public interface to the typechecker" and some convenience functions. There isn't a lot of code here (about 700 LOC presently), since the typechecking algorithm is pretty simple. Unlike a unification-based typechecker, where the typechecking state is an unordered bag of unification constraints and higher-rank polymorphism is usually bolted on awkwardly later, &lt;a href="http://www.mpi-sws.org/~neelk/bidir.pdf" rel="nofollow"&gt;Dunfield and Krishnaswami's algorithm&lt;/a&gt; keeps the typechecking state as a nicely tidy &lt;em&gt;ordered context&lt;/em&gt;, represented as a regular list manipulated in a stack-like fashion, and the algorithm handles higher-rank polymorphism very cleanly. They've also &lt;a href="http://semantic-domain.blogspot.com/2015/03/new-draft-sound-and-complete.html" rel="nofollow"&gt;extended this work to include features like GADTs&lt;/a&gt;, though this new algorithm hasn't been incorporated into Unison yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>unisonweb</author><guid isPermaLink="false">https://github.com/unisonweb/unison</guid><pubDate>Thu, 14 Nov 2019 00:06:00 GMT</pubDate></item><item><title>jfredett/euler #7 in Haskell, Today</title><link>https://github.com/jfredett/euler</link><description>&lt;p&gt;&lt;i&gt;Don't cheat.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-project-euler-solutions----new-repo" class="anchor" aria-hidden="true" href="#project-euler-solutions----new-repo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;project euler solutions -- new repo&lt;/h1&gt;
&lt;p&gt;This will contain all my project euler solutions, sorted by language.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>jfredett</author><guid isPermaLink="false">https://github.com/jfredett/euler</guid><pubDate>Thu, 14 Nov 2019 00:07:00 GMT</pubDate></item></channel></rss>