<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Haskell, Today</title><link>https://github.com/trending/haskell?since=daily</link><description>The top repositories on GitHub for haskell, measured daily</description><pubDate>Wed, 13 Nov 2019 01:06:27 GMT</pubDate><lastBuildDate>Wed, 13 Nov 2019 01:06:27 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>elm/compiler #1 in Haskell, Today</title><link>https://github.com/elm/compiler</link><description>&lt;p&gt;&lt;i&gt;Compiler for Elm, a functional language for reliable webapps.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-elm" class="anchor" aria-hidden="true" href="#elm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elm&lt;/h1&gt;
&lt;p&gt;A delightful language for reliable webapps.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="http://elm-lang.org/" rel="nofollow"&gt;Home Page&lt;/a&gt;, &lt;a href="http://elm-lang.org/try" rel="nofollow"&gt;Try Online&lt;/a&gt;, or &lt;a href="http://guide.elm-lang.org/" rel="nofollow"&gt;The Official Guide&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2&gt;&lt;a id="user-content-install" class="anchor" aria-hidden="true" href="#install"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install&lt;/h2&gt;
&lt;p&gt;&lt;g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png"&gt;✨&lt;/g-emoji&gt; &lt;a href="https://guide.elm-lang.org/install/elm.html" rel="nofollow"&gt;Install&lt;/a&gt; &lt;g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png"&gt;✨&lt;/g-emoji&gt;&lt;/p&gt;
&lt;p&gt;For multiple versions, previous versions, and uninstallation, see the instructions &lt;a href="https://github.com/elm/compiler/blob/master/installers/README.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;h2&gt;&lt;a id="user-content-help" class="anchor" aria-hidden="true" href="#help"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Help&lt;/h2&gt;
&lt;p&gt;If you are stuck, ask around on &lt;a href="http://elmlang.herokuapp.com/" rel="nofollow"&gt;the Elm slack channel&lt;/a&gt;. Folks are friendly and happy to help with questions!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>elm</author><guid isPermaLink="false">https://github.com/elm/compiler</guid><pubDate>Wed, 13 Nov 2019 00:01:00 GMT</pubDate></item><item><title>ChrisPenner/mad-props #2 in Haskell, Today</title><link>https://github.com/ChrisPenner/mad-props</link><description>&lt;p&gt;&lt;i&gt;Propagator-based Constraint Solver monad. Good for solving Sudoku, N-Queens, etc.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-mad-props" class="anchor" aria-hidden="true" href="#mad-props"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mad Props&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://hackage.haskell.org/package/mad-props" rel="nofollow"&gt;Hackage &amp;amp; Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mad props is a simple generalized propagator framework. This means it's pretty good at expressing and solving generalized &lt;a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem" rel="nofollow"&gt;constraint satisfaction problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;mad-props&lt;/code&gt; doesn't use lattice filters for propagation, nor does it yet support dynamic choice of propagator elements (though you can specify choice ordering through the container type you choose). Those things are more a bit more complicated.&lt;/p&gt;
&lt;p&gt;There are many other constraint solvers out there, probably most of them are faster than this one, but for those who like the comfort and type-safety of working in Haskell, I've gotcha covered.&lt;/p&gt;
&lt;p&gt;With other constraint solvers it can be a bit of a pain to express your problem; you either need to compress your problem down to relations between boolean variables, or try to cram your problem into their particular format. Mad Props uses a Monadic DSL for expressing the variables in your problem and the relationships between them, meaning you can use normal Haskell to express your problem.&lt;/p&gt;
&lt;p&gt;It's still unfinished and undergoing rapid iteration and experimentation, so I wouldn't base any major projects on it yet.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-example-sudoku" class="anchor" aria-hidden="true" href="#example-sudoku"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: Sudoku&lt;/h2&gt;
&lt;p&gt;We'll write a quick Sudoku solver using Propagators.&lt;/p&gt;
&lt;p&gt;Here's a problem which Telegraph has claimed to be &lt;a href="https://www.telegraph.co.uk/news/science/science-news/9359579/Worlds-hardest-sudoku-can-you-crack-it.html" rel="nofollow"&gt;"the world's hardest Sudoku"&lt;/a&gt;. Let's see if we can crack it.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;hardestProblem&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;]
hardestProblem &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;tail&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;lines&lt;/span&gt; &lt;span class="pl-k"&gt;$&lt;/span&gt; [&lt;span class="pl-ent"&gt;r&lt;/span&gt;|
8........
..36.....
.7..9.2..
.5...7...
....457..
...1...3.
..1....68
..85...1.
.9....4..|]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sudoku is a constraint satisfaction problem, the "constraints" are that each of the numbers 1-9 are represented in each row, column and 3x3 grid.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;txtToBoard&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [[&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]]
txtToBoard &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-c1"&gt;fmap&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;fmap&lt;/span&gt;) possibilities
  &lt;span class="pl-k"&gt;where&lt;/span&gt;
    &lt;span class="pl-en"&gt;possibilities&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Char&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;
    possibilities &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;S.&lt;/span&gt;fromList [&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;&lt;span class="pl-c1"&gt;9&lt;/span&gt;]
    possibilities a &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;S.&lt;/span&gt;fromList [&lt;span class="pl-c1"&gt;read&lt;/span&gt; [a]]

&lt;span class="pl-en"&gt;hardestBoard&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]]
hardestBoard &lt;span class="pl-k"&gt;=&lt;/span&gt; txtToBoard hardestProblem&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We've now got our problem as a list of rows of 'cells', each cell is a set containing the possible numbers for that cell.&lt;/p&gt;
&lt;p&gt;We need to express the constraint that each 'region' (i.e. row, column and 'block') can only have one of each number in them. We'll write some helper function for collecting the regions of the puzzle:&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;rowsOf&lt;/span&gt;, &lt;span class="pl-en"&gt;colsOf&lt;/span&gt;, &lt;span class="pl-en"&gt;blocksOf&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-smi"&gt;a&lt;/span&gt;]] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [[&lt;span class="pl-smi"&gt;a&lt;/span&gt;]]
rowsOf &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;id&lt;/span&gt;
colsOf &lt;span class="pl-k"&gt;=&lt;/span&gt; transpose
blocksOf &lt;span class="pl-k"&gt;=&lt;/span&gt; chunksOf &lt;span class="pl-c1"&gt;9&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;concat&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;fmap&lt;/span&gt; transpose &lt;span class="pl-k"&gt;.&lt;/span&gt; chunksOf &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; transpose&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can worry about telling the system about our constraints.&lt;/p&gt;
&lt;p&gt;We can now introduce the constraints of Sudoku as relations between cells. The cells in each region are related to one other in the sense that &lt;strong&gt;their values must be disjoint&lt;/strong&gt;. No two cells in each quadrant can have the same value.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Given a board of 'PVar's, link the appropriate cells with 'disjoint' constraints&lt;/span&gt;
&lt;span class="pl-en"&gt;linkBoardCells&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Prop&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;
linkBoardCells xs &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; rows &lt;span class="pl-k"&gt;=&lt;/span&gt; rowsOf xs
    &lt;span class="pl-k"&gt;let&lt;/span&gt; cols &lt;span class="pl-k"&gt;=&lt;/span&gt; colsOf xs
    &lt;span class="pl-k"&gt;let&lt;/span&gt; blocks &lt;span class="pl-k"&gt;=&lt;/span&gt; blocksOf xs
    for_ (rows &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; cols &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; blocks) &lt;span class="pl-k"&gt;$&lt;/span&gt; &lt;span class="pl-k"&gt;\&lt;/span&gt;region &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
        &lt;span class="pl-k"&gt;let&lt;/span&gt; uniquePairings &lt;span class="pl-k"&gt;=&lt;/span&gt; [(a, b) &lt;span class="pl-k"&gt;|&lt;/span&gt; a &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; region, b &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; region, a &lt;span class="pl-k"&gt;/=&lt;/span&gt; b]
        for_ uniquePairings &lt;span class="pl-k"&gt;$&lt;/span&gt; &lt;span class="pl-k"&gt;\&lt;/span&gt;(a, b) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; constrain a b disj
  &lt;span class="pl-k"&gt;where&lt;/span&gt;
    &lt;span class="pl-en"&gt;disj&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-e"&gt;Ord&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;
    disj x xs &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;S.&lt;/span&gt;delete x xs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function introduces a few new types, namely &lt;code&gt;Prop&lt;/code&gt; and &lt;code&gt;Pvar&lt;/code&gt;. We'll show how &lt;code&gt;PVar&lt;/code&gt;s are actually created soon, but the gist of this function is that we map over each 'region' and relate every variable to every other one.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prop&lt;/code&gt; is a monad which allows us to create and link &lt;code&gt;PVar&lt;/code&gt;s together. It keeps track of the constraints on all of our variables and will eventually build a graph that the library uses to solve the problem.&lt;/p&gt;
&lt;p&gt;We call the &lt;code&gt;constrain&lt;/code&gt; function to state that no cell pairing within a region should have the same number.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;constrain&lt;/code&gt; accepts two &lt;code&gt;PVar&lt;/code&gt;s and a function, the function takes a 'choice' from the first variable and uses it to constrain the 'options' from the second. In this case, if the first variable is fixed to a specific value we 'propagate' by removing all matching values from the other variable's pool, you can see the implementation of the &lt;code&gt;disj&lt;/code&gt; helper above. The information about this constraint is stored inside the &lt;code&gt;Prop&lt;/code&gt; monad.&lt;/p&gt;
&lt;p&gt;Set disjunction is symmetric, propagators in general are not, so we'll need to 'constrain' in each direction. Luckily our loop will process each pair twice, so we'll run this once in each direction.&lt;/p&gt;
&lt;p&gt;Here's the real signature in case you're curious:&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;constrain&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-e"&gt;Monad&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;m&lt;/span&gt;
          &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;
          &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-smi"&gt;g&lt;/span&gt; &lt;span class="pl-smi"&gt;b&lt;/span&gt;
          &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;g&lt;/span&gt; &lt;span class="pl-smi"&gt;b&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;g&lt;/span&gt; &lt;span class="pl-smi"&gt;b&lt;/span&gt;)
          &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;PropT&lt;/span&gt; &lt;span class="pl-smi"&gt;m&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We're almost there; we've got a way to constrain a board of &lt;code&gt;PVar&lt;/code&gt;s, but we need to make the board of &lt;code&gt;PVar&lt;/code&gt;s somehow!&lt;/p&gt;
&lt;p&gt;This is pretty easy; we can make a &lt;code&gt;PVar&lt;/code&gt; by calling &lt;code&gt;newPVar&lt;/code&gt; and passing it a container full of possible options the variable could be. We'll convert our &lt;code&gt;[[S.Set Int]]&lt;/code&gt; into &lt;code&gt;[[PVar S.Set Int]]&lt;/code&gt; by traversing the structure using &lt;code&gt;newPVar&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Given a sudoku board, apply the necessary constraints and return a result board of 'PVar's.&lt;/span&gt;
&lt;span class="pl-en"&gt;constrainBoard&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]]&lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Prop&lt;/span&gt; [[&lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]]
constrainBoard board &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    vars &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; (&lt;span class="pl-c1"&gt;traverse&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;traverse&lt;/span&gt;) newPVar board
    linkBoardCells vars
    &lt;span class="pl-c1"&gt;return&lt;/span&gt; vars&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the signature of &lt;code&gt;newPVar&lt;/code&gt; in case you're curious:&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;newPVar&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; (&lt;span class="pl-en"&gt;&lt;span class="pl-e"&gt;Monad&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;m&lt;/span&gt;, &lt;span class="pl-en"&gt;&lt;span class="pl-e"&gt;Foldable&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt;, &lt;span class="pl-en"&gt;Typeable&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt;, &lt;span class="pl-en"&gt;Typeable&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;) 
        &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; 
        &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;PropT&lt;/span&gt; &lt;span class="pl-smi"&gt;m&lt;/span&gt; (&lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we've got our problem set up we need to execute it!&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Solve a given sudoku board and print it to screen&lt;/span&gt;
&lt;span class="pl-en"&gt;solvePuzzle&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; [[&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;]] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;IO&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;
solvePuzzle puz &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; We know it will succeed, but in general you should handle failure safely&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-ent"&gt;Just&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; solve (&lt;span class="pl-c1"&gt;fmap&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-c1"&gt;fmap&lt;/span&gt;) &lt;span class="pl-k"&gt;$&lt;/span&gt; constrainBoard puz
    &lt;span class="pl-c1"&gt;putStrLn&lt;/span&gt; &lt;span class="pl-k"&gt;$&lt;/span&gt; boardToText results&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;solvePuzzle&lt;/code&gt; will print a solution for any valid puzzle you pass it. It accepts a puzzle, builds and constrains the cells, then calls &lt;code&gt;solve&lt;/code&gt; which will find a valid solution for the constraints we provided if possible. We pass it a 'finalizer' function which accepts a function for resolving any &lt;code&gt;PVar&lt;/code&gt; to its 'solved' result. In our case we just use &lt;code&gt;fmap . fmap&lt;/code&gt; to map the resolver over every PVar in the board returned from &lt;code&gt;constrainBoard&lt;/code&gt;. If all went well we'll have the solution of each cell! Then we'll print it out.&lt;/p&gt;
&lt;p&gt;Unfortunately &lt;code&gt;solve&lt;/code&gt; has a bit of a complicated signature, there are simpler versions, but unfortunately they're not possible until GHC supports proper ImpredicativeTypes.&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;solve&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-k"&gt;forall&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-smi"&gt;r&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; A finalizer which accepts a PVar 'resolver' as an argument&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; alongside the result of the Prop setup, and returns some result&lt;/span&gt;
        ((&lt;span class="pl-k"&gt;forall&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;x&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt; &lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-smi"&gt;f&lt;/span&gt; &lt;span class="pl-smi"&gt;x&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;x&lt;/span&gt;) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;r&lt;/span&gt;)
      &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Prop&lt;/span&gt; &lt;span class="pl-smi"&gt;a&lt;/span&gt;
      &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Maybe&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-smi"&gt;r&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can plug in our hardest sudoku and after a second or two we'll print out the answer!&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; solvePuzzle hardestBoard
&lt;span class="pl-c1"&gt;812753649&lt;/span&gt;
&lt;span class="pl-c1"&gt;943682175&lt;/span&gt;
&lt;span class="pl-c1"&gt;675491283&lt;/span&gt;
&lt;span class="pl-c1"&gt;154237896&lt;/span&gt;
&lt;span class="pl-c1"&gt;369845721&lt;/span&gt;
&lt;span class="pl-c1"&gt;287169534&lt;/span&gt;
&lt;span class="pl-c1"&gt;521974368&lt;/span&gt;
&lt;span class="pl-c1"&gt;438526917&lt;/span&gt;
&lt;span class="pl-c1"&gt;796318452&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can double check it for me, but I'm pretty sure that's a valid solution!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-example-n-queens" class="anchor" aria-hidden="true" href="#example-n-queens"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example: N-Queens&lt;/h2&gt;
&lt;p&gt;Just for fun, here's the N-Queens problem&lt;/p&gt;
&lt;div class="highlight highlight-source-haskell"&gt;&lt;pre&gt;{-# &lt;span class="pl-k"&gt;LANGUAGE&lt;/span&gt; ScopedTypeVariables #-}
{-# &lt;span class="pl-k"&gt;LANGUAGE&lt;/span&gt; ViewPatterns #-}
&lt;span class="pl-k"&gt;module&lt;/span&gt; &lt;span class="pl-c1"&gt;Examples.NQueens&lt;/span&gt; &lt;span class="pl-k"&gt;where&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-k"&gt;qualified&lt;/span&gt; &lt;span class="pl-c1"&gt;Data.Set&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;S&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Props&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Data.Foldable&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;Data.List&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; A board coordinate&lt;/span&gt;
&lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-en"&gt;Coord&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; (&lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Given a number of queens, constrain them to not overlap&lt;/span&gt;
&lt;span class="pl-en"&gt;constrainQueens&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Prop&lt;/span&gt; [&lt;span class="pl-en"&gt;PVar&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;S.&lt;/span&gt;Set&lt;/span&gt; &lt;span class="pl-en"&gt;Coord&lt;/span&gt;]
constrainQueens n &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; All possible grid locations&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; locations &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;S.&lt;/span&gt;fromList [(x, y) &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; [&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;n &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;], y &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; [&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;n &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;]]
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Each queen could initially be placed anywhere&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; queens &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;replicate&lt;/span&gt; n locations
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Make a PVar for each queen's location&lt;/span&gt;
    queenVars &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;traverse&lt;/span&gt; newPVar queens
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Each pair of queens must not overlap&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; queenPairs &lt;span class="pl-k"&gt;=&lt;/span&gt; [(a, b) &lt;span class="pl-k"&gt;|&lt;/span&gt; a &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; queenVars, b &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; queenVars, a &lt;span class="pl-k"&gt;/=&lt;/span&gt; b]
    for_ queenPairs &lt;span class="pl-k"&gt;$&lt;/span&gt; &lt;span class="pl-k"&gt;\&lt;/span&gt;(a, b) &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; require (&lt;span class="pl-k"&gt;\&lt;/span&gt;x y &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;$&lt;/span&gt; overlapping x y) a b
    &lt;span class="pl-c1"&gt;return&lt;/span&gt; queenVars

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Check whether two queens overlap with each other (i.e. could kill each other)&lt;/span&gt;
&lt;span class="pl-en"&gt;overlapping&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;Coord&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Coord&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Bool&lt;/span&gt;&lt;/span&gt;
overlapping (x, y) (x', y')
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Same Row&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;==&lt;/span&gt; x' &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Same Column&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; y &lt;span class="pl-k"&gt;==&lt;/span&gt; y' &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Same Diagonal 1&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;-&lt;/span&gt; x' &lt;span class="pl-k"&gt;==&lt;/span&gt; y &lt;span class="pl-k"&gt;-&lt;/span&gt; y' &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; Same Diagonal 2&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;+&lt;/span&gt; y &lt;span class="pl-k"&gt;==&lt;/span&gt; x' &lt;span class="pl-k"&gt;+&lt;/span&gt; y' &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;otherwise&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;False&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Print an nQueens puzzle to a string.&lt;/span&gt;
&lt;span class="pl-en"&gt;showSolution&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="pl-en"&gt;Coord&lt;/span&gt;] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;String&lt;/span&gt;&lt;/span&gt;
showSolution n (&lt;span class="pl-c1"&gt;S.&lt;/span&gt;fromList &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; qs) &lt;span class="pl-k"&gt;=&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; str &lt;span class="pl-k"&gt;=&lt;/span&gt; toChar &lt;span class="pl-k"&gt;.&lt;/span&gt; (&lt;span class="pl-k"&gt;`S.member`&lt;/span&gt; qs) &lt;span class="pl-k"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; [(x, y) &lt;span class="pl-k"&gt;|&lt;/span&gt; x &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; [&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;n&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;], y &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; [&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;n&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;]]
     &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;unlines&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; chunksOf n &lt;span class="pl-k"&gt;$&lt;/span&gt; str
  &lt;span class="pl-k"&gt;where&lt;/span&gt;
    &lt;span class="pl-en"&gt;toChar&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Bool&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Char&lt;/span&gt;&lt;/span&gt;
    toChar &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;True&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Q&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    toChar &lt;span class="pl-ent"&gt;&lt;span class="pl-c1"&gt;False&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

    &lt;span class="pl-en"&gt;chunksOf&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="pl-smi"&gt;a&lt;/span&gt;] &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; [[&lt;span class="pl-smi"&gt;a&lt;/span&gt;]]
    chunksOf n &lt;span class="pl-k"&gt;=&lt;/span&gt; unfoldr go
      &lt;span class="pl-k"&gt;where&lt;/span&gt;
        go &lt;span class="pl-c1"&gt;[]&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;Nothing&lt;/span&gt;
        go xs &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-ent"&gt;Just&lt;/span&gt; (&lt;span class="pl-c1"&gt;take&lt;/span&gt; n xs, &lt;span class="pl-c1"&gt;drop&lt;/span&gt; n xs)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Solve and print an N-Queens puzzle&lt;/span&gt;
&lt;span class="pl-en"&gt;nQueens&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;IO&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;
nQueens n &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-ent"&gt;Just&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; solve &lt;span class="pl-c1"&gt;fmap&lt;/span&gt; (constrainQueens n)
    &lt;span class="pl-c1"&gt;putStrLn&lt;/span&gt; &lt;span class="pl-k"&gt;$&lt;/span&gt; showSolution n results

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; &lt;span class="pl-c"&gt;|&lt;/span&gt; Solve and print all possible solutions of an N-Queens puzzle&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;--&lt;/span&gt; This will include duplicates.&lt;/span&gt;
&lt;span class="pl-en"&gt;nQueensAll&lt;/span&gt; &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;Int&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;&lt;span class="pl-c1"&gt;IO&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;()&lt;/span&gt;
nQueensAll n &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;let&lt;/span&gt; results &lt;span class="pl-k"&gt;=&lt;/span&gt; solveAll (constrainQueens n)
    traverse_ (&lt;span class="pl-c1"&gt;putStrLn&lt;/span&gt; &lt;span class="pl-k"&gt;.&lt;/span&gt; showSolution n) results&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance&lt;/h2&gt;
&lt;p&gt;This is a generalized solution, so performance suffers in relation to a tool built for the job (e.g. It's not as fast as dedicated Sudoku solvers); but it does "pretty well".&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ChrisPenner</author><guid isPermaLink="false">https://github.com/ChrisPenner/mad-props</guid><pubDate>Wed, 13 Nov 2019 00:02:00 GMT</pubDate></item><item><title>kadena-io/chainweb-miner #3 in Haskell, Today</title><link>https://github.com/kadena-io/chainweb-miner</link><description>&lt;p&gt;&lt;i&gt;Official mining software for the Kadena Public Blockchain.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body org" data-path="README.org"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-mining-for-the-kadena-public-blockchain" class="anchor" aria-hidden="true" href="#mining-for-the-kadena-public-blockchain"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mining for the Kadena Public Blockchain&lt;/h1&gt;
&lt;h1&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="#what-is-mining"&gt;What is Mining?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#mining-via-official-kadena-software"&gt;Mining via Official Kadena Software&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#obtaining-a-key-pair"&gt;Obtaining a Key Pair&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#mining-with-chainweb-node"&gt;Mining with chainweb-node&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#basics"&gt;Basics&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#disabling-the-in-process-miner"&gt;Disabling the In-Process Miner&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#accepting-external-work-requests"&gt;Accepting External Work Requests&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#mining-with-chainweb-miner"&gt;Mining with chainweb-miner&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#basics-1"&gt;Basics&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#chain-focusing"&gt;Chain Focusing&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#log-suppression"&gt;Log Suppression&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href="#i-mined-using-the-wrong-account-name-andor-public-key"&gt;I mined using the wrong account name and/or public key!&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#chainweb-miner-says-that-i-mined-but-i-didnt-receive-the-reward"&gt;chainweb-miner says that I mined, but I didn’t receive the reward.&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#i-specify---chain-but-am-getting-work-for-other-chains-why"&gt;I specify &lt;code&gt;--chain=...&lt;/code&gt; but am getting work for other chains. Why?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#why-am-i-being-preempted-so-much"&gt;Why am I being “preempted” so much?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#remote-api-details"&gt;Remote API Details&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#work-requests"&gt;Work Requests&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#solution-submission"&gt;Solution Submission&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#update-subscription"&gt;Update Subscription&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-what-is-mining" class="anchor" aria-hidden="true" href="#what-is-mining"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Mining?&lt;/h1&gt;
&lt;p&gt;A blockchain is a series of &lt;i&gt;blocks&lt;/i&gt;. Blocks contain &lt;i&gt;transactions&lt;/i&gt; that
  represent coin transfers or other Smart Contract interactions. Mining is the
  process of mathematically “solving” a block. Unless solved, a block cannot be
  included in the chain. Without mining, a blockchain cannot progress and
  transactions will never finalize.&lt;/p&gt;
&lt;p&gt;Economically, mining is the principal way to obtain currency on the Kadena
  network. Since we use Proof-of-Work, computational effort is rewarded with coins
  associated with each block you solve. The more computational power you have, the
  more likely you are to be successful at mining.&lt;/p&gt;
&lt;p&gt;Unlike blockchains that have a single chain, ours has many &lt;i&gt;parallel chains&lt;/i&gt;.
  Everyone who chooses to mine can spread their effort across these multiple
  chains, advancing each one equally, thereby reducing competition and wasted
  effort.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-mining-via-official-kadena-software" class="anchor" aria-hidden="true" href="#mining-via-official-kadena-software"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mining via Official Kadena Software&lt;/h1&gt;
&lt;p&gt;There are two official ways to mine for the Kadena network. The first is to use
  &lt;code&gt;chainweb-node&lt;/code&gt; (a “full” Node) and perform in-process CPU mining alongside
  other Node components. &lt;b&gt;This has the advantage of low-latency for getting new
  work&lt;/b&gt; since all databases are available on the same machine.&lt;/p&gt;
&lt;p&gt;The second way is to use &lt;code&gt;chainweb-miner&lt;/code&gt;, our dedicated Mining Client. Work
  requests are sent to known Nodes, which construct blocks for the client. Once
  solved, the client returns the block to the Node for submission to the wider
  network. This client boasts &lt;b&gt;much higher mining performance&lt;/b&gt; and a &lt;b&gt;much simpler
  setup&lt;/b&gt;, since a &lt;code&gt;chainweb-miner&lt;/code&gt; has no database connections and thus no storage
  footprint.&lt;/p&gt;
&lt;p&gt;For beginners, we recommend &lt;code&gt;chainweb-miner&lt;/code&gt;. Either way, you will need a Key
  Pair before beginning.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-obtaining-a-key-pair" class="anchor" aria-hidden="true" href="#obtaining-a-key-pair"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Obtaining a Key Pair&lt;/h2&gt;
&lt;p&gt;The easiest way to obtain a Key Pair is by typing ‘./chainweb-miner keys’ in your terminal window.
  Once generated, please be very careful to note down the public and secret (private) key as you don’t want to lose them.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-mining-with-chainweb-node" class="anchor" aria-hidden="true" href="#mining-with-chainweb-node"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mining with chainweb-node&lt;/h2&gt;
&lt;p&gt;This assumes you have obtained a &lt;code&gt;chainweb-node&lt;/code&gt; binary, the full setup
  instructions for which can be found &lt;a href="https://github.com/kadena-io/chainweb-node/blob/master/README.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basics&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;chainweb-node&lt;/code&gt; has many configuration options. The following displays them all:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;./chainweb-node --print-config&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In fact, a common pattern is to pipe this output to a file, and then immediately
  reuse it:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;./chainweb-node --print-config &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; config.yaml&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doing so, we’ll see the following configuration of your “mining identity”:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;minerInfo&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;account&lt;/span&gt;: &lt;span class="pl-s"&gt;&amp;lt;your-account-name-here&amp;gt;  &lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; This must be unowned, or already claimed by you!&lt;/span&gt;
  &lt;span class="pl-ent"&gt;predicate&lt;/span&gt;: &lt;span class="pl-s"&gt;keys-all&lt;/span&gt;
  &lt;span class="pl-ent"&gt;public-keys&lt;/span&gt;: &lt;span class="pl-s"&gt;[&amp;lt;your-public-key-here&amp;gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to be certain that the account does not already exist, it is recommended that you use your public key for the account name.&lt;/p&gt;
&lt;p&gt;With values specific to you replaced above (and the rest of your &lt;code&gt;chainweb-node&lt;/code&gt;
  configured correctly!) we’re ready to mine:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;./chainweb-node --config-file=config.yaml&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, in-process mining is turned on. This means that while your Node is
  participating in the overall network, it will also be mining in the background.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; If your designated account did not previously exist, it will be created
  the first time you successfully mine on the same chain as the mined block. If
  you specify an account name that you do not own, &lt;b&gt;your rewards will likely be
  lost!&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-disabling-the-in-process-miner" class="anchor" aria-hidden="true" href="#disabling-the-in-process-miner"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disabling the In-Process Miner&lt;/h3&gt;
&lt;p&gt;If you want to run a Node without in-process mining:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;./chainweb-node --disable-mining ...  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; other flags&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-accepting-external-work-requests" class="anchor" aria-hidden="true" href="#accepting-external-work-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Accepting External Work Requests&lt;/h3&gt;
&lt;p&gt;By default, a Node does &lt;b&gt;not&lt;/b&gt; accept external requests for new mining work, say
  from a &lt;code&gt;chainweb-miner&lt;/code&gt; or other third-party client. To turn this on:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;./chainweb-node --mining-coordination ... &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; other flags&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will open several endpoints that clients can call, which are described in
  detail below. &lt;b&gt;Note:&lt;/b&gt; Keep this option off if you aren’t willing to have
  anonymous clients connect to you for work generation calls. You won’t be
  rewarded for assembling blocks for them!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-mining-with-chainweb-miner" class="anchor" aria-hidden="true" href="#mining-with-chainweb-miner"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mining with chainweb-miner&lt;/h2&gt;
&lt;p&gt;Mining via &lt;code&gt;chainweb-miner&lt;/code&gt; is much simpler and generally promises better
  results.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basics-1" class="anchor" aria-hidden="true" href="#basics-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basics&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;./chainweb-miner cpu --cores=4 --node=&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;trusted-node&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;:443 --miner-account=&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;you&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; --miner-key=&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;your-public-key&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The list of trusted nodes can be found &lt;a href="https://github.com/kadena-io/chainweb-node/wiki"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Things to note:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You can dedicate as many cores to parallel mining as you want with &lt;code&gt;--cores&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If specifying the number of cores, the &lt;code&gt;--cores&lt;/code&gt; flag must follow directly after the &lt;code&gt;cpu&lt;/code&gt; flag.&lt;/li&gt;
  &lt;li&gt;When &lt;code&gt;--cores&lt;/code&gt; is omitted during CPU mining, then the number of cores used will default to 1.&lt;/li&gt;
  &lt;li&gt;You can only communicate with one Node at a time.&lt;/li&gt;
  &lt;li&gt;As stated above, your declared account must be owned by you, or your rewards
    will likely be lost.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-chain-focusing" class="anchor" aria-hidden="true" href="#chain-focusing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chain Focusing&lt;/h3&gt;
&lt;p&gt;You might have a reason to prioritize one chain over the rest. To request that
  the Node attempt to give you work for a specific chain first, pass &lt;code&gt;--chain&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;./chainweb-miner cpu --chain=9 ... &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; other flags&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-log-suppression" class="anchor" aria-hidden="true" href="#log-suppression"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Log Suppression&lt;/h3&gt;
&lt;p&gt;You may only be interested in warning or error messages. If so, use the
  &lt;code&gt;--log-level&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;./chainweb-miner cpu --log-level=warn ... &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; other flags&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;2019-09-16 16:57:56.755636: [warn] Couldn't connect to update stream. Trying again...
2019-09-16 16:58:23.646547: [error] Failed to fetch work! Is the Node down?
&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-i-mined-using-the-wrong-account-name-andor-public-key" class="anchor" aria-hidden="true" href="#i-mined-using-the-wrong-account-name-andor-public-key"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I mined using the wrong account name and/or public key!&lt;/h3&gt;
&lt;p&gt;Your coins are likely gone.&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;Your Key&lt;/th&gt;&lt;th&gt;Not Your Key&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Your Account&lt;/td&gt;&lt;td&gt;Hurray!&lt;/td&gt;&lt;td&gt;Work rejected by Node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Not Your Account&lt;/td&gt;&lt;td&gt;Work rejected by Node.&lt;/td&gt;&lt;td&gt;Work rejected by Node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Non-existant Account&lt;/td&gt;&lt;td&gt;You own a new account!&lt;/td&gt;&lt;td&gt;&lt;b&gt;Coins locked forever.&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;&lt;a id="user-content-chainweb-miner-says-that-i-mined-but-i-didnt-receive-the-reward" class="anchor" aria-hidden="true" href="#chainweb-miner-says-that-i-mined-but-i-didnt-receive-the-reward"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;chainweb-miner says that I mined, but I didn’t receive the reward.&lt;/h3&gt;
&lt;p&gt;This?&lt;/p&gt;
&lt;pre&gt;2019-09-16 16:58:37.289252: [info] Chain 6: Mined block at Height 12440.
&lt;/pre&gt;
&lt;p&gt;And yet your balance on Chain 6 remains unchanged?&lt;/p&gt;
&lt;p&gt;Mining is a big race. Even if you succeeded on Chain 6, by the time your block
  returned to the Node, the Node may have already registered a faster block.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;But if it knew about a better block on my chain, why didn’t it preempt me?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Race conditions. There’s a small time window between the Node processing the
  faster block, telling you about it, and you submitting your own block. Consider
  it bad luck.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-i-specify---chain-but-am-getting-work-for-other-chains-why" class="anchor" aria-hidden="true" href="#i-specify---chain-but-am-getting-work-for-other-chains-why"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I specify &lt;code&gt;--chain=...&lt;/code&gt; but am getting work for other chains. Why?&lt;/h3&gt;
&lt;p&gt;It is fundamental to the design of a Chainweb network that chains cannot
  progress much further than their neighbor chains. It may be that by asking for
  &lt;code&gt;--chain=9&lt;/code&gt;, the Node couldn’t find work to do! In this case, it falls back to
  picking a random chain. This balances the needs of the Miner, who may want a
  specific Chain to progress efficiently, with the needs of the network, which
  requires all chains to grow evenly.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-why-am-i-being-preempted-so-much" class="anchor" aria-hidden="true" href="#why-am-i-being-preempted-so-much"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why am I being “preempted” so much?&lt;/h3&gt;
&lt;p&gt;This?&lt;/p&gt;
&lt;pre&gt;2019-09-16 17:30:11.791641: [debug] Chain 7: Current work was preempted.
2019-09-16 17:30:15.759249: [debug] Chain 8: Current work was preempted.
2019-09-16 17:30:27.340109: [debug] Chain 9: Current work was preempted.
2019-09-16 17:30:57.343577: [debug] Chain 6: Current work was preempted.
2019-09-16 17:31:04.998382: [debug] Chain 9: Current work was preempted.
2019-09-16 17:31:14.649440: [debug] Chain 1: Current work was preempted.
2019-09-16 17:31:25.503355: [debug] Chain 4: Current work was preempted.
2019-09-16 17:31:45.471371: [debug] Chain 9: Current work was preempted.
2019-09-16 17:31:56.940698: [debug] Chain 2: Current work was preempted.
2019-09-16 17:32:16.807348: [debug] Chain 9: Current work was preempted.
2019-09-16 17:32:21.721842: [debug] Chain 8: Current work was preempted.
&lt;/pre&gt;
&lt;p&gt;This is normal. This means that other miners are beating you, and that you
  probably don’t hold much of the overall network hash power.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-remote-api-details" class="anchor" aria-hidden="true" href="#remote-api-details"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Remote API Details&lt;/h1&gt;
&lt;p&gt;A &lt;code&gt;chainweb-miner&lt;/code&gt; communicates with a &lt;code&gt;chainweb-node&lt;/code&gt; via the following
  endpoints.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-work-requests" class="anchor" aria-hidden="true" href="#work-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Work Requests&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Intent: I want a new BlockHeader to mine on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;GET /chainweb/0.0/testnet/mining/work?chain=...
&lt;/pre&gt;
&lt;p&gt;Clients can optionally specify a Chain to “focus” on.&lt;/p&gt;
&lt;p&gt;Request Body (JSON):&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;{
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;account&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;miner&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;predicate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keys-all&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;public-keys&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;:&lt;/span&gt; [
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    ]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Response (Octet Stream):&lt;/p&gt;
&lt;pre&gt;Work Bytes - 338 bytes

ChainBytes(4) + TargetBytes(32) + HeaderBytes(302)

The minimum information required to perform Proof-of-Work. No knowledge of
Chainweb internals is necessary.
&lt;/pre&gt;
&lt;table&gt;
  &lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Piece&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;ChainBytes&lt;/td&gt;&lt;td&gt;The final chain selection made by the Node.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;TargetBytes&lt;/td&gt;&lt;td&gt;Encoded form of the current Hash Target.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;HeaderBytes&lt;/td&gt;&lt;td&gt;Encoded form of the Block Header.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-solution-submission" class="anchor" aria-hidden="true" href="#solution-submission"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Solution Submission&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Intent: I solved a block - here it is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;POST /chainweb/0.0/testnet/mining/solved
&lt;/pre&gt;
&lt;p&gt;Request Body (Octet Stream):&lt;/p&gt;
&lt;pre&gt;Header Bytes - 302 bytes

The original work received, updated internally with the Nonce that satisfies the
Proof-of-Work.
&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-update-subscription" class="anchor" aria-hidden="true" href="#update-subscription"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update Subscription&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Intent: I am currently mining. Is the work I’m doing still worth it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;GET /chainweb/0.0/testnet/mining/updates
&lt;/pre&gt;
&lt;p&gt;Request Body (Octet Stream):&lt;/p&gt;
&lt;pre&gt;Chain Bytes - 4 bytes

The first 4 bytes received from a call to /mining/work. This tells the Node to
only inform the Miner of a new Cut when the specific chain in question has
updated.
&lt;/pre&gt;
&lt;p&gt;Response (Server-Sent Event):&lt;/p&gt;
&lt;pre&gt;A stream of Server-Sent Events with a single line:

event:New Cut
&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>kadena-io</author><guid isPermaLink="false">https://github.com/kadena-io/chainweb-miner</guid><pubDate>Wed, 13 Nov 2019 00:03:00 GMT</pubDate></item></channel></rss>