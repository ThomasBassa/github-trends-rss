<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: WebAssembly, Today</title><link>https://github.com/trending/webassembly?since=daily</link><description>The top repositories on GitHub for webassembly, measured daily</description><pubDate>Tue, 21 Jan 2020 01:04:18 GMT</pubDate><lastBuildDate>Tue, 21 Jan 2020 01:04:18 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>WebAssembly/spec #1 in WebAssembly, Today</title><link>https://github.com/WebAssembly/spec</link><description>&lt;p&gt;&lt;i&gt;WebAssembly specification, reference interpreter, and test suite.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/WebAssembly/spec" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/114095f23019869f5dc606fbc51e4871039140c3/68747470733a2f2f7472617669732d63692e6f72672f576562417373656d626c792f737065632e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/WebAssembly/spec.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-spec" class="anchor" aria-hidden="true" href="#spec"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;spec&lt;/h1&gt;
&lt;p&gt;This repository holds the sources for the WebAssembly draft specification
(to seed a future
&lt;a href="https://lists.w3.org/Archives/Public/public-new-work/2017Jun/0005.html" rel="nofollow"&gt;WebAssembly Working Group&lt;/a&gt;),
a reference implementation, and the official testsuite.&lt;/p&gt;
&lt;p&gt;A formatted version of the spec is available here:
&lt;a href="https://webassembly.github.io/spec/" rel="nofollow"&gt;webassembly.github.io/spec&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;Participation is welcome. Discussions about new features, significant semantic
changes, or any specification change likely to generate substantial discussion
should take place in
&lt;a href="https://github.com/WebAssembly/design"&gt;the WebAssembly design repository&lt;/a&gt;
first, so that this spec repository can remain focused. And please follow the
&lt;a href="Contributing.md"&gt;guidelines for contributing&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>WebAssembly</author><guid isPermaLink="false">https://github.com/WebAssembly/spec</guid><pubDate>Tue, 21 Jan 2020 00:01:00 GMT</pubDate></item><item><title>torch2424/wasmboy #2 in WebAssembly, Today</title><link>https://github.com/torch2424/wasmboy</link><description>&lt;p&gt;&lt;i&gt;Game Boy / Game Boy Color Emulator Library, üéÆwritten for WebAssembly using AssemblyScript. üöÄShell/Debugger in Preact. ‚öõÔ∏è&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-wasmboy" class="anchor" aria-hidden="true" href="#wasmboy"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;wasmboy&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/torch2424/wasmBoy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ecc4a58a466e2a5fb5db0a03a4e30616b7c627c9/68747470733a2f2f7472617669732d63692e6f72672f746f726368323432342f7761736d426f792e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/torch2424/wasmBoy.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/696a6d29d59556ac8e576967ffc43b8abc0f2431/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7761736d626f792e737667"&gt;&lt;img src="https://camo.githubusercontent.com/696a6d29d59556ac8e576967ffc43b8abc0f2431/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7761736d626f792e737667" alt="npm version" data-canonical-src="https://img.shields.io/npm/v/wasmboy.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/28caea483c5380fb9941ad5e9a4ac8cc498fc054/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e2f7761736d626f792e737667"&gt;&lt;img src="https://camo.githubusercontent.com/28caea483c5380fb9941ad5e9a4ac8cc498fc054/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e2f7761736d626f792e737667" alt="npm bundle size (minified)" data-canonical-src="https://img.shields.io/bundlephobia/min/wasmboy.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b0d820ccc8d60a011b80b481451f644cc8cbfffa/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f7761736d626f792e737667"&gt;&lt;img src="https://camo.githubusercontent.com/b0d820ccc8d60a011b80b481451f644cc8cbfffa/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f7761736d626f792e737667" alt="npm" data-canonical-src="https://img.shields.io/npm/dt/wasmboy.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/8c6bb3de997b5c1f2f903d609a06ce43e42487a6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f746f726368323432342f7761736d626f792e737667"&gt;&lt;img src="https://camo.githubusercontent.com/8c6bb3de997b5c1f2f903d609a06ce43e42487a6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f746f726368323432342f7761736d626f792e737667" alt="GitHub" data-canonical-src="https://img.shields.io/github/license/torch2424/wasmboy.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;g-emoji class="g-emoji" alias="video_game" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png"&gt;üéÆ&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="space_invader" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f47e.png"&gt;üëæ&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="joystick" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f579.png"&gt;üïπÔ∏è&lt;/g-emoji&gt; Gameboy Emulator Library written in Web Assembly using &lt;a href="https://github.com/AssemblyScript/assemblyscript"&gt;AssemblyScript&lt;/a&gt;, Debugger/Shell in Preact &lt;g-emoji class="g-emoji" alias="video_game" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png"&gt;üéÆ&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="space_invader" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f47e.png"&gt;üëæ&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="joystick" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f579.png"&gt;üïπÔ∏è&lt;/g-emoji&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Project is still &amp;lt; 1.0.0. Most games are playable, but the emulator is still not very accurate. Expect bugs.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/torch2424/wasmBoy/wiki"&gt;Core/Lib Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/ZlL1nduatZQ" rel="nofollow"&gt;Talk given at WebAssembly SF March 28th, 2019&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/debuggerDesktopDemo.gif"&gt;&lt;img src="./docs/images/debuggerDesktopDemo.gif" alt="Pokemon Crystal Wasmboy Debugger Demo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#supported-platforms"&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-game-screenshots"&gt;In-Game Screenshots&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gameboy-support"&gt;Gameboy Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gameboy-color-support"&gt;Gameboy Color Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#demo-applications"&gt;Demo Applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#debugger"&gt;Debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#benchmark"&gt;Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tests"&gt;Tests&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#blarrg"&gt;Blarrg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mooneye"&gt;Mooneye&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#timing"&gt;Timing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#halt"&gt;Halt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cli-commands--npm-scripts"&gt;CLI Commands / Npm Scripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#notable-projects"&gt;Notable Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#special-thanks"&gt;Special Thanks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Emulates the Gameboy / Gameboy Color &lt;g-emoji class="g-emoji" alias="video_game" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png"&gt;üéÆ&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="space_invader" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f47e.png"&gt;üëæ&lt;/g-emoji&gt;&lt;g-emoji class="g-emoji" alias="joystick" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f579.png"&gt;üïπÔ∏è&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Outputs graphics to a scalable / responsive HTML5 canvas &lt;g-emoji class="g-emoji" alias="framed_picture" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f5bc.png"&gt;üñºÔ∏è&lt;/g-emoji&gt;, and audio through the Web Audio API &lt;g-emoji class="g-emoji" alias="loud_sound" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50a.png"&gt;üîä&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Support for In-game saves, and save states &lt;g-emoji class="g-emoji" alias="floppy_disk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png"&gt;üíæ&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Configurable options to increase performance for low(er) end devices &lt;g-emoji class="g-emoji" alias="fire" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png"&gt;üî•&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Importable into other projects as a dependency &lt;g-emoji class="g-emoji" alias="recycle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/267b.png"&gt;‚ôªÔ∏è&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Built with Web Assembly &lt;g-emoji class="g-emoji" alias="spider_web" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f578.png"&gt;üï∏Ô∏è&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Uses Web Workers for parallelized rendering &lt;g-emoji class="g-emoji" alias="hammer_and_wrench" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png"&gt;üõ†Ô∏è&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Keyboard and gamepad input support using &lt;a href="https://www.npmjs.com/package/responsive-gamepad" rel="nofollow"&gt;responsive gamepad&lt;/a&gt; &lt;g-emoji class="g-emoji" alias="keyboard" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2328.png"&gt;‚å®Ô∏è&lt;/g-emoji&gt; &lt;g-emoji class="g-emoji" alias="video_game" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png"&gt;üéÆ&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Debugger with a value table (I/O map), Tile Data visualizer, and Background Map with Scroll Indicators &lt;g-emoji class="g-emoji" alias="bug" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png"&gt;üêõ&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Runs in both Browser and Node &lt;g-emoji class="g-emoji" alias="globe_with_meridians" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f310.png"&gt;üåê&lt;/g-emoji&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Project is still &amp;lt; 1.0.0. Most games are playable, but the emulator is still not very accurate. Expect bugs.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/torch2424/wasmBoy/issues/197"&gt;1.0 Roadmap Tracking Issue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Simply install through npm:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save wasmboy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Documentation for the project can be found on the &lt;a href="https://github.com/torch2424/wasmBoy/wiki"&gt;WasmBoy Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-supported-platforms" class="anchor" aria-hidden="true" href="#supported-platforms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported Platforms&lt;/h3&gt;
&lt;p&gt;Try to test and aim for support on all major browsers (Chrome, Firefox, and Safari). Also, Node support works with the &lt;a href="https://github.com/torch2424/wasmBoy/wiki/Lib-API#wasmboyoptions"&gt;&lt;code&gt;headless&lt;/code&gt; option in the WasmBoy config&lt;/a&gt;, and using the &lt;a href="https://nodejs.org/api/worker_threads.html" rel="nofollow"&gt;Worker Threads&lt;/a&gt; &lt;code&gt;--experimental-worker&lt;/code&gt; flag.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-in-game-screenshots" class="anchor" aria-hidden="true" href="#in-game-screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;In-Game Screenshots&lt;/h1&gt;
&lt;h3&gt;&lt;a id="user-content-gameboy-support" class="anchor" aria-hidden="true" href="#gameboy-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gameboy Support&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/wasmBoyIsThatADemoInYourPocket.png"&gt;&lt;img src="./docs/images/wasmBoyIsThatADemoInYourPocket.png" alt="Is that a demo in your pocket" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/wasmBoyMegaman2.png"&gt;&lt;img src="./docs/images/wasmBoyMegaman2.png" alt="Megaman 2" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/wasmBoyPokemonBlue.png"&gt;&lt;img src="./docs/images/wasmBoyPokemonBlue.png" alt="Pokemon Blue" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/wasmBoyTetris.png"&gt;&lt;img src="./docs/images/wasmBoyTetris.png" alt="tetris" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="./test/performance/testroms/tobutobugirl/tobutobugirl.gb.noPerformanceOptions.png"&gt;&lt;img src="./test/performance/testroms/tobutobugirl/tobutobugirl.gb.noPerformanceOptions.png" alt="tobu tobu girl" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-gameboy-color-support" class="anchor" aria-hidden="true" href="#gameboy-color-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gameboy Color Support&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/wasmBoyLinksAwakening.png"&gt;&lt;img src="./docs/images/wasmBoyLinksAwakening.png" alt="Links Awakening" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/wasmBoyLsdj.png"&gt;&lt;img src="./docs/images/wasmBoyLsdj.png" alt="L s d j" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/wasmBoyMegamanXtreme2.png"&gt;&lt;img src="./docs/images/wasmBoyMegamanXtreme2.png" alt="Megaman extreme 2" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/wasmBoyPokemonSilver.png"&gt;&lt;img src="./docs/images/wasmBoyPokemonSilver.png" alt="Pokemon Silver" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/wasmBoyPokemonYellow.png"&gt;&lt;img src="./docs/images/wasmBoyPokemonYellow.png" alt="Pokemon Yellow" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a target="_blank" rel="noopener noreferrer" href="./test/performance/testroms/back-to-color/back-to-color.gbc.noPerformanceOptions.png"&gt;&lt;img src="./test/performance/testroms/back-to-color/back-to-color.gbc.noPerformanceOptions.png" alt="back to color demo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-demo-applications" class="anchor" aria-hidden="true" href="#demo-applications"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Demo Applications&lt;/h1&gt;
&lt;h3&gt;&lt;a id="user-content-debugger" class="anchor" aria-hidden="true" href="#debugger"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debugger&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://wasmboy.app/" rel="nofollow"&gt;Application Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A full debugger meant for analyzing the internals of the gameboy. Great for HomeBrew Gameboy Development, or using as a reference point for building your own GameBoy emulator. &lt;strong&gt;See the gif at the top of the README for an example.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support of all Gameboy Components: CPU, PPU (Graphics), APU (Audio), Memory, Interrupts, and Timers. &lt;g-emoji class="g-emoji" alias="video_game" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png"&gt;üéÆ&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Per cycle state of each Game Boy components data, internal registers, and relevant memory addresses. &lt;g-emoji class="g-emoji" alias="globe_with_meridians" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f310.png"&gt;üåê&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Loaded ROM Information and parsing of the &lt;a href="http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header" rel="nofollow"&gt;Cartridge Header&lt;/a&gt;. &lt;g-emoji class="g-emoji" alias="floppy_disk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png"&gt;üíæ&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;CPU Control options. Stepping per opcode, and breakpoints. üß†&lt;/li&gt;
&lt;li&gt;Graphics Background Map, with border for current "camera" location with respect to scroll registers. &lt;g-emoji class="g-emoji" alias="framed_picture" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f5bc.png"&gt;üñºÔ∏è&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Graphics Tile Data, to display the loaded tiles currently loaded across all VRAM Banks. &lt;g-emoji class="g-emoji" alias="art" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png"&gt;üé®&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;WasmBoy Control options. Play, Pause, Save State, and Load State. &lt;g-emoji class="g-emoji" alias="play_or_pause_button" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/23ef.png"&gt;‚èØÔ∏è&lt;/g-emoji&gt; &lt;g-emoji class="g-emoji" alias="books" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png"&gt;üìö&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Ability to log the entire WasmBoy Library Object and Memory to the DevTools Console. &lt;g-emoji class="g-emoji" alias="desktop_computer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f5a5.png"&gt;üñ•Ô∏è&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Highly productive "Docker" layout, with snapping of widgets onto sections of the screen and tab support. ‚öì&lt;/li&gt;
&lt;li&gt;Saved Layouts between sessions. &lt;g-emoji class="g-emoji" alias="diamond_shape_with_a_dot_inside" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a0.png"&gt;üí†&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;Help widget with tips on how to be effective in the debugger. &lt;g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b.png"&gt;üôã&lt;/g-emoji&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Anaytics / Privacy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="./demo/debugger/analytics.js"&gt;Analytics Wrapper Service&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Analytics is used on this application simply for performance monitoring, and tracking popularity of the applications. The following events are sent, with nothing more than the event name. The analytics provider used is &lt;a href="https://analytics.google.com/analytics/web/" rel="nofollow"&gt;Google Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whenever a new ROM is loaded, and played for the first time.&lt;/li&gt;
&lt;li&gt;Whether attempting to load a ROM was successful.&lt;/li&gt;
&lt;li&gt;Whenever a state is saved.&lt;/li&gt;
&lt;li&gt;Whenever a state is loaded.&lt;/li&gt;
&lt;li&gt;Whenever custom WasmBoy options are applied.&lt;/li&gt;
&lt;li&gt;Whenever the Google Drive option is selected.&lt;/li&gt;
&lt;li&gt;Whenever the mobile demo is manually reloaded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mobile Demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For UI/UX reasons, on mobile the debugger is simply a web app for testing the lib. This is useful for testing a ROM on the go. For playing games, I would suggest &lt;a href="https://vaporboy.net/" rel="nofollow"&gt;VaporBoy&lt;/a&gt;. Below is an example of the mobile demo:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/debuggerMobileDemo.gif"&gt;&lt;img src="./docs/images/debuggerMobileDemo.gif" alt="Pokemon Crystal Wasmboy Mobile Demo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Benchmark&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://wasmboy.app/benchmark/" rel="nofollow"&gt;Application Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/@torch2424/webassembly-is-fast-a-real-world-benchmark-of-webassembly-vs-es6-d85a23f8e193" rel="nofollow"&gt;Medium Article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since WasmBoy is built in AssemblyScript, it can also run it's core through the Typescript compiler if we mock out some of the WebAssembly interface. The benchmarking tool was built as a way to compare WebAssembly performance to Javascript / ES6 performance, after compiling the core to both WebAssembly and Javascript. It includes detailed stats, live running output, and multiple graphs. Also great for comparing the performance of devices that run WasmBoy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anaytics / Privacy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Analytics is used on this application simply for performance monitoring, and tracking popularity of the application. The following events are sent, with nothing more than the event name. The analytics provider used is &lt;a href="https://analytics.google.com/analytics/web/" rel="nofollow"&gt;Google Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whenever a new ROM is loaded from the particular source.&lt;/li&gt;
&lt;li&gt;Whenever the benchmark is ran.&lt;/li&gt;
&lt;li&gt;Whenever results are rendered for the benchmark.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./docs/images/benchmarkSafariBackToColorRunner.png"&gt;&lt;img src="./docs/images/benchmarkSafariBackToColorRunner.png" alt="WasmBoy Benchmark Runner Section on Safari" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-tests" class="anchor" aria-hidden="true" href="#tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tests&lt;/h1&gt;
&lt;p&gt;These are all currently known passing tests (by me), there may be more test roms out there that pass. Some tests may not pass, and that can either be because of the component it is testing is actually incorrect, or another component that the test is testing is not yet implemented, or is incorrect (e.g a lot of mooneye tests rely on Serial Interrupts, which this emulator has yet to implement). Feel free to open an issue or PR to add any more passing tests to this list &lt;g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png"&gt;üòÑ&lt;/g-emoji&gt; . &lt;strong&gt;The test names are listed from left to right, top to bottom&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-blarrg" class="anchor" aria-hidden="true" href="#blarrg"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Blarrg&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/retrio/gb-test-roms"&gt;Repo with all blargg's tests and source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cpu_instrs, instr_timing, mem_timing, mem_timing-2, halt_bug, cgb_sound&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/blargg/cpu_instrs/cpu_instrs.golden.png"&gt;&lt;img src="./test/accuracy/testroms/blargg/cpu_instrs/cpu_instrs.golden.png" alt="Cpu Instructions all tests passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/blargg/instr_timing/instr_timing.golden.png"&gt;&lt;img src="./test/accuracy/testroms/blargg/instr_timing/instr_timing.golden.png" alt="Instruction timing all tests passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/blargg/mem_timing/mem_timing.golden.png"&gt;&lt;img src="./test/accuracy/testroms/blargg/mem_timing/mem_timing.golden.png" alt="Memory timing all tests passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/blargg/mem_timing-2/mem_timing-2.golden.png"&gt;&lt;img src="./test/accuracy/testroms/blargg/mem_timing-2/mem_timing-2.golden.png" alt="Memory timing 2 all tests passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/blargg/halt_bug/halt_bug.golden.png"&gt;&lt;img src="./test/accuracy/testroms/blargg/halt_bug/halt_bug.golden.png" alt="halt bug all tests passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/blargg/cgb_sound/cgb_sound.golden.png"&gt;&lt;img src="./test/accuracy/testroms/blargg/cgb_sound/cgb_sound.golden.png" alt="cgb sound all tests passing" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-mooneye" class="anchor" aria-hidden="true" href="#mooneye"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mooneye&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Gekkio/mooneye-gb"&gt;Mooneye GB Emulator / Tests&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-timing" class="anchor" aria-hidden="true" href="#timing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Timing&lt;/h4&gt;
&lt;p&gt;div_write, rapid_toggle, tim00, tim00_div_trigger, tim01, tim01_div_trigger, tim10, tim10_div_trigger, tim11, tim11_div_trigger, tima_reload, tima_write_reloading, tma_write_reloading&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/div_write/div_write.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/div_write/div_write.golden.png" alt="div write test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/rapid_toggle/rapid_toggle.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/rapid_toggle/rapid_toggle.golden.png" alt="rapid toggle test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tim00/tim00.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tim00/tim00.golden.png" alt="tim00 test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tim00_div_trigger/tim00_div_trigger.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tim00_div_trigger/tim00_div_trigger.golden.png" alt="tim00 div trigger test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tim01/tim01.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tim01/tim01.golden.png" alt="tim01 test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tim01_div_trigger/tim01_div_trigger.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tim01_div_trigger/tim01_div_trigger.golden.png" alt="tim01 div trigger test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tim10/tim10.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tim10/tim10.golden.png" alt="tim10 test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tim10_div_trigger/tim10_div_trigger.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tim10_div_trigger/tim10_div_trigger.golden.png" alt="tim10 div trigger test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tim11/tim11.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tim11/tim11.golden.png" alt="tim11 test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tim11_div_trigger/tim11_div_trigger.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tim11_div_trigger/tim11_div_trigger.golden.png" alt="tim11 div trigger test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tima_reload/tima_reload.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tima_reload/tima_reload.golden.png" alt="tima reload test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tima_write_reloading/tima_write_reloading.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tima_write_reloading/tima_write_reloading.golden.png" alt="tima write reloading test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/timer/tma_write_reloading/tma_write_reloading.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/timer/tma_write_reloading/tma_write_reloading.golden.png" alt="tma write reloading test passing" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-halt" class="anchor" aria-hidden="true" href="#halt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Halt&lt;/h4&gt;
&lt;p&gt;halt_ime0_ei, halt_ime0_nointr_timing, halt_ime1_timing&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/halt/halt_ime0_ei/halt_ime0_ei.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/halt/halt_ime0_ei/halt_ime0_ei.golden.png" alt="halt_ime0_ei test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/halt/halt_ime0_nointr_timing/halt_ime0_nointr_timing.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/halt/halt_ime0_nointr_timing/halt_ime0_nointr_timing.golden.png" alt="halt_ime0_nointr_timing test passing" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="./test/accuracy/testroms/mooneye/halt/halt_ime1_timing/halt_ime1_timing.golden.png"&gt;&lt;img src="./test/accuracy/testroms/mooneye/halt/halt_ime1_timing/halt_ime1_timing.golden.png" alt="halt_ime1_timing test passing" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Feel free to fork and submit PRs! Opening an issue is reccomended before starting any development, as a discussion would be nice on the idea / feature before writing code. Any help is much appreciated, and would be a ton of fun!&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h3&gt;
&lt;p&gt;Just your standard node app. Install Node with &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt;, &lt;code&gt;git clone&lt;/code&gt; the project, and &lt;code&gt;npm install&lt;/code&gt;, and you should be good to go!&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cli-commands--npm-scripts" class="anchor" aria-hidden="true" href="#cli-commands--npm-scripts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CLI Commands / Npm Scripts&lt;/h3&gt;
&lt;p&gt;The project contains three different elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;core&lt;/code&gt; or &lt;code&gt;wasm&lt;/code&gt; which is the web assembly module for wasmboy written in &lt;a href="https://github.com/AssemblyScript/assemblyscript"&gt;AssemblyScript&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;lib&lt;/code&gt; which is the importable library of wasmboy that can be used in other projects, that adds a top level API to the &lt;code&gt;core&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;demo&lt;/code&gt;, which is a collection of different apps that are used for demoing purposes of the &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;core&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of the build process in this project is done using &lt;a href="https://rollupjs.org/guide/en" rel="nofollow"&gt;Rollup.js&lt;/a&gt;. Each element / component of the project is configured in its own &lt;code&gt;rollup.*.js&lt;/code&gt; file, and are then all used within the standard &lt;code&gt;rollup.config.js&lt;/code&gt; file by the rollup CLI. Also, The &lt;code&gt;core&lt;/code&gt; wasm uses the &lt;a href="https://github.com/AssemblyScript/assemblyscript"&gt;AssemblyScript&lt;/a&gt; compiler CLI tool.&lt;/p&gt;
&lt;p&gt;Commands for each part of the project will be prepended with their element name and a colon, e.g &lt;code&gt;debugger:[command here]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Common command parts are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dev&lt;/code&gt; / &lt;code&gt;watch&lt;/code&gt; - How the project should be served and developed with tools like reloading.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; - Make production builds of the component / element of the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Commands not prepended with a colon are meant for easily building on all of the different parts as a whole.&lt;/p&gt;
&lt;p&gt;Not all commands are documented, only ones relevant to making changes to the library for contributions. &lt;code&gt;*&lt;/code&gt; represents the category of commands, and is not an actual command.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Command to serve the project, and watch the debugger, wasm, and lib for changes&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Uses concurrently: https://github.com/kimmobrunfeldt/concurrently&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Concurrently helps cleanup the output and organizes watchers on commands that require concurrent tools&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Serve the general project for development (Watches the core, lib, and debugger)&lt;/span&gt;
npm run start

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Same as npm start&lt;/span&gt;
npm run dev

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Same as npm start&lt;/span&gt;
npm run watch

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Build everything to be ready to be pushed to npm or released&lt;/span&gt;
npm run build

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Linting commands used during precommit an tests&lt;/span&gt;
npm run prettier:&lt;span class="pl-k"&gt;*&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Commands for building/serving the core, offers commands for building with the Assemblyscript Compiler (WASM) or Typescript (JS)&lt;/span&gt;
npm run core:&lt;span class="pl-k"&gt;*&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Commands for building/serving the JS lib&lt;/span&gt;
npm run lib:&lt;span class="pl-k"&gt;*&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Run tests in `test/accuracy/test.js`&lt;/span&gt;
npm run &lt;span class="pl-c1"&gt;test&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Run tests in `test/performance/test.js`&lt;/span&gt;
npm run test:performance

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; All commands for testing, and are test related&lt;/span&gt;
npm run test:&lt;span class="pl-k"&gt;*&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Commands for the building / serving the debugger&lt;/span&gt;
npm run debugger:&lt;span class="pl-k"&gt;*&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Commands for building / serving the benchmark tool&lt;/span&gt;
npm run benchmark:&lt;span class="pl-k"&gt;*&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Commands for building / serving all available apps in wasmboy&lt;/span&gt;
npm run demo:&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the &lt;a href="https://www.npmjs.com/package/gh-pages" rel="nofollow"&gt;gh-pages&lt;/a&gt; for debugger/demo deployment onto gh-pages.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-notable-projects" class="anchor" aria-hidden="true" href="#notable-projects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notable Projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/torch2424/vaporBoy"&gt;VaporBoy&lt;/a&gt; - PWA for playing ROMs with WasmBoy!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/CryZe/wasmboy-rs"&gt;wasmboy-rs&lt;/a&gt; - Wasmboy Compiled to Rust, for native executables and additional cool features!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bitbucket.org/windel/ppci/src/default/examples/wasm/wasmboy.py?fileviewer=file-view-default" rel="nofollow"&gt;wasmboy.py&lt;/a&gt; - Wasmboy running in Python!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-special-thanks" class="anchor" aria-hidden="true" href="#special-thanks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Special Thanks&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/avivace/awesome-gbdev"&gt;awesome gb-dev communitty&lt;/a&gt;, too many rad dudes to name!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/AssemblyScript/assemblyscript"&gt;dcodeIO for building and fixing bugs with AssemblyScript&lt;/a&gt;. And for being awesome!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/EmuDev/" rel="nofollow"&gt;r/emudev&lt;/a&gt;, especially to &lt;a href="https://www.reddit.com/r/EmuDev/comments/7y2bux/gameboy_gb_graphical_bugs_game_writes_zeroes_into/dudlj3w/" rel="nofollow"&gt;binjimint&lt;/a&gt; for helping me sooooo much!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/Gekkio/mooneye-gb"&gt;mooneye GB&lt;/a&gt; Thank you Gekkio for all the contributions to the communitty, and all the awesome tests!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blargg. Wherever you may be, thank you for all the awesome tests!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://youtu.be/ZlL1nduatZQ" rel="nofollow"&gt;Talk given at WebAssembly SF March 28th, 2019&lt;/a&gt;, general Wasm / AssemblyScript introduction, overview of WasmBoy and how it works.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/avivace/awesome-gbdev"&gt;awesome gbdev&lt;/a&gt; for reference material, and getting help from the awesome discord community&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nakardo/node-gameboy"&gt;node-gameboy&lt;/a&gt;, &lt;a href="https://github.com/binji/binjgb"&gt;binjigb&lt;/a&gt;, &lt;a href="https://github.com/djhworld/gomeboycolor"&gt;gomeboycolor&lt;/a&gt; for comparison for when I'm &lt;strong&gt;REALLY&lt;/strong&gt; stuck.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.codeslinger.co.uk/pages/projects/gameboy.html" rel="nofollow"&gt;Codeslinger's Guide for General HOW-TO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.rekawek.eu/2017/02/09/coffee-gb/" rel="nofollow"&gt;tomek's Retrospective for General Roadmap&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/Dooskington/GameLad/wiki"&gt;Awesome Wiki on the Gamelad project&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pastraiser.com/cpu/gameboy/gameboy_opcodes.html" rel="nofollow"&gt;Opcode Table&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://rednex.github.io/rgbds/gbz80.7.html" rel="nofollow"&gt;Opcode Instructions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.google.com/spreadsheets/d/1cOS__xEj8bBT7cqEDgJcYStKuFAS8mMA4uErx9kA40M/edit#gid=1827536881" rel="nofollow"&gt;Spreadsheet of Game that Do or Do Not Rom Bank&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=1RIA9U5oXro" rel="nofollow"&gt;How Does Digital Audio Even?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/EmuDev/comments/5gkwi5/gb_apu_sound_emulation/" rel="nofollow"&gt;Sound Emulation - GhostSonit's reply&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware" rel="nofollow"&gt;Gameboy Sound Hardware&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/drhelius/3652407"&gt;Gameboy Sound Operation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://material.io/icons/" rel="nofollow"&gt;Google Material Icons&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/AntonioND/giibiiadvance/blob/master/docs/TCAGBD.pdf"&gt;The Cycle Accurate Game Boy Docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://privat.bahnhof.se/wb800787/gb/demos/" rel="nofollow"&gt;Demos for perf testing GB/GBC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>torch2424</author><guid isPermaLink="false">https://github.com/torch2424/wasmboy</guid><pubDate>Tue, 21 Jan 2020 00:02:00 GMT</pubDate></item><item><title>wasmerio/io-devices-lib #3 in WebAssembly, Today</title><link>https://github.com/wasmerio/io-devices-lib</link><description>&lt;p&gt;&lt;i&gt;Library for interacting with the Wasmer Experimental IO Devices&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-io-devices-lib" class="anchor" aria-hidden="true" href="#io-devices-lib"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;io-devices-lib&lt;/h1&gt;
&lt;p&gt;Libraries for interacting with the Wasmer Experimental IO Devices. &lt;g-emoji class="g-emoji" alias="electric_plug" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50c.png"&gt;üîå&lt;/g-emoji&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=""&gt;TODO: Documentation&lt;/a&gt; &lt;g-emoji class="g-emoji" alias="books" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png"&gt;üìö&lt;/g-emoji&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./assets/framebufferScreenshot.png"&gt;&lt;img src="./assets/framebufferScreenshot.png" alt="Screenshot of the open framebuffer" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-languages" class="anchor" aria-hidden="true" href="#supported-languages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported Languages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="./assemblyscript"&gt;AssemblyScript&lt;/a&gt; &lt;g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png"&gt;üöÄ&lt;/g-emoji&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./rust"&gt;Rust&lt;/a&gt; &lt;g-emoji class="g-emoji" alias="crab" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f980.png"&gt;ü¶Ä&lt;/g-emoji&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Contributions are definitely welcome! Small typos and things can be fixed in a small PR. Larger fixes and features, should have an issue opened for discussion first, then a PR should be made.&lt;/p&gt;
&lt;p&gt;For additional contribution guidelines, please see the Wasmer &lt;a href="https://github.com/wasmerio/wasmer-js/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; and the Wasmer &lt;a href="https://github.com/wasmerio/wasmer-js/blob/master/code-of-conduct.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;MIT&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>wasmerio</author><guid isPermaLink="false">https://github.com/wasmerio/io-devices-lib</guid><pubDate>Tue, 21 Jan 2020 00:03:00 GMT</pubDate></item><item><title>WebAssembly/binaryen #4 in WebAssembly, Today</title><link>https://github.com/WebAssembly/binaryen</link><description>&lt;p&gt;&lt;i&gt;Compiler infrastructure and toolchain library for WebAssembly&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/WebAssembly/binaryen" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/567c57624e4ebc5d43297413bf07eb655023194c/68747470733a2f2f7472617669732d63692e6f72672f576562417373656d626c792f62696e617279656e2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/WebAssembly/binaryen.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://ci.appveyor.com/project/WebAssembly/binaryen/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2ae3b3a29f6f2645c834a6a59395d7c2d86beb2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6e766d39747577786e757039683561722f6272616e63682f6d61737465723f7376673d74727565" alt="Windows CI" data-canonical-src="https://ci.appveyor.com/api/projects/status/nvm9tuwxnup9h5ar/branch/master?svg=true" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-binaryen" class="anchor" aria-hidden="true" href="#binaryen"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binaryen&lt;/h1&gt;
&lt;p&gt;Binaryen is a compiler and toolchain infrastructure library for WebAssembly,
written in C++. It aims to make &lt;a href="https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen"&gt;compiling to WebAssembly&lt;/a&gt; &lt;strong&gt;easy, fast, and
effective&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Easy&lt;/strong&gt;: Binaryen has a simple &lt;a href="https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen#c-api-1"&gt;C API&lt;/a&gt; in a single header, and can also be
&lt;a href="https://github.com/WebAssembly/binaryen/wiki/binaryen.js-API"&gt;used from JavaScript&lt;/a&gt;. It accepts input in &lt;a href="https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen#what-do-i-need-to-have-in-order-to-use-binaryen-to-compile-to-webassembly"&gt;WebAssembly-like
form&lt;/a&gt; but also accepts a general &lt;a href="https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen#cfg-api"&gt;control flow graph&lt;/a&gt; for
compilers that prefer that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Binaryen's internal IR uses compact data structures and is designed
for completely parallel codegen and optimization, using all available CPU
cores. Binaryen's IR also compiles down to WebAssembly extremely easily and
quickly because it is essentially a subset of WebAssembly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Effective&lt;/strong&gt;: Binaryen's optimizer has many &lt;a href="https://github.com/WebAssembly/binaryen/tree/master/src/passes"&gt;passes&lt;/a&gt; that can improve code
very significantly (e.g. local coloring to coalesce local variables; dead
code elimination; precomputing expressions when possible at compile time;
etc.). These optimizations aim to make Binaryen powerful enough to be used as
a &lt;a href="https://kripken.github.io/talks/binaryen.html#/9" rel="nofollow"&gt;compiler backend&lt;/a&gt; by itself.  One specific area of focus is on
WebAssembly-specific optimizations (that general-purpose compilers might not
do), which you can think of as wasm &lt;a href="https://kripken.github.io/talks/binaryen.html#/2" rel="nofollow"&gt;minification&lt;/a&gt; , similar to minification
for JavaScript, CSS, etc., all of which are language-specific (an example of
such an optimization is block return value generation in &lt;code&gt;SimplifyLocals&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compilers built using Binaryen include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/WebAssembly/binaryen/blob/master/src/asm2wasm.h"&gt;&lt;code&gt;asm2wasm&lt;/code&gt;&lt;/a&gt; which compiles asm.js to WebAssembly&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AssemblyScript/assemblyscript"&gt;&lt;code&gt;AssemblyScript&lt;/code&gt;&lt;/a&gt; which compiles TypeScript to Binaryen IR&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WebAssembly/binaryen/blob/master/src/wasm2js.h"&gt;&lt;code&gt;wasm2js&lt;/code&gt;&lt;/a&gt; which compiles WebAssembly to JS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tweag/asterius"&gt;&lt;code&gt;Asterius&lt;/code&gt;&lt;/a&gt; which compiles Haskell to WebAssembly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Binaryen also provides a set of &lt;strong&gt;toolchain utilities&lt;/strong&gt; that can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Parse&lt;/strong&gt; and &lt;strong&gt;emit&lt;/strong&gt; WebAssembly. In particular this lets you load
WebAssembly, optimize it using Binaryen, and re-emit it, thus implementing a
wasm-to-wasm optimizer in a single command.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interpret&lt;/strong&gt; WebAssembly as well as run the WebAssembly spec tests.&lt;/li&gt;
&lt;li&gt;Integrate with &lt;strong&gt;&lt;a href="http://emscripten.org" rel="nofollow"&gt;Emscripten&lt;/a&gt;&lt;/strong&gt; in order to provide a
complete compiler toolchain from C and C++ to WebAssembly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Polyfill&lt;/strong&gt; WebAssembly by running it in the interpreter compiled to
JavaScript, if the browser does not yet have native support (useful for
testing).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consult the &lt;a href="Contributing.md"&gt;contributing instructions&lt;/a&gt; if you're interested in
participating.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-binaryen-ir" class="anchor" aria-hidden="true" href="#binaryen-ir"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binaryen IR&lt;/h2&gt;
&lt;p&gt;Binaryen's internal IR is designed to be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flexible and fast&lt;/strong&gt; for optimization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;As close as possible to WebAssembly&lt;/strong&gt; so it is simple and fast to convert
it to and from WebAssembly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a few differences between Binaryen IR and the WebAssembly language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tree structure
&lt;ul&gt;
&lt;li&gt;Binaryen IR &lt;a href="https://github.com/WebAssembly/binaryen/issues/663"&gt;is a tree&lt;/a&gt;, i.e., it has hierarchical structure,
for convenience of optimization. This differs from the WebAssembly binary
format which is a stack machine.&lt;/li&gt;
&lt;li&gt;Consequently Binaryen's text format allows only s-expressions.
WebAssembly's official text format is primarily a linear instruction list
(with s-expression extensions). Binaryen can't read the linear style, but
it can read a wasm text file if it contains only s-expressions.&lt;/li&gt;
&lt;li&gt;Binaryen uses Stack IR to optimize "stacky" code (that can't be
represented in structured form).&lt;/li&gt;
&lt;li&gt;In rare cases stacky code must be represented in Binaryen IR as well, like
popping a value in an exception catch. To support that Binaryen IR has
&lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; instructions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Types and unreachable code
&lt;ul&gt;
&lt;li&gt;WebAssembly limits block/if/loop types to none and the concrete value types
(i32, i64, f32, f64). Binaryen IR has an unreachable type, and it allows
block/if/loop to take it, allowing &lt;a href="https://github.com/WebAssembly/binaryen/issues/903"&gt;local transforms that don't need to
know the global context&lt;/a&gt;. As a result, Binaryen's default
text output is not necessarily valid wasm text. (To get valid wasm text,
you can do &lt;code&gt;--generate-stack-ir --print-stack-ir&lt;/code&gt;, which prints Stack IR,
this is guaranteed to be valid for wasm parsers.)&lt;/li&gt;
&lt;li&gt;Binaryen ignores unreachable code when reading WebAssembly binaries. That
means that if you read a wasm file with unreachable code, that code will be
discarded as if it were optimized out (often this is what you want anyhow,
and optimized programs have no unreachable code anyway, but if you write an
unoptimized file and then read it, it may look different). The reason for
this behavior is that unreachable code in WebAssembly has corner cases that
are tricky to handle in Binaryen IR (it can be very unstructured, and
Binaryen IR is more structured than WebAssembly as noted earlier). Note
that Binaryen does support unreachable code in .wat text files, since as we
saw Binaryen only supports s-expressions there, which are structured.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blocks
&lt;ul&gt;
&lt;li&gt;Binaryen IR has only one node that contains a variable-length list of
operands: the block. WebAssembly on the other hand allows lists in loops,
if arms, and the top level of a function. Binaryen's IR has a single
operand for all non-block nodes; this operand may of course be a block.
The motivation for this property is that many passes need special code
for iterating on lists, so having a single IR node with a list simplifies
them.&lt;/li&gt;
&lt;li&gt;As in wasm, blocks and loops may have names. Branch targets in the IR are
resolved by name (as opposed to nesting depth). This has 2 consequences:
&lt;ul&gt;
&lt;li&gt;Blocks without names may not be branch targets.&lt;/li&gt;
&lt;li&gt;Names are required to be unique. (Reading .wat files with duplicate names
is supported; the names are modified when the IR is constructed).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;As an optimization, a block that is the child of a loop (or if arm, or
function toplevel) and which has no branches targeting it will not be
emitted when generating wasm. Instead its list of operands will be directly
used in the containing node. Such a block is sometimes called an "implicit
block".&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multivalue
&lt;ul&gt;
&lt;li&gt;Binaryen will not represent multivalue instructions and values directly.
Binaryen's main focus is on optimization of wasm, and therefore the question
of whether we should have multivalue in the main IR is whether it justifes
the extra complexity there. Experiments show that the shrinking of code
size thanks to multivalue is useful but small, just 1-3% or so. Given that,
we prefer to keep the main IR simple, and focus on multivalue optimizations
in Stack IR, which is more suitable for such things.&lt;/li&gt;
&lt;li&gt;Binaryen does still need to implement the "ABI" level of multivalue, that
is, we need multivalue calls because those may cross module boundaries,
and so they are observable externally. To support that, Binaryen may use
&lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; as mentioned earlier; another option is to add LLVM-like
&lt;code&gt;extractvalue/composevalue&lt;/code&gt; instructions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, you might notice that round-trip conversions (wasm =&amp;gt; Binaryen IR
=&amp;gt; wasm) change code a little in some corner cases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When optimizing Binaryen uses an additional IR, Stack IR (see
&lt;code&gt;src/wasm-stack.h&lt;/code&gt;). Stack IR allows a bunch of optimizations that are
tailored for the stack machine form of WebAssembly's binary format (but Stack
IR is less efficient for general optimizations than the main Binaryen IR). If
you have a wasm file that has been particularly well-optimized, a simple
round-trip conversion (just read and write, without optimization) may cause
more noticeable differences, as Binaryen fits it into Binaryen IR's more
structured format. If you also optimize during the round-trip conversion then
Stack IR opts will be run and the final wasm will be better optimized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notes when working with Binaryen IR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As mentioned above, Binaryen IR has a tree structure. As a result, each
expression should have exactly one parent - you should not "reuse" a node by
having it appear more than once in the tree. The motivation for this
limitation is that when we optimize we modify nodes, so if they appear more
than once in the tree, a change in one place can appear in another
incorrectly.&lt;/li&gt;
&lt;li&gt;For similar reasons, nodes should not appear in more than one functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-tools" class="anchor" aria-hidden="true" href="#tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tools&lt;/h2&gt;
&lt;p&gt;This repository contains code that builds the following tools in &lt;code&gt;bin/&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;wasm-opt&lt;/strong&gt;: Loads WebAssembly and runs Binaryen IR passes on it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-as&lt;/strong&gt;: Assembles WebAssembly in text format (currently S-Expression
format) into binary format (going through Binaryen IR).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-dis&lt;/strong&gt;: Un-assembles WebAssembly in binary format into text format
(going through Binaryen IR).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm2js&lt;/strong&gt;: A WebAssembly-to-JS compiler. This is used by Emscripten to
generate JavaScript as an alternative to WebAssembly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-reduce&lt;/strong&gt;: A testcase reducer for WebAssembly files. Given a wasm file
that is interesting for some reason (say, it crashes a specific VM),
wasm-reduce can find a smaller wasm file that has the same property, which is
often easier to debug. See the
&lt;a href="https://github.com/WebAssembly/binaryen/wiki/Fuzzing#reducing"&gt;docs&lt;/a&gt;
for more details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-shell&lt;/strong&gt;: A shell that can load and interpret WebAssembly code. It can
also run the spec test suite.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-emscripten-finalize&lt;/strong&gt;: Takes a wasm binary produced by llvm+lld and
performs emscripten-specific passes over it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;asm2wasm&lt;/strong&gt;: An asm.js-to-WebAssembly compiler, using Emscripten's asm
optimizer infrastructure. This is used by Emscripten in Binaryen mode when it
uses Emscripten's fastcomp asm.js backend.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wasm-ctor-eval&lt;/strong&gt;: A tool that can execute C++ global constructors ahead of
time. Used by Emscripten.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;binaryen.js&lt;/strong&gt;: A standalone JavaScript library that exposes Binaryen methods for &lt;a href="https://github.com/WebAssembly/binaryen/blob/master/test/binaryen.js/hello-world.js"&gt;creating and optimizing WASM modules&lt;/a&gt;. For builds, see &lt;a href="https://www.npmjs.com/package/binaryen" rel="nofollow"&gt;binaryen.js on npm&lt;/a&gt; (or download it directly from &lt;a href="https://raw.githubusercontent.com/AssemblyScript/binaryen.js/master/index.js" rel="nofollow"&gt;github&lt;/a&gt;, &lt;a href="https://cdn.rawgit.com/AssemblyScript/binaryen.js/master/index.js" rel="nofollow"&gt;rawgit&lt;/a&gt;, or &lt;a href="https://unpkg.com/binaryen@latest/index.js" rel="nofollow"&gt;unpkg&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usage instructions for each are below.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building" class="anchor" aria-hidden="true" href="#building"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cmake . &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can also use &lt;code&gt;ninja&lt;/code&gt; as your generator: &lt;code&gt;cmake -G Ninja . &amp;amp;&amp;amp; ninja&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A C++11 compiler is required.&lt;/li&gt;
&lt;li&gt;The JavaScript components can be built using &lt;code&gt;build-js.sh&lt;/code&gt;, see notes inside. Normally this is not needed as builds are provided in this repo already.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you also want to compile C/C++ to WebAssembly (and not just asm.js to WebAssembly), you'll need Emscripten. You'll need the &lt;code&gt;incoming&lt;/code&gt; branch there (which you can get via &lt;a href="http://kripken.github.io/emscripten-site/docs/getting_started/downloads.html" rel="nofollow"&gt;the SDK&lt;/a&gt;), for more details see &lt;a href="https://github.com/kripken/emscripten/wiki/WebAssembly"&gt;the wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-visual-c" class="anchor" aria-hidden="true" href="#visual-c"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Visual C++&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Using the Microsoft Visual Studio Installer, install the "Visual C++ tools for CMake" component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate the projects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir build
cd build
"%VISUAL_STUDIO_ROOT%\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Substitute VISUAL_STUDIO_ROOT with the path to your Visual Studio
installation. In case you are using the Visual Studio Build Tools, the path
will be "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the Developer Command Prompt, build the desired projects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msbuild binaryen.vcxproj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CMake generates a project named "ALL_BUILD.vcxproj" for conveniently building all the projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-running" class="anchor" aria-hidden="true" href="#running"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-wasm-opt" class="anchor" aria-hidden="true" href="#wasm-opt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;wasm-opt&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/wasm-opt [.wasm or .wat file] [options] [passes, see --help] [--help]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The wasm optimizer receives WebAssembly as input, and can run transformation
passes on it, as well as print it (before and/or after the transformations). For
example, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/wasm-opt test/passes/lower-if-else.wat --print
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will pretty-print out one of the test cases in the test suite. To run a
transformation pass on it, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/wasm-opt test/passes/lower-if-else.wat --print --lower-if-else
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;lower-if-else&lt;/code&gt; pass lowers if-else into a block and a break. You can see
the change the transformation causes by comparing the output of the two print
commands.&lt;/p&gt;
&lt;p&gt;It's easy to add your own transformation passes to the shell, just add &lt;code&gt;.cpp&lt;/code&gt;
files into &lt;code&gt;src/passes&lt;/code&gt;, and rebuild the shell. For example code, take a look at
the &lt;a href="https://github.com/WebAssembly/binaryen/blob/master/src/passes/LowerIfElse.cpp"&gt;&lt;code&gt;lower-if-else&lt;/code&gt; pass&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some more notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;code&gt;bin/wasm-opt --help&lt;/code&gt; for the full list of options and passes.&lt;/li&gt;
&lt;li&gt;Passing &lt;code&gt;--debug&lt;/code&gt; will emit some debugging info.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-wasm2js" class="anchor" aria-hidden="true" href="#wasm2js"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;wasm2js&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/wasm2js [input.wasm file]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will print out JavaScript to the console.&lt;/p&gt;
&lt;p&gt;For example, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bin/wasm2js test/hello_world.wat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That output contains&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; function add(x, y) {
  x = x | 0;
  y = y | 0;
  return x + y | 0 | 0;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as a translation of&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; (func $add (; 0 ;) (type $0) (param $x i32) (param $y i32) (result i32)
  (i32.add
   (local.get $x)
   (local.get $y)
  )
 )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;wasm2js's output is in ES6 module format - basically, it converts a wasm
module into an ES6 module (to run on older browsers and Node.js versions
you can use Babel etc. to convert it to ES5). Let's look at a full example
of calling that hello world wat; first, create the main JS file:&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; main.mjs&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; { &lt;span class="pl-smi"&gt;add&lt;/span&gt; } &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;./hello_world.mjs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;
&lt;span class="pl-en"&gt;console&lt;/span&gt;.&lt;span class="pl-c1"&gt;log&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;the sum of 1 and 2 is:&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;add&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;));&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The run this (note that you need a new enough Node.js with ES6 module
support):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ bin/wasm2js test/hello_world.wat -o hello_world.mjs
$ node --experimental-modules main.mjs
the sum of 1 and 2 is: 3&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things keep to in mind with wasm2js's output:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should run wasm2js with optimizations for release builds, using &lt;code&gt;-O&lt;/code&gt;
or another optimization level. That will optimize along the entire pipeline
(wasm and JS). It won't do everything a JS minifer would, though, like
minify whitespace, so you should still run a normal JS minifer afterwards.&lt;/li&gt;
&lt;li&gt;It is not possible to match WebAssembly semantics 100% precisely with fast
JavaScript code. For example, every load and store may trap, and to make
JavaScript do the same we'd need to add checks everywhere, which would be
large and slow. Instead, wasm2js assumes loads and stores do not trap, that
int/float conversions do not trap, and so forth. There may also be slight
differences in corner cases of conversions, like non-trapping float to int.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-asm2wasm" class="anchor" aria-hidden="true" href="#asm2wasm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;asm2wasm&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/asm2wasm [input.asm.js file]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will print out a WebAssembly module in s-expression format to the console.&lt;/p&gt;
&lt;p&gt;For example, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bin/asm2wasm test/hello_world.asm.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That input file contains&lt;/p&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt; () {
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;use asm&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;
  &lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-en"&gt;add&lt;/span&gt;(&lt;span class="pl-smi"&gt;x&lt;/span&gt;, &lt;span class="pl-smi"&gt;y&lt;/span&gt;) {
    x &lt;span class="pl-k"&gt;=&lt;/span&gt; x &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;;
    y &lt;span class="pl-k"&gt;=&lt;/span&gt; y &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; x &lt;span class="pl-k"&gt;+&lt;/span&gt; y &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;;
  }
  &lt;span class="pl-k"&gt;return&lt;/span&gt; { add&lt;span class="pl-k"&gt;:&lt;/span&gt; add };
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see something like this:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/01a6d6514431a56eb49608d823650033c32310aa/68747470733a2f2f7261772e6769746875622e636f6d2f576562417373656d626c792f7761736d2d656d736372697074656e2f6d61737465722f6d656469612f6578616d706c652e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/01a6d6514431a56eb49608d823650033c32310aa/68747470733a2f2f7261772e6769746875622e636f6d2f576562417373656d626c792f7761736d2d656d736372697074656e2f6d61737465722f6d656469612f6578616d706c652e706e67" alt="example output" data-canonical-src="https://raw.github.com/WebAssembly/wasm-emscripten/master/media/example.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By default you should see pretty colors as in that image. Set &lt;code&gt;COLORS=0&lt;/code&gt; in the
env to disable colors if you prefer that. On Linux and Mac, you can set
&lt;code&gt;COLORS=1&lt;/code&gt; in the env to force colors (useful when piping to &lt;code&gt;more&lt;/code&gt;, for
example). For Windows, pretty colors are only available when &lt;code&gt;stdout/stderr&lt;/code&gt; are
not redirected/piped.&lt;/p&gt;
&lt;p&gt;Pass &lt;code&gt;--debug&lt;/code&gt; on the command line to see debug info, about asm.js functions as
they are parsed, etc.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cc-source--asm2wasm--webassembly" class="anchor" aria-hidden="true" href="#cc-source--asm2wasm--webassembly"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;C/C++ Source ‚áí asm2wasm ‚áí WebAssembly&lt;/h3&gt;
&lt;p&gt;When using &lt;code&gt;emcc&lt;/code&gt; with the &lt;code&gt;BINARYEN&lt;/code&gt; option, it will use Binaryen to build to
WebAssembly. This lets you compile C and C++ to WebAssembly, with emscripten
using asm.js internally as a build step. Since emscripten's asm.js generation is
very stable, and asm2wasm is a fairly simple process, this method of compiling C
and C++ to WebAssembly is usable already. See the &lt;a href="https://github.com/kripken/emscripten/wiki/WebAssembly"&gt;emscripten
wiki&lt;/a&gt; for more details
about how to use it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;./check.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(or &lt;code&gt;python check.py&lt;/code&gt;) will run &lt;code&gt;wasm-shell&lt;/code&gt;, &lt;code&gt;wasm-opt&lt;/code&gt;, &lt;code&gt;asm2wasm&lt;/code&gt;, etc. on the testcases in &lt;code&gt;test/&lt;/code&gt;, and verify their outputs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;check.py&lt;/code&gt; script supports some options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./check.py [--interpreter=/path/to/interpreter] [TEST1] [TEST2]..
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If an interpreter is provided, we run the output through it, checking for
parse errors.&lt;/li&gt;
&lt;li&gt;If tests are provided, we run exactly those. If none are provided, we run
them all. To see what tests are available, run &lt;code&gt;./check.py --list-suites&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some tests require &lt;code&gt;emcc&lt;/code&gt; or &lt;code&gt;nodejs&lt;/code&gt; in the path. They will not run if the
tool cannot be found, and you'll see a warning.&lt;/li&gt;
&lt;li&gt;We have tests from upstream in &lt;code&gt;tests/spec&lt;/code&gt;, in git submodules. Running
&lt;code&gt;./check.py&lt;/code&gt; should update those.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-design-principles" class="anchor" aria-hidden="true" href="#design-principles"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Design Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interned strings for names&lt;/strong&gt;: It's very convenient to have names on nodes,
instead of just numeric indices etc. To avoid most of the performance
difference between strings and numeric indices, all strings are interned,
which means there is a single copy of each string in memory, string
comparisons are just a pointer comparison, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allocate in arenas&lt;/strong&gt;: Based on experience with other
optimizing/transformating toolchains, it's not worth the overhead to
carefully track memory of individual nodes. Instead, we allocate all elements
of a module in an arena, and the entire arena can be freed when the module is
no longer needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-faq" class="anchor" aria-hidden="true" href="#faq"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why the weird name for the project?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"Binaryen" is a combination of &lt;strong&gt;binary&lt;/strong&gt; - since WebAssembly is a binary format
for the web - and &lt;strong&gt;Emscripten&lt;/strong&gt; - with which it can integrate in order to
compile C and C++ all the way to WebAssembly, via asm.js. Binaryen began as
Emscripten's WebAssembly processing library (&lt;code&gt;wasm-emscripten&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;"Binaryen" is pronounced &lt;a href="http://www.makinggameofthrones.com/production-diary/2011/2/11/official-pronunciation-guide-for-game-of-thrones.html" rel="nofollow"&gt;in the same manner&lt;/a&gt; as "&lt;a href="https://en.wikipedia.org/wiki/List_of_A_Song_of_Ice_and_Fire_characters#House_Targaryen" rel="nofollow"&gt;Targaryen&lt;/a&gt;": &lt;em&gt;bi-NAIR-ee-in&lt;/em&gt;. Or something like that? Anyhow, however Targaryen is correctly pronounced, they should rhyme. Aside from pronunciation, the Targaryen house words, "Fire and Blood", have also inspired Binaryen's: "Code and Bugs."&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does it compile under Windows and/or Visual Studio?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, it does. Here's a step-by-step &lt;a href="https://github.com/brakmic/bazaar/blob/master/webassembly/COMPILING_WIN32.md"&gt;tutorial&lt;/a&gt;  on how to compile it
under &lt;strong&gt;Windows 10 x64&lt;/strong&gt; with with &lt;strong&gt;CMake&lt;/strong&gt; and &lt;strong&gt;Visual Studio 2015&lt;/strong&gt;. Help
would be appreciated on Windows and OS X as most of the core devs are on Linux.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>WebAssembly</author><guid isPermaLink="false">https://github.com/WebAssembly/binaryen</guid><pubDate>Tue, 21 Jan 2020 00:04:00 GMT</pubDate></item></channel></rss>