<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Solidity, Today</title><link>https://github.com/trending/solidity?since=daily</link><description>The top repositories on GitHub for solidity, measured daily</description><pubDate>Tue, 03 Dec 2019 01:05:10 GMT</pubDate><lastBuildDate>Tue, 03 Dec 2019 01:05:10 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>dapphub/chai #1 in Solidity, Today</title><link>https://github.com/dapphub/chai</link><description>&lt;p&gt;&lt;i&gt;ERC20 wrapper over the Dai Savings Rate&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;g-emoji class="g-emoji" alias="tea" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f375.png"&gt;üçµ&lt;/g-emoji&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;1 Chai = 1 Dai * Pot.chi&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chai&lt;/code&gt; is an ERC20 token representing a claim on deposits in the DSR. It can be freely converted to and from &lt;code&gt;dai&lt;/code&gt;: the amount of &lt;code&gt;dai&lt;/code&gt; claimed by one &lt;code&gt;chai&lt;/code&gt; is always increasing, at the Dai Savings Rate. Like any well-behaved token, a user's &lt;code&gt;chai&lt;/code&gt; &lt;em&gt;balance&lt;/em&gt; won't change unexpectedly, while the &lt;code&gt;chai&lt;/code&gt;'s &lt;em&gt;value&lt;/em&gt; grows day by day.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chai&lt;/code&gt; is a very simple contract. Apart from the standard ERC20 functionality, it also implements the same &lt;code&gt;permit&lt;/code&gt; off-chain approval as &lt;code&gt;dai&lt;/code&gt; itself. You can also call &lt;code&gt;dai(address usr)&lt;/code&gt; to check how many &lt;code&gt;dai&lt;/code&gt; a given user's &lt;code&gt;chai&lt;/code&gt; balance claims. The token has no owner or authority. That's all there is to it.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-plan" class="anchor" aria-hidden="true" href="#plan"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;plan&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;chai&lt;/code&gt; will be deployed on December 1st, and is published here for review and community feedback. If you have suggestions for improvement, submit an issue or join the discussion at the #dev channel on dapphub.chat&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building-and-testing" class="anchor" aria-hidden="true" href="#building-and-testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;building and testing&lt;/h2&gt;
&lt;p&gt;This contract is built using &lt;a href="http://dapp.tools/" rel="nofollow"&gt;dapptools&lt;/a&gt;, and follows the standard dapptools procedure for building and testing.&lt;/p&gt;
&lt;p&gt;To compile:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ make all&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run the tests:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ make &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;documentation&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-erc20-functions" class="anchor" aria-hidden="true" href="#erc20-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ERC20 functions&lt;/h3&gt;
&lt;p&gt;Chai.sol implements the standard ERC20 functions (balanceOf, allowance, approve, transfer, transferFrom).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-join" class="anchor" aria-hidden="true" href="#join"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Join&lt;/h3&gt;
&lt;p&gt;The chai contract is an ERC20 token where minting happens in a function called &lt;code&gt;join&lt;/code&gt;, which converts a users Dai balance into Chai:&lt;/p&gt;
&lt;pre lang="sol"&gt;&lt;code&gt;    function join(address dst, uint wad) external {
        uint chi = (now &amp;gt; pot.rho()) ? pot.drip() : pot.chi();
        uint pie = rdiv(wad, chi);
        balanceOf[dst] = add(balanceOf[dst], pie);
        totalSupply    = add(totalSupply, pie);

        daiToken.transferFrom(msg.sender, address(this), wad);
        daiJoin.join(address(this), wad);
        pot.join(pie);
        emit Transfer(address(0), dst, pie);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling this function transfers &lt;code&gt;wad&lt;/code&gt; Dai into the &lt;code&gt;pot&lt;/code&gt; contract from &lt;code&gt;msg.sender&lt;/code&gt;, granting the &lt;code&gt;dst&lt;/code&gt; address a Chai balance representing their claim of Dai in the &lt;code&gt;pot&lt;/code&gt; contract.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-exit" class="anchor" aria-hidden="true" href="#exit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exit&lt;/h3&gt;
&lt;p&gt;Chai is burned (converted into Dai) through a function called &lt;code&gt;exit&lt;/code&gt;:&lt;/p&gt;
&lt;pre lang="sol"&gt;&lt;code&gt;    function exit(address src, uint wad) public {
        require(balanceOf[src] &amp;gt;= wad, "chai/insufficient-balance");
        if (src != msg.sender &amp;amp;&amp;amp; allowance[src][msg.sender] != uint(-1)) {
            require(allowance[src][msg.sender] &amp;gt;= wad, "chai/insufficient-allowance");
            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);
        }
        balanceOf[src] = sub(balanceOf[src], wad);
        totalSupply    = sub(totalSupply, wad);

        uint chi = (now &amp;gt; pot.rho()) ? pot.drip() : pot.chi();
        pot.exit(wad);
        daiJoin.exit(msg.sender, rmul(chi, wad));
        emit Transfer(src, address(0), wad);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;msg.sender&lt;/code&gt; with sufficient approval from the address &lt;code&gt;src&lt;/code&gt; can call this function to decrease their Chai balance by &lt;code&gt;wad&lt;/code&gt; and transfer its underlying Dai value to the &lt;code&gt;msg.sender&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-draw" class="anchor" aria-hidden="true" href="#draw"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Draw&lt;/h3&gt;
&lt;p&gt;Since the &lt;code&gt;wad&lt;/code&gt; argument to the &lt;code&gt;exit&lt;/code&gt; function above is denominated in chai, the exact Dai transferred will be determined at the time the transaction is included in a block. If you want to ensure that a specific Dai amount must be transfered, you can use the draw function instead, which takes a dai denominated argument:&lt;/p&gt;
&lt;pre lang="sol"&gt;&lt;code&gt;    // wad is denominated in dai
    function draw(address src, uint wad) external {
        uint chi = (now &amp;gt; pot.rho()) ? pot.drip() : pot.chi();
        // rounding up ensures usr gets at least wad dai
        exit(src, rdivup(wad, chi));
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-move" class="anchor" aria-hidden="true" href="#move"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Move&lt;/h3&gt;
&lt;p&gt;Similarly to &lt;code&gt;draw&lt;/code&gt;, there is a transferFrom function with a dai denominated argument, ensuring that the receiving address will receive Chai worth at least &lt;code&gt;wad&lt;/code&gt; dai:&lt;/p&gt;
&lt;pre lang="sol"&gt;&lt;code&gt;    // like transferFrom but dai-denominated
    function move(address src, address dst, uint wad) external returns (bool) {
        uint chi = (now &amp;gt; pot.rho()) ? pot.drip() : pot.chi();
        // rounding up ensures dst gets at least wad dai
        return transferFrom(src, dst, rdivup(wad, chi));
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-permit" class="anchor" aria-hidden="true" href="#permit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Permit&lt;/h3&gt;
&lt;p&gt;The permit method lets a user approve an address to spend on their behalf by signing a ERC712 typed message called &lt;code&gt;permit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;permit&lt;/code&gt; consists of the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;holder&lt;/code&gt;, the address granting the permission and the signer of the message&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spender&lt;/code&gt;, the address to which permission is being granted or denied&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nonce&lt;/code&gt;, for replay attack protection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allowed&lt;/code&gt;, whether the &lt;code&gt;spender&lt;/code&gt;s permission is being granted or revoked&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Messages are signed using the procedure described in &lt;a href="https://eips.ethereum.org/EIPS/eip-712" rel="nofollow"&gt;ERC712&lt;/a&gt;, using the &lt;code&gt;PERMIT_TYPEHASH&lt;/code&gt; and &lt;code&gt;DOMAIN_SEPARATOR&lt;/code&gt; constants:&lt;/p&gt;
&lt;pre lang="sol"&gt;&lt;code&gt;    bytes32 public constant DOMAIN_SEPARATOR = 0x0b50407de9fa158c2cba01a99633329490dfd22989a150c20e8c7b4c1fb0fcc3;
    // keccak256("Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)"));
    bytes32 public constant PERMIT_TYPEHASH  = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;permit&lt;/code&gt; are processed by calling the &lt;code&gt;permit&lt;/code&gt; method, which increments the &lt;code&gt;holder&lt;/code&gt; nonce and approves the &lt;code&gt;spender&lt;/code&gt; to spend on the behalf of &lt;code&gt;holder&lt;/code&gt; if &lt;code&gt;allowed&lt;/code&gt; is true, and revokes it otherwise:&lt;/p&gt;
&lt;pre lang="sol"&gt;&lt;code&gt;    // --- Approve by signature ---
    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external
    {
        bytes32 digest = keccak256(abi.encodePacked(
            "\x19\x01",
            DOMAIN_SEPARATOR,
            keccak256(abi.encode(PERMIT_TYPEHASH,
                                 holder,
                                 spender,
                                 nonce,
                                 expiry,
                                 allowed))));
        require(holder != address(0), "chai/invalid holder");
        require(holder == ecrecover(digest, v, r, s), "chai/invalid-permit");
        require(expiry == 0 || now &amp;lt;= expiry, "chai/permit-expired");
        require(nonce == nonces[holder]++, "chai/invalid-nonce");

        uint can = allowed ? uint(-1) : 0;
        allowance[holder][spender] = can;
        emit Approval(holder, spender, can);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>dapphub</author><guid isPermaLink="false">https://github.com/dapphub/chai</guid><pubDate>Tue, 03 Dec 2019 00:01:00 GMT</pubDate></item></channel></rss>