<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Elixir, Today</title><link>https://github.com/trending/elixir?since=daily</link><description>The top repositories on GitHub for elixir, measured daily</description><pubDate>Mon, 04 Nov 2019 01:05:14 GMT</pubDate><lastBuildDate>Mon, 04 Nov 2019 01:05:14 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>adriankumpf/teslamate #1 in Elixir, Today</title><link>https://github.com/adriankumpf/teslamate</link><description>&lt;p&gt;&lt;i&gt;A self-hosted data logger for your Tesla  🚘&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-teslamate" class="anchor" aria-hidden="true" href="#teslamate"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TeslaMate&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/adriankumpf/teslamate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c43a9b01e70660247fcefaed6fe1daa95cb8326b/68747470733a2f2f7472617669732d63692e6f72672f61647269616e6b756d70662f7465736c616d6174652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/adriankumpf/teslamate.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/adriankumpf/teslamate?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6d125280b977180d58015d7a915e3f531beacdac/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f61647269616e6b756d70662f7465736c616d6174652f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/adriankumpf/teslamate/badge.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hub.docker.com/r/teslamate/teslamate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ac2552e90c246eb1c1918b89cf47445cf9ffb31a/68747470733a2f2f696d616765732e6d6963726f6261646765722e636f6d2f6261646765732f76657273696f6e2f7465736c616d6174652f7465736c616d6174652e737667" alt="" data-canonical-src="https://images.microbadger.com/badges/version/teslamate/teslamate.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://microbadger.com/images/teslamate/teslamate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5b32a8dcc234c1d49c1ab1c0fd88e06b4b6c6f6c/68747470733a2f2f696d616765732e6d6963726f6261646765722e636f6d2f6261646765732f696d6167652f7465736c616d6174652f7465736c616d6174652e737667" alt="" data-canonical-src="https://images.microbadger.com/badges/image/teslamate/teslamate.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hub.docker.com/r/teslamate/teslamate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1b5b167991b3d63e76cc64448abc418f31be9a5f/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7465736c616d6174652f7465736c616d6174653f636f6c6f723d253233303939636563" alt="" data-canonical-src="https://img.shields.io/docker/pulls/teslamate/teslamate?color=%23099cec" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=YE4CPXRAV9CVL&amp;amp;source=url" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5b85b9d77e98c453a0b83d75c667832a5683c246/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f6e6174652d50617950616c2d6666363962342e737667" alt="" data-canonical-src="https://img.shields.io/badge/Donate-PayPal-ff69b4.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A powerful, self-hosted data logger for your Tesla.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Written in &lt;strong&gt;&lt;a href="https://elixir-lang.org/" rel="nofollow"&gt;Elixir&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Data is stored in a &lt;strong&gt;Postgres&lt;/strong&gt; database&lt;/li&gt;
&lt;li&gt;Visualization and data analysis with &lt;strong&gt;Grafana&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Vehicle data is published to a local &lt;strong&gt;MQTT&lt;/strong&gt; Broker&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dashboards&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lifetime driving map&lt;/li&gt;
&lt;li&gt;Drive and charging reports&lt;/li&gt;
&lt;li&gt;Driving efficiency report&lt;/li&gt;
&lt;li&gt;Consumption (net / gross)&lt;/li&gt;
&lt;li&gt;Charge energy added vs energy used&lt;/li&gt;
&lt;li&gt;Vampire drain&lt;/li&gt;
&lt;li&gt;Projected 100% range (battery degradation)&lt;/li&gt;
&lt;li&gt;SOC charging stats&lt;/li&gt;
&lt;li&gt;Visited addresses&lt;/li&gt;
&lt;li&gt;History of installed updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Little to no additional vampire drain: the car will fall asleep after a certain idle time&lt;/li&gt;
&lt;li&gt;Automatic address lookup&lt;/li&gt;
&lt;li&gt;Locally enriches positions with elevation data&lt;/li&gt;
&lt;li&gt;Geo-fencing feature to create custom locations&lt;/li&gt;
&lt;li&gt;Supports multiple vehicles per Tesla Account&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/docs/screenshots/drive.png"&gt;&lt;img src="/docs/screenshots/drive.png" alt="Drive Details" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="/docs/screenshots/web_interface.png"&gt;&lt;img src="/docs/screenshots/web_interface.png" alt="Web Interface" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;strong&gt;&lt;a href="/docs/screenshots.md"&gt;MORE SCREENSHOTS&lt;/a&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
&lt;p&gt;The recommended way to install and run TeslaMate is to use Docker. Create a file called &lt;code&gt;docker-compose.yml&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml"&gt;&lt;pre&gt;&lt;span class="pl-ent"&gt;version&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;3&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-ent"&gt;services&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;teslamate&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;image&lt;/span&gt;: &lt;span class="pl-s"&gt;teslamate/teslamate:latest&lt;/span&gt;
    &lt;span class="pl-ent"&gt;restart&lt;/span&gt;: &lt;span class="pl-s"&gt;always&lt;/span&gt;
    &lt;span class="pl-ent"&gt;environment&lt;/span&gt;:
      - &lt;span class="pl-s"&gt;DATABASE_USER=teslamate&lt;/span&gt;
      - &lt;span class="pl-s"&gt;DATABASE_PASS=secret&lt;/span&gt;
      - &lt;span class="pl-s"&gt;DATABASE_NAME=teslamate&lt;/span&gt;
      - &lt;span class="pl-s"&gt;DATABASE_HOST=db&lt;/span&gt;
      - &lt;span class="pl-s"&gt;MQTT_HOST=mosquitto&lt;/span&gt;
    &lt;span class="pl-ent"&gt;ports&lt;/span&gt;:
      - &lt;span class="pl-c1"&gt;4000:4000&lt;/span&gt;
    &lt;span class="pl-ent"&gt;cap_drop&lt;/span&gt;:
      - &lt;span class="pl-s"&gt;all&lt;/span&gt;

  &lt;span class="pl-ent"&gt;db&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;image&lt;/span&gt;: &lt;span class="pl-s"&gt;postgres:11&lt;/span&gt;
    &lt;span class="pl-ent"&gt;restart&lt;/span&gt;: &lt;span class="pl-s"&gt;always&lt;/span&gt;
    &lt;span class="pl-ent"&gt;environment&lt;/span&gt;:
      - &lt;span class="pl-s"&gt;POSTGRES_USER=teslamate&lt;/span&gt;
      - &lt;span class="pl-s"&gt;POSTGRES_PASSWORD=secret&lt;/span&gt;
    &lt;span class="pl-ent"&gt;volumes&lt;/span&gt;:
      - &lt;span class="pl-s"&gt;teslamate-db:/var/lib/postgresql/data&lt;/span&gt;

  &lt;span class="pl-ent"&gt;grafana&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;image&lt;/span&gt;: &lt;span class="pl-s"&gt;teslamate/grafana:latest&lt;/span&gt;
    &lt;span class="pl-ent"&gt;restart&lt;/span&gt;: &lt;span class="pl-s"&gt;always&lt;/span&gt;
    &lt;span class="pl-ent"&gt;environment&lt;/span&gt;:
      - &lt;span class="pl-s"&gt;DATABASE_USER=teslamate&lt;/span&gt;
      - &lt;span class="pl-s"&gt;DATABASE_PASS=secret&lt;/span&gt;
      - &lt;span class="pl-s"&gt;DATABASE_NAME=teslamate&lt;/span&gt;
      - &lt;span class="pl-s"&gt;DATABASE_HOST=db&lt;/span&gt;
    &lt;span class="pl-ent"&gt;ports&lt;/span&gt;:
      - &lt;span class="pl-c1"&gt;3000:3000&lt;/span&gt;
    &lt;span class="pl-ent"&gt;volumes&lt;/span&gt;:
      - &lt;span class="pl-s"&gt;teslamate-grafana-data:/var/lib/grafana&lt;/span&gt;

  &lt;span class="pl-ent"&gt;mosquitto&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;image&lt;/span&gt;: &lt;span class="pl-s"&gt;eclipse-mosquitto:1.6&lt;/span&gt;
    &lt;span class="pl-ent"&gt;restart&lt;/span&gt;: &lt;span class="pl-s"&gt;always&lt;/span&gt;
    &lt;span class="pl-ent"&gt;ports&lt;/span&gt;:
      - &lt;span class="pl-c1"&gt;1883:1883&lt;/span&gt;
    &lt;span class="pl-ent"&gt;volumes&lt;/span&gt;:
      - &lt;span class="pl-s"&gt;mosquitto-conf:/mosquitto/config&lt;/span&gt;
      - &lt;span class="pl-s"&gt;mosquitto-data:/mosquitto/data&lt;/span&gt;

&lt;span class="pl-ent"&gt;volumes&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;teslamate-db&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;teslamate-grafana-data&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;mosquitto-conf&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;mosquitto-data&lt;/span&gt;:&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards start the stack with &lt;code&gt;docker-compose up&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To sign in with your Tesla Account open the web interface at &lt;a href="http://localhost:4000" rel="nofollow"&gt;http://your-ip-address:4000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Grafana dashboards are available at &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://your-ip-address:3000&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;The TeslaMate documentation is available &lt;a href="docs/README.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="docs/README.md#installation"&gt;Installation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="docs/installation/docker.md"&gt;Docker (recommended)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/installation/docker_advanced.md"&gt;Docker (advanced)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/installation/debian.md"&gt;Manual Installation on Debian/Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/upgrading.md"&gt;Upgrading to a new version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/README.md#configuration"&gt;Configuration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="docs/configuration/environment_variables.md"&gt;Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/configuration/sleep.md"&gt;Sleep Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/README.md#integrations"&gt;Integrations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="docs/integrations/home_assistant.md"&gt;HomeAssistant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/integrations/mqtt.md"&gt;MQTT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/faq.md"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="docs/development.md"&gt;Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-donations" class="anchor" aria-hidden="true" href="#donations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Donations&lt;/h2&gt;
&lt;p&gt;TeslaMate is open source and completely free for everyone to use.&lt;/p&gt;
&lt;p&gt;Maintaining this project isn't effortless, or free. If you would like to
support further development, that would be awesome. If you don't, no problem;
just share your love and show your support.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=YE4CPXRAV9CVL&amp;amp;source=url" rel="nofollow"&gt;
    &lt;img src="docs/images/paypal-donate-button.png" alt="Donate with PayPal" style="max-width:100%;"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Authors: Adrian Kumpf - &lt;a href="https://github.com/adriankumpf/teslamate/graphs/contributors"&gt;List of contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Distributed under MIT License&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>adriankumpf</author><guid isPermaLink="false">https://github.com/adriankumpf/teslamate</guid><pubDate>Mon, 04 Nov 2019 00:01:00 GMT</pubDate></item><item><title>ueberauth/guardian #2 in Elixir, Today</title><link>https://github.com/ueberauth/guardian</link><description>&lt;p&gt;&lt;i&gt;Elixir Authentication&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-guardian" class="anchor" aria-hidden="true" href="#guardian"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guardian&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;An authentication library for use with Elixir applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/ueberauth/guardian" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/36fa1af2e1abf6a696ee2ab1a1c790299d0e8189/68747470733a2f2f7472617669732d63692e6f72672f7565626572617574682f677561726469616e2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ueberauth/guardian.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/ueberauth/guardian" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b2ad4003b44fc5b835aaf092fcfbf23f96cbf511/68747470733a2f2f636f6465636f762e696f2f67682f7565626572617574682f677561726469616e2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/ueberauth/guardian/branch/master/graph/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://inch-ci.org/github/ueberauth/guardian" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/73bbaa44dafc8b3ade9b22142634f7b777da3f53/687474703a2f2f696e63682d63692e6f72672f6769746875622f7565626572617574682f677561726469616e2e737667" alt="Inline docs" data-canonical-src="http://inch-ci.org/github/ueberauth/guardian.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looking for &lt;a href="https://github.com/ueberauth/guardian/tree/v0.14.x"&gt;Guardian pre 1.0&lt;/a&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Upgrading from pre 1.0? See the &lt;a href="upgrade_guides/0.14.to.1.0.md"&gt;0.14 to 1.0 Upgrade Guide&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Guardian is a token based authentication library for use with Elixir applications.&lt;/p&gt;
&lt;p&gt;Guardian remains a functional system. It integrates with Plug, but can be used outside of it. If you're implementing a TCP/UDP protocol directly, or want to utilize your authentication via channels in Phoenix, Guardian is your friend.&lt;/p&gt;
&lt;p&gt;The core currency of authentication in Guardian is the &lt;em&gt;token&lt;/em&gt;.
By default &lt;a href="https://jwt.io" rel="nofollow"&gt;JSON Web Tokens&lt;/a&gt; are supported out of the box but any token that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has the concept of a key-value payload&lt;/li&gt;
&lt;li&gt;Is tamper proof&lt;/li&gt;
&lt;li&gt;Can serialize to a String&lt;/li&gt;
&lt;li&gt;Has a supporting module that implements the &lt;code&gt;Guardian.Token&lt;/code&gt; behaviour&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use Guardian tokens to authenticate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web endpoints (Plug/Phoenix/X)&lt;/li&gt;
&lt;li&gt;Channels/Sockets (Phoenix - optional)&lt;/li&gt;
&lt;li&gt;Any other system you can imagine. If you can attach an authentication token you can authenticate it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tokens should be able to contain any assertions (claims) that a developer wants to make and may contain both standard and application specific information encoded within them.&lt;/p&gt;
&lt;p&gt;Guardian also allows you to configure multiple token types/configurations in a single application.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;API documentation is available at &lt;a href="https://hexdocs.pm/guardian" rel="nofollow"&gt;https://hexdocs.pm/guardian&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Guardian requires that you create an "Implementation Module". This module is your applications implementation for a particular type/configuration of token. You do this by &lt;code&gt;use&lt;/code&gt;ing Guardian in your module and adding the relevant configuration.&lt;/p&gt;
&lt;p&gt;Add Guardian to your application&lt;/p&gt;
&lt;p&gt;mix.exs&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:guardian&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 2.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a module that uses &lt;code&gt;Guardian&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;, &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;subject_for_token&lt;/span&gt;(resource, _claims) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; You can use any value for the subject of your token but&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; it should be useful in retrieving the resource later, see&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; how it being used on `resource_from_claims/1` function.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; A unique `id` is a good subject, a non-unique email address&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; is a poor subject.&lt;/span&gt;
    sub &lt;span class="pl-k"&gt;=&lt;/span&gt; to_string(resource.id)
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, sub}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;subject_for_token&lt;/span&gt;(_, _) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:reason_for_error&lt;/span&gt;}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;resource_from_claims&lt;/span&gt;(claims) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Here we'll look up our resource from the claims, the subject can be&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; found in the `"sub"` key. In `above subject_for_token/2` we returned&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; the resource id so here we'll rely on that to look it up.&lt;/span&gt;
    id &lt;span class="pl-k"&gt;=&lt;/span&gt; claims[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sub&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    resource &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.get_resource_by_id(id)
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;,  resource}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;resource_from_claims&lt;/span&gt;(_claims) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:reason_for_error&lt;/span&gt;}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add your configuration&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
       &lt;span class="pl-c1"&gt;issuer:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my_app&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
       &lt;span class="pl-c1"&gt;secret_key:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Secret key. You can use `mix guardian.gen.secret` to get one&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this level of configuration, you can have a working installation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basics&lt;/h2&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; encode a token for a resource&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.encode_and_sign(resource)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; decode and verify a token&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.decode_and_verify(token)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; revoke a token (use GuardianDb or something similar if you need revoke to actually track a token)&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.revoke(token)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Refresh a token before it expires&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _old_stuff, {new_token, new_claims}} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.refresh(token)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Exchange a token of type "refresh" for a new token of type "access"&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _old_stuff, {new_token, new_claims}} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.exchange(token, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;refresh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;access&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Lookup a resource directly from a token&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, resource, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.resource_from_token(token)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With Plug&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If a session is loaded the token/resource/claims will be put into the session and connection&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If no session is loaded, the token/resource/claims only go onto the connection&lt;/span&gt;
conn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.sign_in(conn, resource)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Optionally with claims and options&lt;/span&gt;
conn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.sign_in(conn, resource, %{&lt;span class="pl-c1"&gt;some:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;claim&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, &lt;span class="pl-c1"&gt;ttl:&lt;/span&gt; {&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;:minute&lt;/span&gt;})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; remove from session (if fetched) and revoke the token&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; can also clear the remember me token, if the option :clear_remember_me is set&lt;/span&gt;
conn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.sign_out(conn)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Set a "refresh" token directly on a cookie.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Can be used in conjunction with `Guardian.Plug.VerifyCookie` and `Guardian.Plug.SlidingCookie`&lt;/span&gt;
conn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.remember_me(conn, resource)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Fetch the information from the current connection&lt;/span&gt;
token &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.current_token(conn)
claims &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.current_claims(conn)
resource &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.current_resource(conn)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Creating with custom claims and options&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Add custom claims to a token&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.encode_and_sign(resource, %{&lt;span class="pl-c1"&gt;some:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;claim&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Create a specific token type (i.e. "access"/"refresh" etc)&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.encode_and_sign(resource, %{}, &lt;span class="pl-c1"&gt;token_type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;refresh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Customize the time to live (ttl) of the token&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.encode_and_sign(resource, %{}, &lt;span class="pl-c1"&gt;ttl:&lt;/span&gt; {&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;:minute&lt;/span&gt;})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Customize the secret&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.encode_and_sign(resource, %{}, &lt;span class="pl-c1"&gt;secret:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;custom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.encode_and_sign(resource, %{}, &lt;span class="pl-c1"&gt;secret:&lt;/span&gt; {&lt;span class="pl-en"&gt;SomeMod&lt;/span&gt;, &lt;span class="pl-c1"&gt;:some_func&lt;/span&gt;, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;args&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]})&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Decoding tokens&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Check some literal claims. (i.e. this is an access token)&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.decode_and_verify(token, %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;typ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;access&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Use a custom secret&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.decode_and_verify(token, %{}, &lt;span class="pl-c1"&gt;secret:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;custom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.decode_and_verify(token, %{}, &lt;span class="pl-c1"&gt;secret:&lt;/span&gt; {&lt;span class="pl-en"&gt;SomeMod&lt;/span&gt;, &lt;span class="pl-c1"&gt;:some_func&lt;/span&gt;, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;args&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]})&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need dynamic verification for JWT tokens, please see the documentation for &lt;code&gt;Guardian.Token.Jwt&lt;/code&gt; and &lt;code&gt;Guardian.Token.Jwt.SecretFetcher&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The following configuration is available to all implementation modules.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;token_module&lt;/code&gt; - The module that implements the functions for dealing with tokens. Default &lt;code&gt;Guardian.Token.Jwt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Guardian can handle tokens of any type that implements the &lt;code&gt;Guardian.Token&lt;/code&gt; behaviour.
Each token module will have its own configuration requirements. Please see below for the JWT configuration.&lt;/p&gt;
&lt;p&gt;All configuration values may be provided in two ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In your config files&lt;/li&gt;
&lt;li&gt;As a Keyword list to your call to &lt;code&gt;use Guardian&lt;/code&gt; in your implementation module.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any options given to &lt;code&gt;use Guardian&lt;/code&gt; have precedence over config values found in the config files.&lt;/p&gt;
&lt;p&gt;Some configuration may be required by your &lt;code&gt;token_module&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configuration-values" class="anchor" aria-hidden="true" href="#configuration-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration values&lt;/h3&gt;
&lt;p&gt;Guardian supports resolving configuration options at runtime, to that we use the following syntax:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{MyModule, :func, [:some, :args]}&lt;/code&gt; Calls the function on the module with args&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are evaluated at runtime and any value that you fetch via&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyApp.Guardian.config(key, default)&lt;/code&gt; will be resolved using this scheme.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;Guardian.Config.resolve_value/1&lt;/code&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-jwt-configuration" class="anchor" aria-hidden="true" href="#jwt-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT (Configuration)&lt;/h3&gt;
&lt;p&gt;The default token type of &lt;code&gt;Guardian&lt;/code&gt; is JWT. It accepts many options but you really only &lt;em&gt;need&lt;/em&gt; to specify the &lt;code&gt;issuer&lt;/code&gt; and &lt;code&gt;secret_key&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-required-configuration-jwt" class="anchor" aria-hidden="true" href="#required-configuration-jwt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Required configuration (JWT)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;issuer&lt;/code&gt; - The issuer of the token. Your application name/id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secret_key&lt;/code&gt; - The secret key to use for the implementation module.
This may be any resolvable value for &lt;code&gt;Guardian.Config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-optional-configuration-jwt" class="anchor" aria-hidden="true" href="#optional-configuration-jwt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optional configuration (JWT)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;token_verify_module&lt;/code&gt; - default &lt;code&gt;Guardian.Token.Jwt.Verify&lt;/code&gt;. The module that verifies the claims&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allowed_algos&lt;/code&gt; - The allowed algos to use for encoding and decoding.
See &lt;code&gt;JOSE&lt;/code&gt; for available. Default &lt;code&gt;["HS512"]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ttl&lt;/code&gt; - The default time to live for all tokens. See the type in Guardian.ttl&lt;/li&gt;
&lt;li&gt;&lt;code&gt;token_ttl&lt;/code&gt; a map of &lt;code&gt;token_type&lt;/code&gt; to &lt;code&gt;ttl&lt;/code&gt;. Set specific ttls for specific types of tokens&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allowed_drift&lt;/code&gt; The drift that is allowed when decoding/verifying a token in milliseconds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verify_issuer&lt;/code&gt; Default false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secret_fetcher&lt;/code&gt; A module used to fetch the secret. Default: &lt;code&gt;Guardian.Token.Jwt.SecretFetcher&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-secrets-jwt" class="anchor" aria-hidden="true" href="#secrets-jwt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Secrets (JWT)&lt;/h2&gt;
&lt;p&gt;Secrets can be simple strings or more complicated &lt;code&gt;JOSE&lt;/code&gt; secret schemes.&lt;/p&gt;
&lt;p&gt;The simplest way to use the JWT module is to provide a simple String. (&lt;code&gt;mix guardian.gen.secret&lt;/code&gt; works great)&lt;/p&gt;
&lt;p&gt;Alternatively you can use a module and function by adding &lt;code&gt;secret_key: {MyModule, :function_name, [:some, :args]}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;More advanced secret information can be found below.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-options-in-calls" class="anchor" aria-hidden="true" href="#using-options-in-calls"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using options in calls&lt;/h2&gt;
&lt;p&gt;Almost all of the functions provided by &lt;code&gt;Guardian&lt;/code&gt; utilize options as the last argument.
These options are passed from the initiating call through to the &lt;code&gt;token_module&lt;/code&gt; and also your &lt;code&gt;callbacks&lt;/code&gt;. See the documentation for your &lt;code&gt;token_module&lt;/code&gt; (&lt;code&gt;Guardian.Token.Jwt&lt;/code&gt; by default) for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hooks" class="anchor" aria-hidden="true" href="#hooks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h2&gt;
&lt;p&gt;Each implementation module (modules that &lt;code&gt;use Guardian&lt;/code&gt;) implement callbacks for the &lt;code&gt;Guardian&lt;/code&gt; behaviour. By default, these are just pass-through but you can implement your own version to tweak the behaviour of your tokens.&lt;/p&gt;
&lt;p&gt;The callbacks are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;after_encode_and_sign&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;after_sign_in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;before_sign_out&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build_claims&lt;/code&gt; - Use this to tweak the claims that you include in your token&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_token_type&lt;/code&gt; - default is &lt;code&gt;"access"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_exchange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_revoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_refresh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_verify&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verify_claims&lt;/code&gt; - You can add custom validations for your tokens in this callback&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-plugs" class="anchor" aria-hidden="true" href="#plugs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugs&lt;/h2&gt;
&lt;p&gt;Guardian provides various plugs to help work with web requests in Elixir.
Guardians plugs are optional and will not be compiled if you're not using Plug in your application.&lt;/p&gt;
&lt;p&gt;All plugs need to be in a &lt;code&gt;pipeline&lt;/code&gt;.
A pipeline is just a way to get the implementation module and error handler
into the connection for use downstream. More information can be found in the &lt;code&gt;Pipelines&lt;/code&gt; section.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-plugs-and-keys-advanced-usage" class="anchor" aria-hidden="true" href="#plugs-and-keys-advanced-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugs and keys (advanced usage)&lt;/h3&gt;
&lt;p&gt;All Plugs and related functions provided by &lt;code&gt;Guardian&lt;/code&gt; have the concept of a &lt;code&gt;key&lt;/code&gt;.
A &lt;code&gt;key&lt;/code&gt; specifies a label that is used to keep tokens separate so that you can have multiple token/resource/claims active in a single request.&lt;/p&gt;
&lt;p&gt;In your plug pipeline you may use something like:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;VerifyHeader&lt;/span&gt;, &lt;span class="pl-c1"&gt;key:&lt;/span&gt; &lt;span class="pl-c1"&gt;:impersonate&lt;/span&gt;
plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;EnsureAuthenticated&lt;/span&gt;, &lt;span class="pl-c1"&gt;key:&lt;/span&gt; &lt;span class="pl-c1"&gt;:impersonate&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In your action handler:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;resource &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.current_resource(conn, &lt;span class="pl-c1"&gt;key:&lt;/span&gt; &lt;span class="pl-c1"&gt;:impersonate&lt;/span&gt;)
claims &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.current_claims(conn, &lt;span class="pl-c1"&gt;key:&lt;/span&gt; &lt;span class="pl-c1"&gt;:impersonate&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-plugs-out-of-the-box" class="anchor" aria-hidden="true" href="#plugs-out-of-the-box"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugs out of the box&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugverifyheader" class="anchor" aria-hidden="true" href="#guardianplugverifyheader"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.VerifyHeader&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Look for a token in the header and verify it&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugverifysession" class="anchor" aria-hidden="true" href="#guardianplugverifysession"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.VerifySession&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Look for a token in the session and verify it&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugverifycookie" class="anchor" aria-hidden="true" href="#guardianplugverifycookie"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.VerifyCookie&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Look for a token in cookies and exchange it for an access token&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugslidingcookie" class="anchor" aria-hidden="true" href="#guardianplugslidingcookie"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.SlidingCookie&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Replace the token in cookies with a new one when a configured minimum TTL
is remaining.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugensureauthenticated" class="anchor" aria-hidden="true" href="#guardianplugensureauthenticated"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.EnsureAuthenticated&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Make sure that a token was found and is valid&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugensurenotauthenticated" class="anchor" aria-hidden="true" href="#guardianplugensurenotauthenticated"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.EnsureNotAuthenticated&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Make sure no one is logged in&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugloadresource" class="anchor" aria-hidden="true" href="#guardianplugloadresource"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.LoadResource&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If a token was found, load the resource for it&lt;/p&gt;
&lt;p&gt;See the documentation for each Plug for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-pipelines" class="anchor" aria-hidden="true" href="#pipelines"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pipelines&lt;/h3&gt;
&lt;p&gt;A pipeline is a way to collect together the various plugs for a particular authentication scheme.&lt;/p&gt;
&lt;p&gt;Apart from keeping an authentication flow together, pipelines provide downstream information for error handling and which implementation module to use. You can provide this separately but we recommend creating a pipeline plug.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-create-a-custom-pipeline" class="anchor" aria-hidden="true" href="#create-a-custom-pipeline"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create a custom pipeline&lt;/h4&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthAccessPipeline&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Pipeline&lt;/span&gt;, &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;

  plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;VerifySession&lt;/span&gt;, &lt;span class="pl-c1"&gt;claims:&lt;/span&gt; %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;typ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;access&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;VerifyHeader&lt;/span&gt;, &lt;span class="pl-c1"&gt;claims:&lt;/span&gt; %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;typ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;access&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;EnsureAuthenticated&lt;/span&gt;
  plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;LoadResource&lt;/span&gt;, &lt;span class="pl-c1"&gt;allow_blank:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, the LoadResource plug will return an error if no resource can be found.
You can override this behaviour using the &lt;code&gt;allow_blank: true&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;Add your implementation module and error handler to your configuration:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthAccessPipeline&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;module:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;error_handler:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthErrorHandler&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By using a pipeline, apart from keeping your auth logic together, you're instructing downstream plugs to use a particular implementation module and error handler.&lt;/p&gt;
&lt;p&gt;If you wanted to do that manually:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Pipeline&lt;/span&gt;, &lt;span class="pl-c1"&gt;module:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
                             &lt;span class="pl-c1"&gt;error_handler:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthErrorHandler&lt;/span&gt;

plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;VerifySession&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-plug-error-handlers" class="anchor" aria-hidden="true" href="#plug-error-handlers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plug Error Handlers&lt;/h3&gt;
&lt;p&gt;The error handler is a module that implements an &lt;code&gt;auth_error&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthErrorHandler&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Conn&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@behaviour&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;ErrorHandler&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;ErrorHandler&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;auth_error&lt;/span&gt;(conn, {type, reason}, _opts) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    body &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Jason&lt;/span&gt;.encode!(%{&lt;span class="pl-c1"&gt;message:&lt;/span&gt; to_string(type)})
    send_resp(conn, &lt;span class="pl-c1"&gt;401&lt;/span&gt;, body)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-phoenix" class="anchor" aria-hidden="true" href="#phoenix"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Phoenix&lt;/h3&gt;
&lt;p&gt;Guardian provides some integration with Phoenix out of the box.
Not a lot is really needed but around sockets, some helper functions have been provided to make things easier to work with.&lt;/p&gt;
&lt;p&gt;Please see the documentation for &lt;code&gt;Guardian.Phoenix.Socket&lt;/code&gt; for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-permissions" class="anchor" aria-hidden="true" href="#permissions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Permissions&lt;/h2&gt;
&lt;p&gt;Permissions can be encoded into your token as an optional add-in.&lt;/p&gt;
&lt;p&gt;Encoding permissions into a token is useful in some areas of authorization.
The permissions provided by &lt;code&gt;Guardian.Permissions&lt;/code&gt; have one level of nesting.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;users -&amp;gt; profile_read&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;users -&amp;gt; profile_write&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;users -&amp;gt; followers_read&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;users -&amp;gt; followers_write&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;admin -&amp;gt; all_users_read&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;admin -&amp;gt; all_users_write&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once a permission is granted it is valid for as long as the token is valid.
Since the permission is valid for the life of a token it is not suitable to encode highly dynamic information into a token. These permissions are similar in intent to OAuth scopes. Very useful as a broad grant to an area of code for 3rd party services / other microservices. If you have a requirement to look up permissions from your database for a particular user on each request, these are not the permissions you're looking for.&lt;/p&gt;
&lt;p&gt;Please see &lt;code&gt;Guardian.Permissions&lt;/code&gt; for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tracking-tokens" class="anchor" aria-hidden="true" href="#tracking-tokens"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tracking Tokens&lt;/h2&gt;
&lt;p&gt;When using tokens, depending on the type of token you use, nothing may happen by default when you &lt;code&gt;revoke&lt;/code&gt; a token.&lt;/p&gt;
&lt;p&gt;For example, JWT tokens by default are not tracked by the application.
The fact that they are signed with the correct secret and are not expired is usually how validation of if a token is active or not. Depending on your use-case this may not be enough for your application needs.
If you need to track and revoke individual tokens, you may need to use something like
&lt;a href="https://github.com/ueberauth/guardian_db"&gt;GuardianDb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This will record each token issued in your database, confirm it is still valid on each access and then finally when you &lt;code&gt;revoke&lt;/code&gt; (called on sign_out or manually) invalidate the token.&lt;/p&gt;
&lt;p&gt;For more in-depth documentation please see the &lt;a href="https://github.com/ueberauth/guardian_db/blob/master/README.md"&gt;GuardianDb README&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-best-testing-practices" class="anchor" aria-hidden="true" href="#best-testing-practices"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Best testing practices&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-how-to-add-the-token-to-a-request-the-phoenix-way" class="anchor" aria-hidden="true" href="#how-to-add-the-token-to-a-request-the-phoenix-way"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to add the token to a request (the Phoenix way)&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;HelloWeb&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthControllerTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;HelloWeb&lt;/span&gt;.&lt;span class="pl-en"&gt;ConnCase&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;HelloWeb&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;

 test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GET /auth/me&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;conn:&lt;/span&gt; conn} &lt;span class="pl-k"&gt;do&lt;/span&gt;
    user &lt;span class="pl-k"&gt;=&lt;/span&gt; insert(&lt;span class="pl-c1"&gt;:user&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; See https://github.com/thoughtbot/ex_machina&lt;/span&gt;

    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, _} &lt;span class="pl-k"&gt;=&lt;/span&gt; encode_and_sign(user, %{}, &lt;span class="pl-c1"&gt;token_type:&lt;/span&gt; &lt;span class="pl-c1"&gt;:access&lt;/span&gt;)

    conn &lt;span class="pl-k"&gt;=&lt;/span&gt; conn
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; put_req_header(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;authorization&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bearer: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; token)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; get(auth_path(conn, &lt;span class="pl-c1"&gt;:me&lt;/span&gt;))

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Assert things here&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-related-projects" class="anchor" aria-hidden="true" href="#related-projects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hex.pm/packages/guardian_db" rel="nofollow"&gt;GuardianDb&lt;/a&gt; - Token tracking in the database&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hex.pm/packages/sans_password" rel="nofollow"&gt;sans_password&lt;/a&gt; - A simple, passwordless authentication system based on Guardian.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hex.pm/packages/protego" rel="nofollow"&gt;protego&lt;/a&gt; - Flexible authentication solution for Elixir/Phoenix with Guardian.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-more-advanced-secrets" class="anchor" aria-hidden="true" href="#more-advanced-secrets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;More advanced secrets&lt;/h2&gt;
&lt;p&gt;By specifying a binary, the default behavior is to treat the key as an &lt;a href="https://tools.ietf.org/html/rfc7518#section-6.4" rel="nofollow"&gt;&lt;code&gt;"oct"&lt;/code&gt;&lt;/a&gt; key type (short for octet sequence). This key type may be used with the &lt;code&gt;"HS256"&lt;/code&gt;, &lt;code&gt;"HS384"&lt;/code&gt;, and &lt;code&gt;"HS512"&lt;/code&gt; signature algorithms.&lt;/p&gt;
&lt;p&gt;Alternatively, a configuration value that resolves to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%JOSE.JWK{} Struct&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;may be specified for other key types. A full list of example key types is available &lt;a href="https://gist.github.com/potatosalad/925a8b74d85835e285b9"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://hexdocs.pm/jose/key-generation.html" rel="nofollow"&gt;key generation docs&lt;/a&gt; from Jose for how to generate your own keys.&lt;/p&gt;
&lt;p&gt;To get off the ground quickly, set your &lt;code&gt;secret_key&lt;/code&gt; in your Guardian config with the output of either:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ mix guardian.gen.secret&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iex(1)&amp;gt; JOSE.JWS.generate_key(%{"alg" =&amp;gt; "HS512"}) |&amp;gt; JOSE.JWK.to_map |&amp;gt; elem(1) |&amp;gt; Map.take(["k", "kty"])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After running &lt;code&gt;$ mix deps.get&lt;/code&gt; because JOSE is one of Guardian's dependencies.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;##&lt;/span&gt; Map ##&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;allowed_algos:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ES512&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
  &lt;span class="pl-c1"&gt;secret_key:&lt;/span&gt; %{
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;crv&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;P-521&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;axDuTtGavPjnhlfnYAwkHa4qyfz2fdseppXEzmKpQyY0xd3bGpYLEF4ognDpRJm5IRaM31Id2NfEtDFw4iTbDSE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;kty&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;EC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AL0H8OvP5NuboUoj8Pb3zpBcDyEJN907wMxrCy7H2062i3IRPF5NQ546jIJU3uQX5KN2QB_Cq6R_SUqyVZSNpIfC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ALdxLuo6oKLoQ-xLSkShv_TA0di97I9V92sg1MKFava5hKGST1EKiVQnZMrN3HO8LtLT78SNTgwJSQHAXIUaA-lV&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;##&lt;/span&gt; Tuple ##&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If, for example, you have your secret key stored externally (in this example, we're using Redix).&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; defined elsewhere&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MySecretKey&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Bad practice for example purposes only.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; An already established connection should be used and possibly cache the value locally.&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, conn} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Redix&lt;/span&gt;.start_link
    rsa_jwk &lt;span class="pl-k"&gt;=&lt;/span&gt; conn
      &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Redix&lt;/span&gt;.command!([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GET my-rsa-key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
      &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;JOSE&lt;/span&gt;.&lt;span class="pl-en"&gt;JWK&lt;/span&gt;.from_binary
    &lt;span class="pl-en"&gt;Redix&lt;/span&gt;.stop(conn)
    rsa_jwk
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;allowed_algos:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RS512&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
  &lt;span class="pl-c1"&gt;secret_key:&lt;/span&gt; {&lt;span class="pl-en"&gt;MySecretKey&lt;/span&gt;, &lt;span class="pl-c1"&gt;:fetch&lt;/span&gt;, []}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;##&lt;/span&gt; %JOSE.JWK{} Struct ##&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Useful if you store your secret key in an encrypted JSON file with the passphrase in an environment variable.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; defined elsewhere&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MySecretKey&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;System&lt;/span&gt;.get_env(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SECRET_KEY_PASSPHRASE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;JOSE&lt;/span&gt;.&lt;span class="pl-en"&gt;JWK&lt;/span&gt;.from_file(&lt;span class="pl-en"&gt;System&lt;/span&gt;.get_env(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SECRET_KEY_FILE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;allowed_algos:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Ed25519&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
  &lt;span class="pl-c1"&gt;secret_key:&lt;/span&gt; {&lt;span class="pl-en"&gt;MySecretKey&lt;/span&gt;, &lt;span class="pl-c1"&gt;:fetch&lt;/span&gt;, []}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A full example of how to configure guardian to use private/public key files as secrets, can be found &lt;a href="https://github.com/ueberauth/guardian_pemfile_config_example"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ueberauth</author><guid isPermaLink="false">https://github.com/ueberauth/guardian</guid><pubDate>Mon, 04 Nov 2019 00:02:00 GMT</pubDate></item><item><title>elixir-ecto/ecto #3 in Elixir, Today</title><link>https://github.com/elixir-ecto/ecto</link><description>&lt;p&gt;&lt;i&gt;A toolkit for data mapping and language integrated query&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/elixir-ecto/ecto/raw/master/guides/images/logo.png"&gt;&lt;img width="250" src="https://github.com/elixir-ecto/ecto/raw/master/guides/images/logo.png" alt="Ecto" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://github.com/elixir-ecto/ecto/actions"&gt;&lt;img src="https://github.com/elixir-ecto/ecto/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ecto is a toolkit for data mapping and language integrated query for Elixir. Here is an example:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; In your config/config.exs file&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;ecto_repos:&lt;/span&gt; [&lt;span class="pl-en"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;]

config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;database:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ecto_simple&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;username:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;postgres&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;password:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;postgres&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;hostname:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;localhost&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;port:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5432&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; In your application code&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;adapter:&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapters&lt;/span&gt;.&lt;span class="pl-en"&gt;Postgres&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;Weather&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Schema&lt;/span&gt;

  schema &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;weather&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    field &lt;span class="pl-c1"&gt;:city&lt;/span&gt;     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Defaults to type :string&lt;/span&gt;
    field &lt;span class="pl-c1"&gt;:temp_lo&lt;/span&gt;, &lt;span class="pl-c1"&gt;:integer&lt;/span&gt;
    field &lt;span class="pl-c1"&gt;:temp_hi&lt;/span&gt;, &lt;span class="pl-c1"&gt;:integer&lt;/span&gt;
    field &lt;span class="pl-c1"&gt;:prcp&lt;/span&gt;,    &lt;span class="pl-c1"&gt;:float&lt;/span&gt;, &lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;0.0&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;App&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;
  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;Sample&lt;/span&gt;.{&lt;span class="pl-en"&gt;Weather&lt;/span&gt;, &lt;span class="pl-en"&gt;Repo&lt;/span&gt;}

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;keyword_query&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    query &lt;span class="pl-k"&gt;=&lt;/span&gt;
      from w &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-en"&gt;Weather&lt;/span&gt;,
           &lt;span class="pl-c1"&gt;where:&lt;/span&gt; w.prcp &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;or&lt;/span&gt; is_nil(w.prcp),
           &lt;span class="pl-c1"&gt;select:&lt;/span&gt; w

    &lt;span class="pl-en"&gt;Repo&lt;/span&gt;.all(query)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;pipe_query&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Weather&lt;/span&gt;
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; where(&lt;span class="pl-c1"&gt;city:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Kraków&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; order_by(&lt;span class="pl-c1"&gt;:temp_lo&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; limit(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Repo&lt;/span&gt;.all
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ecto is commonly used to interact with databases, such as Postgres and MySQL via &lt;a href="http://hexdocs.pm/ecto_sql" rel="nofollow"&gt;Ecto.Adapters.SQL&lt;/a&gt; (&lt;a href="https://github.com/elixir-ecto/ecto_sql"&gt;source code&lt;/a&gt;). Ecto is also commonly used to map data from any source into Elixir structs, regardless if they are backed by a database or not.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="http://hexdocs.pm/ecto/getting-started.html" rel="nofollow"&gt;getting started guide&lt;/a&gt; and the &lt;a href="http://hexdocs.pm/ecto" rel="nofollow"&gt;online documentation&lt;/a&gt; for more information. Other resources available are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pragprog.com/book/wmecto/programming-ecto" rel="nofollow"&gt;Programming Ecto&lt;/a&gt;, by Darin Wilson and Eric Meadows-Jönsson, which guides you from fundamentals up to advanced concepts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pages.plataformatec.com.br/the-little-ecto-cookbook" rel="nofollow"&gt;The Little Ecto Cookbook&lt;/a&gt;, a free ebook by Plataformatec, which is a curation of the existing Ecto guides with some extra contents&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;You need to add both Ecto and the database adapter as a dependency to your &lt;code&gt;mix.exs&lt;/code&gt; file. The supported databases and their adapters are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Database&lt;/th&gt;
&lt;th align="left"&gt;Ecto Adapter&lt;/th&gt;
&lt;th align="left"&gt;Dependencies&lt;/th&gt;
&lt;th align="left"&gt;Ecto 3.0 compatible?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;PostgreSQL&lt;/td&gt;
&lt;td align="left"&gt;Ecto.Adapters.Postgres&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto_sql"&gt;ecto_sql&lt;/a&gt; + &lt;a href="http://github.com/elixir-ecto/postgrex"&gt;postgrex&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MySQL&lt;/td&gt;
&lt;td align="left"&gt;Ecto.Adapters.MyXQL&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto_sql"&gt;ecto_sql&lt;/a&gt; + &lt;a href="http://github.com/elixir-ecto/myxql"&gt;myxql&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MSSQL&lt;/td&gt;
&lt;td align="left"&gt;MssqlEcto&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto_sql"&gt;ecto_sql&lt;/a&gt; + &lt;a href="https://github.com/findmypast-oss/mssql_ecto"&gt;mssql_ecto&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MSSQL&lt;/td&gt;
&lt;td align="left"&gt;Tds.Ecto&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto_sql"&gt;ecto_sql&lt;/a&gt; + &lt;a href="https://github.com/livehelpnow/tds_ecto"&gt;tds_ecto&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SQLite    &lt;/td&gt;
&lt;td align="left"&gt;Sqlite.Ecto2        &lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto"&gt;ecto&lt;/a&gt; + &lt;a href="https://github.com/scouten/sqlite_ecto2"&gt;sqlite_ecto2&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Mnesia    &lt;/td&gt;
&lt;td align="left"&gt;EctoMnesia.Adapter   &lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto"&gt;ecto&lt;/a&gt; + &lt;a href="https://github.com/Nebo15/ecto_mnesia"&gt;ecto_mnesia&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example, if you want to use PostgreSQL, add to your &lt;code&gt;mix.exs&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:ecto_sql&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 3.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    {&lt;span class="pl-c1"&gt;:postgrex&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;gt;= 0.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;mix deps.get&lt;/code&gt; in your shell to fetch the dependencies. If you want to use another database, just choose the proper dependency from the table above.&lt;/p&gt;
&lt;p&gt;Finally, in the repository definition, you will need to specify the &lt;code&gt;adapter:&lt;/code&gt; respective to the chosen dependency. For PostgreSQL it is:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;adapter:&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapters&lt;/span&gt;.&lt;span class="pl-en"&gt;Postgres&lt;/span&gt;,
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-supported-versions" class="anchor" aria-hidden="true" href="#supported-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported Versions&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Branch&lt;/th&gt;
&lt;th&gt;Support&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;v3.1&lt;/td&gt;
&lt;td&gt;Bug fixes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v3.0&lt;/td&gt;
&lt;td&gt;Security patches only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2.2&lt;/td&gt;
&lt;td&gt;Security patches only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2.1&lt;/td&gt;
&lt;td&gt;Unsupported from 10/2018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2.0&lt;/td&gt;
&lt;td&gt;Unsupported from 08/2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.1&lt;/td&gt;
&lt;td&gt;Unsupported from 03/2018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.0&lt;/td&gt;
&lt;td&gt;Unsupported from 05/2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With the version 3.0, Ecto has become API stable. This means no more new features, although we will continue providing bug fixes and updates. For everyone running Ecto in production, rest assured that Ecto will continue to be a well maintained project with the same production quality and polish that our users are familiar with.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-important-links" class="anchor" aria-hidden="true" href="#important-links"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Important links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hexdocs.pm/ecto" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/elixir-ecto" rel="nofollow"&gt;Mailing list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-ecto/ecto/tree/master/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running tests&lt;/h3&gt;
&lt;p&gt;Clone the repo and fetch its dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/elixir-ecto/ecto.git
$ cd ecto
$ mix deps.get
$ mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;mix test&lt;/code&gt; does not run the tests in the &lt;code&gt;integration_test&lt;/code&gt; folder. To run integration tests, you can clone &lt;code&gt;ecto_sql&lt;/code&gt; in a sibling directory and then run its integration tests with the &lt;code&gt;ECTO_PATH&lt;/code&gt; environment variable pointing to your Ecto checkout:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ..
$ git clone https://github.com/elixir-ecto/ecto_sql.git
$ cd ecto_sql
$ ECTO_PATH=../ecto mix test.all
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-copyright-and-license" class="anchor" aria-hidden="true" href="#copyright-and-license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Copyright and License&lt;/h2&gt;
&lt;p&gt;"Ecto" and the Ecto logo are Copyright (c) 2013 Plataformatec.&lt;/p&gt;
&lt;p&gt;The Ecto logo was designed by &lt;a href="http://www.danewesolko.com" rel="nofollow"&gt;Dane Wesolko&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The source code is under the Apache License 2.0.&lt;/p&gt;
&lt;p&gt;Copyright (c) 2013 Plataformatec&lt;/p&gt;
&lt;p&gt;Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at &lt;a href="http://www.apache.org/licenses/LICENSE-2.0" rel="nofollow"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>elixir-ecto</author><guid isPermaLink="false">https://github.com/elixir-ecto/ecto</guid><pubDate>Mon, 04 Nov 2019 00:03:00 GMT</pubDate></item><item><title>keathley/wallaby #4 in Elixir, Today</title><link>https://github.com/keathley/wallaby</link><description>&lt;p&gt;&lt;i&gt;Concurrent browser tests with elixir&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4401f260dcbda1f74ae798cbae190ab10e7847fc/68747470733a2f2f692e696d6775722e636f6d2f655131746c49332e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/4401f260dcbda1f74ae798cbae190ab10e7847fc/68747470733a2f2f692e696d6775722e636f6d2f655131746c49332e706e67" alt="Wallaby" data-canonical-src="https://i.imgur.com/eQ1tlI3.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/keathley/wallaby" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce0e1fc1117d9eb1bbe79b3632219101f2d59137/68747470733a2f2f7472617669732d63692e6f72672f6b656174686c65792f77616c6c6162792e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/keathley/wallaby.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hex.pm/packages/wallaby" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6c2177cfe7a3edba96ea60967644bc547ea89e5e/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f762f77616c6c6162792e7376673f7374796c653d666c6174" alt="Hex pm" data-canonical-src="https://img.shields.io/hexpm/v/wallaby.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/keathley/wallaby?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d22ac8a421e2ab79165800d8338f41c384ae5bdb/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b656174686c65792f77616c6c6162792f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/keathley/wallaby/badge.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://inch-ci.org/github/keathley/wallaby" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/54c84b6f9dc09165cc4df86dfb4b900d3ffceb95/687474703a2f2f696e63682d63692e6f72672f6769746875622f6b656174686c65792f77616c6c6162792e737667" alt="Inline docs" data-canonical-src="http://inch-ci.org/github/keathley/wallaby.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wallaby helps you test your web applications by simulating realistic user interactions.
By default it runs each test case concurrently and manages browsers for you.
Here's an example test for a simple Todo application:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-e"&gt;Features&lt;/span&gt;.&lt;span class="pl-en"&gt;TodoTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;FeatureCase&lt;/span&gt;, &lt;span class="pl-c1"&gt;async:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; [&lt;span class="pl-c1"&gt;css:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;text_field:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;button:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;]

  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users can create todos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;session:&lt;/span&gt; session} &lt;span class="pl-k"&gt;do&lt;/span&gt;
    session
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; visit(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/todos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;New Todo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Write my first Wallaby test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Save&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;You created a todo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.todo-list &amp;gt; .todo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Write my first Wallaby test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because Wallaby manages multiple browsers for you, its possible to test several users interacting with a page simultaneously.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-e"&gt;Features&lt;/span&gt;.&lt;span class="pl-en"&gt;MultipleUsersTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;FeatureCase&lt;/span&gt;, &lt;span class="pl-c1"&gt;async:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; [&lt;span class="pl-c1"&gt;text_field:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;button:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;css:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;]

  &lt;span class="pl-smi"&gt;@page&lt;/span&gt; message_path(&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;, &lt;span class="pl-c1"&gt;:index&lt;/span&gt;)
  &lt;span class="pl-smi"&gt;@message_field&lt;/span&gt; text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Share Message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-smi"&gt;@share_button&lt;/span&gt; button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Share&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;message&lt;/span&gt;(msg), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.messages &amp;gt; .message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; msg)

  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;That users can send messages to each other&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, user1} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.start_session
    user1
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; visit(&lt;span class="pl-smi"&gt;@page&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(&lt;span class="pl-smi"&gt;@message_field&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(&lt;span class="pl-smi"&gt;@share_button&lt;/span&gt;)

    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, user2} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.start_session
    user2
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; visit(&lt;span class="pl-smi"&gt;@page&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(&lt;span class="pl-smi"&gt;@message_field&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello yourself&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(&lt;span class="pl-smi"&gt;@share_button&lt;/span&gt;)

    user1
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(message(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello yourself&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

    user2
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(message(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read on to see what else Wallaby can do or check out the &lt;a href="https://hexdocs.pm/wallaby" rel="nofollow"&gt;Official Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;p&gt;Add Wallaby to your list of dependencies in &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.23.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-c1"&gt;runtime:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; &lt;span class="pl-c1"&gt;:test&lt;/span&gt;]}]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then ensure that Wallaby is started in your &lt;code&gt;test_helper.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt;.ensure_all_started(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-phoenix" class="anchor" aria-hidden="true" href="#phoenix"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Phoenix&lt;/h3&gt;
&lt;p&gt;If you're testing a Phoenix application with Ecto 2 or 3 and a database that supports sandbox mode then you can enable concurrent testing by adding the &lt;code&gt;Phoenix.Ecto.SQL.Sandbox&lt;/code&gt; plug to your &lt;code&gt;Endpoint&lt;/code&gt;.
It's important that this is at the top of &lt;code&gt;endpoint.ex&lt;/code&gt; before any other plugs.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; lib/endpoint.ex&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;, &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:your_app&lt;/span&gt;

  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt;.get_env(&lt;span class="pl-c1"&gt;:your_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;:sql_sandbox&lt;/span&gt;) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    plug &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure Phoenix is set up to serve endpoints in tests and that the SQL sandbox is enabled:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/test.exs&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:your_app&lt;/span&gt;, &lt;span class="pl-en"&gt;YourApplication&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;server:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:your_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;:sql_sandbox&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in your &lt;code&gt;test_helper.exs&lt;/code&gt; you can provide some configuration to Wallaby.
At minimum, you need to specify a &lt;code&gt;:base_url&lt;/code&gt;, so Wallaby knows how to resolve relative paths.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; test/test_helper.exs&lt;/span&gt;

&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:base_url&lt;/span&gt;, &lt;span class="pl-en"&gt;YourApplication&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;.url)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-assets" class="anchor" aria-hidden="true" href="#assets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Assets&lt;/h4&gt;
&lt;p&gt;Assets are not re-compiled when you run &lt;code&gt;mix test&lt;/code&gt;.
This can lead to confusion if you've made changes in javascript or css but tests are still failing.
There are two common ways to avoid this confusion.&lt;/p&gt;
&lt;p&gt;The first solution is to run &lt;code&gt;webpack --mode development --watch&lt;/code&gt; from the assets directory.
This will ensure that assets get recompiled after any changes.&lt;/p&gt;
&lt;p&gt;The second solution is to add a new alias to your mix config that recompiles assets for you:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;project&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    [
      &lt;span class="pl-c1"&gt;app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;version:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;aliases:&lt;/span&gt; aliases()
    ]
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;aliases&lt;/span&gt;, &lt;span class="pl-c1"&gt;do:&lt;/span&gt; [
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: [
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;assets.compile --quiet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ecto.create --quiet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ecto.migrate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    ],
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;assets.compile&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;compile_assets&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;
  ]

  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;compile_assets&lt;/span&gt;(_) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Mix&lt;/span&gt;.shell().cmd(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;./assets/node_modules/webpack/bin/webpack.js --mode development&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;quiet:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
    )
  &lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method is less error prone but it will cause a delay when starting your test suite.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-umbrella-apps" class="anchor" aria-hidden="true" href="#umbrella-apps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Umbrella Apps&lt;/h4&gt;
&lt;p&gt;If you're testing an umbrella application containing a Phoenix application for the web interface (&lt;code&gt;MyWebApp&lt;/code&gt;) and a separate persistence application (&lt;code&gt;MyPersistenceApp&lt;/code&gt;) using Ecto 2 or 3 with a database that supports sandbox mode, then you can use the same setup as above, with a few tweaks.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; my_web_app/lib/endpoint.ex&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyWebApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;, &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_web_app&lt;/span&gt;

  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt;.get_env(&lt;span class="pl-c1"&gt;:my_persistence_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;:sql_sandbox&lt;/span&gt;) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    plug &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure &lt;code&gt;MyWebApp&lt;/code&gt; is set up to serve endpoints in tests and that the SQL sandbox is enabled:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; my_web_app/config/test.exs&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_web_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyWebApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;server:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_persistence_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;:sql_sandbox&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in &lt;code&gt;MyWebApp&lt;/code&gt;'s &lt;code&gt;test_helper.exs&lt;/code&gt; you can provide some configuration to Wallaby.
At minimum, you need to specify a &lt;code&gt;:base_url&lt;/code&gt;, so Wallaby knows how to resolve relative paths.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; my_web_app/test/test_helper.exs&lt;/span&gt;

&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:base_url&lt;/span&gt;, &lt;span class="pl-en"&gt;MyWebApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;.url)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will also want to add &lt;code&gt;phoenix_ecto&lt;/code&gt; as a dependency to &lt;code&gt;MyWebApp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; my_web_app/mix.exs&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.23&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; &lt;span class="pl-c1"&gt;:test&lt;/span&gt;},
    {&lt;span class="pl-c1"&gt;:phoenix_ecto&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 3.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; &lt;span class="pl-c1"&gt;:test&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-phantomjs" class="anchor" aria-hidden="true" href="#phantomjs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PhantomJS&lt;/h3&gt;
&lt;p&gt;Wallaby requires PhantomJS. You can install PhantomJS through NPM or your package manager of choice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install -g phantomjs-prebuilt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wallaby will use whatever PhantomJS you have installed in your path. If you need to specify a specific PhantomJS you can pass the path in the configuration:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;phantomjs:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some/path/to/phantomjs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also pass arguments to PhantomJS through the &lt;code&gt;phantomjs_args&lt;/code&gt; config setting, e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;phantomjs_args:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--webdriver-logfile=phantomjs.log&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-writing-tests" class="anchor" aria-hidden="true" href="#writing-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing tests&lt;/h3&gt;
&lt;p&gt;It's easiest to add Wallaby to your test suite by creating a new case template (in case of an umbrella app, take care to adjust &lt;code&gt;YourApp&lt;/code&gt; appropriately):&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;FeatureCase&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;ExUnit&lt;/span&gt;.&lt;span class="pl-en"&gt;CaseTemplate&lt;/span&gt;

  using &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;quote&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
      &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;DSL&lt;/span&gt;

      &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;
      &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;
      &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Changeset&lt;/span&gt;
      &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;

      &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Router&lt;/span&gt;.&lt;span class="pl-en"&gt;Helpers&lt;/span&gt;
    &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  setup tags &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapters&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;.checkout(&lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;)

    &lt;span class="pl-k"&gt;unless&lt;/span&gt; tags[&lt;span class="pl-c1"&gt;:async&lt;/span&gt;] &lt;span class="pl-k"&gt;do&lt;/span&gt;
      &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapters&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;.mode(&lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;, {&lt;span class="pl-c1"&gt;:shared&lt;/span&gt;, self()})
    &lt;span class="pl-k"&gt;end&lt;/span&gt;

    metadata &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;.metadata_for(&lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;, self())
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, session} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.start_session(&lt;span class="pl-c1"&gt;metadata:&lt;/span&gt; metadata)
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, &lt;span class="pl-c1"&gt;session:&lt;/span&gt; session}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can write tests like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;UserListTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;FeatureCase&lt;/span&gt;, &lt;span class="pl-c1"&gt;async:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; [&lt;span class="pl-c1"&gt;css:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;]

  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users have names&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;session:&lt;/span&gt; session} &lt;span class="pl-k"&gt;do&lt;/span&gt;
    session
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; visit(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; find(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;count:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;List&lt;/span&gt;.first()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-api" class="anchor" aria-hidden="true" href="#api"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;API&lt;/h2&gt;
&lt;p&gt;The full documentation for the DSL is in the &lt;a href="https://hexdocs.pm/wallaby" rel="nofollow"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-queries-and-actions" class="anchor" aria-hidden="true" href="#queries-and-actions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Queries and Actions&lt;/h3&gt;
&lt;p&gt;Wallaby's API is broken into 2 concepts: Queries and Actions.&lt;/p&gt;
&lt;p&gt;Queries allow us to declaratively describe the elements that we would like to interact with and Actions allow us to use those queries to interact with the DOM.&lt;/p&gt;
&lt;p&gt;Lets say that our html looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic"&gt;&lt;pre&gt;&amp;lt;&lt;span class="pl-ent"&gt;ul&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class="pl-ent"&gt;li&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;Ada&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="pl-ent"&gt;li&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class="pl-ent"&gt;li&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;Grace&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="pl-ent"&gt;li&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class="pl-ent"&gt;li&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;Alan&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="pl-ent"&gt;li&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class="pl-ent"&gt;ul&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we wanted to interact with all of the users then we could write a query like so &lt;code&gt;css(".user", count: 3)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we only wanted to interact with a specific user then we could write a query like this &lt;code&gt;css(".user-name", count: 1, text: "Ada")&lt;/code&gt;. Now we can use those queries with some actions:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;session
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; find(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;count:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;List&lt;/span&gt;.first
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;count:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Ada&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are several queries for common html elements defined in the &lt;a href="https://hexdocs.pm/wallaby/Wallaby.Query.html#content" rel="nofollow"&gt;Query module&lt;/a&gt;.
All actions accept a query.
This makes it easy to use queries we've already defined.
Actions will block until the query is either satisfied or the action times out.
Blocking reduces race conditions when elements are added or removed dynamically.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-navigation" class="anchor" aria-hidden="true" href="#navigation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Navigation&lt;/h3&gt;
&lt;p&gt;We can navigate directly to pages with &lt;code&gt;visit&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;visit(session, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/page.html&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
visit(session, user_path(&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;, &lt;span class="pl-c1"&gt;:index&lt;/span&gt;, &lt;span class="pl-c1"&gt;17&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's also possible to click links directly:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;click(session, link(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Page 1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-finding" class="anchor" aria-hidden="true" href="#finding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Finding&lt;/h3&gt;
&lt;p&gt;We can find a specific element or list of elements with &lt;code&gt;find&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-smi"&gt;@user_form&lt;/span&gt;   css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-form&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-smi"&gt;@name_field&lt;/span&gt;  text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-smi"&gt;@email_field&lt;/span&gt; text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-smi"&gt;@save_button&lt;/span&gt; button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Save&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

find(page, &lt;span class="pl-smi"&gt;@user_form&lt;/span&gt;, &lt;span class="pl-k"&gt;fn&lt;/span&gt;(form) &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
  form
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(&lt;span class="pl-smi"&gt;@name_field&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(&lt;span class="pl-smi"&gt;@email_field&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c@keathley.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(&lt;span class="pl-smi"&gt;@save_button&lt;/span&gt;)
&lt;span class="pl-k"&gt;end&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Passing a callback to &lt;code&gt;find&lt;/code&gt; will return the parent which makes it easy to chain &lt;code&gt;find&lt;/code&gt; with other actions:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;page
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; find(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt; assert has?(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt;, css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;count:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(link(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next Page&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without the callback &lt;code&gt;find&lt;/code&gt; returns the element.
This provides a way to scope all future actions within an element.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;page
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; find(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-form&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c@keathley.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Save&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-interacting-with-forms" class="anchor" aria-hidden="true" href="#interacting-with-forms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interacting with forms&lt;/h3&gt;
&lt;p&gt;There are a few ways to interact with form elements on a page:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;fill_in(session, text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;First Name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
clear(session, text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;last_name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
click(session, option(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Some option&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
click(session, radio_button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My Fancy Radio Button&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
click(session, button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Some Button&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to send specific keys to an element, you can do that with &lt;code&gt;send_keys&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;send_keys(session, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Text&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;:enter&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-assertions" class="anchor" aria-hidden="true" href="#assertions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Assertions&lt;/h3&gt;
&lt;p&gt;Wallaby provides custom assertions to make writing tests easier:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;assert_has(session, css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.signup-form&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
refute_has(session, css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
has?(session, css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-edit-modal&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;visible:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;assert_has&lt;/code&gt; and &lt;code&gt;refute_has&lt;/code&gt; both take a parent element as their first argument.
They return that parent, making it easy to chain them together with other actions.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;session
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.signup-form&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c@keathley.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Sign up&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; refute_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.error&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Welcome!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-window-size" class="anchor" aria-hidden="true" href="#window-size"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Window Size&lt;/h3&gt;
&lt;p&gt;You can set the default window size by passing in the &lt;code&gt;window_size&lt;/code&gt; option into &lt;code&gt;Wallaby.start_session\1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.start_session(&lt;span class="pl-c1"&gt;window_size:&lt;/span&gt; [&lt;span class="pl-c1"&gt;width:&lt;/span&gt; &lt;span class="pl-c1"&gt;1280&lt;/span&gt;, &lt;span class="pl-c1"&gt;height:&lt;/span&gt; &lt;span class="pl-c1"&gt;720&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also resize the window and get the current window size during the test.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;resize_window(session, &lt;span class="pl-c1"&gt;100&lt;/span&gt;, &lt;span class="pl-c1"&gt;100&lt;/span&gt;)
window_size(session)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h3&gt;
&lt;p&gt;It's possible take screenshots:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;take_screenshot(session)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All screenshots are saved to a &lt;code&gt;screenshots&lt;/code&gt; directory in the directory that the tests were run in.&lt;/p&gt;
&lt;p&gt;If you want to customize the screenshot directory you can pass it as a config value:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/test.exs&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;screenshot_dir:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/file/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; test_helper.exs&lt;/span&gt;
&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:screenshot_dir&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/file/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-automatic-screenshots" class="anchor" aria-hidden="true" href="#automatic-screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic screenshots&lt;/h3&gt;
&lt;p&gt;You can automatically take screenshots on an error:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/test.exs&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;screenshot_on_failure:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; test_helper.exs&lt;/span&gt;
&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:screenshot_on_failure&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-javascript" class="anchor" aria-hidden="true" href="#javascript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JavaScript&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-asynchronous-code" class="anchor" aria-hidden="true" href="#asynchronous-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Asynchronous code&lt;/h3&gt;
&lt;p&gt;Testing asynchronous JavaScript code can expose timing issues and race conditions.
We might try to interact with an element that hasn't yet appeared on the page.
Elements can become stale while we're trying to interact with them.&lt;/p&gt;
&lt;p&gt;Wallaby helps solve this by blocking.
Instead of manually setting timeouts we can use &lt;code&gt;assert_has&lt;/code&gt; and some declarative queries to block until the DOM is in a good state.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;session
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Some Async Button&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.async-result&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next Action&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-interacting-with-dialogs" class="anchor" aria-hidden="true" href="#interacting-with-dialogs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interacting with dialogs&lt;/h3&gt;
&lt;p&gt;Wallaby provides several ways to interact with JavaScript dialogs such as &lt;code&gt;window.alert&lt;/code&gt;, &lt;code&gt;window.confirm&lt;/code&gt; and &lt;code&gt;window.prompt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use one of the following functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;window.alert&lt;/code&gt; use &lt;code&gt;accept_alert/2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;window.confirm&lt;/code&gt; use &lt;code&gt;accept_confirm/2&lt;/code&gt; or &lt;code&gt;dismiss_confirm/2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;window.prompt&lt;/code&gt; use &lt;code&gt;accept_prompt/2-3&lt;/code&gt; or &lt;code&gt;dismiss_prompt/2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these take a function as last parameter, which must include the necessary interactions to trigger the dialog. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;alert_message &lt;span class="pl-k"&gt;=&lt;/span&gt; accept_alert session, &lt;span class="pl-k"&gt;fn&lt;/span&gt;(session) &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
  click(session, link(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Trigger alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To emulate user input for a prompt, &lt;code&gt;accept_prompt&lt;/code&gt; takes an optional parameter:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;prompt_message &lt;span class="pl-k"&gt;=&lt;/span&gt; accept_prompt session, [&lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;User input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], &lt;span class="pl-k"&gt;fn&lt;/span&gt;(session) &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
  click(session, link(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Trigger prompt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-javascript-logging-and-errors" class="anchor" aria-hidden="true" href="#javascript-logging-and-errors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JavaScript logging and errors&lt;/h3&gt;
&lt;p&gt;Wallaby captures both JavaScript logs and errors.
Any uncaught exceptions in JavaScript will be re-thrown in Elixir.
This can be disabled by specifying &lt;code&gt;js_errors: false&lt;/code&gt; in your Wallaby config.&lt;/p&gt;
&lt;p&gt;JavaScript logs are written to :stdio by default.
This can be changed to any IO device by setting the &lt;code&gt;:js_logger&lt;/code&gt; option in your Wallaby config.
For instance if you want to write all JavaScript console logs to a file you could do something like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, file} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;File&lt;/span&gt;.open(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;browser_logs.log&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-c1"&gt;:write&lt;/span&gt;])
&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:js_logger&lt;/span&gt;, file)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Logging can be disabled by setting &lt;code&gt;:js_logger&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-config" class="anchor" aria-hidden="true" href="#config"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Config&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-adjusting-timeouts" class="anchor" aria-hidden="true" href="#adjusting-timeouts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adjusting timeouts&lt;/h3&gt;
&lt;p&gt;Wallaby uses &lt;a href="https://github.com/benoitc/hackney"&gt;hackney&lt;/a&gt; under the hood, so we offer a hook that allows you to control any hackney options you'd like to have sent along on every request.
This can be controlled with the &lt;code&gt;:hackney_options&lt;/code&gt; setting in &lt;code&gt;config.exs&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;hackney_options:&lt;/span&gt; [&lt;span class="pl-c1"&gt;timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;:infinity&lt;/span&gt;, &lt;span class="pl-c1"&gt;recv_timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;:infinity&lt;/span&gt;]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Overriding a value&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;hackney_options:&lt;/span&gt; [&lt;span class="pl-c1"&gt;timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;5_000&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-drivers" class="anchor" aria-hidden="true" href="#drivers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Drivers&lt;/h3&gt;
&lt;p&gt;Wallaby works with PhantomJS out of the box. There is also experimental support for both headless chrome and selenium.
The driver can be specified by setting the &lt;code&gt;driver&lt;/code&gt; option in the wallaby config like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Chrome&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;driver:&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Experimental&lt;/span&gt;.&lt;span class="pl-en"&gt;Chrome&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Selenium&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;driver:&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Experimental&lt;/span&gt;.&lt;span class="pl-en"&gt;Selenium&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See below for more information on the experimental drivers.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-experimental-driver-support" class="anchor" aria-hidden="true" href="#experimental-driver-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Experimental Driver Support&lt;/h2&gt;
&lt;p&gt;Currently Wallaby provides experimental support for both headless chrome and selenium.
Both of these drivers are still "experimental" because they don't support the full API yet and because the implementation is changing rapidly.
But, if you would like to use them in your project here's what you'll need to do.&lt;/p&gt;
&lt;p&gt;Please refer to the &lt;a href="https://hexdocs.pm/wallaby/Wallaby.Experimental.Chrome.html#content" rel="nofollow"&gt;documentation&lt;/a&gt; for further information about using the Chrome driver.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-headless-chrome" class="anchor" aria-hidden="true" href="#headless-chrome"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Headless Chrome&lt;/h3&gt;
&lt;p&gt;In order to run headless chrome you'll need to have ChromeDriver &amp;gt;= 2.30 and chrome &amp;gt;= 60.
Previous versions of both of these tools &lt;em&gt;may&lt;/em&gt; work, but several features will be buggy.
If you want to setup chrome in a CI environment then you'll still need to install and run xvfb.
This is due to a bug in ChromeDriver 2.30 that inhibits ChromeDriver from handling input text correctly.
The bug should be fixed in ChromeDriver 2.31.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-selenium" class="anchor" aria-hidden="true" href="#selenium"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Selenium&lt;/h3&gt;
&lt;p&gt;Please refer to the &lt;a href="https://hexdocs.pm/wallaby/Wallaby.Experimental.Selenium.html#content" rel="nofollow"&gt;documentation&lt;/a&gt; for further information about using the Selenium driver.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Wallaby is a community project. PRs and Issues are greatly welcome.&lt;/p&gt;
&lt;p&gt;To get started and setup the project, make sure you've got Elixir 1.5+ installed and then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix deps.get
$ npm install -g phantomjs-prebuilt # unless you've already got PhantomJS installed
$ mix test # Make sure the tests pass!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Besides running the unit tests above, it is recommended to run the driver
integration tests too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Run only phantomjs integration tests
$ WALLABY_DRIVER=phantom mix test

# Run all tests (unit and all drivers)
$ mix test.all
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>keathley</author><guid isPermaLink="false">https://github.com/keathley/wallaby</guid><pubDate>Mon, 04 Nov 2019 00:04:00 GMT</pubDate></item><item><title>phoenixframework/phoenix_live_view #5 in Elixir, Today</title><link>https://github.com/phoenixframework/phoenix_live_view</link><description>&lt;p&gt;&lt;i&gt;Rich, real-time user experiences with server-rendered HTML&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-phoenix-liveview" class="anchor" aria-hidden="true" href="#phoenix-liveview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Phoenix LiveView&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/phoenixframework/phoenix_live_view/workflows/CI/badge.svg"&gt;&lt;img src="https://github.com/phoenixframework/phoenix_live_view/workflows/CI/badge.svg" alt="Actions Status" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Phoenix LiveView enables rich, real-time user experiences with server-rendered HTML. For more information, &lt;a href="https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript" rel="nofollow"&gt;see the initial announcement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Currently LiveView is under active development and we are focused on getting a stable and solid initial version out. For this reason, we will be accepting only bug reports in the issues tracker for now. We will open the issues tracker for features after the current milestone is ironed out.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-learning" class="anchor" aria-hidden="true" href="#learning"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Learning&lt;/h2&gt;
&lt;p&gt;As official guides are being developed, see our existing
comprehensive docs and examples to get up to speed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/phoenix_live_view" rel="nofollow"&gt;Phoenix.LiveView docs for Elixir and JavaScript usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/phoenixframework/phoenix_live_view/blob/master/lib/phoenix_live_view/test/live_view_test.ex"&gt;Phoenix.LiveViewTest for testing docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chrismccord/phoenix_live_view_example"&gt;LiveView example repo&lt;/a&gt; with a handful of examples from Weather widgets, autocomplete search, and games like Snake or Pacman&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;There are currently two methods for installing LiveView. For projects that
require more stability, it is recommended that you install using the
&lt;a href="https://hexdocs.pm/phoenix_live_view/installation.html" rel="nofollow"&gt;installation guide on HexDocs&lt;/a&gt;.
If you want to use the latest features, you should follow the instructions
given in the markdown file &lt;a href="guides/introduction/installation.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-browser-support" class="anchor" aria-hidden="true" href="#browser-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Browser Support&lt;/h2&gt;
&lt;p&gt;All current Chrome, Safari, Firefox, and MS Edge are supported.
IE11 support is available with the following polyfills:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;npm install --save --prefix assets mdn-polyfills url-search-params-polyfill formdata-polyfill child-replace-with-polyfill classlist-polyfill&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; assets/js/app.js&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/CustomEvent&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/String.prototype.startsWith&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Array.from&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/NodeList.prototype.forEach&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Element.prototype.closest&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Element.prototype.matches&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;child-replace-with-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url-search-params-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;formdata-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;classlist-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; {&lt;span class="pl-smi"&gt;Socket&lt;/span&gt;} &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;phoenix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;LiveSocket&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;phoenix_live_view&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;...&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>phoenixframework</author><guid isPermaLink="false">https://github.com/phoenixframework/phoenix_live_view</guid><pubDate>Mon, 04 Nov 2019 00:05:00 GMT</pubDate></item><item><title>evadne/packmatic #6 in Elixir, Today</title><link>https://github.com/evadne/packmatic</link><description>&lt;p&gt;&lt;i&gt;Zipping on the fly&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-packmatic" class="anchor" aria-hidden="true" href="#packmatic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Packmatic&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Packmatic&lt;/strong&gt; generates Zip Streams by aggregating File or URL Sources.&lt;/p&gt;
&lt;p&gt;By using a Stream, the caller can compose it within the confines of Plug’s request/response model and serve the content of the resultant Zip acrhive in a streaming fashion. This allows fast delivery of a Zip archive consisting of many disparate parts hosted in different places, without having to first spool all of them to disk.&lt;/p&gt;
&lt;p&gt;The generated archive uses Zip64, and works with individual files that are larger than 4GB. See the Compatibility section for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-the-problem" class="anchor" aria-hidden="true" href="#the-problem"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Problem&lt;/h3&gt;
&lt;p&gt;In modern Web applications, content is often stored away from the host, such as Amazon S3, to enable better scalability and resiliency, as data would not be lost should a particular host go down. However, one disadvantage of this design is that data has become more spread-out, so previously simple operations such as creation of a Zip archive consisting of various files is now more complicated.&lt;/p&gt;
&lt;p&gt;In a hypothetical scenario where the developer opts for synchronous generation, the process may spend too long preparing the constituent files, which breaks certain connection proxies which expect a reasonable time to first byte. And in any case, disk utilisation will be high, since not only does each constituent file need to be on disk, there must be free space that will hold the archive temporarily as well.&lt;/p&gt;
&lt;p&gt;In another hypothetical scenario, where the developer opts for asynchronous generation, spooling still has to happen and further infrastructure for background job execution, user notification, temporary storage, etc. is now needed, which increases complexity.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-the-solution" class="anchor" aria-hidden="true" href="#the-solution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Solution&lt;/h3&gt;
&lt;p&gt;The overall goal for Packmatic is to deliver a modern Zip streamer, which is able to assemble a Zip file from various sources, such as HTTP(S) downloads or locally generated temporary files, on-the-fly, so as to minimise waiting time, reduce resource consumption and elevate customer happiness.&lt;/p&gt;
&lt;p&gt;Packmatic solves the problem by separating the concerns of content definition (specifying what content should be retrieved, and from where), data retrieval (getting the content from the given source), and content presentation (creation of the Archive bundle).&lt;/p&gt;
&lt;p&gt;With Packmatic, the developer first specifies a list of Source Entries, which indicates where content can be obtained, and in what way: downloaded from the Internet, read from the filesystem, or dynamically resolved when the archive is being built, etc. This information is then wrapped in a Stream, which is consumed to send out chunked responses.&lt;/p&gt;
&lt;p&gt;When the Stream is started, it spins up an Encoder process, which works in a staged, iterative manner. This allows downloads to start almost immediately, which enhances customer happiness.&lt;/p&gt;
&lt;p&gt;The Encoder consumes the manifest as the Stream is consumed. In other words, the Stream starts producing data only when the client starts reading, and only as fast as the client reads, which reduces the amount of networking and local storage needed to start the process. Most of the acquisition work is interleaved, and back-pressured by client connection speed.&lt;/p&gt;
&lt;p&gt;Furthermore, since Packmatic only streams what it needs, and does not spool content locally, it is possible to produce large archives whose constituent files do not fit on one host. This is an advantage over conventional processes, where even in a synchronous scenario, all constituent files &lt;em&gt;and the archive&lt;/em&gt; must be spooled to disk.&lt;/p&gt;
&lt;p&gt;This design enhances developer happiness as well, since by using a synchronous, iterative mode of operation, there is no longer any need to spool constituent files in the archive on disk; there is also no longer any need to build technical workarounds in order to compensate for archive preparation delays.&lt;/p&gt;
&lt;p&gt;With Packmatic, both the problem and the solution is drastically simplified. The user clicks “download”, and the file starts downloading. This is how it should be.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install Packmatic, add the following line in your application’s dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defp deps do
  [
    {:packmatic, "~&amp;gt; 0.1.1"}
  ]
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;In order to use Packmatic, you will first create such a Stream by &lt;code&gt;Packmatic.build_stream/2&lt;/code&gt;. You can then send it off for download with help from &lt;code&gt;Packmatic.Conn.send_chunked/3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Internally, this is powered by &lt;code&gt;Packmatic.Encoder&lt;/code&gt;, which consumes the Entries within a built Manifest iteratively at the pace set by the client’s download connection.&lt;/p&gt;
&lt;p&gt;Each Source Entry within the Manifest specifies the source from where to obtain the content of a particular file to be placed in the package, and which path to put it under; it is your own responsibility to ensure that paths are not duplicated (see the Notes for an example).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-building-stream" class="anchor" aria-hidden="true" href="#building-stream"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building Stream&lt;/h3&gt;
&lt;p&gt;The usual way to construct a Stream is as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;entries = [
  {{:file, "/tmp/hello.pdf"}, "hello.pdf"},
  {{:file, "/tmp/world.pdf"}, "world.pdf"},
  {{:url, "https://example.com/foo.pdf"}, "foo/bar.pdf"}
]

stream = Packmatic.build_stream(entries)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you desire, you may pass an additional option entry to &lt;code&gt;Packmatic.build_stream/2&lt;/code&gt;, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stream = Packmatic.build_stream(entries, on_error: :skip)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each Entry used to build the Stream is a 2-arity tuple, representing the Source Entry and the Path for the file.&lt;/p&gt;
&lt;p&gt;Further, the Source Entry is a 2-arity tuple which represents the type of Source and the initialising argument of that type of Source. See &lt;a href="#source-types"&gt;Source Types&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-writing-stream-to-file" class="anchor" aria-hidden="true" href="#writing-stream-to-file"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing Stream to File&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;stream
|&amp;gt; Stream.into(File.stream!(file_path, [:write]))
|&amp;gt; Stream.run()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-writing-stream-to-conn-with-plug" class="anchor" aria-hidden="true" href="#writing-stream-to-conn-with-plug"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing Stream to Conn (with Plug)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;stream
|&amp;gt; Packmatic.Conn.send_chunked(conn, "download.zip")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When writing the stream to a chunked &lt;code&gt;Plug.Conn&lt;/code&gt;, Packmatic automatically escapes relevant characters in the name and sets the Content Disposition to &lt;code&gt;attachment&lt;/code&gt; for maximum browser compatibility under intended use.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-source-types" class="anchor" aria-hidden="true" href="#source-types"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Source Types&lt;/h2&gt;
&lt;p&gt;Within Packmatic, there are four types of Sources:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;File,&lt;/strong&gt; representing content on disk, useful when the content is already available and only needs to be integrated.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;{:file, "/tmp/hello/pdf"}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;Packmatic.Source.File&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;URL,&lt;/strong&gt; representing content that is available remotely. Packmatic will run a chunked download routine to incrementally download and archive available chunks.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;{:url, "https://example.com/hello/pdf"}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;Packmatic.Source.URL&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Random,&lt;/strong&gt; representing randomly generated bytes which is useful for testing.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;{:random, 1048576}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;Packmatic.Source.Random&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic,&lt;/strong&gt; representing a dynamically resolved Source, which is ultimately fulfilled by pulling content from either a File or an URL. If you have any need to inject a dynamically generated file, you may use this Source type to do it. This also has the benefit of avoiding expensive computation work in case the customer abandons the download midway.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;{:dynamic, fn -&amp;gt; {:ok, {:random, 1048576}} end}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;Packmatic.Source.Dynamic&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Notes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;As with any user-generated content, you should exercise caution when building the Manifest, and ensure that only content that the User is entitled to retrieve is included.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Due to design limitations, when downloading resources via a HTTP(S) connection, should the connection become closed halfway, a partial representation may be embedded in the output. A future release of this library may correct this in case the &lt;code&gt;Content-Length&lt;/code&gt; header is present in the output, and act accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You must ensure that paths are not duplicated within the same Manifest. You can do this by first building a list of sources and paths, then grouping and numbering them as needed with &lt;code&gt;Enum.group_by/3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Given entries are &lt;code&gt;{source, path}&lt;/code&gt; tuples, you can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;annotate_fun = fn entries -&amp;gt;
  for {{source, path}, index} &amp;lt;- Enum.with_index(entries) do
    path_components = Path.split(path)
    {path_components, [filename]} = Enum.split(path_components, -1)
    extname = Path.extname(filename)
    basename = Path.basename(filename, extname)
    path_components = path_components ++ ["#{basename} (#{index + 1})#{extname}"]
    {source, Path.join(path_components)}
  end
end

duplicates_fun = fn
  [_ | [_ | _]] = entries -&amp;gt; annotate_fun.(entries)
  entries -&amp;gt; entries
end

entries
|&amp;gt; Enum.group_by(&amp;amp; elem(&amp;amp;1, 1))
|&amp;gt; Enum.flat_map(&amp;amp;duplicates_fun.(elem(&amp;amp;1, 1)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You must ensure that paths conform to the target environment of your choice, for example macOS and Windows each has its limitations regarding how long paths can be.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compatibility&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows Explorer (Windows 10): OK&lt;/li&gt;
&lt;li&gt;7-Zip: OK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;macOS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finder (High Sierra): OK&lt;/li&gt;
&lt;li&gt;The Unarchiver (High Sierra): NG&lt;/li&gt;
&lt;li&gt;Erlang/OTP (&lt;code&gt;:zip&lt;/code&gt;): NG&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Known Issues&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ability to switch between STORE and DEFLATE modes is under investigation. Currently all archives are generated with DEFLATE, although for some use cases, this only increases the size of the archive, as content within each file is already compressed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can not change compression level.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explicit directory generation is not supported; each entry must be a file. This is pending further investigation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handling of 0-length files from sources is pending further investigation. Currently, they do get journaled but this may change in the future.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-future-enhancements" class="anchor" aria-hidden="true" href="#future-enhancements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Future Enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We will consider adding ability to resume downloads with range queries, so if the URL Source fails we can attempt to resume encoding from where we left off.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In practice, if there are large files that are archived repeatedly, they will be pulled repeatedly and there is currently no explicit ability to cache them. We expect that in these cases an optimisation by the application developer may be to temporarily spool these hot constituents on disk and use a Dynamic Source to wrap around the cache layer (which would emit a File Source if the file is available locally, and act accordingly otherwise).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;During design and prototype development of this library, the Author has drawn inspiration from the following implementations, and therefore thanks all contributors for their generosity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/CTrabant/fdzipstream"&gt;ctrabant/fdzipstream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dgvncsz0f/zipflow"&gt;dgvncsz0f/zipflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.cs.jmu.edu/buchhofp/forensics/formats/pkzip.html" rel="nofollow"&gt;https://users.cs.jmu.edu/buchhofp/forensics/formats/pkzip.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT" rel="nofollow"&gt;https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>evadne</author><guid isPermaLink="false">https://github.com/evadne/packmatic</guid><pubDate>Mon, 04 Nov 2019 00:06:00 GMT</pubDate></item></channel></rss>