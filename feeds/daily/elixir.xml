<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Elixir, Today</title><link>https://github.com/trending/elixir?since=daily</link><description>The top repositories on GitHub for elixir, measured daily</description><pubDate>Thu, 30 Jan 2020 01:14:19 GMT</pubDate><lastBuildDate>Thu, 30 Jan 2020 01:14:19 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>elixir-lang/elixir #1 in Elixir, Today</title><link>https://github.com/elixir-lang/elixir</link><description>&lt;p&gt;&lt;i&gt;Elixir is a dynamic, functional language designed for building scalable and maintainable applications&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/elixir-lang/elixir-lang.github.com/raw/master/images/logo/logo.png"&gt;&lt;img src="https://github.com/elixir-lang/elixir-lang.github.com/raw/master/images/logo/logo.png" alt="Elixir" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://cirrus-ci.com/github/elixir-lang/elixir" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c4d820a66eff706de4aa9371456b877a22ee03d7/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f656c697869722d6c616e672f656c697869722e7376673f6272616e63683d6d6173746572" alt="Build status" data-canonical-src="https://api.cirrus-ci.com/github/elixir-lang/elixir.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elixir is a dynamic, functional language designed for building scalable
and maintainable applications.&lt;/p&gt;
&lt;p&gt;For more about Elixir, installation and documentation,
&lt;a href="https://elixir-lang.org/" rel="nofollow"&gt;check Elixir's website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-policies" class="anchor" aria-hidden="true" href="#policies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Policies&lt;/h2&gt;
&lt;p&gt;New releases are announced in the &lt;a href="https://groups.google.com/group/elixir-lang-ann" rel="nofollow"&gt;announcement mailing list&lt;/a&gt;.
You can subscribe by sending an email to &lt;a href="mailto:elixir-lang-ann+subscribe@googlegroups.com"&gt;elixir-lang-ann+subscribe@googlegroups.com&lt;/a&gt; and replying to the confirmation email.&lt;/p&gt;
&lt;p&gt;All security releases &lt;a href="https://groups.google.com/forum/#!searchin/elixir-lang-ann/%5Bsecurity%5D%7Csort:date" rel="nofollow"&gt;will be tagged with &lt;code&gt;[security]&lt;/code&gt;&lt;/a&gt;. For more information, please read our &lt;a href="SECURITY.md"&gt;Security Policy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All interactions in our official communication channels follow our &lt;a href="CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-bug-reports" class="anchor" aria-hidden="true" href="#bug-reports"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bug reports&lt;/h2&gt;
&lt;p&gt;For reporting bugs, &lt;a href="https://github.com/elixir-lang/elixir/issues"&gt;visit our issue tracker&lt;/a&gt; and follow the steps
for reporting a new issue. &lt;strong&gt;Please disclose security vulnerabilities
privately at &lt;a href="mailto:elixir-security@googlegroups.com"&gt;elixir-security@googlegroups.com&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-compiling-from-source" class="anchor" aria-hidden="true" href="#compiling-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compiling from source&lt;/h2&gt;
&lt;p&gt;For the many different ways to install Elixir,
&lt;a href="https://elixir-lang.org/install.html" rel="nofollow"&gt;see our installation instructions on the website&lt;/a&gt;.
To compile from source, you can follow the steps below.&lt;/p&gt;
&lt;p&gt;First, &lt;a href="https://elixir-lang.org/install.html#installing-erlang" rel="nofollow"&gt;install Erlang&lt;/a&gt;. Then clone this repository to your machine, compile and test it:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/elixir-lang/elixir.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; elixir
make clean &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: if you are running on Windows,
&lt;a href="https://github.com/elixir-lang/elixir/wiki/Windows"&gt;this article includes important notes for compiling Elixir from source
on Windows&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If Elixir fails to build (specifically when pulling in a new version via
&lt;code&gt;git&lt;/code&gt;), be sure to remove any previous build artifacts by running
&lt;code&gt;make clean&lt;/code&gt;, then &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If tests pass, you can use Interactive Elixir by running &lt;code&gt;bin/iex&lt;/code&gt; in your terminal.&lt;/p&gt;
&lt;p&gt;However, if tests fail, it is likely that you have an outdated Erlang/OTP version
(Elixir requires Erlang/OTP 21.0 or later). You can check your Erlang/OTP version
by calling &lt;code&gt;erl&lt;/code&gt; in the command line. You will see some information similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Erlang/OTP 21 [erts-9.0] [smp:2:2] [async-threads:10] [kernel-poll:false]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have properly set up your dependencies and tests still fail,
you may want to open up a bug report, as explained next.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-proposing-new-features" class="anchor" aria-hidden="true" href="#proposing-new-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Proposing new features&lt;/h2&gt;
&lt;p&gt;For proposing new features, please start a discussion in the
&lt;a href="https://groups.google.com/group/elixir-lang-core" rel="nofollow"&gt;Elixir Core mailing list&lt;/a&gt;. Keep in mind that it is your responsibility
to argue and explain why a feature is useful and how it will impact the
codebase and the community.&lt;/p&gt;
&lt;p&gt;Once a proposal is accepted, it will be added to &lt;a href="https://github.com/elixir-lang/elixir/issues"&gt;the issue tracker&lt;/a&gt;.
The issue tracker focuses on &lt;em&gt;actionable items&lt;/em&gt; and it holds a list of
upcoming enhancements and pending bugs. All entries in the tracker are
tagged for clarity and to ease collaboration.&lt;/p&gt;
&lt;p&gt;Features and bug fixes that have already been merged and will be included
in the next release are marked as "closed" in the issue tracker and are
added to the &lt;a href="CHANGELOG.md"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We welcome everyone to contribute to Elixir. To do so, there are a few
things you need to know about the code. First, Elixir code is divided
in applications inside the &lt;code&gt;lib&lt;/code&gt; folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;elixir&lt;/code&gt; - Elixir's kernel and standard library&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eex&lt;/code&gt; - EEx is the template engine that allows you to embed Elixir&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ex_unit&lt;/code&gt; - ExUnit is a simple test framework that ships with Elixir&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;iex&lt;/code&gt; - IEx stands for Interactive Elixir: Elixir's interactive shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logger&lt;/code&gt; - Logger is the built-in logger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mix&lt;/code&gt; - Mix is Elixir's build tool&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can run all tests in the root directory with &lt;code&gt;make test&lt;/code&gt; and you can
also run tests for a specific framework &lt;code&gt;make test_#{APPLICATION}&lt;/code&gt;, for example,
&lt;code&gt;make test_ex_unit&lt;/code&gt;. If you just changed something in the Elixir's standard
library, you can run only that portion through &lt;code&gt;make test_stdlib&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are changing just one file, you can choose to compile and run tests only
for that particular file for fast development cycles. For example, if you
are changing the String module, you can compile it and run its tests as:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;bin/elixirc lib/elixir/lib/string.ex -o lib/elixir/ebin
bin/elixir lib/elixir/test/elixir/string_test.exs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To recompile (including Erlang modules):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After your changes are done, please remember to run &lt;code&gt;make format&lt;/code&gt; to guarantee
all files are properly formatted and then run the full suite with
&lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If your contribution fails during the bootstrapping of the language,
you can rebuild the language from scratch with:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make clean_elixir compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, if you can't get Elixir to compile or the tests to pass after
updating an existing checkout, run &lt;code&gt;make clean compile&lt;/code&gt;. You can check
&lt;a href="https://cirrus-ci.com/github/elixir-lang/elixir" rel="nofollow"&gt;the official build status on Cirrus CI&lt;/a&gt;.
More tasks can be found by reading the &lt;a href="Makefile"&gt;Makefile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With tests running and passing, you are ready to contribute to Elixir and
&lt;a href="https://help.github.com/articles/using-pull-requests/"&gt;send a pull request&lt;/a&gt;.
We have saved some excellent pull requests we have received in the past in
case you are looking for some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/992"&gt;Implement Enum.member? - Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/1058"&gt;Add String.valid? - Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/1059"&gt;Implement capture_io for ExUnit - Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-reviewing-changes" class="anchor" aria-hidden="true" href="#reviewing-changes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reviewing changes&lt;/h3&gt;
&lt;p&gt;Once a pull request is sent, the Elixir team will review your changes.
We outline our process below to clarify the roles of everyone involved.&lt;/p&gt;
&lt;p&gt;All pull requests must be approved by two committers before being merged into
the repository. If any changes are necessary, the team will leave appropriate
comments requesting changes to the code. Unfortunately we cannot guarantee a
pull request will be merged, even when modifications are requested, as the Elixir
team will re-evaluate the contribution as it changes.&lt;/p&gt;
&lt;p&gt;Committers may also push style changes directly to your branch. If you would
rather manage all changes yourself, you can disable "Allow edits from maintainers"
feature when submitting your pull request.&lt;/p&gt;
&lt;p&gt;The Elixir team may optionally assign someone to review a pull request.
If someone is assigned, they must explicitly approve the code before
another team member can merge it.&lt;/p&gt;
&lt;p&gt;When the review finishes, your pull request will be squashed and merged
into the repository. If you have carefully organized your commits and
believe they should be merged without squashing, please mention it in
a comment.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building-documentation" class="anchor" aria-hidden="true" href="#building-documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building documentation&lt;/h2&gt;
&lt;p&gt;Building the documentation requires &lt;a href="https://github.com/elixir-lang/ex_doc"&gt;ExDoc&lt;/a&gt;
to be installed and built alongside Elixir:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; After cloning and compiling Elixir, in its parent directory:&lt;/span&gt;
git clone git://github.com/elixir-lang/ex_doc.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; ex_doc &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ../elixir/bin/mix &lt;span class="pl-k"&gt;do&lt;/span&gt; deps.get, compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now go back to Elixir's root directory and run:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make docs                  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to generate HTML pages&lt;/span&gt;
make docs DOCS_FORMAT=epub &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to generate EPUB documents&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will produce documentation sets for &lt;code&gt;elixir&lt;/code&gt;, &lt;code&gt;eex&lt;/code&gt;, &lt;code&gt;ex_unit&lt;/code&gt;, &lt;code&gt;iex&lt;/code&gt;, &lt;code&gt;logger&lt;/code&gt;,
and &lt;code&gt;mix&lt;/code&gt; under the &lt;code&gt;doc&lt;/code&gt; directory. If you are planning to contribute documentation,
&lt;a href="https://hexdocs.pm/elixir/writing-documentation.html" rel="nofollow"&gt;please check our best practices for writing documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-development-links" class="anchor" aria-hidden="true" href="#development-links"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Development links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://elixir-lang.org/docs.html" rel="nofollow"&gt;Elixir Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/group/elixir-lang-core" rel="nofollow"&gt;Elixir Core Mailing list (development)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/group/elixir-lang-ann" rel="nofollow"&gt;Announcement mailing list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/issues"&gt;Issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="CHANGELOG.md"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="SECURITY.md"&gt;Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://webchat.freenode.net/?channels=#elixir-lang" rel="nofollow"&gt;#elixir-lang&lt;/a&gt;&lt;/strong&gt; on &lt;a href="https://www.freenode.net" rel="nofollow"&gt;Freenode&lt;/a&gt; IRC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;"Elixir" and the Elixir logo are copyright (c) 2012 Plataformatec.&lt;/p&gt;
&lt;p&gt;Elixir source code is released under Apache License 2.0.&lt;/p&gt;
&lt;p&gt;Check &lt;a href="NOTICE"&gt;NOTICE&lt;/a&gt; and &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt; files for more information.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>elixir-lang</author><guid isPermaLink="false">https://github.com/elixir-lang/elixir</guid><pubDate>Thu, 30 Jan 2020 00:01:00 GMT</pubDate></item><item><title>elixir-ecto/ecto #2 in Elixir, Today</title><link>https://github.com/elixir-ecto/ecto</link><description>&lt;p&gt;&lt;i&gt;A toolkit for data mapping and language integrated query&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/elixir-ecto/ecto/raw/master/guides/images/logo.png"&gt;&lt;img width="250" src="https://github.com/elixir-ecto/ecto/raw/master/guides/images/logo.png" alt="Ecto" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://github.com/elixir-ecto/ecto/actions"&gt;&lt;img src="https://github.com/elixir-ecto/ecto/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ecto is a toolkit for data mapping and language integrated query for Elixir. Here is an example:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; In your config/config.exs file&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;ecto_repos:&lt;/span&gt; [&lt;span class="pl-en"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;]

config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;database:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ecto_simple&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;username:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;postgres&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;password:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;postgres&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;hostname:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;localhost&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;port:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;5432&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; In your application code&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;adapter:&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapters&lt;/span&gt;.&lt;span class="pl-en"&gt;Postgres&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;Weather&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Schema&lt;/span&gt;

  schema &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;weather&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    field &lt;span class="pl-c1"&gt;:city&lt;/span&gt;     &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Defaults to type :string&lt;/span&gt;
    field &lt;span class="pl-c1"&gt;:temp_lo&lt;/span&gt;, &lt;span class="pl-c1"&gt;:integer&lt;/span&gt;
    field &lt;span class="pl-c1"&gt;:temp_hi&lt;/span&gt;, &lt;span class="pl-c1"&gt;:integer&lt;/span&gt;
    field &lt;span class="pl-c1"&gt;:prcp&lt;/span&gt;,    &lt;span class="pl-c1"&gt;:float&lt;/span&gt;, &lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;0.0&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Sample&lt;/span&gt;.&lt;span class="pl-en"&gt;App&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;
  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;Sample&lt;/span&gt;.{&lt;span class="pl-en"&gt;Weather&lt;/span&gt;, &lt;span class="pl-en"&gt;Repo&lt;/span&gt;}

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;keyword_query&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    query &lt;span class="pl-k"&gt;=&lt;/span&gt;
      from w &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-en"&gt;Weather&lt;/span&gt;,
           &lt;span class="pl-c1"&gt;where:&lt;/span&gt; w.prcp &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-en"&gt;is_nil&lt;/span&gt;(w.prcp),
           &lt;span class="pl-c1"&gt;select:&lt;/span&gt; w

    &lt;span class="pl-en"&gt;Repo&lt;/span&gt;.&lt;span class="pl-en"&gt;all&lt;/span&gt;(query)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;pipe_query&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Weather&lt;/span&gt;
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;where&lt;/span&gt;(&lt;span class="pl-c1"&gt;city:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Kraków&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;order_by&lt;/span&gt;(&lt;span class="pl-c1"&gt;:temp_lo&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;limit&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Repo&lt;/span&gt;.&lt;span class="pl-en"&gt;all&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ecto is commonly used to interact with databases, such as Postgres and MySQL via &lt;a href="http://hexdocs.pm/ecto_sql" rel="nofollow"&gt;Ecto.Adapters.SQL&lt;/a&gt; (&lt;a href="https://github.com/elixir-ecto/ecto_sql"&gt;source code&lt;/a&gt;). Ecto is also commonly used to map data from any source into Elixir structs, regardless if they are backed by a database or not.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="http://hexdocs.pm/ecto/getting-started.html" rel="nofollow"&gt;getting started guide&lt;/a&gt; and the &lt;a href="http://hexdocs.pm/ecto" rel="nofollow"&gt;online documentation&lt;/a&gt; for more information. Other resources available are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pragprog.com/book/wmecto/programming-ecto" rel="nofollow"&gt;Programming Ecto&lt;/a&gt;, by Darin Wilson and Eric Meadows-Jönsson, which guides you from fundamentals up to advanced concepts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pages.plataformatec.com.br/the-little-ecto-cookbook" rel="nofollow"&gt;The Little Ecto Cookbook&lt;/a&gt;, a free ebook by Plataformatec, which is a curation of the existing Ecto guides with some extra contents&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;You need to add both Ecto and the database adapter as a dependency to your &lt;code&gt;mix.exs&lt;/code&gt; file. The supported databases and their adapters are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Database&lt;/th&gt;
&lt;th align="left"&gt;Ecto Adapter&lt;/th&gt;
&lt;th align="left"&gt;Dependencies&lt;/th&gt;
&lt;th align="left"&gt;Ecto 3.0 compatible?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;PostgreSQL&lt;/td&gt;
&lt;td align="left"&gt;Ecto.Adapters.Postgres&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto_sql"&gt;ecto_sql&lt;/a&gt; + &lt;a href="http://github.com/elixir-ecto/postgrex"&gt;postgrex&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MySQL&lt;/td&gt;
&lt;td align="left"&gt;Ecto.Adapters.MyXQL&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto_sql"&gt;ecto_sql&lt;/a&gt; + &lt;a href="http://github.com/elixir-ecto/myxql"&gt;myxql&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MSSQL&lt;/td&gt;
&lt;td align="left"&gt;MssqlEcto&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto_sql"&gt;ecto_sql&lt;/a&gt; + &lt;a href="https://github.com/findmypast-oss/mssql_ecto"&gt;mssql_ecto&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;MSSQL&lt;/td&gt;
&lt;td align="left"&gt;Tds.Ecto&lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto_sql"&gt;ecto_sql&lt;/a&gt; + &lt;a href="https://github.com/livehelpnow/tds_ecto"&gt;tds_ecto&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;SQLite    &lt;/td&gt;
&lt;td align="left"&gt;Sqlite.Ecto2        &lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto"&gt;ecto&lt;/a&gt; + &lt;a href="https://github.com/scouten/sqlite_ecto2"&gt;sqlite_ecto2&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Mnesia    &lt;/td&gt;
&lt;td align="left"&gt;EctoMnesia.Adapter   &lt;/td&gt;
&lt;td align="left"&gt;&lt;a href="http://github.com/elixir-ecto/ecto"&gt;ecto&lt;/a&gt; + &lt;a href="https://github.com/Nebo15/ecto_mnesia"&gt;ecto_mnesia&lt;/a&gt;&lt;/td&gt;
&lt;td align="left"&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example, if you want to use PostgreSQL, add to your &lt;code&gt;mix.exs&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:ecto_sql&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 3.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    {&lt;span class="pl-c1"&gt;:postgrex&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;gt;= 0.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;mix deps.get&lt;/code&gt; in your shell to fetch the dependencies. If you want to use another database, just choose the proper dependency from the table above.&lt;/p&gt;
&lt;p&gt;Finally, in the repository definition, you will need to specify the &lt;code&gt;adapter:&lt;/code&gt; respective to the chosen dependency. For PostgreSQL it is:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;adapter:&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapters&lt;/span&gt;.&lt;span class="pl-en"&gt;Postgres&lt;/span&gt;,
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-supported-versions" class="anchor" aria-hidden="true" href="#supported-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported Versions&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Branch&lt;/th&gt;
&lt;th&gt;Support&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;v3.1&lt;/td&gt;
&lt;td&gt;Bug fixes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v3.0&lt;/td&gt;
&lt;td&gt;Security patches only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2.2&lt;/td&gt;
&lt;td&gt;Security patches only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2.1&lt;/td&gt;
&lt;td&gt;Unsupported from 10/2018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2.0&lt;/td&gt;
&lt;td&gt;Unsupported from 08/2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.1&lt;/td&gt;
&lt;td&gt;Unsupported from 03/2018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.0&lt;/td&gt;
&lt;td&gt;Unsupported from 05/2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With the version 3.0, Ecto has become API stable. This means no more new features, although we will continue providing bug fixes and updates. For everyone running Ecto in production, rest assured that Ecto will continue to be a well maintained project with the same production quality and polish that our users are familiar with.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-important-links" class="anchor" aria-hidden="true" href="#important-links"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Important links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hexdocs.pm/ecto" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/elixir-ecto" rel="nofollow"&gt;Mailing list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-ecto/ecto/tree/master/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running tests&lt;/h3&gt;
&lt;p&gt;Clone the repo and fetch its dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/elixir-ecto/ecto.git
$ cd ecto
$ mix deps.get
$ mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;mix test&lt;/code&gt; does not run the tests in the &lt;code&gt;integration_test&lt;/code&gt; folder. To run integration tests, you can clone &lt;code&gt;ecto_sql&lt;/code&gt; in a sibling directory and then run its integration tests with the &lt;code&gt;ECTO_PATH&lt;/code&gt; environment variable pointing to your Ecto checkout:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ..
$ git clone https://github.com/elixir-ecto/ecto_sql.git
$ cd ecto_sql
$ ECTO_PATH=../ecto mix test.all
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-logo" class="anchor" aria-hidden="true" href="#logo"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Logo&lt;/h2&gt;
&lt;p&gt;"Ecto" and the Ecto logo are Copyright (c) 2020 Dashbit.&lt;/p&gt;
&lt;p&gt;The Ecto logo was designed by &lt;a href="http://www.danewesolko.com" rel="nofollow"&gt;Dane Wesolko&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright (c) 2013 Plataformatec &lt;br&gt;
Copyright (c) 2020 Dashbit&lt;/p&gt;
&lt;p&gt;Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at &lt;a href="http://www.apache.org/licenses/LICENSE-2.0" rel="nofollow"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>elixir-ecto</author><guid isPermaLink="false">https://github.com/elixir-ecto/ecto</guid><pubDate>Thu, 30 Jan 2020 00:02:00 GMT</pubDate></item><item><title>phoenixframework/phoenix_live_view #3 in Elixir, Today</title><link>https://github.com/phoenixframework/phoenix_live_view</link><description>&lt;p&gt;&lt;i&gt;Rich, real-time user experiences with server-rendered HTML&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-phoenix-liveview" class="anchor" aria-hidden="true" href="#phoenix-liveview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Phoenix LiveView&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/phoenixframework/phoenix_live_view/workflows/CI/badge.svg"&gt;&lt;img src="https://github.com/phoenixframework/phoenix_live_view/workflows/CI/badge.svg" alt="Actions Status" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Phoenix LiveView enables rich, real-time user experiences with server-rendered HTML. For more information, &lt;a href="https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript" rel="nofollow"&gt;see the initial announcement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Currently LiveView is under active development and we are focused on getting a stable and solid initial version out. For this reason, we will be accepting only bug reports in the issues tracker for now. We will open the issues tracker for features after the current milestone is ironed out.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-learning" class="anchor" aria-hidden="true" href="#learning"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Learning&lt;/h2&gt;
&lt;p&gt;As official guides are being developed, see our existing
comprehensive docs and examples to get up to speed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/phoenix_live_view" rel="nofollow"&gt;Phoenix.LiveView docs for Elixir and JavaScript usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/phoenixframework/phoenix_live_view/blob/master/lib/phoenix_live_view/test/live_view_test.ex"&gt;Phoenix.LiveViewTest for testing docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chrismccord/phoenix_live_view_example"&gt;LiveView example repo&lt;/a&gt; with a handful of examples from Weather widgets, autocomplete search, and games like Snake or Pacman&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;There are currently two methods for installing LiveView. For projects that
require more stability, it is recommended that you install using the
&lt;a href="https://hexdocs.pm/phoenix_live_view/installation.html" rel="nofollow"&gt;installation guide on HexDocs&lt;/a&gt;.
If you want to use the latest features, you should follow the instructions
given in the markdown file &lt;a href="guides/introduction/installation.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-browser-support" class="anchor" aria-hidden="true" href="#browser-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Browser Support&lt;/h2&gt;
&lt;p&gt;All current Chrome, Safari, Firefox, and MS Edge are supported.
IE11 support is available with the following polyfills:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;npm install --save --prefix assets mdn-polyfills url-search-params-polyfill formdata-polyfill child-replace-with-polyfill classlist-polyfill&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; assets/js/app.js&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/CustomEvent&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/String.prototype.startsWith&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Array.from&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/NodeList.prototype.forEach&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Element.prototype.closest&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Element.prototype.matches&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;child-replace-with-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url-search-params-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;formdata-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;classlist-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; {&lt;span class="pl-smi"&gt;Socket&lt;/span&gt;} &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;phoenix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;LiveSocket&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;phoenix_live_view&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;...&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>phoenixframework</author><guid isPermaLink="false">https://github.com/phoenixframework/phoenix_live_view</guid><pubDate>Thu, 30 Jan 2020 00:03:00 GMT</pubDate></item><item><title>edgurgel/httpoison #4 in Elixir, Today</title><link>https://github.com/edgurgel/httpoison</link><description>&lt;p&gt;&lt;i&gt;Yet Another HTTP client for Elixir powered by hackney&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/e7895297ccdfb59b971ea721eb617dc0faa9d94d/687474703a2f2f692e696d6775722e636f6d2f5777714e384a4f2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/e7895297ccdfb59b971ea721eb617dc0faa9d94d/687474703a2f2f692e696d6775722e636f6d2f5777714e384a4f2e706e67" alt="" data-canonical-src="http://i.imgur.com/WwqN8JO.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-httpoison---" class="anchor" aria-hidden="true" href="#httpoison---"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTPoison &lt;a href="https://travis-ci.org/edgurgel/httpoison" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dc3e4757b34cd797c6eaa621af87c0ccebf750c5/68747470733a2f2f7472617669732d63692e6f72672f656467757267656c2f687474706f69736f6e2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/edgurgel/httpoison.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://hex.pm/packages/httpoison" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/06f0e68df56ea0a4f732a6b2489c867214184f2a/687474703a2f2f696d672e736869656c64732e696f2f686578706d2f762f687474706f69736f6e2e7376673f7374796c653d666c6174" alt="Hex pm" data-canonical-src="http://img.shields.io/hexpm/v/httpoison.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://hex.pm/packages/httpoison" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/52ad52294e6c4625e511e7a828ade0649c583b4d/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f64742f687474706f69736f6e2e7376673f7374796c653d666c6174" alt="hex.pm downloads" data-canonical-src="https://img.shields.io/hexpm/dt/httpoison.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;HTTP client for Elixir, based on
&lt;a href="https://github.com/myfreeweb/httpotion"&gt;HTTPotion&lt;/a&gt;
(&lt;a href="http://hexdocs.pm/httpoison/" rel="nofollow"&gt;documentation&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-but-why-something-so-similar-to-httpotion" class="anchor" aria-hidden="true" href="#but-why-something-so-similar-to-httpotion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;But... why something so similar to HTTPotion?&lt;/h2&gt;
&lt;p&gt;HTTPoison uses &lt;a href="https://github.com/benoitc/hackney"&gt;hackney&lt;/a&gt; to execute HTTP requests instead of ibrowse. I like hackney &lt;g-emoji class="g-emoji" alias="+1" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png"&gt;👍&lt;/g-emoji&gt;&lt;/p&gt;
&lt;p&gt;Using hackney we work only with binaries instead of string lists.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;First, add HTTPoison to your &lt;code&gt;mix.exs&lt;/code&gt; dependencies:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:httpoison&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 1.6&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and run &lt;code&gt;$ mix deps.get&lt;/code&gt;. Add &lt;code&gt;:httpoison&lt;/code&gt; to your applications list if your Elixir version is 1.3 or lower:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;application&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [&lt;span class="pl-c1"&gt;applications:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:httpoison&lt;/span&gt;]]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;start&lt;/span&gt;
iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get!&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://httparrot.herokuapp.com/get&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
%&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Response&lt;/span&gt;{
  &lt;span class="pl-c1"&gt;body:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;args&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: {},&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;headers&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: {} ...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;headers:&lt;/span&gt; [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Connection&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keep-alive&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Server&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Cowboy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
  {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Sat, 06 Jun 2015 03:52:13 GMT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Length&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;495&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
  {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Via&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.1 vegur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}],
  &lt;span class="pl-c1"&gt;status_code:&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;
}
iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get!&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://localhost:1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;**&lt;/span&gt; (&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Error&lt;/span&gt;) &lt;span class="pl-c1"&gt;:econnrefused&lt;/span&gt;
iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://localhost:1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, %&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Error&lt;/span&gt;{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;, &lt;span class="pl-c1"&gt;reason:&lt;/span&gt; &lt;span class="pl-c1"&gt;:econnrefused&lt;/span&gt;}}

iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;post&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://httparrot.herokuapp.com/post&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{&lt;span class="pl-c1"&gt;\"&lt;/span&gt;body&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;test&lt;span class="pl-c1"&gt;\"&lt;/span&gt;}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, %&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Response&lt;/span&gt;{&lt;span class="pl-c1"&gt;body:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;args&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: {},&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;headers&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: {&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;host&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;httparrot.herokuapp.com&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;connection&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;close&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;accept&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;application/json&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;content-type&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;application/json&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;user-agent&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;hackney/1.6.1&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;x-request-id&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;4b85de44-6227-4480-b506-e3b9b4f0318a&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;x-forwarded-for&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;76.174.231.199&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;x-forwarded-proto&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;http&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;x-forwarded-port&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;80&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;via&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;1.1 vegur&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;connect-time&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;1&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;x-request-start&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;1475945832992&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;total-route-time&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;0&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;content-length&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;16&lt;span class="pl-c1"&gt;\"\n&lt;/span&gt;  },&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;url&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;http://httparrot.herokuapp.com/post&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;origin&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;10.180.37.142&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;form&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: {},&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;data&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;{&lt;span class="pl-c1"&gt;\\\"&lt;/span&gt;body&lt;span class="pl-c1"&gt;\\\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\\\"&lt;/span&gt;test&lt;span class="pl-c1"&gt;\\\"&lt;/span&gt;}&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;json&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: {&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;body&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;test&lt;span class="pl-c1"&gt;\"\n&lt;/span&gt;  }&lt;span class="pl-c1"&gt;\n&lt;/span&gt;}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;headers:&lt;/span&gt; [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Connection&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keep-alive&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Server&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Cowboy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Sat, 08 Oct 2016 16:57:12 GMT&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Length&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;681&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Via&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.1 vegur&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}],
&lt;span class="pl-c1"&gt;status_code:&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also easily pattern match on the &lt;code&gt;HTTPoison.Response&lt;/code&gt; struct:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(url) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, %&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Response&lt;/span&gt;{&lt;span class="pl-c1"&gt;status_code:&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;, &lt;span class="pl-c1"&gt;body:&lt;/span&gt; body}} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt; body
  {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, %&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Response&lt;/span&gt;{&lt;span class="pl-c1"&gt;status_code:&lt;/span&gt; &lt;span class="pl-c1"&gt;404&lt;/span&gt;}} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Not found :(&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, %&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Error&lt;/span&gt;{&lt;span class="pl-c1"&gt;reason:&lt;/span&gt; reason}} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;inspect&lt;/span&gt; reason
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-options" class="anchor" aria-hidden="true" href="#options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Options&lt;/h3&gt;
&lt;p&gt;There are a number of supported options(&lt;em&gt;not to be confused with the HTTP options method&lt;/em&gt;), documented &lt;a href="https://hexdocs.pm/httpoison/HTTPoison.html#request/5" rel="nofollow"&gt;here&lt;/a&gt;, that can be added to your request. The example below shows the use of the &lt;code&gt;:ssl&lt;/code&gt; and &lt;code&gt;:recv_timeout&lt;/code&gt; options for a post request to an api that requires a bearer token. The &lt;code&gt;:ssl&lt;/code&gt; option allows you to set options accepted by the &lt;a href="http://erlang.org/doc/man/ssl.html" rel="nofollow"&gt;Erlang SSL module&lt;/a&gt;, and &lt;code&gt;:recv_timeout&lt;/code&gt; sets a timeout on receiving a response, the default is 5000ms.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;token &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some_token_from_another_request&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
url &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://example.com/api/endpoint_that_needs_a_bearer_token&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
headers &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Authorization&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bearer &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;token&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Accept&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Application/json; Charset=utf-8&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
options &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;ssl:&lt;/span&gt; [{&lt;span class="pl-c1"&gt;:versions&lt;/span&gt;, [&lt;span class="pl-c1"&gt;:'tlsv1.2'&lt;/span&gt;]}], &lt;span class="pl-c1"&gt;recv_timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;500&lt;/span&gt;]
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, response} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(url, headers, options)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the example below shows the use of the &lt;code&gt;:ssl&lt;/code&gt; options for a post request to an api that requires a client certification.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;url &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://example.org/api/endpoint_that_needs_client_cert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
options &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;ssl:&lt;/span&gt; [&lt;span class="pl-c1"&gt;certfile:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;certs/client.crt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]]
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, response} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;post&lt;/span&gt;(url, [], options)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-wrapping-httpoisonbase" class="anchor" aria-hidden="true" href="#wrapping-httpoisonbase"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wrapping &lt;code&gt;HTTPoison.Base&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You can also use the &lt;code&gt;HTTPoison.Base&lt;/code&gt; module in your modules in order to make
cool API clients or something. The following example wraps &lt;code&gt;HTTPoison.Base&lt;/code&gt; in
order to build a client for the GitHub API
(&lt;a href="https://github.com/devinus/poison"&gt;Poison&lt;/a&gt; is used for JSON decoding):&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Base&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@expected_fields&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;~w(&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    login id avatar_url gravatar_id url html_url followers_url&lt;/span&gt;
&lt;span class="pl-s"&gt;    following_url gists_url starred_url subscriptions_url&lt;/span&gt;
&lt;span class="pl-s"&gt;    organizations_url repos_url events_url received_events_url type&lt;/span&gt;
&lt;span class="pl-s"&gt;    site_admin name company blog location email hireable bio&lt;/span&gt;
&lt;span class="pl-s"&gt;    public_repos public_gists followers following created_at updated_at&lt;/span&gt;
&lt;span class="pl-s"&gt;  &lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_request_url&lt;/span&gt;(url) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://api.github.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; url
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_response_body&lt;/span&gt;(body) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    body
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Poison&lt;/span&gt;.&lt;span class="pl-en"&gt;decode!&lt;/span&gt;
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Map&lt;/span&gt;.&lt;span class="pl-en"&gt;take&lt;/span&gt;(&lt;span class="pl-smi"&gt;@expected_fields&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;map&lt;/span&gt;(&lt;span class="pl-en"&gt;fn&lt;/span&gt;({k, v}) &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; {&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;to_atom&lt;/span&gt;(k), v} &lt;span class="pl-k"&gt;end&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt;.&lt;span class="pl-en"&gt;start&lt;/span&gt;
iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt;.&lt;span class="pl-en"&gt;get!&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/users/myfreeweb&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;).body[&lt;span class="pl-c1"&gt;:public_repos&lt;/span&gt;]
&lt;span class="pl-c1"&gt;37&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's possible to extend the functions listed below:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_request_body&lt;/span&gt;(body), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; body

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_request_headers&lt;/span&gt;(headers) &lt;span class="pl-k"&gt;when&lt;/span&gt; &lt;span class="pl-en"&gt;is_map&lt;/span&gt;(headers) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;into&lt;/span&gt;(headers, [])
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_request_headers&lt;/span&gt;(headers), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; headers

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_request_options&lt;/span&gt;(options), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; options

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_request_url&lt;/span&gt;(url), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; url

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_response_body&lt;/span&gt;(body), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; body

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_response_chunk&lt;/span&gt;(chunk), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; chunk

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_response_headers&lt;/span&gt;(headers), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; headers

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;process_response_status_code&lt;/span&gt;(status_code), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; status_code&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-async-requests" class="anchor" aria-hidden="true" href="#async-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Async requests&lt;/h3&gt;
&lt;p&gt;HTTPoison now comes with async requests!&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get!&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://github.com/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %{}, &lt;span class="pl-c1"&gt;stream_to:&lt;/span&gt; self
%&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;AsyncResponse&lt;/span&gt;{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;Reference&amp;lt;0.0.0.1654&amp;gt;}&lt;/span&gt;
iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; flush
%&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;AsyncStatus&lt;/span&gt;{&lt;span class="pl-c1"&gt;code:&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;, &lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;Reference&amp;lt;0.0.0.1654&amp;gt;}&lt;/span&gt;
%&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;AsyncHeaders&lt;/span&gt;{&lt;span class="pl-c1"&gt;headers:&lt;/span&gt; %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Connection&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keep-alive&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;..&lt;/span&gt;.}, &lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;Reference&amp;lt;0.0.0.1654&amp;gt;}&lt;/span&gt;
%&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;AsyncChunk&lt;/span&gt;{&lt;span class="pl-c1"&gt;chunk:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;lt;!DOCTYPE html&amp;gt;...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;Reference&amp;lt;0.0.0.1654&amp;gt;}&lt;/span&gt;
%&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;AsyncEnd&lt;/span&gt;{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;Reference&amp;lt;0.0.0.1654&amp;gt;}&lt;/span&gt;
&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Warning: this option can flood a receiver in messages.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If a server may send very large messages the &lt;code&gt;async: :once&lt;/code&gt; option should be used.
This will send only a single chunk at a time the receiver can call &lt;code&gt;HTTPoison.stream_next/1&lt;/code&gt; to indicate ability to process more chunks.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-cookies" class="anchor" aria-hidden="true" href="#cookies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cookies&lt;/h3&gt;
&lt;p&gt;HTTPoison allows you to send cookies:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;iex&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get!&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://httparrot.herokuapp.com/cookies&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %{}, &lt;span class="pl-c1"&gt;hackney:&lt;/span&gt; [&lt;span class="pl-c1"&gt;cookie:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;session=a933ec1dd923b874e691; logged_in=true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]])
%&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Response&lt;/span&gt;{&lt;span class="pl-c1"&gt;body:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{&lt;span class="pl-c1"&gt;\n&lt;/span&gt;  &lt;span class="pl-c1"&gt;\"&lt;/span&gt;cookies&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: {&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;session&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;a933ec1dd923b874e691&lt;span class="pl-c1"&gt;\"&lt;/span&gt;,&lt;span class="pl-c1"&gt;\n&lt;/span&gt;    &lt;span class="pl-c1"&gt;\"&lt;/span&gt;logged_in&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;true&lt;span class="pl-c1"&gt;\"\n&lt;/span&gt;  }&lt;span class="pl-c1"&gt;\n&lt;/span&gt;}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
 &lt;span class="pl-c1"&gt;headers:&lt;/span&gt; [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Connection&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keep-alive&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, &lt;span class="pl-k"&gt;..&lt;/span&gt;.],
 &lt;span class="pl-c1"&gt;status_code:&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also receive cookies from the server by reading the &lt;code&gt;"set-cookie"&lt;/code&gt; headers in the response:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;iex&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; response &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get!&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://httparrot.herokuapp.com/cookies/set?foo=1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-en"&gt;iex&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; cookies &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;filter&lt;/span&gt;(response.headers, &lt;span class="pl-k"&gt;fn&lt;/span&gt;
&lt;span class="pl-k"&gt;..&lt;/span&gt;.(&lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; {key, _} &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;match?&lt;/span&gt;(key, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;~r/&lt;/span&gt;&lt;span class="pl-c1"&gt;\A&lt;/span&gt;set-cookie&lt;span class="pl-c1"&gt;\z&lt;/span&gt;&lt;span class="pl-pds"&gt;/i&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;..&lt;/span&gt;.(&lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;end&lt;/span&gt;)
[{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Set-Cookie&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo=1; Version=1; Path=/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see more usage examples in the test files (located in the
&lt;a href="test"&gt;&lt;code&gt;test/&lt;/code&gt;&lt;/a&gt;) directory.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-connection-pools" class="anchor" aria-hidden="true" href="#connection-pools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Connection Pools&lt;/h3&gt;
&lt;p&gt;Normally &lt;strong&gt;hackney&lt;/strong&gt; &lt;a href="https://github.com/benoitc/hackney#reuse-a-connection"&gt;opens and closes connections on demand&lt;/a&gt;, but it also creates a &lt;a href="https://github.com/benoitc/hackney#use-the-default-pool"&gt;default pool&lt;/a&gt; of connections which are reused for requests to the same host. If the connection and host support keepalive, the connection is kept open until explicitly closed.&lt;/p&gt;
&lt;p&gt;To use the default pool, you can just declare it as an option:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;httpbin.org/get&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [], &lt;span class="pl-c1"&gt;hackney:&lt;/span&gt; [&lt;span class="pl-c1"&gt;pool:&lt;/span&gt; &lt;span class="pl-c1"&gt;:default&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is possible to use different pools for different purposes when a more fine grained allocation of resources is necessary.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-simple-pool-declaration" class="anchor" aria-hidden="true" href="#simple-pool-declaration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Simple pool declaration&lt;/h4&gt;
&lt;p&gt;The easiest way is to just pass the name of the pool, and hackney will create it if it doesn't exist. Pools are independent from each other (they won't compete for connections) and are created with the default configuration.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;httpbin.org/get&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [], &lt;span class="pl-c1"&gt;hackney:&lt;/span&gt; [&lt;span class="pl-c1"&gt;pool:&lt;/span&gt; &lt;span class="pl-c1"&gt;:first_pool&lt;/span&gt;])
&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;httpbin.org/get&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [], &lt;span class="pl-c1"&gt;hackney:&lt;/span&gt; [&lt;span class="pl-c1"&gt;pool:&lt;/span&gt; &lt;span class="pl-c1"&gt;:second_pool&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-explicit-pool-creation" class="anchor" aria-hidden="true" href="#explicit-pool-creation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Explicit pool creation&lt;/h4&gt;
&lt;p&gt;If you want to use different configuration options you can create a pool manually &lt;a href="http://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html#the-application-callback" rel="nofollow"&gt;when your app starts&lt;/a&gt; with &lt;code&gt;:hackney_pool.start_pool/2&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;:hackney_pool&lt;/span&gt;.&lt;span class="pl-en"&gt;start_pool&lt;/span&gt;(&lt;span class="pl-c1"&gt;:first_pool&lt;/span&gt;, [&lt;span class="pl-c1"&gt;timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;15000&lt;/span&gt;, &lt;span class="pl-c1"&gt;max_connections:&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the already linked &lt;a href="https://github.com/benoitc/hackney#use-the-default-pool"&gt;hackney's readme&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; is the time we keep the connection alive in the pool, &lt;code&gt;max_connections&lt;/code&gt; is the number of connections maintained in the pool. Each connection in a pool is monitored and closed connections are removed automatically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a id="user-content-pools-as-supervised-processes" class="anchor" aria-hidden="true" href="#pools-as-supervised-processes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pools as supervised processes&lt;/h4&gt;
&lt;p&gt;A third option is to add the pool as part of your supervision tree:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;children &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  &lt;span class="pl-c1"&gt;:hackney_pool&lt;/span&gt;.&lt;span class="pl-en"&gt;child_spec&lt;/span&gt;(&lt;span class="pl-c1"&gt;:first_pool&lt;/span&gt;, [&lt;span class="pl-c1"&gt;timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;15000&lt;/span&gt;, &lt;span class="pl-c1"&gt;max_connections:&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;])
]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add that to the application supervisor and &lt;code&gt;first_pool&lt;/code&gt; will be available to be used by HTTPoison/hackney.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-multipart" class="anchor" aria-hidden="true" href="#multipart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Multipart&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-request" class="anchor" aria-hidden="true" href="#request"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Request&lt;/h4&gt;
&lt;p&gt;HTTPoison supports making &lt;code&gt;multipart&lt;/code&gt; requests. E.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;post&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://myurl.php&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, {&lt;span class="pl-c1"&gt;:multipart&lt;/span&gt;, [{&lt;span class="pl-c1"&gt;:file&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;form-data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mytest&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;filename&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]}, []}]})&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Further examples of &lt;code&gt;multipart&lt;/code&gt; requests can be found &lt;a href="https://github.com/edgurgel/httpoison/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+multipart"&gt;in the issues&lt;/a&gt; (e.g.: &lt;a href="https://github.com/edgurgel/httpoison/issues/144#issue-160035453"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/edgurgel/httpoison/issues/237#issuecomment-313132804"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For more complex queries regarding multipart requests, you should follow the &lt;a href="https://github.com/benoitc/hackney#send-a-body"&gt;hackney docs for the &lt;code&gt;multipart&lt;/code&gt; API&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-response" class="anchor" aria-hidden="true" href="#response"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Response&lt;/h4&gt;
&lt;p&gt;HTTPoison supports parsing &lt;code&gt;multipart&lt;/code&gt; responses. E.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;iex&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; response &lt;span class="pl-k"&gt;=&lt;/span&gt; %&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Response&lt;/span&gt;{
&lt;span class="pl-k"&gt;..&lt;/span&gt;.(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;body:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--123&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;Content-type: application/json&lt;span class="pl-c1"&gt;\r\n\r\n&lt;/span&gt;{&lt;span class="pl-c1"&gt;\"&lt;/span&gt;1&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;first&lt;span class="pl-c1"&gt;\"&lt;/span&gt;}&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;--123&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;Content-type: application/json&lt;span class="pl-c1"&gt;\r\n\r\n&lt;/span&gt;{&lt;span class="pl-c1"&gt;\"&lt;/span&gt;2&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;second&lt;span class="pl-c1"&gt;\"&lt;/span&gt;}&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;--123--&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
&lt;span class="pl-k"&gt;..&lt;/span&gt;.(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;headers:&lt;/span&gt; [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;multipart/mixed;boundary=123&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}],
&lt;span class="pl-k"&gt;..&lt;/span&gt;.(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;request_url:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://localhost&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
&lt;span class="pl-k"&gt;..&lt;/span&gt;.(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="pl-c1"&gt;status_code:&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;
&lt;span class="pl-k"&gt;..&lt;/span&gt;.(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; }
%&lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Response&lt;/span&gt;{
  &lt;span class="pl-c1"&gt;body:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--123&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;Content-type: application/json&lt;span class="pl-c1"&gt;\r\n\r\n&lt;/span&gt;{&lt;span class="pl-c1"&gt;\"&lt;/span&gt;1&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;first&lt;span class="pl-c1"&gt;\"&lt;/span&gt;}&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;--123&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;Content-type: application/json&lt;span class="pl-c1"&gt;\r\n\r\n&lt;/span&gt;{&lt;span class="pl-c1"&gt;\"&lt;/span&gt;2&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;second&lt;span class="pl-c1"&gt;\"&lt;/span&gt;}&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;--123--&lt;span class="pl-c1"&gt;\r\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;headers:&lt;/span&gt; [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;multipart/mixed;boundary=123&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}],
  &lt;span class="pl-c1"&gt;request_url:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://localhost&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;status_code:&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;
}

&lt;span class="pl-en"&gt;iex&lt;/span&gt;(&lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;HTTPoison&lt;/span&gt;.&lt;span class="pl-en"&gt;Handlers&lt;/span&gt;.&lt;span class="pl-en"&gt;Multipart&lt;/span&gt;.&lt;span class="pl-en"&gt;decode_body&lt;/span&gt;(response)
[
  {[{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}], &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{&lt;span class="pl-c1"&gt;\"&lt;/span&gt;1&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;first&lt;span class="pl-c1"&gt;\"&lt;/span&gt;}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
  {[{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Content-Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}], &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;{&lt;span class="pl-c1"&gt;\"&lt;/span&gt;2&lt;span class="pl-c1"&gt;\"&lt;/span&gt;: &lt;span class="pl-c1"&gt;\"&lt;/span&gt;second&lt;span class="pl-c1"&gt;\"&lt;/span&gt;}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more complex queries regarding multipart response parsing, you should follow the &lt;a href="https://github.com/benoitc/hackney/blob/master/doc/hackney_multipart.md"&gt;hackney docs for the &lt;code&gt;hackney_multipart&lt;/code&gt; API&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Copyright © 2013-2019 Eduardo Gurgel &amp;lt;eduardo@gurgel.me&amp;gt;

This work is free. You can redistribute it and/or modify it under the
terms of the MIT License. See the LICENSE file for more details.
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>edgurgel</author><guid isPermaLink="false">https://github.com/edgurgel/httpoison</guid><pubDate>Thu, 30 Jan 2020 00:04:00 GMT</pubDate></item><item><title>christopheradams/elixir_style_guide #5 in Elixir, Today</title><link>https://github.com/christopheradams/elixir_style_guide</link><description>&lt;p&gt;&lt;i&gt;A community driven style guide for Elixir&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-the-elixir-style-guide" class="anchor" aria-hidden="true" href="#the-elixir-style-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/christopheradams/elixir_style_guide"&gt;The Elixir Style Guide&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#prelude"&gt;Prelude&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#formatting"&gt;Formatting&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#whitespace"&gt;Whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indentation"&gt;Indentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#parentheses"&gt;Parentheses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#syntax"&gt;Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#the-guide"&gt;The Guide&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#expressions"&gt;Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#naming"&gt;Naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comments"&gt;Comments&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#comment-annotations"&gt;Comment Annotations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#modules"&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#typespecs"&gt;Typespecs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#structs"&gt;Structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exceptions"&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collections"&gt;Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strings"&gt;Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Regular Expressions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#metaprogramming"&gt;Metaprogramming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#alternative-style-guides"&gt;Alternative Style Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tools"&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#getting-involved"&gt;Getting Involved&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spread-the-word"&gt;Spread the Word&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#copying"&gt;Copying&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attribution"&gt;Attribution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-prelude" class="anchor" aria-hidden="true" href="#prelude"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prelude&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Liquid architecture. It's like jazz — you improvise, you work together, you
play off each other, you make something, they make something.&lt;/p&gt;
&lt;p&gt;—Frank Gehry&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Style matters.
&lt;a href="http://elixir-lang.org" rel="nofollow"&gt;Elixir&lt;/a&gt; has plenty of style but like all languages it can be stifled.
Don't stifle the style.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;This is community style guide for the &lt;a href="http://elixir-lang.org" rel="nofollow"&gt;Elixir programming language&lt;/a&gt;.
Please feel free to make pull requests and suggestions, and be a part of
Elixir's vibrant community.&lt;/p&gt;
&lt;p&gt;If you're looking for other projects to contribute to please see the
&lt;a href="https://hex.pm/packages" rel="nofollow"&gt;Hex package manager site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-translations"&gt;&lt;/a&gt;
Translations of the guide are available in the following languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/geekerzp/elixir_style_guide/blob/master/README-zhCN.md"&gt;Chinese Simplified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixirtw/elixir_style_guide/blob/master/README_zhTW.md"&gt;Chinese Traditional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ronanboiteau/elixir_style_guide/blob/master/README_frFR.md"&gt;French&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kenichirow/elixir_style_guide/blob/master/README-jaJP.md"&gt;Japanese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marocchino/elixir_style_guide/blob/new-korean/README-koKR.md"&gt;Korean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gusaiani/elixir_style_guide/blob/master/README_ptBR.md"&gt;Portuguese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/albertoalmagro/elixir_style_guide/blob/spanish/README_esES.md"&gt;Spanish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-formatting" class="anchor" aria-hidden="true" href="#formatting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Formatting&lt;/h2&gt;
&lt;p&gt;Elixir v1.6 introduced a &lt;a href="https://hexdocs.pm/elixir/Code.html#format_string!/2" rel="nofollow"&gt;Code Formatter&lt;/a&gt; and &lt;a href="https://hexdocs.pm/mix/Mix.Tasks.Format.html" rel="nofollow"&gt;Mix format&lt;/a&gt; task.
The formatter should be preferred for all new projects and source code.&lt;/p&gt;
&lt;p&gt;The rules in this section are applied automatically by the code formatter, but
are provided here as examples of the preferred style.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-whitespace" class="anchor" aria-hidden="true" href="#whitespace"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Whitespace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-trailing-whitespace"&gt;&lt;/a&gt;
Avoid trailing whitespace.
&lt;sup&gt;[&lt;a href="#trailing-whitespace"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-newline-eof"&gt;&lt;/a&gt;
End each file with a newline.
&lt;sup&gt;[&lt;a href="#newline-eof"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-line-endings"&gt;&lt;/a&gt;
Use Unix-style line endings (*BSD/Solaris/Linux/OSX users are covered by
default, Windows users have to be extra careful).
&lt;sup&gt;[&lt;a href="#line-endings"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-autocrlf"&gt;&lt;/a&gt;
If you're using Git you might want to add the following configuration
setting to protect your project from Windows line endings creeping in:
&lt;sup&gt;[&lt;a href="#autocrlf"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git config --global core.autocrlf &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-line-length"&gt;&lt;/a&gt;
Limit lines to 98 characters.
Otherwise, set the &lt;code&gt;:line_length&lt;/code&gt; option in your &lt;code&gt;.formatter.exs&lt;/code&gt; file.
&lt;sup&gt;[&lt;a href="#line-length"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-spaces"&gt;&lt;/a&gt;
Use spaces around operators, after commas, colons and semicolons.
Do not put spaces around matched pairs like brackets, parentheses, etc.
Whitespace might be (mostly) irrelevant to the Elixir runtime, but its proper
use is the key to writing easily readable code.
&lt;sup&gt;[&lt;a href="#spaces"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;sum &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
{a, b} &lt;span class="pl-k"&gt;=&lt;/span&gt; {&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;}
[first &lt;span class="pl-k"&gt;|&lt;/span&gt; rest] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;]
&lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;map&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;one&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;two&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;three&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], &lt;span class="pl-k"&gt;fn&lt;/span&gt; num &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(num) &lt;span class="pl-k"&gt;end&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-no-spaces"&gt;&lt;/a&gt;
Do not use spaces after non-word operators that only take one argument; or
around the range operator.
&lt;sup&gt;[&lt;a href="#no-spaces"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-smi"&gt;^pinned&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;some_func&lt;/span&gt;()
&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;&lt;span class="pl-c1"&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-def-spacing"&gt;&lt;/a&gt;
Use blank lines between &lt;code&gt;def&lt;/code&gt;s to break up a function into logical
paragraphs.
&lt;sup&gt;[&lt;a href="#def-spacing"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(some_data) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  some_data &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;other_function&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;List&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;()
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  result
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_other_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  another_result
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;a_longer_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  one
  two

  three
  four
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-defmodule-spacing"&gt;&lt;/a&gt;
Don't put a blank line after &lt;code&gt;defmodule&lt;/code&gt;.
&lt;sup&gt;[&lt;a href="#defmodule-spacing"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-long-dos"&gt;&lt;/a&gt;
If the function head and &lt;code&gt;do:&lt;/code&gt; clause are too long to fit on the same line, put
&lt;code&gt;do:&lt;/code&gt; on a new line, indented one level more than the previous line.
&lt;sup&gt;[&lt;a href="#long-dos"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([&lt;span class="pl-c1"&gt;:foo&lt;/span&gt;, &lt;span class="pl-c1"&gt;:bar&lt;/span&gt;, &lt;span class="pl-c1"&gt;:baz&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; args),
  &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;map&lt;/span&gt;(args, &lt;span class="pl-k"&gt;fn&lt;/span&gt; arg &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; arg &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; is on a very long line!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;end&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the &lt;code&gt;do:&lt;/code&gt; clause starts on its own line, treat it as a multiline
function by separating it with blank lines.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([]), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:empty&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(_),
  &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:very_long_line_here&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([]), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:empty&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(_),
  &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:very_long_line_here&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-add-blank-line-after-multiline-assignment"&gt;&lt;/a&gt;
Add a blank line after a multiline assignment as a
visual cue that the assignment is 'over'.
&lt;sup&gt;[&lt;a href="#add-blank-line-after-multiline-assignment"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()
another_string &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; some_string

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()

another_string &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; some_string&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; also not preferred&lt;/span&gt;
something &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-k"&gt;if&lt;/span&gt; x &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;else&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bye&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;(something)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
something &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-k"&gt;if&lt;/span&gt; x &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;else&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bye&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;(something)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiline-enums"&gt;&lt;/a&gt;
If a list, map, or struct spans multiple lines, put each element, as well as
the opening and closing brackets, on its own line.
Indent each element one level, but not the brackets.
&lt;sup&gt;[&lt;a href="#multiline-enums"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
[&lt;span class="pl-c1"&gt;:first_item&lt;/span&gt;, &lt;span class="pl-c1"&gt;:second_item&lt;/span&gt;, &lt;span class="pl-c1"&gt;:next_item&lt;/span&gt;,
&lt;span class="pl-c1"&gt;:final_item&lt;/span&gt;]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
[
  &lt;span class="pl-c1"&gt;:first_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:second_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:next_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:final_item&lt;/span&gt;
]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiline-list-assign"&gt;&lt;/a&gt;
When assigning a list, map, or struct, keep the opening bracket on the same
line as the assignment.
&lt;sup&gt;[&lt;a href="#multiline-list-assign"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
list &lt;span class="pl-k"&gt;=&lt;/span&gt;
[
  &lt;span class="pl-c1"&gt;:first_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:second_item&lt;/span&gt;
]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
list &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  &lt;span class="pl-c1"&gt;:first_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:second_item&lt;/span&gt;
]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiline-case-clauses"&gt;&lt;/a&gt;
When &lt;code&gt;case&lt;/code&gt; or &lt;code&gt;cond&lt;/code&gt; clauses span multiple lines, separate each clause with a
blank line.
&lt;sup&gt;[&lt;a href="#multiline-case-clauses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;case&lt;/span&gt; arg &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;
  &lt;span class="pl-c1"&gt;false&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:error&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;case&lt;/span&gt; arg &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;

  &lt;span class="pl-c1"&gt;false&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:error&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-comments-above-line"&gt;&lt;/a&gt;
Place comments above the line they comment on.
&lt;sup&gt;[&lt;a href="#comments-above-line"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;(some_string) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;(some_string)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-comment-leading-spaces"&gt;&lt;/a&gt;
Use one space between the leading &lt;code&gt;#&lt;/code&gt; character of the comment and the text of
the comment.
&lt;sup&gt;[&lt;a href="#comment-leading-spaces"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;(some_string)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;(some_string)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-indentation" class="anchor" aria-hidden="true" href="#indentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Indentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-with-clauses"&gt;&lt;/a&gt;
Indent and align successive &lt;code&gt;with&lt;/code&gt; clauses.
Put the &lt;code&gt;do:&lt;/code&gt; argument on a new line, aligned with the previous clauses.
&lt;sup&gt;[&lt;a href="#with-clauses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;with&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, foo} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt;(opts, &lt;span class="pl-c1"&gt;:foo&lt;/span&gt;),
     {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, my_var} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt;(opts, &lt;span class="pl-c1"&gt;:my_var&lt;/span&gt;),
     &lt;span class="pl-c1"&gt;do:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, foo, my_var}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-with-else"&gt;&lt;/a&gt;
If the &lt;code&gt;with&lt;/code&gt; expression has a &lt;code&gt;do&lt;/code&gt; block with more than one line, or has an
&lt;code&gt;else&lt;/code&gt; option, use multiline syntax.
&lt;sup&gt;[&lt;a href="#with-else"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;with&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, foo} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt;(opts, &lt;span class="pl-c1"&gt;:foo&lt;/span&gt;),
     {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, my_var} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt;(opts, &lt;span class="pl-c1"&gt;:my_var&lt;/span&gt;) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, foo, my_var}
&lt;span class="pl-k"&gt;else&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:error&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:bad_arg&lt;/span&gt;}
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-parentheses" class="anchor" aria-hidden="true" href="#parentheses"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Parentheses&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-parentheses-pipe-operator"&gt;&lt;/a&gt;
Use parentheses for one-arity functions when using the pipe operator (&lt;code&gt;|&amp;gt;&lt;/code&gt;).
&lt;sup&gt;[&lt;a href="#parentheses-pipe-operator"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt; &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-function-names-with-parentheses"&gt;&lt;/a&gt;
Never put a space between a function name and the opening parenthesis.
&lt;sup&gt;[&lt;a href="#function-names-with-parentheses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;f&lt;/span&gt; (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;f&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-function-calls-and-parentheses"&gt;&lt;/a&gt;
Use parentheses in function calls, especially inside a pipeline.
&lt;sup&gt;[&lt;a href="#function-calls-and-parentheses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
f &lt;span class="pl-c1"&gt;3&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;f&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred and parses as rem(2, (3 |&amp;gt; g)), which is not what you want.&lt;/span&gt;
&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;rem&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;g&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;rem&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;g&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-keyword-list-brackets"&gt;&lt;/a&gt;
Omit square brackets from keyword lists whenever they are optional.
&lt;sup&gt;[&lt;a href="#keyword-list-brackets"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;some_function&lt;/span&gt;(foo, bar, [&lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;some_function&lt;/span&gt;(foo, bar, &lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-the-guide" class="anchor" aria-hidden="true" href="#the-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Guide&lt;/h2&gt;
&lt;p&gt;The rules in this section may not be applied by the code formatter, but they are
generally preferred practice.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-expressions" class="anchor" aria-hidden="true" href="#expressions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Expressions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-single-line-defs"&gt;&lt;/a&gt;
Run single-line &lt;code&gt;def&lt;/code&gt;s that match for the same function together, but separate
multiline &lt;code&gt;def&lt;/code&gt;s with a blank line.
&lt;sup&gt;[&lt;a href="#single-line-defs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;No Value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([]), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([first &lt;span class="pl-k"&gt;|&lt;/span&gt; rest]) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(rest)
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiple-function-defs"&gt;&lt;/a&gt;
If you have more than one multiline &lt;code&gt;def&lt;/code&gt;, do not use single-line &lt;code&gt;def&lt;/code&gt;s.
&lt;sup&gt;[&lt;a href="#multiple-function-defs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;No Value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([]) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([first &lt;span class="pl-k"&gt;|&lt;/span&gt; rest]) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(rest)
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([first &lt;span class="pl-k"&gt;|&lt;/span&gt; rest], opts) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(rest, opts)
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-pipe-operator"&gt;&lt;/a&gt;
Use the pipe operator to chain functions together.
&lt;sup&gt;[&lt;a href="#pipe-operator"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;(&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;(some_string))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Multiline pipelines are not further indented&lt;/span&gt;
some_string
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Multiline pipelines on the right side of a pattern match&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; should be indented on a new line&lt;/span&gt;
sanitized_string &lt;span class="pl-k"&gt;=&lt;/span&gt;
  some_string
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this is the preferred method, take into account that copy-pasting
multiline pipelines into IEx might result in a syntax error, as IEx will
evaluate the first line without realizing that the next line has a pipeline.
To avoid this, you can wrap the pasted code in parentheses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-avoid-single-pipelines"&gt;&lt;/a&gt;
Avoid using the pipe operator just once.
&lt;sup&gt;[&lt;a href="#avoid-single-pipelines"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;(some_string)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-bare-variables"&gt;&lt;/a&gt;
Use &lt;em&gt;bare&lt;/em&gt; variables in the first part of a function chain.
&lt;sup&gt;[&lt;a href="#bare-variables"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;(some_string) &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;codepoints&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;codepoints&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-fun-def-parentheses"&gt;&lt;/a&gt;
Use parentheses when a &lt;code&gt;def&lt;/code&gt; has arguments, and omit them when it doesn't.
&lt;sup&gt;[&lt;a href="#fun-def-parentheses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt; arg1, arg2 &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; body omitted&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;() &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; body omitted&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(arg1, arg2) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; body omitted&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; body omitted&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-do-with-single-line-if-unless"&gt;&lt;/a&gt;
Use &lt;code&gt;do:&lt;/code&gt; for single line &lt;code&gt;if/unless&lt;/code&gt; statements.
&lt;sup&gt;[&lt;a href="#do-with-single-line-if-unless"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; some_condition, &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; some_stuff&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-unless-with-else"&gt;&lt;/a&gt;
Never use &lt;code&gt;unless&lt;/code&gt; with &lt;code&gt;else&lt;/code&gt;.
Rewrite these with the positive case first.
&lt;sup&gt;[&lt;a href="#unless-with-else"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;unless&lt;/span&gt; success &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;failure&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;else&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;success&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; success &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;success&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;else&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;failure&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-true-as-last-condition"&gt;&lt;/a&gt;
Use &lt;code&gt;true&lt;/code&gt; as the last condition of the &lt;code&gt;cond&lt;/code&gt; special form when you need a
clause that always matches.
&lt;sup&gt;[&lt;a href="#true-as-last-condition"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;cond&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nope&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Uh, uh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-c1"&gt;:else&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;OK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;cond&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nope&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Uh, uh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;OK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-parentheses-and-functions-with-zero-arity"&gt;&lt;/a&gt;
Use parentheses for calls to functions with zero arity, so they can be
distinguished from variables.
Starting in Elixir 1.4, the compiler will warn you about
locations where this ambiguity exists.
&lt;sup&gt;[&lt;a href="#parentheses-and-functions-with-zero-arity"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;do_stuff&lt;/span&gt;, &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-k"&gt;..&lt;/span&gt;.

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;my_func&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; is this a variable or a function call?&lt;/span&gt;
  do_stuff
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;my_func&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; this is clearly a function call&lt;/span&gt;
  &lt;span class="pl-en"&gt;do_stuff&lt;/span&gt;()
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-naming" class="anchor" aria-hidden="true" href="#naming"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Naming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-snake-case"&gt;&lt;/a&gt;
Use &lt;code&gt;snake_case&lt;/code&gt; for atoms, functions and variables.
&lt;sup&gt;[&lt;a href="#snake-case"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-c1"&gt;:"some atom"&lt;/span&gt;
&lt;span class="pl-c1"&gt;:SomeAtom&lt;/span&gt;
&lt;span class="pl-c1"&gt;:someAtom&lt;/span&gt;

someVar &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;someFunction&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-c1"&gt;:some_atom&lt;/span&gt;

some_var &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-camel-case"&gt;&lt;/a&gt;
Use &lt;code&gt;CamelCase&lt;/code&gt; for modules (keep acronyms like HTTP, RFC, XML uppercase).
&lt;sup&gt;[&lt;a href="#camel-case"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;Somemodule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;Some_Module&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeXml&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeXML&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-predicate-macro-names-with-guards"&gt;&lt;/a&gt;
The name of macros suitable for use in guard expressions should be prefixed
with &lt;code&gt;is_&lt;/code&gt;.
For a list of allowed expressions, see the &lt;a href="https://hexdocs.pm/elixir/guards.html#list-of-allowed-expressions" rel="nofollow"&gt;Guard&lt;/a&gt; docs.
&lt;sup&gt;[&lt;a href="#predicate-macro-names-with-guards"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defguard&lt;/span&gt; &lt;span class="pl-en"&gt;is_cool&lt;/span&gt;(var) &lt;span class="pl-k"&gt;when&lt;/span&gt; var &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cool&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;defguardp&lt;/span&gt; &lt;span class="pl-en"&gt;is_very_cool&lt;/span&gt;(var) &lt;span class="pl-k"&gt;when&lt;/span&gt; var &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;very cool&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-predicate-macro-names-no-guards"&gt;&lt;/a&gt;
The names of predicate functions &lt;em&gt;that cannot be used within guards&lt;/em&gt; should
have a trailing question mark (&lt;code&gt;?&lt;/code&gt;) rather than the &lt;code&gt;is_&lt;/code&gt; (or similar) prefix.
&lt;sup&gt;[&lt;a href="#predicate-macro-names-no-guards"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;cool?&lt;/span&gt;(var) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Complex check if var is cool not possible in a pure function.&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-private-functions-with-same-name-as-public"&gt;&lt;/a&gt;
Private functions with the same name as public functions should start with
&lt;code&gt;do_&lt;/code&gt;.
&lt;sup&gt;[&lt;a href="#private-functions-with-same-name-as-public"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;sum&lt;/span&gt;(list), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-en"&gt;do_sum&lt;/span&gt;(list, &lt;span class="pl-c1"&gt;0&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; private functions&lt;/span&gt;
&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;do_sum&lt;/span&gt;([], total), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; total
&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;do_sum&lt;/span&gt;([head &lt;span class="pl-k"&gt;|&lt;/span&gt; tail], total), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-en"&gt;do_sum&lt;/span&gt;(tail, head &lt;span class="pl-k"&gt;+&lt;/span&gt; total)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comments" class="anchor" aria-hidden="true" href="#comments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comments&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-expressive-code"&gt;&lt;/a&gt;
Write expressive code and try to convey your program's intention through
control-flow, structure and naming.
&lt;sup&gt;[&lt;a href="#expressive-code"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-comment-grammar"&gt;&lt;/a&gt;
Comments longer than a word are capitalized, and sentences use punctuation.
Use &lt;a href="http://en.wikipedia.org/wiki/Sentence_spacing" rel="nofollow"&gt;one space&lt;/a&gt; after periods.
&lt;sup&gt;[&lt;a href="#comment-grammar"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; these lowercase comments are missing punctuation&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Capitalization example&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Use punctuation for complete sentences.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-comment-line-length"&gt;&lt;/a&gt;
Limit comment lines to 100 characters.
&lt;sup&gt;[&lt;a href="#comment-line-length"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-comment-annotations" class="anchor" aria-hidden="true" href="#comment-annotations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comment Annotations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-annotations"&gt;&lt;/a&gt;
Annotations should usually be written on the line immediately above the
relevant code.
&lt;sup&gt;[&lt;a href="#annotations"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-annotation-keyword"&gt;&lt;/a&gt;
The annotation keyword is uppercase, and is followed by a colon and a space,
then a note describing the problem.
&lt;sup&gt;[&lt;a href="#annotation-keyword"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; TODO: Deprecate in v1.5.&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(arg), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, arg}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-exceptions-to-annotations"&gt;&lt;/a&gt;
In cases where the problem is so obvious that any documentation would be
redundant, annotations may be left with no note.
This usage should be the exception and not the rule.
&lt;sup&gt;[&lt;a href="#exceptions-to-annotations"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;start_task&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; FIXME&lt;/span&gt;
&lt;span class="pl-en"&gt;Process&lt;/span&gt;.&lt;span class="pl-en"&gt;sleep&lt;/span&gt;(&lt;span class="pl-c1"&gt;5000&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-todo-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;TODO&lt;/code&gt; to note missing features or functionality that should be added at a
later date.
&lt;sup&gt;[&lt;a href="#todo-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-fixme-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;FIXME&lt;/code&gt; to note broken code that needs to be fixed.
&lt;sup&gt;[&lt;a href="#fixme-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-optimize-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;OPTIMIZE&lt;/code&gt; to note slow or inefficient code that may cause performance
problems.
&lt;sup&gt;[&lt;a href="#optimize-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-hack-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;HACK&lt;/code&gt; to note code smells where questionable coding practices were used
and should be refactored away.
&lt;sup&gt;[&lt;a href="#hack-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-review-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;REVIEW&lt;/code&gt; to note anything that should be looked at to confirm it is
working as intended.
For example: &lt;code&gt;REVIEW: Are we sure this is how the client does X currently?&lt;/code&gt;
&lt;sup&gt;[&lt;a href="#review-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-custom-keywords"&gt;&lt;/a&gt;
Use other custom annotation keywords if it feels appropriate, but be sure to
document them in your project's &lt;code&gt;README&lt;/code&gt; or similar.
&lt;sup&gt;[&lt;a href="#custom-keywords"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-modules" class="anchor" aria-hidden="true" href="#modules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-one-module-per-file"&gt;&lt;/a&gt;
Use one module per file unless the module is only used internally by another
module (such as a test).
&lt;sup&gt;[&lt;a href="#one-module-per-file"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-underscored-filenames"&gt;&lt;/a&gt;
Use &lt;code&gt;snake_case&lt;/code&gt; file names for &lt;code&gt;CamelCase&lt;/code&gt; module names.
&lt;sup&gt;[&lt;a href="#underscored-filenames"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; file is called some_module.ex&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-module-name-nesting"&gt;&lt;/a&gt;
Represent each level of nesting within a module name as a directory.
&lt;sup&gt;[&lt;a href="#module-name-nesting"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; file is called parser/core/xml_parser.ex&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Parser&lt;/span&gt;.&lt;span class="pl-e"&gt;Core&lt;/span&gt;.&lt;span class="pl-en"&gt;XMLParser&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-module-attribute-ordering"&gt;&lt;/a&gt;
List module attributes and directives in the following order:
&lt;sup&gt;[&lt;a href="#module-attribute-ordering"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@moduledoc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@behaviour&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@module_attribute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defstruct&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@callback&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@macrocallback&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@optional_callbacks&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Add a blank line between each grouping, and sort the terms (like module names)
alphabetically.
Here's an overall example of how you should order things in your modules:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  An example module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@behaviour&lt;/span&gt; &lt;span class="pl-en"&gt;MyBehaviour&lt;/span&gt;

  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;GenServer&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Something&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;SomethingElse&lt;/span&gt;

  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;My&lt;/span&gt;.&lt;span class="pl-en"&gt;Long&lt;/span&gt;.&lt;span class="pl-en"&gt;Module&lt;/span&gt;.&lt;span class="pl-en"&gt;Name&lt;/span&gt;
  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;My&lt;/span&gt;.&lt;span class="pl-en"&gt;Other&lt;/span&gt;.&lt;span class="pl-en"&gt;Module&lt;/span&gt;.&lt;span class="pl-en"&gt;Example&lt;/span&gt;

  &lt;span class="pl-k"&gt;require&lt;/span&gt; &lt;span class="pl-en"&gt;Integer&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@module_attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@other_attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;

  &lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;params:&lt;/span&gt; []]

  &lt;span class="pl-smi"&gt;@type&lt;/span&gt; params &lt;span class="pl-k"&gt;::&lt;/span&gt; [{binary, binary}]

  &lt;span class="pl-smi"&gt;@callback&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(term) &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, term}

  &lt;span class="pl-smi"&gt;@macrocallback&lt;/span&gt; &lt;span class="pl-en"&gt;macro_name&lt;/span&gt;(term) &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;Macro&lt;/span&gt;.&lt;span class="pl-en"&gt;t&lt;/span&gt;()

  &lt;span class="pl-smi"&gt;@optional_callbacks&lt;/span&gt; &lt;span class="pl-c1"&gt;macro_name:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;

  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-module-pseudo-variable"&gt;&lt;/a&gt;
Use the &lt;code&gt;__MODULE__&lt;/code&gt; pseudo variable when a module refers to itself. This
avoids having to update any self-references when the module name changes.
&lt;sup&gt;[&lt;a href="#module-pseudo-variable"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;SomeProject&lt;/span&gt;.&lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;]

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;name&lt;/span&gt;(%&lt;span class="pl-c1"&gt;__MODULE__&lt;/span&gt;{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; name}), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; name
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-alias-self-referencing-modules"&gt;&lt;/a&gt;
If you want a prettier name for a module self-reference, set up an alias.
&lt;sup&gt;[&lt;a href="#alias-self-referencing-modules"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;SomeProject&lt;/span&gt;.&lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-c1"&gt;__MODULE__&lt;/span&gt;, &lt;span class="pl-c1"&gt;as:&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt;

  &lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;]

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;name&lt;/span&gt;(%&lt;span class="pl-en"&gt;SomeModule&lt;/span&gt;{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; name}), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; name
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-repetitive-module-names"&gt;&lt;/a&gt;
Avoid repeating fragments in module names and namespaces.
This improves overall readability and
eliminates &lt;a href="https://elixirforum.com/t/using-aliases-for-fubar-fubar-named-module/1723" rel="nofollow"&gt;ambiguous aliases&lt;/a&gt;.
&lt;sup&gt;[&lt;a href="#repetitive-module-names"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Todo&lt;/span&gt;.&lt;span class="pl-en"&gt;Todo&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Todo&lt;/span&gt;.&lt;span class="pl-en"&gt;Item&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h3&gt;
&lt;p&gt;Documentation in Elixir (when read either in &lt;code&gt;iex&lt;/code&gt; with &lt;code&gt;h&lt;/code&gt; or generated with
&lt;a href="https://github.com/elixir-lang/ex_doc"&gt;ExDoc&lt;/a&gt;) uses the &lt;a href="http://elixir-lang.org/getting-started/module-attributes.html#as-annotations" rel="nofollow"&gt;Module Attributes&lt;/a&gt; &lt;code&gt;@moduledoc&lt;/code&gt; and &lt;code&gt;@doc&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-moduledocs"&gt;&lt;/a&gt;
Always include a &lt;code&gt;@moduledoc&lt;/code&gt; attribute in the line right after &lt;code&gt;defmodule&lt;/code&gt; in
your module.
&lt;sup&gt;[&lt;a href="#moduledocs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;AnotherModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt;

  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;AThirdModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;

  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-moduledoc-false"&gt;&lt;/a&gt;
Use &lt;code&gt;@moduledoc false&lt;/code&gt; if you do not intend on documenting the module.
&lt;sup&gt;[&lt;a href="#moduledoc-false"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc false&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-moduledoc-spacing"&gt;&lt;/a&gt;
Separate code after the &lt;code&gt;@moduledoc&lt;/code&gt; with a blank line.
&lt;sup&gt;[&lt;a href="#moduledoc-spacing"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;AnotherModule&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;

  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;AnotherModule&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-heredocs"&gt;&lt;/a&gt;
Use heredocs with markdown for documentation.
&lt;sup&gt;[&lt;a href="#heredocs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc "About the module"&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;  Examples:&lt;/span&gt;
&lt;span class="pl-c"&gt;  iex&amp;gt; SomeModule.some_function&lt;/span&gt;
&lt;span class="pl-c"&gt;  :result&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;  ## Examples&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;      iex&amp;gt; SomeModule.some_function&lt;/span&gt;
&lt;span class="pl-c"&gt;      :result&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-typespecs" class="anchor" aria-hidden="true" href="#typespecs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Typespecs&lt;/h3&gt;
&lt;p&gt;Typespecs are notation for declaring types and specifications, for
documentation or for the static analysis tool Dialyzer.&lt;/p&gt;
&lt;p&gt;Custom types should be defined at the top of the module with the other
directives (see &lt;a href="#modules"&gt;Modules&lt;/a&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-typedocs"&gt;&lt;/a&gt;
Place &lt;code&gt;@typedoc&lt;/code&gt; and &lt;code&gt;@type&lt;/code&gt; definitions together, and separate each
pair with a blank line.
&lt;sup&gt;[&lt;a href="#typedocs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc false&lt;/span&gt;

  &lt;span class="pl-c"&gt;@typedoc "The name"&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@type&lt;/span&gt; name &lt;span class="pl-k"&gt;::&lt;/span&gt; atom

  &lt;span class="pl-c"&gt;@typedoc "The result"&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@type&lt;/span&gt; result &lt;span class="pl-k"&gt;::&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, term} &lt;span class="pl-k"&gt;|&lt;/span&gt; {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, term}

  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-union-types"&gt;&lt;/a&gt;
If a union type is too long to fit on a single line, put each part of the
type on a separate line, indented one level past the name of the type.
&lt;sup&gt;[&lt;a href="#union-types"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-smi"&gt;@type&lt;/span&gt; long_union_type &lt;span class="pl-k"&gt;::&lt;/span&gt;
        some_type &lt;span class="pl-k"&gt;|&lt;/span&gt; another_type &lt;span class="pl-k"&gt;|&lt;/span&gt; some_other_type &lt;span class="pl-k"&gt;|&lt;/span&gt; one_more_type &lt;span class="pl-k"&gt;|&lt;/span&gt; a_final_type

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-smi"&gt;@type&lt;/span&gt; long_union_type &lt;span class="pl-k"&gt;::&lt;/span&gt;
        some_type
        &lt;span class="pl-k"&gt;|&lt;/span&gt; another_type
        &lt;span class="pl-k"&gt;|&lt;/span&gt; some_other_type
        &lt;span class="pl-k"&gt;|&lt;/span&gt; one_more_type
        &lt;span class="pl-k"&gt;|&lt;/span&gt; a_final_type&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-naming-main-types"&gt;&lt;/a&gt;
Name the main type for a module &lt;code&gt;t&lt;/code&gt;, for example: the type specification for a
struct.
&lt;sup&gt;[&lt;a href="#naming-main-types"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;params:&lt;/span&gt; []]

&lt;span class="pl-smi"&gt;@type&lt;/span&gt; t &lt;span class="pl-k"&gt;::&lt;/span&gt; %&lt;span class="pl-c1"&gt;__MODULE__&lt;/span&gt;{
        &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;t&lt;/span&gt;() &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;params:&lt;/span&gt; &lt;span class="pl-en"&gt;Keyword&lt;/span&gt;.&lt;span class="pl-en"&gt;t&lt;/span&gt;()
      }&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-spec-spacing"&gt;&lt;/a&gt;
Place specifications right before the function definition,
after the &lt;code&gt;@doc&lt;/code&gt;,
without separating them by a blank line.
&lt;sup&gt;[&lt;a href="#spec-spacing"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;@doc """&lt;/span&gt;
&lt;span class="pl-c"&gt;Some function description.&lt;/span&gt;
&lt;span class="pl-c"&gt;"""&lt;/span&gt;
&lt;span class="pl-smi"&gt;@spec&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(term) &lt;span class="pl-k"&gt;::&lt;/span&gt; result
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(some_data) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, some_data}
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-structs" class="anchor" aria-hidden="true" href="#structs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Structs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-nil-struct-field-defaults"&gt;&lt;/a&gt;
Use a list of atoms for struct fields that default to &lt;code&gt;nil&lt;/code&gt;, followed by the
other keywords.
&lt;sup&gt;[&lt;a href="#nil-struct-field-defaults"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;, &lt;span class="pl-c1"&gt;params:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;, &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;:params&lt;/span&gt;, &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-struct-def-brackets"&gt;&lt;/a&gt;
Omit square brackets when the argument of a &lt;code&gt;defstruct&lt;/code&gt; is a keyword list.
&lt;sup&gt;[&lt;a href="#struct-def-brackets"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;params:&lt;/span&gt; [], &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; &lt;span class="pl-c1"&gt;params:&lt;/span&gt; [], &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; required - brackets are not optional, with at least one atom in the list&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;params:&lt;/span&gt; [], &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiline-structs"&gt;&lt;/a&gt;
If a struct definition spans multiple lines, put each element on its own line,
keeping the elements aligned.
&lt;sup&gt;[&lt;a href="#multiline-structs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; &lt;span class="pl-c1"&gt;foo:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
          &lt;span class="pl-c1"&gt;bar:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;,
          &lt;span class="pl-c1"&gt;baz:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
          &lt;span class="pl-c1"&gt;qux:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
          &lt;span class="pl-c1"&gt;quux:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If a multiline struct requires brackets, format it as a multiline list:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [
  &lt;span class="pl-c1"&gt;:name&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;params:&lt;/span&gt; [],
  &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-exceptions" class="anchor" aria-hidden="true" href="#exceptions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exceptions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-exception-names"&gt;&lt;/a&gt;
Make exception names end with a trailing &lt;code&gt;Error&lt;/code&gt;.
&lt;sup&gt;[&lt;a href="#exception-names"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;BadHTTPCode&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defexception&lt;/span&gt; [&lt;span class="pl-c1"&gt;:message&lt;/span&gt;]
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;BadHTTPCodeException&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defexception&lt;/span&gt; [&lt;span class="pl-c1"&gt;:message&lt;/span&gt;]
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;BadHTTPCodeError&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defexception&lt;/span&gt; [&lt;span class="pl-c1"&gt;:message&lt;/span&gt;]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-lowercase-error-messages"&gt;&lt;/a&gt;
Use lowercase error messages when raising exceptions, with no trailing
punctuation.
&lt;sup&gt;[&lt;a href="#lowercase-error-messages"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-en"&gt;ArgumentError&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;This is not valid.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-en"&gt;ArgumentError&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;this is not valid&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-collections" class="anchor" aria-hidden="true" href="#collections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collections&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-keyword-list-syntax"&gt;&lt;/a&gt;
Always use the special syntax for keyword lists.
&lt;sup&gt;[&lt;a href="#keyword-list-syntax"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
some_value &lt;span class="pl-k"&gt;=&lt;/span&gt; [{&lt;span class="pl-c1"&gt;:a&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;:b&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_value &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-map-key-atom"&gt;&lt;/a&gt;
Use the shorthand key-value syntax for maps when all of the keys are atoms.
&lt;sup&gt;[&lt;a href="#map-key-atom"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
%{&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;:c&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
%{&lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;c:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-map-key-arrow"&gt;&lt;/a&gt;
Use the verbose key-value syntax for maps if any key is not an atom.
&lt;sup&gt;[&lt;a href="#map-key-arrow"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
%{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
%{&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-strings" class="anchor" aria-hidden="true" href="#strings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Strings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-strings-matching-with-concatenator"&gt;&lt;/a&gt;
Match strings using the string concatenator rather than binary patterns:
&lt;sup&gt;[&lt;a href="#strings-matching-with-concatenator"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;::&lt;/span&gt;utf8, _rest&lt;span class="pl-k"&gt;::&lt;/span&gt;bytes&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my string&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; _rest &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my string&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-regular-expressions" class="anchor" aria-hidden="true" href="#regular-expressions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Regular Expressions&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No guidelines for regular expressions have been added yet.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-metaprogramming" class="anchor" aria-hidden="true" href="#metaprogramming"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Metaprogramming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a name="user-content-avoid-metaprogramming"&gt;&lt;/a&gt;
Avoid needless metaprogramming.
&lt;sup&gt;[&lt;a href="#avoid-metaprogramming"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-testing-assert-order"&gt;&lt;/a&gt;
When writing &lt;a href="https://hexdocs.pm/ex_unit/ExUnit.html" rel="nofollow"&gt;ExUnit&lt;/a&gt; assertions, put the expression being tested to the left
of the operator, and the expected result to the right, unless the assertion is
a pattern match.
&lt;sup&gt;[&lt;a href="#testing-assert-order"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
assert &lt;span class="pl-en"&gt;actual_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
assert &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-en"&gt;actual_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; required - the assertion is a pattern match&lt;/span&gt;
assert {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, expected} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;actual_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resources&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-alternative-style-guides" class="anchor" aria-hidden="true" href="#alternative-style-guides"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternative Style Guides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/lexmag/elixir-style-guide#readme"&gt;Aleksei Magusev's Elixir Style Guide&lt;/a&gt;
— An opinionated Elixir style guide stemming from the coding style practiced
in the Elixir core libraries.
Developed by &lt;a href="https://github.com/lexmag"&gt;Aleksei Magusev&lt;/a&gt; and
&lt;a href="https://github.com/whatyouhide"&gt;Andrea Leopardi&lt;/a&gt;, members of Elixir core team.
While the Elixir project doesn't adhere to any specific style guide,
this is the closest available guide to its conventions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/rrrene/elixir-style-guide#readme"&gt;Credo's Elixir Style Guide&lt;/a&gt;
— Style Guide for the Elixir language, implemented by
&lt;a href="http://credo-ci.org" rel="nofollow"&gt;Credo&lt;/a&gt; static code analysis tool.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-tools" class="anchor" aria-hidden="true" href="#tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tools&lt;/h3&gt;
&lt;p&gt;Refer to &lt;a href="https://github.com/h4cc/awesome-elixir#code-analysis"&gt;Awesome Elixir&lt;/a&gt; for libraries and tools that can help
with code analysis and style linting.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-involved" class="anchor" aria-hidden="true" href="#getting-involved"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Involved&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h3&gt;
&lt;p&gt;It's our hope that this will become a central hub for community discussion on
best practices in Elixir.
Feel free to open tickets or send pull requests with improvements.
Thanks in advance for your help!&lt;/p&gt;
&lt;p&gt;Check the &lt;a href="https://github.com/christopheradams/elixir_style_guide/blob/master/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-spread-the-word" class="anchor" aria-hidden="true" href="#spread-the-word"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spread the Word&lt;/h3&gt;
&lt;p&gt;A community style guide is meaningless without the community's support. Please
tweet, &lt;a href="https://github.com/christopheradams/elixir_style_guide/stargazers"&gt;star&lt;/a&gt;, and let any Elixir programmer know
about &lt;a href="https://github.com/christopheradams/elixir_style_guide"&gt;this guide&lt;/a&gt; so they can contribute.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-copying" class="anchor" aria-hidden="true" href="#copying"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Copying&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ea7febd364f01e7b3f46f6fb86712fe05925bfbf/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792f332e302f38387833312e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/ea7febd364f01e7b3f46f6fb86712fe05925bfbf/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792f332e302f38387833312e706e67" alt="Creative Commons License" data-canonical-src="http://i.creativecommons.org/l/by/3.0/88x31.png" style="max-width:100%;"&gt;&lt;/a&gt;
This work is licensed under a
&lt;a href="http://creativecommons.org/licenses/by/3.0/deed.en_US" rel="nofollow"&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-attribution" class="anchor" aria-hidden="true" href="#attribution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Attribution&lt;/h3&gt;
&lt;p&gt;The structure of this guide, bits of example code, and many of the initial
points made in this document were borrowed from the &lt;a href="https://github.com/bbatsov/ruby-style-guide"&gt;Ruby community style guide&lt;/a&gt;.
A lot of things were applicable to Elixir and allowed us to get &lt;em&gt;some&lt;/em&gt; document
out quicker to start the conversation.&lt;/p&gt;
&lt;p&gt;Here's the &lt;a href="https://github.com/christopheradams/elixir_style_guide/graphs/contributors"&gt;list of people who have kindly contributed&lt;/a&gt; to this
project.&lt;/p&gt;

&lt;/article&gt;&lt;/div&gt;</description><author>christopheradams</author><guid isPermaLink="false">https://github.com/christopheradams/elixir_style_guide</guid><pubDate>Thu, 30 Jan 2020 00:05:00 GMT</pubDate></item><item><title>ueberauth/guardian_db #6 in Elixir, Today</title><link>https://github.com/ueberauth/guardian_db</link><description>&lt;p&gt;&lt;i&gt;Guardian DB integration for tracking tokens and ensuring logout cannot be replayed.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-guardiandb" class="anchor" aria-hidden="true" href="#guardiandb"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guardian.DB&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://hex.pm/packages/guardian_db" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bcd1ccd072bc42887fa16b2a29faae13b45969d7/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f762f677561726469616e5f64622e737667" alt="Hex.pm" data-canonical-src="https://img.shields.io/hexpm/v/guardian_db.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/ueberauth/guardian_db" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/871f92a3ee721e24059322403ce506fc2d05707f/68747470733a2f2f7472617669732d63692e6f72672f7565626572617574682f677561726469616e5f64622e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ueberauth/guardian_db.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/ueberauth/guardian_db" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/72ffa750204c9aa638c0a0d91cff2be28ee2b3d0/68747470733a2f2f636f6465636f762e696f2f67682f7565626572617574682f677561726469616e5f64622f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/ueberauth/guardian_db/branch/master/graph/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://inch-ci.org/github/ueberauth/guardian_db" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cc10baa0b03426a83820a2b2731a16367bcc74ab/68747470733a2f2f696e63682d63692e6f72672f6769746875622f7565626572617574682f677561726469616e5f64622e737667" alt="Inline docs" data-canonical-src="https://inch-ci.org/github/ueberauth/guardian_db.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Guardian.DB&lt;/code&gt; is an extension to &lt;code&gt;Guardian&lt;/code&gt; that tracks tokens in your
application's database to prevent playback.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Guardian.DB&lt;/code&gt; assumes that you are using the Guardian framework for
authentication.&lt;/p&gt;
&lt;p&gt;To install &lt;code&gt;Guardian.DB&lt;/code&gt;, first add it to your &lt;code&gt;mix.exs&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:guardian_db&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 2.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;mix deps.get&lt;/code&gt; on your terminal.&lt;/p&gt;
&lt;p&gt;You will then need to add a migration:&lt;/p&gt;
&lt;p&gt;run &lt;code&gt;mix guardian.db.gen.migration&lt;/code&gt; to generate a migration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do not run the migration yet,&lt;/strong&gt; we need to complete our setup first.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:guardian&lt;/span&gt;, &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;DB&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;repo:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Add your repository module&lt;/span&gt;
  &lt;span class="pl-c1"&gt;schema_name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;guardian_tokens&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; default&lt;/span&gt;
  &lt;span class="pl-c1"&gt;token_types:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;refresh_token&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; store all token types if not set&lt;/span&gt;
  &lt;span class="pl-c1"&gt;sweep_interval:&lt;/span&gt; &lt;span class="pl-c1"&gt;60&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; default: 60 minutes&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To sweep expired tokens from your db you should add
&lt;code&gt;Guardian.DB.Token.SweeperServer&lt;/code&gt; to your supervision tree.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;children &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  {&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;DB&lt;/span&gt;.&lt;span class="pl-en"&gt;Token&lt;/span&gt;.&lt;span class="pl-en"&gt;SweeperServer&lt;/span&gt;, []}
]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Guardian.DB&lt;/code&gt; works by hooking into the lifecycle of your &lt;code&gt;Guardian&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;You'll need to add it to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;after_encode_and_sign&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_verify&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_refresh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_revoke&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthTokens&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;, &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; snip...&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;after_encode_and_sign&lt;/span&gt;(resource, claims, token, _options) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;with&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;DB&lt;/span&gt;.&lt;span class="pl-en"&gt;after_encode_and_sign&lt;/span&gt;(resource, claims[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;typ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], claims, token) &lt;span class="pl-k"&gt;do&lt;/span&gt;
      {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token}
    &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;on_verify&lt;/span&gt;(claims, token, _options) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;with&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;DB&lt;/span&gt;.&lt;span class="pl-en"&gt;on_verify&lt;/span&gt;(claims, token) &lt;span class="pl-k"&gt;do&lt;/span&gt;
      {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims}
    &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;on_refresh&lt;/span&gt;({old_token, old_claims}, {new_token, new_claims}, _options) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;with&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _, _} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;DB&lt;/span&gt;.&lt;span class="pl-en"&gt;on_refresh&lt;/span&gt;({old_token, old_claims}, {new_token, new_claims}) &lt;span class="pl-k"&gt;do&lt;/span&gt;
      {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, {old_token, old_claims}, {new_token, new_claims}}
    &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;on_revoke&lt;/span&gt;(claims, token, _options) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;with&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;DB&lt;/span&gt;.&lt;span class="pl-en"&gt;on_revoke&lt;/span&gt;(claims, token) &lt;span class="pl-k"&gt;do&lt;/span&gt;
      {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims}
    &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now run the migration and you'll be good to go.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-considerations" class="anchor" aria-hidden="true" href="#considerations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Considerations&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Guardian&lt;/code&gt; is already a very robust JWT solution. However, if your
application needs the ability to immediately revoke and invalidate tokens that
have already been generated, you need something like &lt;code&gt;Guardian.DB&lt;/code&gt; to build upon
&lt;code&gt;Guardian&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;Guardian&lt;/code&gt;, you as a systems administrator have no way of revoking
tokens that have already been generated, you can call &lt;code&gt;Guardian.revoke&lt;/code&gt;, but in
&lt;code&gt;Guardian&lt;/code&gt; &lt;strong&gt;that function does not actually do anything&lt;/strong&gt; - it just provides
hooks for other libraries, such as this one, to define more specific behavior.
Discarding the token after something like a log out action is left up to the
client application. If the client application does not discard the token, or
does not log out, or the token gets stolen by a malicious script (because the
client application stores it in localStorage, for instance), the only thing you
can do is wait until the token expires. Depending on the scenario, this may not
be acceptable.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;Guardian.DB&lt;/code&gt;, records of all generated tokens are kept in your
application's database. During each request, the &lt;code&gt;Guardian.Plug.VerifyHeader&lt;/code&gt;
and &lt;code&gt;Guardian.Plug.VerifySession&lt;/code&gt; plugs check the database to make sure the
token is there. If it is not, the server returns a 401 Unauthorized response to
the client. Furthermore, &lt;code&gt;Guardian.revoke!&lt;/code&gt; behavior becomes enhanced, as it
actually removes the token from the database. This means that if the user logs
out, or you revoke their token (e.g. after noticing suspicious activity on the
account), they will need to re-authenticate.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-disadvantages" class="anchor" aria-hidden="true" href="#disadvantages"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disadvantages&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;Guardian&lt;/code&gt;, token verification is very light-weight. The only thing
&lt;code&gt;Guardian&lt;/code&gt; does is decode incoming tokens and make sure they are valid. This can
make it much easier to horizontally scale your application, since there is no
need to centrally store sessions and make them available to load balancers or
other servers.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;Guardian.DB&lt;/code&gt;, every request requires a trip to the database, as &lt;code&gt;Guardian&lt;/code&gt;
now needs to ensure that a record of the token exists. In large scale
applications this can be fairly costly, and can arguably eliminate the main
advantage of using a JWT authentication solution, which is statelessness.
Furthermore, session authentication already works this way, and in most cases
there isn't a good enough reason to reinvent that wheel using JWTs.&lt;/p&gt;
&lt;p&gt;In other words, once you have reached a point where you think you need
&lt;code&gt;Guardian.DB&lt;/code&gt;, it may be time to take a step back and reconsider your whole
approach to authentication!&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ueberauth</author><guid isPermaLink="false">https://github.com/ueberauth/guardian_db</guid><pubDate>Thu, 30 Jan 2020 00:06:00 GMT</pubDate></item><item><title>werbitzky/elastix #7 in Elixir, Today</title><link>https://github.com/werbitzky/elastix</link><description>&lt;p&gt;&lt;i&gt;A simple Elasticsearch REST client written in Elixir.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-elastix----" class="anchor" aria-hidden="true" href="#elastix----"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elastix &lt;a href="https://hex.pm/packages/elastix" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c65a11bac58fc96d2beb6bcc004f9f44c9ee4f09/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f762f656c61737469782e737667" alt="Hex Version" data-canonical-src="https://img.shields.io/hexpm/v/elastix.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://hex.pm/packages/elastix" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c3ec9509af51b5a5c6dfbbd0a9c9eab448cce0ba/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f64742f656c61737469782e737667" alt="Hex Downloads" data-canonical-src="https://img.shields.io/hexpm/dt/elastix.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/werbitzky/elastix" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/38abbc9c39146ce18ef59ad1c9cd8b1b199a569e/68747470733a2f2f7472617669732d63692e6f72672f7765726269747a6b792f656c61737469782e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/werbitzky/elastix.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://www.tldrlegal.com/l/wtfpl" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b72f3c2249b8f58fe9ef9e812203b69e25179659/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d575446504c2d627269676874677265656e2e7376673f7374796c653d666c6174" alt="WTFPL" data-canonical-src="https://img.shields.io/badge/license-WTFPL-brightgreen.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A DSL-free Elasticsearch client for Elixir.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/elastix/" rel="nofollow"&gt;Documentation on hexdocs.pm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" rel="nofollow"&gt;Latest Elasticsearch documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even though the &lt;a href="https://hexdocs.pm/elastix/" rel="nofollow"&gt;documentation&lt;/a&gt; is pretty scarce right now, we're working on improving it. If you want to help with that you're definitely welcome &lt;g-emoji class="g-emoji" alias="hugs" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f917.png"&gt;🤗&lt;/g-emoji&gt;&lt;/p&gt;
&lt;p&gt;This README contains most of the information you should need to get started, if you can't find what you're looking for, either look at the tests or file an issue!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Add &lt;code&gt;elastix&lt;/code&gt; to your list of dependencies in &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:elastix&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;gt;= 0.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;mix deps.get&lt;/code&gt; to fetch the new dependency.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Examples&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-creating-an-elasticsearch-index" class="anchor" aria-hidden="true" href="#creating-an-elasticsearch-index"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Creating an Elasticsearch index&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;Elastix&lt;/span&gt;.&lt;span class="pl-en"&gt;Index&lt;/span&gt;.&lt;span class="pl-en"&gt;create&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://localhost:9200&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;twitter&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %{})&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-map-index-search-and-delete" class="anchor" aria-hidden="true" href="#map-index-search-and-delete"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Map, Index, Search and Delete&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;elastic_url &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://localhost:9200&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

data &lt;span class="pl-k"&gt;=&lt;/span&gt; %{
    &lt;span class="pl-c1"&gt;user:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;kimchy&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;post_date:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2009-11-15T14:12:12&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;message:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;trying out Elastix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}

mapping &lt;span class="pl-k"&gt;=&lt;/span&gt; %{
  &lt;span class="pl-c1"&gt;properties:&lt;/span&gt; %{
    &lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;text&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    &lt;span class="pl-c1"&gt;post_date:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;date&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    &lt;span class="pl-c1"&gt;message:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;text&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  }
}

&lt;span class="pl-en"&gt;Elastix&lt;/span&gt;.&lt;span class="pl-en"&gt;Mapping&lt;/span&gt;.&lt;span class="pl-en"&gt;put&lt;/span&gt;(elastic_url, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;twitter&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tweet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, mapping)
&lt;span class="pl-en"&gt;Elastix&lt;/span&gt;.&lt;span class="pl-en"&gt;Document&lt;/span&gt;.&lt;span class="pl-en"&gt;index&lt;/span&gt;(elastic_url, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;twitter&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tweet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;42&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, data)
&lt;span class="pl-en"&gt;Elastix&lt;/span&gt;.&lt;span class="pl-en"&gt;Search&lt;/span&gt;.&lt;span class="pl-en"&gt;search&lt;/span&gt;(elastic_url, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;twitter&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tweet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], %{})
&lt;span class="pl-en"&gt;Elastix&lt;/span&gt;.&lt;span class="pl-en"&gt;Document&lt;/span&gt;.&lt;span class="pl-en"&gt;delete&lt;/span&gt;(elastic_url, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;twitter&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tweet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;42&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-bulk-requests" class="anchor" aria-hidden="true" href="#bulk-requests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bulk requests&lt;/h3&gt;
&lt;p&gt;Bulk requests take as parameter a list of the lines you want to send to the &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html" rel="nofollow"&gt;&lt;code&gt;_bulk&lt;/code&gt;&lt;/a&gt; endpoint.&lt;/p&gt;
&lt;p&gt;You can also specify the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt; the index of the request&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; the document type of the request. &lt;em&gt;(you can't specify &lt;code&gt;type&lt;/code&gt; without specifying &lt;code&gt;index&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;httpoison_options&lt;/code&gt; configuration directly passed to httpoison methods. Same options that can be passed on config file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;lines &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  %{&lt;span class="pl-c1"&gt;index:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;_id:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}},
  %{&lt;span class="pl-c1"&gt;field:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
  %{&lt;span class="pl-c1"&gt;index:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;_id:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}},
  %{&lt;span class="pl-c1"&gt;field:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;value2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
]

&lt;span class="pl-en"&gt;Elastix&lt;/span&gt;.&lt;span class="pl-en"&gt;Bulk&lt;/span&gt;.&lt;span class="pl-en"&gt;post&lt;/span&gt;(elastic_url, lines, &lt;span class="pl-c1"&gt;index:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my_index&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my_type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;httpoison_options:&lt;/span&gt; [&lt;span class="pl-c1"&gt;timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;180_000&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; You can also send raw data:&lt;/span&gt;
data &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;map&lt;/span&gt;(lines, &lt;span class="pl-k"&gt;fn&lt;/span&gt; line &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Poison&lt;/span&gt;.&lt;span class="pl-en"&gt;encode!&lt;/span&gt;(line) &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-c1"&gt;\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;end&lt;/span&gt;)
&lt;span class="pl-en"&gt;Elastix&lt;/span&gt;.&lt;span class="pl-en"&gt;Bulk&lt;/span&gt;.&lt;span class="pl-en"&gt;post_raw&lt;/span&gt;(elastic_url, data, &lt;span class="pl-c1"&gt;index:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my_index&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my_type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-shield" class="anchor" aria-hidden="true" href="#shield"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://www.elastic.co/products/shield" rel="nofollow"&gt;Shield&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:elastix&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;shield:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;username:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;username&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;password:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;password&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-poison-or-any-other-json-library-and-httpoison" class="anchor" aria-hidden="true" href="#poison-or-any-other-json-library-and-httpoison"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/devinus/poison"&gt;Poison&lt;/a&gt; (or any other JSON library) and &lt;a href="https://github.com/edgurgel/httpoison"&gt;HTTPoison&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:elastix&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;json_options:&lt;/span&gt; [&lt;span class="pl-c1"&gt;keys:&lt;/span&gt; &lt;span class="pl-c1"&gt;:atoms!&lt;/span&gt;],
  &lt;span class="pl-c1"&gt;httpoison_options:&lt;/span&gt; [&lt;span class="pl-c1"&gt;hackney:&lt;/span&gt; [&lt;span class="pl-c1"&gt;pool:&lt;/span&gt; &lt;span class="pl-c1"&gt;:elastix_pool&lt;/span&gt;]]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that you can configure Elastix to use any JSON library, see the &lt;a href="https://hexdocs.pm/elastix/custom-json-codec.html" rel="nofollow"&gt;"Custom JSON codec" page&lt;/a&gt; for more info.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-custom-headers" class="anchor" aria-hidden="true" href="#custom-headers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom headers&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:elastix&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;custom_headers:&lt;/span&gt; {&lt;span class="pl-en"&gt;MyModule&lt;/span&gt;, &lt;span class="pl-c1"&gt;:add_aws_signature&lt;/span&gt;, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;us-east&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;custom_headers&lt;/code&gt; must be a tuple of the type &lt;code&gt;{Module, :function, [args]}&lt;/code&gt;, where &lt;code&gt;:function&lt;/code&gt; is a function that should accept the request (a map of this type: &lt;code&gt;%{method: String.t, headers: [], url: String.t, body: String.t}&lt;/code&gt;) as its first parameter and return a list of the headers you want to send:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;add_aws_signature&lt;/span&gt;(request, region) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Authorization&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;generate_aws_signature&lt;/span&gt;(request, region)} &lt;span class="pl-k"&gt;|&lt;/span&gt; request.headers]
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;generate_aws_signature&lt;/span&gt;(request, region) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; See: https://github.com/bryanjos/aws_auth or similar&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Running tests&lt;/h2&gt;
&lt;p&gt;You need Elasticsearch running locally on port 9200. A quick way of doing so is via Docker:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -p 9200:9200 -it --rm elasticsearch:5.1.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then clone the repo and fetch its dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:werbitzky/elastix.git
$ cd elastix
$ mix deps.get
$ mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright © 2017 El Werbitzky &lt;a href="mailto:werbitzky@gmail.com"&gt;werbitzky@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This work is free. You can redistribute it and/or modify it under the terms of the Do What The Fuck You Want To Public License, Version 2, as published by Sam Hocevar. See &lt;a href="http://www.wtfpl.net/" rel="nofollow"&gt;http://www.wtfpl.net/&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>werbitzky</author><guid isPermaLink="false">https://github.com/werbitzky/elastix</guid><pubDate>Thu, 30 Jan 2020 00:07:00 GMT</pubDate></item><item><title>xerions/phoenix_swagger #8 in Elixir, Today</title><link>https://github.com/xerions/phoenix_swagger</link><description>&lt;p&gt;&lt;i&gt;Swagger integration to Phoenix framework&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-phoenixswagger-" class="anchor" aria-hidden="true" href="#phoenixswagger-"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PhoenixSwagger &lt;a href="https://travis-ci.org/xerions/phoenix_swagger" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7426ba802c2e2adbdca4bc09009afc715696bd1b/68747470733a2f2f7472617669732d63692e6f72672f786572696f6e732f70686f656e69785f737761676765722e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/xerions/phoenix_swagger.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;PhoenixSwagger&lt;/code&gt; is the library that provides &lt;a href="http://swagger.io/" rel="nofollow"&gt;swagger&lt;/a&gt; integration
to the &lt;a href="http://www.phoenixframework.org/" rel="nofollow"&gt;phoenix&lt;/a&gt; web framework.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate a swagger api specification from phoenix router and controllers&lt;/li&gt;
&lt;li&gt;Serve &lt;a href="https://swagger.io/swagger-ui/" rel="nofollow"&gt;swagger-ui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Validate requests against parameter schemas&lt;/li&gt;
&lt;li&gt;Validate responses against schemas in tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p&gt;Follow the &lt;a href="https://hexdocs.pm/phoenix_swagger/getting-started.html" rel="nofollow"&gt;getting started guide&lt;/a&gt; to install and configure &lt;code&gt;PhoenixSwagger&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-guides" class="anchor" aria-hidden="true" href="#guides"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guides&lt;/h1&gt;
&lt;p&gt;See the &lt;a href="https://hexdocs.pm/phoenix_swagger" rel="nofollow"&gt;full documentation on hexdocs.pm&lt;/a&gt; or browse the &lt;a href="./docs"&gt;docs&lt;/a&gt; directory.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Issues and pull requests welcome. You'll also find help on the &lt;a href="https://elixir-lang.slack.com/messages/phoenix_swagger" rel="nofollow"&gt;#phoenix_swagger&lt;/a&gt; channel on the &lt;a href="https://elixir-lang.slack.com" rel="nofollow"&gt;elixir-lang slack&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;&lt;a href="./LICENSE"&gt;Mozilla Public License 2.0&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>xerions</author><guid isPermaLink="false">https://github.com/xerions/phoenix_swagger</guid><pubDate>Thu, 30 Jan 2020 00:08:00 GMT</pubDate></item><item><title>Nebo15/sage #9 in Elixir, Today</title><link>https://github.com/Nebo15/sage</link><description>&lt;p&gt;&lt;i&gt;A dependency-free tool to run distributed transactions in Elixir, inspired by Sagas pattern.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-sage" class="anchor" aria-hidden="true" href="#sage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sage&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://inch-ci.org/github/nebo15/sage" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fecfe62d78fb17a1609ad74091b20b4f5e4b4e74/687474703a2f2f696e63682d63692e6f72672f6769746875622f6e65626f31352f736167652e737667" alt="Inline docs" data-canonical-src="http://inch-ci.org/github/nebo15/sage.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/Nebo15/sage" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5e31ca3e9ae59ff31f5bf31f55d004b21a1e0c4b/68747470733a2f2f7472617669732d63692e6f72672f4e65626f31352f736167652e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Nebo15/sage.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/Nebo15/sage?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/901a79306c3f075a387d8433ccc877a12bb23322/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4e65626f31352f736167652f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/Nebo15/sage/badge.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://ebertapp.io/github/Nebo15/sage" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/225de3d29427e0329a23525e25a5d860a13b0ec4/68747470733a2f2f65626572746170702e696f2f6769746875622f4e65626f31352f736167652e737667" alt="Ebert" data-canonical-src="https://ebertapp.io/github/Nebo15/sage.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sage is a dependency-free implementation of the &lt;a href="http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf" rel="nofollow"&gt;Sagas&lt;/a&gt; pattern in pure Elixir and provides a set of additional built-in features.&lt;/p&gt;
&lt;p&gt;It is a go-to way for dealing with distributed transactions, especially with
an error recovery/cleanup. Sage does it's best to guarantee that either all of the transactions in a saga are
successfully completed, or compensating that all of the transactions did run to amend a partial execution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s like &lt;code&gt;Ecto.Multi&lt;/code&gt; but across business logic and third-party APIs.&lt;/p&gt;
&lt;p&gt;-- @jayjun&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is done by defining two way flow with transaction and compensation functions. When one of the transactions fails, Sage will ensure that the transaction's and all of its predecessors' compensations are executed. However, it's important to note that Sage can not protect you from a node failure that executes given Sage.&lt;/p&gt;
&lt;p&gt;To visualize it, let's imagine we have a 4-step transaction. Successful execution flow would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[T1] -&amp;gt; [T2] -&amp;gt; [T3] -&amp;gt; [T4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and if we get a failure on 3-d step, Sage would cleanup side effects by running compensation functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[T1] -&amp;gt; [T2] -&amp;gt; [T3 has an error]
                ↓
[C1] &amp;lt;- [C2] &amp;lt;- [C3]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-additional-features" class="anchor" aria-hidden="true" href="#additional-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional Features&lt;/h2&gt;
&lt;p&gt;Along with that simple idea, you will get much more out of the box with Sage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transaction retries;&lt;/li&gt;
&lt;li&gt;Asynchronous transactions with timeout;&lt;/li&gt;
&lt;li&gt;Retries with exponential backoff and jitter;&lt;/li&gt;
&lt;li&gt;Ease to write circuit breakers;&lt;/li&gt;
&lt;li&gt;Code that is clean and easy to test;&lt;/li&gt;
&lt;li&gt;Low cost of integration in existing code base and low performance overhead;&lt;/li&gt;
&lt;li&gt;Ability to not lock the database with long running transactions;&lt;/li&gt;
&lt;li&gt;Extensibility - write your own handler for critical errors or metric collector to measure how much time each step took.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-goals" class="anchor" aria-hidden="true" href="#goals"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Become a de facto tool to run distributed transactions in the Elixir world;&lt;/li&gt;
&lt;li&gt;Stay simple to use and small to maintain: less code - less bugs;&lt;/li&gt;
&lt;li&gt;Educate people how to run distributed transaction pragmatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-rationale-use-cases" class="anchor" aria-hidden="true" href="#rationale-use-cases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rationale (use cases)&lt;/h2&gt;
&lt;p&gt;Lot's of applications I've seen face a common task - interaction with third-party API's to offload some of the work on
SaaS products or micro-services, when you simply need to commit to more than one database or in all other cases where
you don't have transaction isolation between business logic steps (that we all got used to thanks to RDBMS).&lt;/p&gt;
&lt;p&gt;When dealing with those, it is a common desire to handle all sorts of errors when application code has failed
in the middle of a transaction so that you won't leave databases in an inconsistent state.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-with-the-old-way" class="anchor" aria-hidden="true" href="#using-with-the-old-way"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using &lt;code&gt;with&lt;/code&gt; (the old way)&lt;/h3&gt;
&lt;p&gt;One solution is to write business logic using &lt;code&gt;with&lt;/code&gt; syntax. But when the number of transaction steps grow,
code becomes hard to maintain, test and even looks ugly. Consider the following pseudo-code &lt;strong&gt;(don't do this)&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;WithExample&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;create_and_subscribe_user&lt;/span&gt;(attrs) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Repo&lt;/span&gt;.&lt;span class="pl-en"&gt;transaction&lt;/span&gt;(&lt;span class="pl-k"&gt;fn&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="pl-k"&gt;with&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, user} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;create_user&lt;/span&gt;(attrs),
           {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, plans} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;fetch_subscription_plans&lt;/span&gt;(attrs),
           {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, charge} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;charge_card&lt;/span&gt;(user, subscription),
           {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, subscription} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;create_subscription&lt;/span&gt;(user, plan, attrs),
           {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _delivery} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;schedule_delivery&lt;/span&gt;(user, subscription, attrs),
           {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _receipt} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;send_email_receipt&lt;/span&gt;(user, subscription, attrs),
           {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, user} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;update_user&lt;/span&gt;(user, %{&lt;span class="pl-c1"&gt;subscription:&lt;/span&gt; subscription}) &lt;span class="pl-k"&gt;do&lt;/span&gt;
        &lt;span class="pl-en"&gt;acknowledge_job&lt;/span&gt;(opts)
      &lt;span class="pl-k"&gt;else&lt;/span&gt;
        {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, {&lt;span class="pl-c1"&gt;:charge_failed&lt;/span&gt;, _reason}} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; First problem: charge is not available here&lt;/span&gt;
          &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;refund&lt;/span&gt;(charge)
          &lt;span class="pl-en"&gt;reject_job&lt;/span&gt;(opts)

        {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, {&lt;span class="pl-c1"&gt;:create_subscription&lt;/span&gt;, _reason}} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Second problem: growing list of compensations&lt;/span&gt;
          &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;refund&lt;/span&gt;(charge)
          &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;delete_subscription&lt;/span&gt;(subscription)
          &lt;span class="pl-en"&gt;reject_job&lt;/span&gt;(opts)

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Third problem: how to decide when we should be sending another email or&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; at which stage we've failed?&lt;/span&gt;

        other &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Will rollback transaction on all other errors&lt;/span&gt;
          &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;ensure_deleted&lt;/span&gt;(&lt;span class="pl-k"&gt;fn&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;refund&lt;/span&gt;(charge) &lt;span class="pl-k"&gt;end&lt;/span&gt;)
          &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;ensure_deleted&lt;/span&gt;(&lt;span class="pl-k"&gt;fn&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;delete_subscription&lt;/span&gt;(subscription) &lt;span class="pl-k"&gt;end&lt;/span&gt;)
          &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;ensure_deleted&lt;/span&gt;(&lt;span class="pl-k"&gt;fn&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;delete_delivery_from_schedule&lt;/span&gt;(delivery) &lt;span class="pl-k"&gt;end&lt;/span&gt;)
          &lt;span class="pl-en"&gt;reject_job&lt;/span&gt;(opts)

          other
      &lt;span class="pl-k"&gt;end&lt;/span&gt;
    &lt;span class="pl-k"&gt;end&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;ensure_deleted&lt;/span&gt;(cb) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-en"&gt;cb&lt;/span&gt;.() &lt;span class="pl-k"&gt;do&lt;/span&gt;
      &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;
      {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:not_found&lt;/span&gt;} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;
    &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Along with the issues highlighted in the code itself, there are few more:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To know at which stage we failed we need to keep an eye on the special returns from the functions we're using here;&lt;/li&gt;
&lt;li&gt;Hard to control that there is a condition to compensate for all possible error cases;&lt;/li&gt;
&lt;li&gt;Impossible to not keep relative code close to each other, because bare expressions in &lt;code&gt;with&lt;/code&gt;do not leak to the &lt;code&gt;else&lt;/code&gt; block;&lt;/li&gt;
&lt;li&gt;Hard to test;&lt;/li&gt;
&lt;li&gt;Hard to improve, eg. it is hard to add retries, async operations or circuit breaker without making it even worse.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For some time you might get away by splitting &lt;code&gt;create_and_subscribe_user/1&lt;/code&gt;, but it only works while the number of transactions is very small.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-sagas" class="anchor" aria-hidden="true" href="#using-sagas"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Sagas&lt;/h3&gt;
&lt;p&gt;Instead, let's see how that pipeline would look with &lt;code&gt;Sage&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Sage&lt;/span&gt;
  &lt;span class="pl-k"&gt;require&lt;/span&gt; &lt;span class="pl-en"&gt;Logger&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@spec&lt;/span&gt; &lt;span class="pl-en"&gt;create_and_subscribe_user&lt;/span&gt;(attrs &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;map&lt;/span&gt;()) &lt;span class="pl-k"&gt;::&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, last_effect &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;any&lt;/span&gt;(), all_effects &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;map&lt;/span&gt;()} &lt;span class="pl-k"&gt;|&lt;/span&gt; {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, reason &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;any&lt;/span&gt;()}
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;create_and_subscribe_user&lt;/span&gt;(attrs) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;new&lt;/span&gt;()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;run&lt;/span&gt;(&lt;span class="pl-c1"&gt;:user&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;create_user&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;run&lt;/span&gt;(&lt;span class="pl-c1"&gt;:plans&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;fetch_subscription_plans&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;subscription_plans_circuit_breaker&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;run&lt;/span&gt;(&lt;span class="pl-c1"&gt;:subscription&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;create_subscription&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;delete_subscription&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;run_async&lt;/span&gt;(&lt;span class="pl-c1"&gt;:delivery&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;schedule_delivery&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;delete_delivery_from_schedule&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;run_async&lt;/span&gt;(&lt;span class="pl-c1"&gt;:receipt&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;send_email_receipt&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;send_excuse_for_email_receipt&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;run&lt;/span&gt;(&lt;span class="pl-c1"&gt;:update_user&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;set_plan_for_a_user&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;finally&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;acknowledge_job&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;transaction&lt;/span&gt;(&lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;, attrs)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Transaction behaviour:&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; @callback transaction(attrs :: map()) :: {:ok, last_effect :: any(), all_effects :: map()} | {:error, reason :: any()}&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Compensation behaviour:&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; @callback compensation(&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;             effect_to_compensate :: any(),&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;             effects_so_far :: map(),&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;             attrs :: any()&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;           ) :: :ok | :abort | {:retry, retry_opts :: Sage.retry_opts()} | {:continue, any()}&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;create_user&lt;/span&gt;(_effects_so_far, %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; user_attrs}) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    %&lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;User&lt;/span&gt;{}
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;User&lt;/span&gt;.&lt;span class="pl-en"&gt;changeset&lt;/span&gt;(user_attrs)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;()
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;fetch_subscription_plans&lt;/span&gt;(_effects_so_far, _attrs) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _plans} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;Billing&lt;/span&gt;.&lt;span class="pl-en"&gt;APIClient&lt;/span&gt;.&lt;span class="pl-en"&gt;list_plans&lt;/span&gt;()
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If we failed to fetch plans, let's continue with cached ones&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;subscription_plans_circuit_breaker&lt;/span&gt;(_effect_to_compensate, _effects_so_far, _attrs) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:continue&lt;/span&gt;, [%{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;free&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;total&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;}, %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;standard&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;total&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;4.99&lt;/span&gt;}]}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;create_subscription&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; user}, %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;subscription&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; subscription}) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, subscription} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;Billing&lt;/span&gt;.&lt;span class="pl-en"&gt;APIClient&lt;/span&gt;.&lt;span class="pl-en"&gt;subscribe_user&lt;/span&gt;(user, subscription[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;plan&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;delete_subscription&lt;/span&gt;(_effect_to_compensate, %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; user}, _attrs) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;Billing&lt;/span&gt;.&lt;span class="pl-en"&gt;APIClient&lt;/span&gt;.&lt;span class="pl-en"&gt;delete_all_subscriptions_for_user&lt;/span&gt;(user)
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; We want to apply forward compensation from :subscription stage for 5 times&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:retry&lt;/span&gt;, &lt;span class="pl-c1"&gt;retry_limit:&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-c1"&gt;base_backoff:&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;, &lt;span class="pl-c1"&gt;max_backoff:&lt;/span&gt; &lt;span class="pl-c1"&gt;30_000&lt;/span&gt;, &lt;span class="pl-c1"&gt;enable_jitter:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; .. other transaction and compensation callbacks&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;acknowledge_job&lt;/span&gt;(&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, attrs) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Logger&lt;/span&gt;.&lt;span class="pl-en"&gt;info&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Successfully created user &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;attrs[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;acknowledge_job&lt;/span&gt;(_error, attrs) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Logger&lt;/span&gt;.&lt;span class="pl-en"&gt;warn&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Failed to create user &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;attrs[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;][&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Along with a readable code, you are getting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reasonable guarantees that all transaction steps are completed or all failed steps are compensated;&lt;/li&gt;
&lt;li&gt;Code which is much simpler and easier to test a code;&lt;/li&gt;
&lt;li&gt;Retries, circuit breaking and asynchronous requests our of the box;&lt;/li&gt;
&lt;li&gt;Declarative way to define your transactions and run them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testing is easier, because instead of one monstrous function you will have many small callbacks which are easy to cover
with unit tests. You only need to test business logic in transactions and that compensations are able to cleanup their
effects. Sage itself has 100% test coverage.&lt;/p&gt;
&lt;p&gt;Even more, it is possible to apply a new kind of architecture in an Elixir project where Phoenix contexts
(or just application domains) are providing helper functions for building sagas to a controller, which then
uses one or more of them to make sure that each request is side-effects free. Simplified example:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;UserController&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;Web&lt;/span&gt;, &lt;span class="pl-c1"&gt;:controller&lt;/span&gt;

  action_fallback &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;FallbackController&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;signup_and_accept_team_invitation&lt;/span&gt;(conn, attrs) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Sage&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;Users&lt;/span&gt;.&lt;span class="pl-en"&gt;Sagas&lt;/span&gt;.&lt;span class="pl-en"&gt;create_user&lt;/span&gt;()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;Teams&lt;/span&gt;.&lt;span class="pl-en"&gt;Sagas&lt;/span&gt;.&lt;span class="pl-en"&gt;accept_invitation&lt;/span&gt;()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;SageExample&lt;/span&gt;.&lt;span class="pl-en"&gt;Billing&lt;/span&gt;.&lt;span class="pl-en"&gt;Sagas&lt;/span&gt;.&lt;span class="pl-en"&gt;prorate_team_size&lt;/span&gt;()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Sage&lt;/span&gt;.&lt;span class="pl-en"&gt;execute&lt;/span&gt;(attrs)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to have more examples, check out this &lt;a href="https://medium.com/nebo-15/introducing-sage-a-sagas-pattern-implementation-in-elixir-3ad499f236f6" rel="nofollow"&gt;blog post on Sage&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-execution-guarantees-and-edge-cases" class="anchor" aria-hidden="true" href="#execution-guarantees-and-edge-cases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Execution Guarantees and Edge Cases&lt;/h2&gt;
&lt;p&gt;While Sage will do its best to compensate failures in a transaction and leave a system in a consistent state, there are some edge cases where it wouldn't be possible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What if my transaction has bugs or other errors?&lt;/p&gt;
&lt;p&gt;Transactions are wrapped in a &lt;code&gt;try..catch&lt;/code&gt; block and would tolerate any exception, exit or rescue. And after executing compensations, an error will be reraised.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if my compensation has bugs or other errors?&lt;/p&gt;
&lt;p&gt;By default, compensations would not try to handle any kinds of errors. But you can write an adapter to handle those. For more information see &lt;a href="https://github.com/Nebo15/sage#for-compensations"&gt;Critical Error Handling&lt;/a&gt; section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if the process that executes Sage or whole node fails?&lt;/p&gt;
&lt;p&gt;Right now Sage doesn't provide a way to tolerate failures of executing processes. (However, there is an &lt;a href="https://github.com/Nebo15/sage/issues/9"&gt;RFC that aims for that&lt;/a&gt;.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if an external API call fails and it's impossible to revert a step?&lt;/p&gt;
&lt;p&gt;In such cases, the process which is handling the pipeline will crash and the exception will be thrown. Make sure that you have a way of reacting to such cases (in some cases it might be acceptable to ignore the error while others might require a manual intervention).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can I be absolutely sure that everything went well?&lt;/p&gt;
&lt;p&gt;Unfortunately, no. As with any other distributed system, messages could be lost, the network could go down, hardware could fail etc. There is no way to programmatically solve all those cases, even retrying compensations won't help in some of such cases.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, it's possible that a reply from an external API is lost even though a request actually succeeded. In such cases, you might want to retry the compensation which might have an unexpected result. Best way to solve that issue is to &lt;a href="https://hexdocs.pm/sage/Sage.html#t:compensation/0" rel="nofollow"&gt;write compensations in an idempotent way&lt;/a&gt; and to always make sure that you have proper monitoring tools in place.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-critical-error-handling" class="anchor" aria-hidden="true" href="#critical-error-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Critical Error Handling&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-for-transactions" class="anchor" aria-hidden="true" href="#for-transactions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;For Transactions&lt;/h3&gt;
&lt;p&gt;Transactions are wrapped in a &lt;code&gt;try..catch&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;Whenever a critical error occurs (exception is raised, error thrown or exit signal is received)
Sage will run all compensations and then reraise the exception with the same stacktrace,
so your log would look like it occurred without using a Sage.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-for-compensations" class="anchor" aria-hidden="true" href="#for-compensations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;For Compensations&lt;/h3&gt;
&lt;p&gt;By default, compensations are not protected from critical errors and would raise an exception.
This is done to keep simplicity and follow "let it fall" pattern of the language,
thinking that these kind of errors should be logged and then manually investigated by a developer.&lt;/p&gt;
&lt;p&gt;But if that's not enough for you, it is possible to register handler via &lt;code&gt;with_compensation_error_handler/2&lt;/code&gt;.
When it's registered, compensations are wrapped in a &lt;code&gt;try..catch&lt;/code&gt; block
and then it's error handler responsibility to take care about further actions. Few solutions you might want to try:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send notification to a Slack channel about need of manual resolution;&lt;/li&gt;
&lt;li&gt;Retry compensation;&lt;/li&gt;
&lt;li&gt;Spawn a new supervised process that would retry compensation and return an error in the Sage.
(Useful when you have connection issues that would be resolved at some point in future.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logging for compensation errors is pretty verbose to drive the attention to the problem from system maintainers.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-finally2-hook" class="anchor" aria-hidden="true" href="#finally2-hook"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;finally/2&lt;/code&gt; hook&lt;/h2&gt;
&lt;p&gt;Sage does its best to make sure the final callback is executed even if there is a program bug in the code.
This guarantee simplifies integration with job processing queues, you can read more about it at &lt;a href="https://github.com/Nebo15/gen_task"&gt;GenTask Readme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If an error is raised within the &lt;code&gt;finally/2&lt;/code&gt; hook, it gets logged and ignored. Follow the simple rule - everything that
is on your critical path should be a Sage transaction.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tracing-and-measuring-sage-execution-steps" class="anchor" aria-hidden="true" href="#tracing-and-measuring-sage-execution-steps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tracing and measuring Sage execution steps&lt;/h2&gt;
&lt;p&gt;Sage allows you to set a tracer module which is called on each step of the execution flow (before and after transactions and/or compensations). It could be used to report metrics on the execution flow.&lt;/p&gt;
&lt;p&gt;If an error is raised within tracing function, it's getting logged and ignored.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-visualizations" class="anchor" aria-hidden="true" href="#visualizations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Visualizations&lt;/h1&gt;
&lt;p&gt;In order to make it easier to understand what flow you should expect, here are a few additional examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Retries&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;[T1] -&amp;gt; [T2] -&amp;gt; [T3 has an error]
                ↓
[C2 retries] &amp;lt;- [C3]
        ↓
        [T2] -&amp;gt; [T3]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Circuit breaker&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;[T1] -&amp;gt; [T2  has an error]
                ↓
        [C2 circuit breaker] -&amp;gt; [T3]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Async transactions&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;[T1] -&amp;gt; [T2 async] -↓
        [T3 async] -&amp;gt; [await for T2 and T3 before non-async operation] -&amp;gt; [T4]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Error in async transaction (notice: both async operations are awaited and then compensated)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;[T1] -&amp;gt; [T2 async with error] -↓
        [T3 async] -&amp;gt; [await for T2 and T3 before non-async operation]
                       ↓
[C1]   &amp;lt;- [C2]   &amp;lt;- [C3]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;The package can be installed by adding &lt;a href="https://hex.pm/packages/sage" rel="nofollow"&gt;&lt;code&gt;sage&lt;/code&gt;&lt;/a&gt; to your list of dependencies in &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:sage&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.4.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Documentation can be found at &lt;a href="https://hexdocs.pm/sage" rel="nofollow"&gt;https://hexdocs.pm/sage&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h1&gt;
&lt;p&gt;See &lt;a href="LICENSE.md"&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h1&gt;
&lt;p&gt;Some implementation ideas were taken from &lt;a href="https://github.com/elixir-ecto/ecto/blob/master/lib/ecto/multi.ex"&gt;&lt;code&gt;Ecto.Multi&lt;/code&gt;&lt;/a&gt; module originally implemented by @michalmuskala and &lt;a href="https://github.com/mrallen1/gisla"&gt;&lt;code&gt;gisla&lt;/code&gt;&lt;/a&gt; by @mrallen1 which implements Sagas pattern for Erlang.&lt;/p&gt;
&lt;p&gt;Sagas idea have origins from &lt;a href="http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf" rel="nofollow"&gt;whitepaper&lt;/a&gt; written in 80's. There are more recent work - &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/compensating-transaction" rel="nofollow"&gt;Compensating Transactions&lt;/a&gt; which is part of Azure Architecture Guidelines.&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-thanks-to" class="anchor" aria-hidden="true" href="#thanks-to"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks to&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Josh Forisha for letting me to use this awesome project name on hex.pm (he had a package with that name);&lt;/li&gt;
&lt;li&gt;@michalmuskala, @alco and @alecnmk for giving feedback and ideas along my way;&lt;/li&gt;
&lt;li&gt;all the Elixir community and Core Team. Guys, you are awesome &lt;g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"&gt;❤️&lt;/g-emoji&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>Nebo15</author><guid isPermaLink="false">https://github.com/Nebo15/sage</guid><pubDate>Thu, 30 Jan 2020 00:09:00 GMT</pubDate></item></channel></rss>