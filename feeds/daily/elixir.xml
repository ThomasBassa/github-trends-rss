<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Elixir, Today</title><link>https://github.com/trending/elixir?since=daily</link><description>The top repositories on GitHub for elixir, measured daily</description><pubDate>Sat, 07 Dec 2019 01:04:24 GMT</pubDate><lastBuildDate>Sat, 07 Dec 2019 01:04:24 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>elixir-lang/elixir #1 in Elixir, Today</title><link>https://github.com/elixir-lang/elixir</link><description>&lt;p&gt;&lt;i&gt;Elixir is a dynamic, functional language designed for building scalable and maintainable applications&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/elixir-lang/elixir-lang.github.com/raw/master/images/logo/logo.png"&gt;&lt;img src="https://github.com/elixir-lang/elixir-lang.github.com/raw/master/images/logo/logo.png" alt="Elixir" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://cirrus-ci.com/github/elixir-lang/elixir" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c4d820a66eff706de4aa9371456b877a22ee03d7/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f656c697869722d6c616e672f656c697869722e7376673f6272616e63683d6d6173746572" alt="Build status" data-canonical-src="https://api.cirrus-ci.com/github/elixir-lang/elixir.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elixir is a dynamic, functional language designed for building scalable
and maintainable applications.&lt;/p&gt;
&lt;p&gt;For more about Elixir, installation and documentation,
&lt;a href="https://elixir-lang.org/" rel="nofollow"&gt;check Elixir's website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-policies" class="anchor" aria-hidden="true" href="#policies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Policies&lt;/h2&gt;
&lt;p&gt;New releases are announced in the &lt;a href="https://groups.google.com/group/elixir-lang-ann" rel="nofollow"&gt;announcement mailing list&lt;/a&gt;.
You can subscribe by sending an email to &lt;a href="mailto:elixir-lang-ann+subscribe@googlegroups.com"&gt;elixir-lang-ann+subscribe@googlegroups.com&lt;/a&gt; and replying to the confirmation email.&lt;/p&gt;
&lt;p&gt;All security releases &lt;a href="https://groups.google.com/forum/#!searchin/elixir-lang-ann/%5Bsecurity%5D%7Csort:date" rel="nofollow"&gt;will be tagged with &lt;code&gt;[security]&lt;/code&gt;&lt;/a&gt;. For more information, please read our &lt;a href="SECURITY.md"&gt;Security Policy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All interactions in our official communication channels follow our &lt;a href="CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-bug-reports" class="anchor" aria-hidden="true" href="#bug-reports"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bug reports&lt;/h2&gt;
&lt;p&gt;For reporting bugs, &lt;a href="https://github.com/elixir-lang/elixir/issues"&gt;visit our issue tracker&lt;/a&gt; and follow the steps
for reporting a new issue. &lt;strong&gt;Please disclose security vulnerabilities
privately at &lt;a href="mailto:elixir-security@googlegroups.com"&gt;elixir-security@googlegroups.com&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-compiling-from-source" class="anchor" aria-hidden="true" href="#compiling-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compiling from source&lt;/h2&gt;
&lt;p&gt;For the many different ways to install Elixir,
&lt;a href="https://elixir-lang.org/install.html" rel="nofollow"&gt;see our installation instructions on the website&lt;/a&gt;.
To compile from source, you can follow the steps below.&lt;/p&gt;
&lt;p&gt;First, &lt;a href="https://elixir-lang.org/install.html#installing-erlang" rel="nofollow"&gt;install Erlang&lt;/a&gt;. Then clone this repository to your machine, compile and test it:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/elixir-lang/elixir.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; elixir
make clean &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: if you are running on Windows,
&lt;a href="https://github.com/elixir-lang/elixir/wiki/Windows"&gt;this article includes important notes for compiling Elixir from source
on Windows&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If Elixir fails to build (specifically when pulling in a new version via
&lt;code&gt;git&lt;/code&gt;), be sure to remove any previous build artifacts by running
&lt;code&gt;make clean&lt;/code&gt;, then &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If tests pass, you can use Interactive Elixir by running &lt;code&gt;bin/iex&lt;/code&gt; in your terminal.&lt;/p&gt;
&lt;p&gt;However, if tests fail, it is likely that you have an outdated Erlang/OTP version
(Elixir requires Erlang/OTP 21.0 or later). You can check your Erlang/OTP version
by calling &lt;code&gt;erl&lt;/code&gt; in the command line. You will see some information as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Erlang/OTP 21 [erts-9.0] [smp:2:2] [async-threads:10] [kernel-poll:false]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have properly set up your dependencies and tests still fail,
you may want to open up a bug report, as explained next.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-proposing-new-features" class="anchor" aria-hidden="true" href="#proposing-new-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Proposing new features&lt;/h2&gt;
&lt;p&gt;For proposing new features, please start a discussion in the
&lt;a href="https://groups.google.com/group/elixir-lang-core" rel="nofollow"&gt;Elixir Core mailing list&lt;/a&gt;. Keep in mind that it is your responsibility
to argue and explain why a feature is useful and how it will impact the
codebase and the community.&lt;/p&gt;
&lt;p&gt;Once a proposal is accepted, it will be added to &lt;a href="https://github.com/elixir-lang/elixir/issues"&gt;the issue tracker&lt;/a&gt;.
The issue tracker focuses on &lt;em&gt;actionable items&lt;/em&gt; and it holds a list of
upcoming enhancements and pending bugs. All entries in the tracker are
tagged for clarity and to ease collaboration.&lt;/p&gt;
&lt;p&gt;Features and bug fixes that have already been merged and will be included
in the next release are marked as "closed" in the issue tracker and are
added to the &lt;a href="CHANGELOG.md"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We welcome everyone to contribute to Elixir. To do so, there are a few
things you need to know about the code. First, Elixir code is divided
in applications inside the &lt;code&gt;lib&lt;/code&gt; folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;elixir&lt;/code&gt; - Elixir's kernel and standard library&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eex&lt;/code&gt; - EEx is the template engine that allows you to embed Elixir&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ex_unit&lt;/code&gt; - ExUnit is a simple test framework that ships with Elixir&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;iex&lt;/code&gt; - IEx stands for Interactive Elixir: Elixir's interactive shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logger&lt;/code&gt; - Logger is the built-in logger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mix&lt;/code&gt; - Mix is Elixir's build tool&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can run all tests in the root directory with &lt;code&gt;make test&lt;/code&gt; and you can
also run tests for a specific framework &lt;code&gt;make test_#{APPLICATION}&lt;/code&gt;, for example,
&lt;code&gt;make test_ex_unit&lt;/code&gt;. If you just changed something in the Elixir's standard
library, you can run only that portion through &lt;code&gt;make test_stdlib&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are changing just one file, you can choose to compile and run tests only
for that particular file for fast development cycles. For example, if you
are changing the String module, you can compile it and run its tests as:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;bin/elixirc lib/elixir/lib/string.ex -o lib/elixir/ebin
bin/elixir lib/elixir/test/elixir/string_test.exs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To recompile (including Erlang modules):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After your changes are done, please remember to run &lt;code&gt;make format&lt;/code&gt; to guarantee
all files are properly formatted and then run the full suite with
&lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If your contribution fails during the bootstrapping of the language,
you can rebuild the language from scratch with:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make clean_elixir compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, if you can't get Elixir to compile or the tests to pass after
updating an existing checkout, run &lt;code&gt;make clean compile&lt;/code&gt;. You can check
&lt;a href="https://cirrus-ci.com/github/elixir-lang/elixir" rel="nofollow"&gt;the official build status on Cirrus CI&lt;/a&gt;.
More tasks can be found by reading the &lt;a href="Makefile"&gt;Makefile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With tests running and passing, you are ready to contribute to Elixir and
&lt;a href="https://help.github.com/articles/using-pull-requests/"&gt;send a pull request&lt;/a&gt;.
We have saved some excellent pull requests we have received in the past in
case you are looking for some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/992"&gt;Implement Enum.member? - Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/1058"&gt;Add String.valid? - Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/1059"&gt;Implement capture_io for ExUnit - Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-reviewing-changes" class="anchor" aria-hidden="true" href="#reviewing-changes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reviewing changes&lt;/h3&gt;
&lt;p&gt;Once a pull request is sent, the Elixir team will review your changes.
We outline our process below to clarify the roles of everyone involved.&lt;/p&gt;
&lt;p&gt;All pull requests must be approved by two committers before being merged into
the repository. If any changes are necessary, the team will leave appropriate
comments requesting changes to the code. Unfortunately we cannot guarantee a
pull request will be merged, even when modifications are requested, as the Elixir
team will re-evaluate the contribution as it changes.&lt;/p&gt;
&lt;p&gt;Committers may also push style changes directly to your branch. If you would
rather manage all changes yourself, you can disable "Allow edits from maintainers"
feature when submitting your pull request.&lt;/p&gt;
&lt;p&gt;The Elixir team may optionally assign someone to review a pull request.
If someone is assigned, they must explicitly approve the code before
another team member can merge it.&lt;/p&gt;
&lt;p&gt;When the review finishes, your pull request will be squashed and merged
into the repository. If you have carefully organized your commits and
believe they should be merged without squashing, please mention it in
a comment.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building-documentation" class="anchor" aria-hidden="true" href="#building-documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building documentation&lt;/h2&gt;
&lt;p&gt;Building the documentation requires &lt;a href="https://github.com/elixir-lang/ex_doc"&gt;ExDoc&lt;/a&gt;
to be installed and built alongside Elixir:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; After cloning and compiling Elixir, in its parent directory:&lt;/span&gt;
git clone git://github.com/elixir-lang/ex_doc.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; ex_doc &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ../elixir/bin/mix &lt;span class="pl-k"&gt;do&lt;/span&gt; deps.get, compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now go back to Elixir's root directory and run:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make docs                  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to generate HTML pages&lt;/span&gt;
make docs DOCS_FORMAT=epub &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to generate EPUB documents&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will produce documentation sets for &lt;code&gt;elixir&lt;/code&gt;, &lt;code&gt;eex&lt;/code&gt;, &lt;code&gt;ex_unit&lt;/code&gt;, &lt;code&gt;iex&lt;/code&gt;, &lt;code&gt;logger&lt;/code&gt;,
and &lt;code&gt;mix&lt;/code&gt; under the &lt;code&gt;doc&lt;/code&gt; directory. If you are planning to contribute documentation,
&lt;a href="https://hexdocs.pm/elixir/writing-documentation.html" rel="nofollow"&gt;please check our best practices for writing documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-development-links" class="anchor" aria-hidden="true" href="#development-links"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Development links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://elixir-lang.org/docs.html" rel="nofollow"&gt;Elixir Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/group/elixir-lang-core" rel="nofollow"&gt;Elixir Core Mailing list (development)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/group/elixir-lang-ann" rel="nofollow"&gt;Announcement mailing list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/issues"&gt;Issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="CHANGELOG.md"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="SECURITY.md"&gt;Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://webchat.freenode.net/?channels=#elixir-lang" rel="nofollow"&gt;#elixir-lang&lt;/a&gt;&lt;/strong&gt; on &lt;a href="https://www.freenode.net" rel="nofollow"&gt;Freenode&lt;/a&gt; IRC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;"Elixir" and the Elixir logo are copyright (c) 2012 Plataformatec.&lt;/p&gt;
&lt;p&gt;Elixir source code is released under Apache License 2.0.&lt;/p&gt;
&lt;p&gt;Check &lt;a href="NOTICE"&gt;NOTICE&lt;/a&gt; and &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt; files for more information.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>elixir-lang</author><guid isPermaLink="false">https://github.com/elixir-lang/elixir</guid><pubDate>Sat, 07 Dec 2019 00:01:00 GMT</pubDate></item><item><title>phoenixframework/phoenix #2 in Elixir, Today</title><link>https://github.com/phoenixframework/phoenix</link><description>&lt;p&gt;&lt;i&gt;Productive. Reliable. Fast.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/phoenixframework/phoenix/master/priv/static/phoenix.png"&gt;&lt;img src="https://raw.githubusercontent.com/phoenixframework/phoenix/master/priv/static/phoenix.png" alt="phoenix logo" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;&lt;a id="user-content-productive-reliable-fast" class="anchor" aria-hidden="true" href="#productive-reliable-fast"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Productive. Reliable. Fast.&lt;/h3&gt;
&lt;p&gt;A productive web framework that does not compromise speed or maintainability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/phoenixframework/phoenix" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/efba09df2373de30f21339e01b936694babbc4c8/68747470733a2f2f6170692e7472617669732d63692e6f72672f70686f656e69786672616d65776f726b2f70686f656e69782e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://api.travis-ci.org/phoenixframework/phoenix.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://inch-ci.org/github/phoenixframework/phoenix" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5f899c6b69b569048847f62eb937eae23f11bc17/687474703a2f2f696e63682d63692e6f72672f6769746875622f70686f656e69786672616d65776f726b2f70686f656e69782e737667" alt="Inline docs" data-canonical-src="http://inch-ci.org/github/phoenixframework/phoenix.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting started&lt;/h2&gt;
&lt;p&gt;See the official site at &lt;a href="https://www.phoenixframework.org/" rel="nofollow"&gt;https://www.phoenixframework.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install the latest version of Phoenix by following the instructions at &lt;a href="https://hexdocs.pm/phoenix/installation.html#phoenix" rel="nofollow"&gt;https://hexdocs.pm/phoenix/installation.html#phoenix&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;API documentation is available at &lt;a href="https://hexdocs.pm/phoenix" rel="nofollow"&gt;https://hexdocs.pm/phoenix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Phoenix.js documentation is available at &lt;a href="https://hexdocs.pm/phoenix/js" rel="nofollow"&gt;https://hexdocs.pm/phoenix/js&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We appreciate any contribution to Phoenix. Check our &lt;a href="CODE_OF_CONDUCT.md"&gt;CODE_OF_CONDUCT.md&lt;/a&gt; and &lt;a href="CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; guides for more information. We usually keep a list of features and bugs &lt;a href="https://github.com/phoenixframework/phoenix/issues"&gt;in the issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-generating-a-phoenix-project-from-unreleased-versions" class="anchor" aria-hidden="true" href="#generating-a-phoenix-project-from-unreleased-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generating a Phoenix project from unreleased versions&lt;/h3&gt;
&lt;p&gt;You can create a new project using the latest Phoenix source installer (the &lt;code&gt;phx.new&lt;/code&gt; Mix task) with the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Remove any previously installed &lt;code&gt;phx_new&lt;/code&gt; archives so that Mix will pick up the local source code. This can be done with &lt;code&gt;mix archive.uninstall phx_new&lt;/code&gt; or by simply deleting the file, which is usually in &lt;code&gt;~/.mix/archives/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy this repo via &lt;code&gt;git clone https://github.com/phoenixframework/phoenix&lt;/code&gt; or by downloading it&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;phx.new&lt;/code&gt; mix task from within the &lt;code&gt;installer&lt;/code&gt; directory, for example:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; installer
$ mix phx.new dev_app --dev&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;--dev&lt;/code&gt; flag will configure your new project's &lt;code&gt;:phoenix&lt;/code&gt; dep as a relative path dependency, pointing to your local Phoenix checkout:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:phoenix&lt;/span&gt;, &lt;span class="pl-c1"&gt;path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;../..&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;override:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;},&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create projects outside of the &lt;code&gt;installer/&lt;/code&gt; directory, add the latest archive to your machine by following the instructions in &lt;a href="https://github.com/phoenixframework/phoenix/blob/master/installer/README.md"&gt;installer/README.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To build the documentation from source:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; assets
$ npm install
$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; ..
$ MIX_ENV=docs mix docs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build Phoenix from source:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ mix deps.get
$ mix compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build the Phoenix installer from source:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ mix deps.get
$ mix compile
$ mix archive.build&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-building-phoenixjs" class="anchor" aria-hidden="true" href="#building-phoenixjs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building phoenix.js&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; assets
$ npm install
$ npm run watch&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-important-links" class="anchor" aria-hidden="true" href="#important-links"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Important links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://webchat.freenode.net/?channels=#elixir-lang" rel="nofollow"&gt;#elixir-lang&lt;/a&gt; on &lt;a href="http://www.freenode.net/" rel="nofollow"&gt;Freenode&lt;/a&gt; IRC&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elixir-slackin.herokuapp.com/" rel="nofollow"&gt;elixir-lang slack channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/phoenixframework/phoenix/issues"&gt;Issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elixirforum.com/c/phoenix-forum" rel="nofollow"&gt;Phoenix Forum (questions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://groups.google.com/group/phoenix-core" rel="nofollow"&gt;phoenix-core Mailing list (development)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visit Phoenix's sponsor, DockYard, for expert &lt;a href="https://dockyard.com/phoenix-consulting" rel="nofollow"&gt;phoenix consulting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Privately disclose security vulnerabilities to &lt;a href="mailto:phoenix-security@googlegroups.com"&gt;phoenix-security@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-copyright-and-license" class="anchor" aria-hidden="true" href="#copyright-and-license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Copyright and License&lt;/h2&gt;
&lt;p&gt;Copyright (c) 2014, Chris McCord.&lt;/p&gt;
&lt;p&gt;Phoenix source code is licensed under the &lt;a href="LICENSE.md"&gt;MIT License&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>phoenixframework</author><guid isPermaLink="false">https://github.com/phoenixframework/phoenix</guid><pubDate>Sat, 07 Dec 2019 00:02:00 GMT</pubDate></item><item><title>phoenixframework/phoenix_live_view #3 in Elixir, Today</title><link>https://github.com/phoenixframework/phoenix_live_view</link><description>&lt;p&gt;&lt;i&gt;Rich, real-time user experiences with server-rendered HTML&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-phoenix-liveview" class="anchor" aria-hidden="true" href="#phoenix-liveview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Phoenix LiveView&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/phoenixframework/phoenix_live_view/workflows/CI/badge.svg"&gt;&lt;img src="https://github.com/phoenixframework/phoenix_live_view/workflows/CI/badge.svg" alt="Actions Status" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Phoenix LiveView enables rich, real-time user experiences with server-rendered HTML. For more information, &lt;a href="https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript" rel="nofollow"&gt;see the initial announcement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Currently LiveView is under active development and we are focused on getting a stable and solid initial version out. For this reason, we will be accepting only bug reports in the issues tracker for now. We will open the issues tracker for features after the current milestone is ironed out.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-learning" class="anchor" aria-hidden="true" href="#learning"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Learning&lt;/h2&gt;
&lt;p&gt;As official guides are being developed, see our existing
comprehensive docs and examples to get up to speed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/phoenix_live_view" rel="nofollow"&gt;Phoenix.LiveView docs for Elixir and JavaScript usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/phoenixframework/phoenix_live_view/blob/master/lib/phoenix_live_view/test/live_view_test.ex"&gt;Phoenix.LiveViewTest for testing docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chrismccord/phoenix_live_view_example"&gt;LiveView example repo&lt;/a&gt; with a handful of examples from Weather widgets, autocomplete search, and games like Snake or Pacman&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;There are currently two methods for installing LiveView. For projects that
require more stability, it is recommended that you install using the
&lt;a href="https://hexdocs.pm/phoenix_live_view/installation.html" rel="nofollow"&gt;installation guide on HexDocs&lt;/a&gt;.
If you want to use the latest features, you should follow the instructions
given in the markdown file &lt;a href="guides/introduction/installation.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-browser-support" class="anchor" aria-hidden="true" href="#browser-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Browser Support&lt;/h2&gt;
&lt;p&gt;All current Chrome, Safari, Firefox, and MS Edge are supported.
IE11 support is available with the following polyfills:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;npm install --save --prefix assets mdn-polyfills url-search-params-polyfill formdata-polyfill child-replace-with-polyfill classlist-polyfill&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; assets/js/app.js&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/CustomEvent&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/String.prototype.startsWith&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Array.from&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/NodeList.prototype.forEach&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Element.prototype.closest&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Element.prototype.matches&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;child-replace-with-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url-search-params-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;formdata-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;classlist-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; {&lt;span class="pl-smi"&gt;Socket&lt;/span&gt;} &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;phoenix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;LiveSocket&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;phoenix_live_view&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;...&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>phoenixframework</author><guid isPermaLink="false">https://github.com/phoenixframework/phoenix_live_view</guid><pubDate>Sat, 07 Dec 2019 00:03:00 GMT</pubDate></item><item><title>CityBaseInc/states_language #4 in Elixir, Today</title><link>https://github.com/CityBaseInc/states_language</link><description>&lt;p&gt;&lt;i&gt;Declaratively design state machines that compile to Elixir based :gen_statem processes with the StatesLanguage JSON specification&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-stateslanguage" class="anchor" aria-hidden="true" href="#stateslanguage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;StatesLanguage&lt;/h1&gt;
&lt;p&gt;Declaratively design state machines that compile to Elixir based &lt;code&gt;:gen_statem&lt;/code&gt; processes with the &lt;a href="https://states-language.net/spec.html" rel="nofollow"&gt;States Language&lt;/a&gt; JSON specification.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;States Language is the JSON specification behind &lt;a href="https://aws.amazon.com/step-functions/" rel="nofollow"&gt;AWS Step Functions&lt;/a&gt;, a powerful way to coordinate many disparate services into a cohesive "serverless" system. This library uses the same JSON specification and compiles to Elixir based &lt;a href="http://erlang.org/doc/design_principles/statem.html" rel="nofollow"&gt;gen_statem&lt;/a&gt; processes.&lt;/p&gt;
&lt;p&gt;The initial idea for the Elixir implementation came about while working on an IVR system and we wanted a way to describe "call flows" in a declarative manner. Ideally building a system on top to allow for solution engineers to visually build call flows for a client, without writing any code. After researching the space a bit, we landed on the &lt;a href="https://states-language.net/spec.html" rel="nofollow"&gt;States Language&lt;/a&gt; spec and decided it was a great fit for describing state machines. With the power of Elixir macros in-hand, this library was born.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-adding-stateslanguage-to-your-project" class="anchor" aria-hidden="true" href="#adding-stateslanguage-to-your-project"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding StatesLanguage to your project&lt;/h3&gt;
&lt;p&gt;Add &lt;code&gt;StatesLanguage&lt;/code&gt; as a dependency to your mix.exs file.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:states_language&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.2.3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;For those unfamiliar with state machines, a vending machine is an often used example, so we're going to stick with that for our walk-through of how to use this library. For a more detailed description of state machines see the &lt;a href="https://en.wikipedia.org/wiki/Finite-state_machine" rel="nofollow"&gt;wikipedia article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the sake of brevity, we're alo going to assume that the vending machine has already accepted the money and is now waiting for someone to hit the correct buttons in the correct order to dispense the nosh.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-nosh" class="anchor" aria-hidden="true" href="#nosh"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nosh&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;A snack or light meal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's start with a diagram of our system.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./assets/state_machine.mm.png"&gt;&lt;img src="./assets/state_machine.mm.png" alt="State Diagram" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's only a few states to deal with here, so let's get started.&lt;/p&gt;
&lt;p&gt;Let's start by creating the States Language JSON description, name it &lt;code&gt;vending_machine.json&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-json"&gt;&lt;pre&gt;{
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Comment&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Dispense with the nosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;StartAt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;States&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Resource&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;StartKeyPad&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TransitionEvent&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%{event: :input_received}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Resource&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;TransitionEvent&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:success&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;InputPath&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$.:keypad&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Parameters&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keyed_input.$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$.:input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      },
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Catch&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: [
        {
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ErrorEquals&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:invalid_lookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;InvalidLookupError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        },
        {
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ErrorEquals&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:network_error&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NetworkError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        }
      ]
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NetworkError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Resource&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SetError:Network Error. Please try again&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;InvalidLookupError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Resource&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SetError:That was not a correct nosh code, please try again&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Resource&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DisplayText:error&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
			&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Resource&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;End&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;
    }
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-state-fields" class="anchor" aria-hidden="true" href="#state-fields"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;State Fields&lt;/h2&gt;
&lt;p&gt;We can see each state from our diagram represented, and a few mentions of "TransitionEvent". You can see that those events look eerily like Elixir maps and atoms. The library will evaluate these strings into their Elixir equivalent to do some fun pattern matching. One thing to note is that we can't use ambiguous matching, we have to be explicit. For example, in our &lt;code&gt;AcceptInput&lt;/code&gt; transition event, we couldn't do something like &lt;code&gt;%{event: my_event}&lt;/code&gt;. It has to be an atom or something that can be evaluated at compile time &lt;code&gt;%{event: :clicked}&lt;/code&gt;, string, integer, etc.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-transitionevent" class="anchor" aria-hidden="true" href="#transitionevent"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TransitionEvent&lt;/h3&gt;
&lt;p&gt;You may notice that a few of our states are without the &lt;code&gt;TransitionEvent&lt;/code&gt; field. The library will provide a default transition event of &lt;code&gt;:transition&lt;/code&gt;. We'll see more about that when we go over the Elixir code that implements our machine. It's worth noting that &lt;code&gt;TransitionEvent&lt;/code&gt; isn't in the &lt;a href="https://states-language.net/spec.html" rel="nofollow"&gt;States Language spec&lt;/a&gt;, but I've found it quite a powerful addition. For example, this allows external processes to send events to the state machine, without us having to write listener/translation code for every possible event. We just say, when you receive this event, transition to the next state.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-resource" class="anchor" aria-hidden="true" href="#resource"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resource&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Resource&lt;/code&gt; field is where we tell the state machine what "function" to call when we enter that state, the "Resource" is also what's responsible for telling the state machine to transition, returning &lt;code&gt;{:next_event, :internal, :transition}&lt;/code&gt; or whatever we've declared our transition event to be, or not, transition events can come from anywhere. Since under the hood we are using &lt;code&gt;:gen_statem&lt;/code&gt; we can return whatever actions are supported by it, timeouts, postpone, hibernate etc. The &lt;a href="http://erlang.org/doc/man/gen_statem.html#type-action" rel="nofollow"&gt;:gen_statem docs&lt;/a&gt; for actions can be very helpful.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-type" class="anchor" aria-hidden="true" href="#type"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; field is very important. This tells us what type of state we are, and each one gets processed a bit different. Currently supported types are &lt;a href="https://states-language.net/spec.html#task-state" rel="nofollow"&gt;Task&lt;/a&gt;, &lt;a href="https://states-language.net/spec.html#map-state" rel="nofollow"&gt;Map&lt;/a&gt;, &lt;a href="https://states-language.net/spec.html#parallel-state" rel="nofollow"&gt;Parallel&lt;/a&gt;, &lt;a href="https://states-language.net/spec.html#choice-state" rel="nofollow"&gt;Choice&lt;/a&gt; and &lt;a href="https://states-language.net/spec.html#wait-state" rel="nofollow"&gt;Wait&lt;/a&gt;. The spec does list a few other types, &lt;a href="https://states-language.net/spec.html#pass-state" rel="nofollow"&gt;Pass&lt;/a&gt;, &lt;a href="https://states-language.net/spec.html#fail-state" rel="nofollow"&gt;Fail&lt;/a&gt; and &lt;a href="https://states-language.net/spec.html#succeed-state" rel="nofollow"&gt;Succeed&lt;/a&gt; types. The "Map" and "Parallel" types differ a bit from the spec, for the Elixir version, we actually set the &lt;code&gt;branch&lt;/code&gt; or &lt;code&gt;iterator&lt;/code&gt; to a module name, rather than putting the embedded logic in the parent state machine. You can check out the JSON for those tests &lt;a href="https://github.com/CityBaseInc/states_language/blob/master/test/support/states_language_test_map.json"&gt;here&lt;/a&gt;. See the guides for an example of using the Map type.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-next" class="anchor" aria-hidden="true" href="#next"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Next&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Next&lt;/code&gt; field is pretty self-explanatory. Upon receiving a &lt;code&gt;TransitionEvent&lt;/code&gt; event or &lt;code&gt;:transition&lt;/code&gt; it transitions the state machine to the next state.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-catch" class="anchor" aria-hidden="true" href="#catch"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Catch&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Catch&lt;/code&gt; field allows us to "catch" errors and move to an error state. The same principles apply to these events as with our transition events, must be able to evaluate at compile time. Notice that &lt;code&gt;ErrorEquals&lt;/code&gt; is an array, so it's possible to list multiple error events and transition to the same state. &lt;code&gt;Catch&lt;/code&gt; itself is also an array, so you can transition to multiple states depending on the type of error. I find this useful for states that may be reaching out to external resources and there are several possible failure modes.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-end" class="anchor" aria-hidden="true" href="#end"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;End&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;End&lt;/code&gt; is another self-explantory field. After processing the &lt;code&gt;Resource&lt;/code&gt; no matter what the result, we &lt;code&gt;:stop&lt;/code&gt; the &lt;code&gt;:gen_statem&lt;/code&gt; process. The &lt;code&gt;handle_termination/3&lt;/code&gt; callback will be called for final cleanup.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-jsonpath" class="anchor" aria-hidden="true" href="#jsonpath"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JSONPath&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;InputPath&lt;/code&gt;, &lt;code&gt;Parameters&lt;/code&gt;, &lt;code&gt;ResourcePath&lt;/code&gt; and &lt;code&gt;OutputPath&lt;/code&gt; all use JSONPath to mutate the incoming and outgoing data.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-inputpath" class="anchor" aria-hidden="true" href="#inputpath"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;InputPath&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;InputPath&lt;/code&gt; is used to select a field from the incoming data, they can be atom keys or string keys, as well as array indexes such as &lt;code&gt;[1]&lt;/code&gt;. For atom keys, you need to prepend the key with &lt;code&gt;:&lt;/code&gt; for strings, just the key name.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-parameters" class="anchor" aria-hidden="true" href="#parameters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Parameters&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Parameters&lt;/code&gt; allow you to pass in default values as well as select data from the &lt;code&gt;InputPath&lt;/code&gt; selection. It's worth noting that if none of the paths are provided they default to &lt;code&gt;$&lt;/code&gt; which essentially just passes the incoming data to the resource untouched.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-resourcepath" class="anchor" aria-hidden="true" href="#resourcepath"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ResourcePath&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ResourcePath&lt;/code&gt; allows you to select keys or array indexes from the result to pass to the next state.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-outputpath" class="anchor" aria-hidden="true" href="#outputpath"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OutputPath&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;OutputPath&lt;/code&gt; will create new nested keys in the result to pass to the next state.&lt;/p&gt;
&lt;p&gt;In practice we don't generally use the path support often and instead just pass a struct through to each state, building up our data (state) as we move through each state, this is similar to how Plug uses the connection struct. The path support is definitely helpful when talking to external services that you don't control, and the output of one resource needs to be mutated into a different structure for the next resource.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-state-machine-module" class="anchor" aria-hidden="true" href="#state-machine-module"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;State Machine Module&lt;/h2&gt;
&lt;p&gt;Now let's create our module implementation, name it &lt;code&gt;vending_machine.ex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you are following along by creating your own mix project, you'll need to update the &lt;code&gt;@external_resource&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; variables on lines 2 and 3, to point to the JSON file you created above.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;VendingMachine&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@external_resource&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test/support/vending_machine.json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;, &lt;span class="pl-c1"&gt;data:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test/support/vending_machine.json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;Data&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;defstruct&lt;/span&gt; &lt;span class="pl-c1"&gt;keypad:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;input:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, &lt;span class="pl-c1"&gt;lookup:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;result:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;}, &lt;span class="pl-c1"&gt;error:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;test:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;handle_resource&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;StartKeyPad&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, _params, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{} &lt;span class="pl-k"&gt;=&lt;/span&gt; sl) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    me &lt;span class="pl-k"&gt;=&lt;/span&gt; self()
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Let's pretend someone is pushing keys, see the `handle_info` callback below for how these are handled.&lt;/span&gt;
    &lt;span class="pl-en"&gt;Task&lt;/span&gt;.start(&lt;span class="pl-k"&gt;fn&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
      send(me, {&lt;span class="pl-c1"&gt;:keypress&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})
      send(me, {&lt;span class="pl-c1"&gt;:keypress&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})
      send(me, {&lt;span class="pl-c1"&gt;:keypress&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})
      send(me, {&lt;span class="pl-c1"&gt;:keypress&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})
    &lt;span class="pl-k"&gt;end&lt;/span&gt;)

    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, sl, []}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;handle_resource&lt;/span&gt;(
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keyed_input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; code},
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{&lt;span class="pl-c1"&gt;data:&lt;/span&gt; %&lt;span class="pl-en"&gt;Data&lt;/span&gt;{} &lt;span class="pl-k"&gt;=&lt;/span&gt; data} &lt;span class="pl-k"&gt;=&lt;/span&gt; sl
      ) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    debug(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Looking up code &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;code&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

    {data, actions} &lt;span class="pl-k"&gt;=&lt;/span&gt;
      &lt;span class="pl-k"&gt;case&lt;/span&gt; lookup(code) &lt;span class="pl-k"&gt;do&lt;/span&gt;
        {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, result} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
          {%&lt;span class="pl-en"&gt;Data&lt;/span&gt;{data &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;lookup:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;result:&lt;/span&gt; result}}, [{&lt;span class="pl-c1"&gt;:next_event&lt;/span&gt;, &lt;span class="pl-c1"&gt;:internal&lt;/span&gt;, &lt;span class="pl-c1"&gt;:success&lt;/span&gt;}]}

        {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:network&lt;/span&gt;} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
          {data, [{&lt;span class="pl-c1"&gt;:next_event&lt;/span&gt;, &lt;span class="pl-c1"&gt;:internal&lt;/span&gt;, &lt;span class="pl-c1"&gt;:network_error&lt;/span&gt;}]}

        {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:no_result&lt;/span&gt;} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
          {data, [{&lt;span class="pl-c1"&gt;:next_event&lt;/span&gt;, &lt;span class="pl-c1"&gt;:internal&lt;/span&gt;, &lt;span class="pl-c1"&gt;:lookup_error&lt;/span&gt;}]}
      &lt;span class="pl-k"&gt;end&lt;/span&gt;

    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{sl &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;data:&lt;/span&gt; data}, actions}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;handle_resource&lt;/span&gt;(
        &lt;span class="pl-k"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SetError:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, error&lt;span class="pl-k"&gt;::&lt;/span&gt;binary&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
        _params,
        _any_state,
        %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{&lt;span class="pl-c1"&gt;data:&lt;/span&gt; %&lt;span class="pl-en"&gt;Data&lt;/span&gt;{} &lt;span class="pl-k"&gt;=&lt;/span&gt; data} &lt;span class="pl-k"&gt;=&lt;/span&gt; sl
      ) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{sl &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;data:&lt;/span&gt; %&lt;span class="pl-en"&gt;Data&lt;/span&gt;{data &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;error:&lt;/span&gt; error}},
     [{&lt;span class="pl-c1"&gt;:next_event&lt;/span&gt;, &lt;span class="pl-c1"&gt;:internal&lt;/span&gt;, &lt;span class="pl-c1"&gt;:transition&lt;/span&gt;}]}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;handle_resource&lt;/span&gt;(
        &lt;span class="pl-k"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DisplayText:&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, key&lt;span class="pl-k"&gt;::&lt;/span&gt;binary&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
        _params,
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{&lt;span class="pl-c1"&gt;data:&lt;/span&gt; %&lt;span class="pl-en"&gt;Data&lt;/span&gt;{} &lt;span class="pl-k"&gt;=&lt;/span&gt; data} &lt;span class="pl-k"&gt;=&lt;/span&gt; sl
      ) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.to_existing_atom(key)
    text &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Map&lt;/span&gt;.get(data, key)
    &lt;span class="pl-en"&gt;Logger&lt;/span&gt;.info(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Displaying Text: &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;text&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, sl, [{&lt;span class="pl-c1"&gt;:next_event&lt;/span&gt;, &lt;span class="pl-c1"&gt;:internal&lt;/span&gt;, &lt;span class="pl-c1"&gt;:transition&lt;/span&gt;}]}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;handle_resource&lt;/span&gt;(
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        _params,
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{&lt;span class="pl-c1"&gt;data:&lt;/span&gt; %&lt;span class="pl-en"&gt;Data&lt;/span&gt;{} &lt;span class="pl-k"&gt;=&lt;/span&gt; data} &lt;span class="pl-k"&gt;=&lt;/span&gt; sl
      ) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Logger&lt;/span&gt;.info(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Dispensing one &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;inspect(data.lookup.result.candy)&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, sl, []}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;handle_info&lt;/span&gt;({&lt;span class="pl-c1"&gt;:keypress&lt;/span&gt;, digit}, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{&lt;span class="pl-c1"&gt;data:&lt;/span&gt; %&lt;span class="pl-en"&gt;Data&lt;/span&gt;{} &lt;span class="pl-k"&gt;=&lt;/span&gt; data} &lt;span class="pl-k"&gt;=&lt;/span&gt; sl) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    input &lt;span class="pl-k"&gt;=&lt;/span&gt; data.keypad.input
    input &lt;span class="pl-k"&gt;=&lt;/span&gt; input &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; digit

    actions &lt;span class="pl-k"&gt;=&lt;/span&gt;
      &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.length(input) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
        [{&lt;span class="pl-c1"&gt;:next_event&lt;/span&gt;, &lt;span class="pl-c1"&gt;:internal&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:input_received&lt;/span&gt;}}]
      &lt;span class="pl-k"&gt;else&lt;/span&gt;
        []
      &lt;span class="pl-k"&gt;end&lt;/span&gt;

    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{sl &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;data:&lt;/span&gt; %&lt;span class="pl-en"&gt;Data&lt;/span&gt;{data &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;keypad:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;input:&lt;/span&gt; input}}}, actions}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;handle_termination&lt;/span&gt;(_, _, %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;{&lt;span class="pl-c1"&gt;data:&lt;/span&gt; %&lt;span class="pl-en"&gt;Data&lt;/span&gt;{} &lt;span class="pl-k"&gt;=&lt;/span&gt; data}) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    send(data.test, &lt;span class="pl-c1"&gt;:finished&lt;/span&gt;)
    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;lookup&lt;/span&gt;(&lt;span class="pl-c1"&gt;1_234_556&lt;/span&gt;), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:no_result&lt;/span&gt;}
  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;lookup&lt;/span&gt;(&lt;span class="pl-c1"&gt;11_111_111&lt;/span&gt;), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:network&lt;/span&gt;}

  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;lookup&lt;/span&gt;(_code) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;candy:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Snickers&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you've checked out the StatesLanguage repo, you can run this code by running &lt;code&gt;$ MIX_ENV=test mix test test/states_language_vending_machine_test.exs --force&lt;/code&gt; from your CLI.&lt;/p&gt;
&lt;p&gt;If you are building your own project you can run it like this.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ iex -S mix
iex(1)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; VendingMachine.start_link(%VendingMachine.Data{test: &lt;span class="pl-en"&gt;self&lt;/span&gt;()})
iex(2)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;flush&lt;/span&gt;()
:finished
:ok&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which should result in output that looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ MIX_ENV=test mix test test/states_language_vending_machine_test.exs --force
Compiling 14 files (.ex)
Generated states_language app

14:41:21.827 [debug] Elixir.VendingMachine - Init: Data - %VendingMachine.Data{error: "", keypad: %{input: ""}, lookup: %{result: nil}, test: #PID&amp;lt;0.285.0&amp;gt;} Actions - [{:next_event, :internal, :handle_resource}]

14:41:21.828 [debug] Elixir.VendingMachine - left "AcceptInput" --&amp;gt; "AcceptInput": %StatesLanguage{_parent: nil, _parent_data: nil, _supervisor: nil, _tasks: [], data: %VendingMachine.Data{error: "", keypad: %{input: ""}, lookup: %{result: nil}, test: #PID&amp;lt;0.285.0&amp;gt;}}

14:41:21.833 [debug] Elixir.VendingMachine - Handled info event: {:keypress, "a"} in state AcceptInput with data %StatesLanguage{_parent: nil, _parent_data: nil, _supervisor: nil, _tasks: [], data: %VendingMachine.Data{error: "", keypad: %{input: "a"}, lookup: %{result: nil}, test: #PID&amp;lt;0.285.0&amp;gt;}}

14:41:21.833 [debug] Elixir.VendingMachine - Handled info event: {:keypress, "1"} in state AcceptInput with data %StatesLanguage{_parent: nil, _parent_data: nil, _supervisor: nil, _tasks: [], data: %VendingMachine.Data{error: "", keypad: %{input: "a1"}, lookup: %{result: nil}, test: #PID&amp;lt;0.285.0&amp;gt;}}

14:41:21.833 [debug] Elixir.VendingMachine - Handled info event: {:keypress, "2"} in state AcceptInput with data %StatesLanguage{_parent: nil, _parent_data: nil, _supervisor: nil, _tasks: [], data: %VendingMachine.Data{error: "", keypad: %{input: "a12"}, lookup: %{result: nil}, test: #PID&amp;lt;0.285.0&amp;gt;}}

14:41:21.833 [debug] Elixir.VendingMachine - Handled info event: {:keypress, "3"} in state AcceptInput with data %StatesLanguage{_parent: nil, _parent_data: nil, _supervisor: nil, _tasks: [], data: %VendingMachine.Data{error: "", keypad: %{input: "a123"}, lookup: %{result: nil}, test: #PID&amp;lt;0.285.0&amp;gt;}}

14:41:21.833 [debug] Elixir.VendingMachine - got internal event %{event: :input_received} in state "AcceptInput" transitioning to "DoLookup"

14:41:21.833 [debug] Elixir.VendingMachine - left "AcceptInput" --&amp;gt; "DoLookup": %StatesLanguage{_parent: nil, _parent_data: nil, _supervisor: nil, _tasks: [], data: %VendingMachine.Data{error: "", keypad: %{input: "a123"}, lookup: %{result: nil}, test: #PID&amp;lt;0.285.0&amp;gt;}}

14:41:21.862 [debug] Elixir.VendingMachine - Looking up code a123

14:41:21.862 [debug] Elixir.VendingMachine - got internal event :success in state "DoLookup" transitioning to "DispenseNosh"

14:41:21.863 [debug] Elixir.VendingMachine - left "DoLookup" --&amp;gt; "DispenseNosh": %StatesLanguage{_parent: nil, _parent_data: nil, _supervisor: nil, _tasks: [], data: %VendingMachine.Data{error: "", keypad: %{input: "a123"}, lookup: %{result: %{candy: "Snickers"}}, test: #PID&amp;lt;0.285.0&amp;gt;}}

14:41:21.863 [info]  Dispensing one "Snickers"

14:41:21.863 [debug] Elixir.VendingMachine - Terminating in state DispenseNosh :normal
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-validation" class="anchor" aria-hidden="true" href="#validation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Validation&lt;/h2&gt;
&lt;p&gt;The library also includes JSON Schemas to validate that your state machines are valid States Language JSON data.&lt;/p&gt;
&lt;p&gt;Validation is automatically done at compile time, and will &lt;code&gt;throw({:error, error_map})&lt;/code&gt; if the data does not pass validation.&lt;/p&gt;
&lt;p&gt;The StatesLanguage library uses &lt;a href="https://hexdocs.pm/json_xema/api-reference.html" rel="nofollow"&gt;json_xema&lt;/a&gt; for validation. The schema files are available in &lt;a href="https://github.com/CityBaseInc/states_language/tree/master/priv/schemas"&gt;priv/schemas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's useful to test your state machines in your test phase which is possible by calling &lt;code&gt;StatesLanguage.validate(my_state_machine_map)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The function expects a map, so make sure to deserialize your data first.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-serialization" class="anchor" aria-hidden="true" href="#serialization"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Serialization&lt;/h2&gt;
&lt;p&gt;One of the main benefits of describing your state machines in JSON is the interoperability of the format. This library is obviously all Elixir, but there are many use cases where you may want to share the state machine specification. Something like a visual editor.
&lt;a target="_blank" rel="noopener noreferrer" href="./assets/dag_diagram.png"&gt;&lt;img src="./assets/dag_diagram.png" alt="DAG View" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-mix-tasks" class="anchor" aria-hidden="true" href="#mix-tasks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mix Tasks&lt;/h3&gt;
&lt;p&gt;There are 2 mix tasks included to quickly output serialized graphs for the &lt;a href="https://graphviz.org/" rel="nofollow"&gt;Graphviz&lt;/a&gt; Dot format and the D3 Graph format.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix states_language.dot&lt;/code&gt; and &lt;code&gt;mix states_language.d3&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;To quickly view a graph visually, assuming you have Graphviz installed with the &lt;code&gt;dot&lt;/code&gt; program you can run this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix states_language.dot test/support/vending_machine.json &amp;gt; ~/Desktop/vending_machine.dot
$ dot -Tpng ~/Desktop/vending_machine.dot -o ~/Desktop/vending_machine.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which should result in a .png file that looks like this.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./assets/vending_machine.png"&gt;&lt;img src="./assets/vending_machine.png" alt="Vending Machine Dot Png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-serializer-modules" class="anchor" aria-hidden="true" href="#serializer-modules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Serializer Modules&lt;/h3&gt;
&lt;p&gt;You can also use the serializers in your own applications.&lt;/p&gt;
&lt;p&gt;This example is using the &lt;code&gt;StatesLanguage.Serializer.D3Graph&lt;/code&gt; to serialize the graph structure to something compatible with &lt;a href="https://d3js.org/" rel="nofollow"&gt;D3&lt;/a&gt; and &lt;a href="https://github.com/dagrejs/dagre-d3"&gt;DagreD3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The initial graph for our vending machine example looks like this. This is generated by calling &lt;code&gt;StatesLanguage.Graph.serialize/1&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt; %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Graph&lt;/span&gt;{
  &lt;span class="pl-c1"&gt;comment:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Dispense with the nosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;edges:&lt;/span&gt; [
    %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Edge&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:%{}&lt;/span&gt;, [], [&lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:input_received&lt;/span&gt;]},
      &lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Edge&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:success&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Edge&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:invalid_lookup&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;InvalidLookupError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Edge&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:network_error&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NetworkError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Edge&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:transition&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;InvalidLookupError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Edge&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:transition&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NetworkError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Edge&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:transition&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
  ],
  &lt;span class="pl-c1"&gt;nodes:&lt;/span&gt; %{
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Node&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;branches:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;catch:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;choices:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:%{}&lt;/span&gt;, [], [&lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:input_received&lt;/span&gt;]},
      &lt;span class="pl-c1"&gt;input_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;is_end:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;items_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;iterator:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;next:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;output_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;parameters:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:%{}&lt;/span&gt;, [], []},
      &lt;span class="pl-c1"&gt;resource:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;StartKeyPad&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;resource_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Node&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;branches:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;catch:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;choices:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:transition&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;input_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;is_end:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;items_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;iterator:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;next:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;output_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;parameters:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:%{}&lt;/span&gt;, [], []},
      &lt;span class="pl-c1"&gt;resource:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;resource_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Node&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;branches:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;catch:&lt;/span&gt; [
        %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Catch&lt;/span&gt;{
          &lt;span class="pl-c1"&gt;error_equals:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:invalid_lookup&lt;/span&gt;],
          &lt;span class="pl-c1"&gt;next:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;InvalidLookupError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        },
        %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Catch&lt;/span&gt;{
          &lt;span class="pl-c1"&gt;error_equals:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:network_error&lt;/span&gt;],
          &lt;span class="pl-c1"&gt;next:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NetworkError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        }
      ],
      &lt;span class="pl-c1"&gt;choices:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:success&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;input_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$.:keypad&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;is_end:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;items_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;iterator:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;next:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;output_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;parameters:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:%{}&lt;/span&gt;, [], [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;keyed_input.$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$.:input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]},
      &lt;span class="pl-c1"&gt;resource:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;resource_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;InvalidLookupError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Node&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;branches:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;catch:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;choices:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:transition&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;input_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;is_end:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;items_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;iterator:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;next:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;output_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;parameters:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:%{}&lt;/span&gt;, [], []},
      &lt;span class="pl-c1"&gt;resource:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SetError:That was not a correct nosh code, please try again&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;resource_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NetworkError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Node&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;branches:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;catch:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;choices:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:transition&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;input_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;is_end:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;items_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;iterator:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;next:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;output_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;parameters:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:%{}&lt;/span&gt;, [], []},
      &lt;span class="pl-c1"&gt;resource:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SetError:Network Error. Please try again&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;resource_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    },
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %&lt;span class="pl-en"&gt;StatesLanguage&lt;/span&gt;.&lt;span class="pl-en"&gt;Node&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;branches:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;catch:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;choices:&lt;/span&gt; [],
      &lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;event:&lt;/span&gt; &lt;span class="pl-c1"&gt;:transition&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;input_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;is_end:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;items_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;iterator:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;next:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;output_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;parameters:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:%{}&lt;/span&gt;, [], []},
      &lt;span class="pl-c1"&gt;resource:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DisplayText:error&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;resource_path:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;$&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;seconds_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;timestamp_path:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }
  },
  &lt;span class="pl-c1"&gt;start:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The resulting &lt;a href="https://github.com/CityBaseInc/states_language/blob/master/lib/states_language/serializers/d3_graph.ex"&gt;D3Graph&lt;/a&gt; serialization looks like this&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{
  &lt;span class="pl-c1"&gt;edges:&lt;/span&gt; [
    %{&lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%{event: :input_received}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:success&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:invalid_lookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:network_error&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:transition&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:transition&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;source:&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-c1"&gt;target:&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;:transition&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ],
  &lt;span class="pl-c1"&gt;nodes:&lt;/span&gt; [
    %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;label:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AcceptInput&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;label:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DispenseNosh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;label:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;DoLookup&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;label:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;InvalidLookupError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;label:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;NetworkError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-c1"&gt;label:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Task&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ShowError&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
}&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Good pull requests - patches, improvements, new features - are a fantastic
help. They should remain focused in scope and avoid containing unrelated
commits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: By submitting a patch, you agree that your work will be
licensed under the license used by the project.&lt;/p&gt;
&lt;p&gt;If you have any large pull request in mind (e.g. implementing features,
refactoring code, etc), &lt;strong&gt;please ask first&lt;/strong&gt; otherwise you risk spending
a lot of time working on something that the project's developers might
not want to merge into the project.&lt;/p&gt;
&lt;p&gt;Please adhere to the coding conventions in the project (indentation,
accurate comments, etc.) and don't forget to add your own tests and
documentation. When working with git, we recommend the following process
in order to craft an excellent pull request:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://help.github.com/articles/fork-a-repo/"&gt;Fork&lt;/a&gt; the project, clone your fork,
and configure the remotes:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Clone your fork of the repo into the current directory&lt;/span&gt;
git clone https://github.com/&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;your-username&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;/states_language
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Navigate to the newly cloned directory&lt;/span&gt;
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; states_language
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Assign the original repo to a remote called "upstream"&lt;/span&gt;
git remote add upstream https://github.com/citybaseinc/states_language&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you cloned a while ago, get the latest changes from upstream, and update your fork:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git checkout master
git pull upstream master
git push&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new topic branch (off of &lt;code&gt;master&lt;/code&gt;) to contain your feature, change,
or fix.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Making changes in &lt;code&gt;master&lt;/code&gt; is discouraged. You should always
keep your local &lt;code&gt;master&lt;/code&gt; in sync with upstream &lt;code&gt;master&lt;/code&gt; and make your
changes in topic branches.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git checkout -b &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;topic-branch-name&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit your changes in logical chunks. Keep your commit messages organized,
with a short description in the first line and more detailed information on
the following lines. Feel free to use Git's
&lt;a href="https://help.github.com/articles/about-git-rebase/"&gt;interactive rebase&lt;/a&gt;
feature to tidy up your commits before making them public.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure all the tests are still passing.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mix &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push your topic branch up to your fork:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git push origin &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;topic-branch-name&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://help.github.com/articles/about-pull-requests/"&gt;Open a Pull Request&lt;/a&gt;
with a clear title and description.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>CityBaseInc</author><guid isPermaLink="false">https://github.com/CityBaseInc/states_language</guid><pubDate>Sat, 07 Dec 2019 00:04:00 GMT</pubDate></item><item><title>discordapp/ex_hash_ring #5 in Elixir, Today</title><link>https://github.com/discordapp/ex_hash_ring</link><description>&lt;p&gt;&lt;i&gt;A fast consistent hash ring implementation in Elixir.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-hash-ring" class="anchor" aria-hidden="true" href="#hash-ring"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hash Ring&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/discordapp/ex_hash_ring" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/06832a2835588436953ec94ad9dfc92f7a074cd5/68747470733a2f2f7472617669732d63692e6f72672f646973636f72646170702f65785f686173685f72696e672e7376673f6272616e63683d6d6173746572" alt="Master" data-canonical-src="https://travis-ci.org/discordapp/ex_hash_ring.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hex.pm/packages/ex_hash_ring" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/461385af116a46282d3ce4965a43b61b276fb837/687474703a2f2f696d672e736869656c64732e696f2f686578706d2f762f65785f686173685f72696e672e7376673f7374796c653d666c6174" alt="Hex.pm Version" data-canonical-src="http://img.shields.io/hexpm/v/ex_hash_ring.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A pure Elixir consistent hash ring implemention based on the excellent &lt;a href="https://github.com/chrismoos/hash-ring"&gt;C hash-ring lib&lt;/a&gt;
by &lt;a href="https://github.com/chrismoos"&gt;Chris Moos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The hashring provides fast lookup, but ring creation isn't optimized (though it's not slow). It deliberately does not provide encapsulation
within a &lt;code&gt;GenServer&lt;/code&gt; and leaves that up to the user. At &lt;a href="https://discordapp.com" rel="nofollow"&gt;Discord&lt;/a&gt; we found using a &lt;code&gt;GenServer&lt;/code&gt; for such
frequently accessed data proved to be overwhelming so we rewrote the hash ring in pure Elixir and paired it with
&lt;a href="https://github.com/discordapp/fastglobal"&gt;FastGlobal&lt;/a&gt; to allow the calling process to use it's CPU time to interact with
the hash ring and therefore avoiding overloading a central GenServer.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Add it to &lt;code&gt;mix.exs&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:ex_hash_ring&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 3.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new HashRing.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;ExHashRing&lt;/span&gt;.&lt;span class="pl-en"&gt;HashRing&lt;/span&gt;

ring &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.new
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, ring} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.add_node(ring, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, ring} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.add_node(ring, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Find the node for a key.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.find_node(ring, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.find_node(ring, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, you can also use &lt;code&gt;ExHashRing.HashRing.ETS&lt;/code&gt;, which holds the ring in an ETS table for fast access, if you need
the ring across multiple processes.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, pid} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.&lt;span class="pl-en"&gt;ETS&lt;/span&gt;.start_link(&lt;span class="pl-en"&gt;TheRing&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _nodes} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.&lt;span class="pl-en"&gt;ETS&lt;/span&gt;.add_node(pid, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _nodes} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.&lt;span class="pl-en"&gt;ETS&lt;/span&gt;.add_node(pid, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then find a node for a key, using the ETS name provided:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;a&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.&lt;span class="pl-en"&gt;ETS&lt;/span&gt;.find_node(&lt;span class="pl-en"&gt;TheRing&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;HashRing&lt;/span&gt;.&lt;span class="pl-en"&gt;ETS&lt;/span&gt;.find_node(&lt;span class="pl-en"&gt;TheRing&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;key3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Hash Ring is released under &lt;a href="LICENSE"&gt;the MIT License&lt;/a&gt;.
Check &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt; file for more information.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>discordapp</author><guid isPermaLink="false">https://github.com/discordapp/ex_hash_ring</guid><pubDate>Sat, 07 Dec 2019 00:05:00 GMT</pubDate></item><item><title>mhanberg/advent-of-code-elixir-starter #6 in Elixir, Today</title><link>https://github.com/mhanberg/advent-of-code-elixir-starter</link><description>&lt;p&gt;&lt;i&gt;Template project for Advent of Code in Elixir.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-advent-of-code-elixir-starter" class="anchor" aria-hidden="true" href="#advent-of-code-elixir-starter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advent of Code Elixir Starter&lt;/h1&gt;
&lt;p&gt;A batteries included starter pack for participating in &lt;a href="https://www.adventofcode.com" rel="nofollow"&gt;Advent of Code&lt;/a&gt; using Elixir!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;There are 25 modules, 25 tests, and 50 mix tasks.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fill in the tests with the example solutions.&lt;/li&gt;
&lt;li&gt;Write your implementation.&lt;/li&gt;
&lt;li&gt;Fill in the final problem inputs into the mix task and run &lt;code&gt;mix d01.p1&lt;/code&gt;!
&lt;ul&gt;
&lt;li&gt;Benchmark your solution by passing the &lt;code&gt;-b&lt;/code&gt; flag, &lt;code&gt;mix d01.p1 -b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;AdventOfCode&lt;/span&gt;.&lt;span class="pl-en"&gt;Day01&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;part1&lt;/span&gt;(args) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;part2&lt;/span&gt;(args) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;AdventOfCode&lt;/span&gt;.&lt;span class="pl-en"&gt;Day01Test&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;ExUnit&lt;/span&gt;.&lt;span class="pl-en"&gt;Case&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;AdventOfCode&lt;/span&gt;.&lt;span class="pl-en"&gt;Day01&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@tag&lt;/span&gt; &lt;span class="pl-c1"&gt;:skip&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Make sure to remove to run your test.&lt;/span&gt;
  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;part1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    input &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; 
    result &lt;span class="pl-k"&gt;=&lt;/span&gt; part1(input)

    assert result
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@tag&lt;/span&gt; &lt;span class="pl-c1"&gt;:skip&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Make sure to remove to run your test.&lt;/span&gt;
  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;part2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    input &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt; 
    result &lt;span class="pl-k"&gt;=&lt;/span&gt; part2(input)

    assert result
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Mix&lt;/span&gt;.&lt;span class="pl-e"&gt;Tasks&lt;/span&gt;.&lt;span class="pl-e"&gt;D01&lt;/span&gt;.&lt;span class="pl-en"&gt;P1&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Mix&lt;/span&gt;.&lt;span class="pl-en"&gt;Task&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;AdventOfCode&lt;/span&gt;.&lt;span class="pl-en"&gt;Day01&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@shortdoc&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Day 01 Part 1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;run&lt;/span&gt;(args) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    input &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;

    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.member?(args, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;-b&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;),
      &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-en"&gt;Benchee&lt;/span&gt;.run(%{&lt;span class="pl-c1"&gt;part_1:&lt;/span&gt; &lt;span class="pl-k"&gt;fn&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; input &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; part1() &lt;span class="pl-k"&gt;end&lt;/span&gt;}),
      &lt;span class="pl-c1"&gt;else:&lt;/span&gt;
        input
        &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; part1()
        &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;IO&lt;/span&gt;.inspect(&lt;span class="pl-c1"&gt;label:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Part 1 Results&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;   &lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; clone&lt;/span&gt;
$ git clone git@github.com:mhanberg/advent-of-code-elixir-starter.git advent-of-code
$ &lt;span class="pl-c1"&gt;cd&lt;/span&gt; advent-of-code

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Reinitialize your git repo&lt;/span&gt;
$ rm -rf .git
$ git init&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>mhanberg</author><guid isPermaLink="false">https://github.com/mhanberg/advent-of-code-elixir-starter</guid><pubDate>Sat, 07 Dec 2019 00:06:00 GMT</pubDate></item><item><title>gothinkster/elixir-phoenix-realworld-example-app #7 in Elixir, Today</title><link>https://github.com/gothinkster/elixir-phoenix-realworld-example-app</link><description>&lt;p&gt;&lt;i&gt;Exemplary real world application built with Elixir + Phoenix&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="logo.png"&gt;&lt;img src="logo.png" alt="RealWorld Example App" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Elixir (Phoenix) codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the &lt;a href="https://github.com/gothinkster/realworld-example-apps"&gt;RealWorld&lt;/a&gt; spec and API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://circleci.com/gh/gothinkster/elixir-phoenix-realworld-example-app" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eee7bf50d8aca64fd60967d9cd57028790f7559e/68747470733a2f2f636972636c6563692e636f6d2f67682f676f7468696e6b737465722f656c697869722d70686f656e69782d7265616c776f726c642d6578616d706c652d6170702e7376673f7374796c653d737667" alt="CircleCI" data-canonical-src="https://circleci.com/gh/gothinkster/elixir-phoenix-realworld-example-app.svg?style=svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/gothinkster/elixir-phoenix-realworld-example-app" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d8e39b1d6b588ab3c27e2b0f948572ea0f77cde5/68747470733a2f2f636f6465636f762e696f2f67682f676f7468696e6b737465722f656c697869722d70686f656e69782d7265616c776f726c642d6578616d706c652d6170702f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/gothinkster/elixir-phoenix-realworld-example-app/branch/master/graph/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This codebase was created to demonstrate a fully fledged backend application built with &lt;strong&gt;Elixir and Phoenix&lt;/strong&gt; including CRUD operations, authentication, routing, pagination, and more.&lt;/p&gt;
&lt;p&gt;We've gone to great lengths to adhere to the &lt;strong&gt;&lt;a href="https://github.com/rrrene/credo"&gt;credo&lt;/a&gt;&lt;/strong&gt; community styleguides &amp;amp; best practices.&lt;/p&gt;
&lt;p&gt;For more information on how to this works with other frontends/backends, head over to the &lt;a href="https://github.com/gothinkster/realworld"&gt;RealWorld&lt;/a&gt; repo.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installing--getting-started" class="anchor" aria-hidden="true" href="#installing--getting-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installing / Getting started&lt;/h2&gt;
&lt;p&gt;To run this project, you will need to install the following dependencies on your system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://elixir-lang.org/install.html" rel="nofollow"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/phoenix/installation.html" rel="nofollow"&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.postgresql.org/download/macosx/" rel="nofollow"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get started, run the following commands in your project folder:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;cp config/dev.exs.example config/dev.exs  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; creates the project's configuration file&lt;/span&gt;
mix deps.get  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; installs the dependencies&lt;/span&gt;
mix ecto.create  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; creates the database.&lt;/span&gt;
mix ecto.migrate  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; run the database migrations.&lt;/span&gt;
mix phx.server  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; run the application.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a backend project, you won't be able to go to localhost:4000 and see an aplication.&lt;/p&gt;
&lt;p&gt;In order to see the &lt;a href="https://demo.realworld.io/#/" rel="nofollow"&gt;Conduit&lt;/a&gt; frontend you will need to download and setup one of the &lt;a href="https://demo.realworld.io/#/" rel="nofollow"&gt;frontend projects&lt;/a&gt; and set it up to consume this apps api. Typically this can be done by finding the &lt;code&gt;API_URL&lt;/code&gt; and setting it to &lt;code&gt;localhost:4000&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tests" class="anchor" aria-hidden="true" href="#tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tests&lt;/h2&gt;
&lt;p&gt;To run the tests for this project, simply run in your terminal:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mix &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;To generate the documentation, your can run in your terminal:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mix docs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate a &lt;code&gt;doc/&lt;/code&gt; directory with a documentation in HTML. To view the documentation, open the &lt;code&gt;index.html&lt;/code&gt; file in the generated directory.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-style-guide" class="anchor" aria-hidden="true" href="#style-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Style guide&lt;/h2&gt;
&lt;p&gt;This project uses &lt;a href="https://hexdocs.pm/mix/master/Mix.Tasks.Format.html" rel="nofollow"&gt;mix format&lt;/a&gt;. You can find the configuration file for the formatter in the &lt;code&gt;.formatter.exs&lt;/code&gt; file.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-licensing" class="anchor" aria-hidden="true" href="#licensing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Licensing&lt;/h2&gt;
&lt;p&gt;MIT © Ezinwa Okpoechi&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>gothinkster</author><guid isPermaLink="false">https://github.com/gothinkster/elixir-phoenix-realworld-example-app</guid><pubDate>Sat, 07 Dec 2019 00:07:00 GMT</pubDate></item><item><title>elixir-wallaby/wallaby #8 in Elixir, Today</title><link>https://github.com/elixir-wallaby/wallaby</link><description>&lt;p&gt;&lt;i&gt;Concurrent browser tests with elixir&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4401f260dcbda1f74ae798cbae190ab10e7847fc/68747470733a2f2f692e696d6775722e636f6d2f655131746c49332e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/4401f260dcbda1f74ae798cbae190ab10e7847fc/68747470733a2f2f692e696d6775722e636f6d2f655131746c49332e706e67" alt="Wallaby" data-canonical-src="https://i.imgur.com/eQ1tlI3.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/elixir-wallaby/wallaby/actions"&gt;&lt;img src="https://github.com/elixir-wallaby/wallaby/workflows/CI/badge.svg" alt="Actions Status" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hex.pm/packages/wallaby" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6c2177cfe7a3edba96ea60967644bc547ea89e5e/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f762f77616c6c6162792e7376673f7374796c653d666c6174" alt="Hex pm" data-canonical-src="https://img.shields.io/hexpm/v/wallaby.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/keathley/wallaby?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d22ac8a421e2ab79165800d8338f41c384ae5bdb/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b656174686c65792f77616c6c6162792f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/keathley/wallaby/badge.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://inch-ci.org/github/keathley/wallaby" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/54c84b6f9dc09165cc4df86dfb4b900d3ffceb95/687474703a2f2f696e63682d63692e6f72672f6769746875622f6b656174686c65792f77616c6c6162792e737667" alt="Inline docs" data-canonical-src="http://inch-ci.org/github/keathley/wallaby.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wallaby helps you test your web applications by simulating realistic user interactions.
By default it runs each test case concurrently and manages browsers for you.
Here's an example test for a simple Todo application:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-e"&gt;Features&lt;/span&gt;.&lt;span class="pl-en"&gt;TodoTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;FeatureCase&lt;/span&gt;, &lt;span class="pl-c1"&gt;async:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; [&lt;span class="pl-c1"&gt;css:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;text_field:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;button:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;]

  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users can create todos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;session:&lt;/span&gt; session} &lt;span class="pl-k"&gt;do&lt;/span&gt;
    session
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; visit(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/todos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;New Todo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Write my first Wallaby test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Save&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;You created a todo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.todo-list &amp;gt; .todo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Write my first Wallaby test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because Wallaby manages multiple browsers for you, its possible to test several users interacting with a page simultaneously.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-e"&gt;Features&lt;/span&gt;.&lt;span class="pl-en"&gt;MultipleUsersTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;FeatureCase&lt;/span&gt;, &lt;span class="pl-c1"&gt;async:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; [&lt;span class="pl-c1"&gt;text_field:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;button:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;css:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;]

  &lt;span class="pl-smi"&gt;@page&lt;/span&gt; message_path(&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;, &lt;span class="pl-c1"&gt;:index&lt;/span&gt;)
  &lt;span class="pl-smi"&gt;@message_field&lt;/span&gt; text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Share Message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-smi"&gt;@share_button&lt;/span&gt; button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Share&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;message&lt;/span&gt;(msg), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.messages &amp;gt; .message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; msg)

  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;That users can send messages to each other&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, user1} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.start_session
    user1
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; visit(&lt;span class="pl-smi"&gt;@page&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(&lt;span class="pl-smi"&gt;@message_field&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(&lt;span class="pl-smi"&gt;@share_button&lt;/span&gt;)

    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, user2} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.start_session
    user2
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; visit(&lt;span class="pl-smi"&gt;@page&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(&lt;span class="pl-smi"&gt;@message_field&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello yourself&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(&lt;span class="pl-smi"&gt;@share_button&lt;/span&gt;)

    user1
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(message(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello yourself&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))

    user2
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(message(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello there!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read on to see what else Wallaby can do or check out the &lt;a href="https://hexdocs.pm/wallaby" rel="nofollow"&gt;Official Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;p&gt;Add Wallaby to your list of dependencies in &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.23.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-c1"&gt;runtime:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; &lt;span class="pl-c1"&gt;:test&lt;/span&gt;]}]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then ensure that Wallaby is started in your &lt;code&gt;test_helper.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt;.ensure_all_started(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-phoenix" class="anchor" aria-hidden="true" href="#phoenix"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Phoenix&lt;/h3&gt;
&lt;p&gt;If you're testing a Phoenix application with Ecto 2 or 3 and a database that supports sandbox mode then you can enable concurrent testing by adding the &lt;code&gt;Phoenix.Ecto.SQL.Sandbox&lt;/code&gt; plug to your &lt;code&gt;Endpoint&lt;/code&gt;.
It's important that this is at the top of &lt;code&gt;endpoint.ex&lt;/code&gt; before any other plugs.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; lib/endpoint.ex&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;, &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:your_app&lt;/span&gt;

  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt;.get_env(&lt;span class="pl-c1"&gt;:your_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;:sql_sandbox&lt;/span&gt;) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    plug &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure Phoenix is set up to serve endpoints in tests and that the SQL sandbox is enabled:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/test.exs&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:your_app&lt;/span&gt;, &lt;span class="pl-en"&gt;YourApplication&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;server:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:your_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;:sql_sandbox&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in your &lt;code&gt;test_helper.exs&lt;/code&gt; you can provide some configuration to Wallaby.
At minimum, you need to specify a &lt;code&gt;:base_url&lt;/code&gt;, so Wallaby knows how to resolve relative paths.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; test/test_helper.exs&lt;/span&gt;

&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:base_url&lt;/span&gt;, &lt;span class="pl-en"&gt;YourApplication&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;.url)&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-assets" class="anchor" aria-hidden="true" href="#assets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Assets&lt;/h4&gt;
&lt;p&gt;Assets are not re-compiled when you run &lt;code&gt;mix test&lt;/code&gt;.
This can lead to confusion if you've made changes in javascript or css but tests are still failing.
There are two common ways to avoid this confusion.&lt;/p&gt;
&lt;p&gt;The first solution is to run &lt;code&gt;webpack --mode development --watch&lt;/code&gt; from the assets directory.
This will ensure that assets get recompiled after any changes.&lt;/p&gt;
&lt;p&gt;The second solution is to add a new alias to your mix config that recompiles assets for you:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;project&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    [
      &lt;span class="pl-c1"&gt;app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;version:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;aliases:&lt;/span&gt; aliases()
    ]
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;aliases&lt;/span&gt;, &lt;span class="pl-c1"&gt;do:&lt;/span&gt; [
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: [
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;assets.compile --quiet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ecto.create --quiet&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ecto.migrate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    ],
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;assets.compile&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;compile_assets&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;
  ]

  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;compile_assets&lt;/span&gt;(_) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Mix&lt;/span&gt;.shell().cmd(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;./assets/node_modules/webpack/bin/webpack.js --mode development&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;quiet:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
    )
  &lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method is less error prone but it will cause a delay when starting your test suite.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-umbrella-apps" class="anchor" aria-hidden="true" href="#umbrella-apps"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Umbrella Apps&lt;/h4&gt;
&lt;p&gt;If you're testing an umbrella application containing a Phoenix application for the web interface (&lt;code&gt;MyWebApp&lt;/code&gt;) and a separate persistence application (&lt;code&gt;MyPersistenceApp&lt;/code&gt;) using Ecto 2 or 3 with a database that supports sandbox mode, then you can use the same setup as above, with a few tweaks.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; my_web_app/lib/endpoint.ex&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyWebApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;, &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_web_app&lt;/span&gt;

  &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt;.get_env(&lt;span class="pl-c1"&gt;:my_persistence_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;:sql_sandbox&lt;/span&gt;) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    plug &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure &lt;code&gt;MyWebApp&lt;/code&gt; is set up to serve endpoints in tests and that the SQL sandbox is enabled:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; my_web_app/config/test.exs&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_web_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyWebApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;server:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_persistence_app&lt;/span&gt;, &lt;span class="pl-c1"&gt;:sql_sandbox&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in &lt;code&gt;MyWebApp&lt;/code&gt;'s &lt;code&gt;test_helper.exs&lt;/code&gt; you can provide some configuration to Wallaby.
At minimum, you need to specify a &lt;code&gt;:base_url&lt;/code&gt;, so Wallaby knows how to resolve relative paths.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; my_web_app/test/test_helper.exs&lt;/span&gt;

&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:base_url&lt;/span&gt;, &lt;span class="pl-en"&gt;MyWebApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;.url)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will also want to add &lt;code&gt;phoenix_ecto&lt;/code&gt; as a dependency to &lt;code&gt;MyWebApp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; my_web_app/mix.exs&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.23&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; &lt;span class="pl-c1"&gt;:test&lt;/span&gt;},
    {&lt;span class="pl-c1"&gt;:phoenix_ecto&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 3.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; &lt;span class="pl-c1"&gt;:test&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-phantomjs" class="anchor" aria-hidden="true" href="#phantomjs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PhantomJS&lt;/h3&gt;
&lt;p&gt;Wallaby requires PhantomJS. You can install PhantomJS through NPM or your package manager of choice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install -g phantomjs-prebuilt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wallaby will use whatever PhantomJS you have installed in your path. If you need to specify a specific PhantomJS you can pass the path in the configuration:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;phantomjs:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some/path/to/phantomjs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also pass arguments to PhantomJS through the &lt;code&gt;phantomjs_args&lt;/code&gt; config setting, e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;phantomjs_args:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--webdriver-logfile=phantomjs.log&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-writing-tests" class="anchor" aria-hidden="true" href="#writing-tests"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing tests&lt;/h3&gt;
&lt;p&gt;It's easiest to add Wallaby to your test suite by creating a new case template (in case of an umbrella app, take care to adjust &lt;code&gt;YourApp&lt;/code&gt; appropriately):&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;FeatureCase&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;ExUnit&lt;/span&gt;.&lt;span class="pl-en"&gt;CaseTemplate&lt;/span&gt;

  using &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-k"&gt;quote&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
      &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;DSL&lt;/span&gt;

      &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;
      &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;
      &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Changeset&lt;/span&gt;
      &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;

      &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Router&lt;/span&gt;.&lt;span class="pl-en"&gt;Helpers&lt;/span&gt;
    &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  setup tags &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapters&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;.checkout(&lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;)

    &lt;span class="pl-k"&gt;unless&lt;/span&gt; tags[&lt;span class="pl-c1"&gt;:async&lt;/span&gt;] &lt;span class="pl-k"&gt;do&lt;/span&gt;
      &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapters&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;.mode(&lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;, {&lt;span class="pl-c1"&gt;:shared&lt;/span&gt;, self()})
    &lt;span class="pl-k"&gt;end&lt;/span&gt;

    metadata &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Phoenix&lt;/span&gt;.&lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;.metadata_for(&lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;, self())
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, session} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.start_session(&lt;span class="pl-c1"&gt;metadata:&lt;/span&gt; metadata)
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, &lt;span class="pl-c1"&gt;session:&lt;/span&gt; session}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can write tests like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;UserListTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;YourApp&lt;/span&gt;.&lt;span class="pl-en"&gt;FeatureCase&lt;/span&gt;, &lt;span class="pl-c1"&gt;async:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Query&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; [&lt;span class="pl-c1"&gt;css:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;]

  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users have names&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;session:&lt;/span&gt; session} &lt;span class="pl-k"&gt;do&lt;/span&gt;
    session
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; visit(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; find(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;count:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;List&lt;/span&gt;.first()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-api" class="anchor" aria-hidden="true" href="#api"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;API&lt;/h2&gt;
&lt;p&gt;The full documentation for the DSL is in the &lt;a href="https://hexdocs.pm/wallaby" rel="nofollow"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-queries-and-actions" class="anchor" aria-hidden="true" href="#queries-and-actions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Queries and Actions&lt;/h3&gt;
&lt;p&gt;Wallaby's API is broken into 2 concepts: Queries and Actions.&lt;/p&gt;
&lt;p&gt;Queries allow us to declaratively describe the elements that we would like to interact with and Actions allow us to use those queries to interact with the DOM.&lt;/p&gt;
&lt;p&gt;Lets say that our html looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic"&gt;&lt;pre&gt;&amp;lt;&lt;span class="pl-ent"&gt;ul&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class="pl-ent"&gt;li&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;Ada&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="pl-ent"&gt;li&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class="pl-ent"&gt;li&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;Grace&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="pl-ent"&gt;li&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class="pl-ent"&gt;li&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-e"&gt;class&lt;/span&gt;=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;Alan&amp;lt;/&lt;span class="pl-ent"&gt;span&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="pl-ent"&gt;li&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class="pl-ent"&gt;ul&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we wanted to interact with all of the users then we could write a query like so &lt;code&gt;css(".user", count: 3)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we only wanted to interact with a specific user then we could write a query like this &lt;code&gt;css(".user-name", count: 1, text: "Ada")&lt;/code&gt;. Now we can use those queries with some actions:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;session
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; find(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;count:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;List&lt;/span&gt;.first
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;count:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Ada&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are several queries for common html elements defined in the &lt;a href="https://hexdocs.pm/wallaby/Wallaby.Query.html#content" rel="nofollow"&gt;Query module&lt;/a&gt;.
All actions accept a query.
This makes it easy to use queries we've already defined.
Actions will block until the query is either satisfied or the action times out.
Blocking reduces race conditions when elements are added or removed dynamically.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-navigation" class="anchor" aria-hidden="true" href="#navigation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Navigation&lt;/h3&gt;
&lt;p&gt;We can navigate directly to pages with &lt;code&gt;visit&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;visit(session, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/page.html&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
visit(session, user_path(&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;, &lt;span class="pl-c1"&gt;:index&lt;/span&gt;, &lt;span class="pl-c1"&gt;17&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's also possible to click links directly:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;click(session, link(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Page 1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-finding" class="anchor" aria-hidden="true" href="#finding"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Finding&lt;/h3&gt;
&lt;p&gt;We can find a specific element or list of elements with &lt;code&gt;find&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-smi"&gt;@user_form&lt;/span&gt;   css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-form&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-smi"&gt;@name_field&lt;/span&gt;  text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-smi"&gt;@email_field&lt;/span&gt; text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-smi"&gt;@save_button&lt;/span&gt; button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Save&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

find(page, &lt;span class="pl-smi"&gt;@user_form&lt;/span&gt;, &lt;span class="pl-k"&gt;fn&lt;/span&gt;(form) &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
  form
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(&lt;span class="pl-smi"&gt;@name_field&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(&lt;span class="pl-smi"&gt;@email_field&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c@keathley.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(&lt;span class="pl-smi"&gt;@save_button&lt;/span&gt;)
&lt;span class="pl-k"&gt;end&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Passing a callback to &lt;code&gt;find&lt;/code&gt; will return the parent which makes it easy to chain &lt;code&gt;find&lt;/code&gt; with other actions:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;page
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; find(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt; assert has?(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt;, css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;count:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;)))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(link(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next Page&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without the callback &lt;code&gt;find&lt;/code&gt; returns the element.
This provides a way to scope all future actions within an element.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;page
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; find(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-form&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c@keathley.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Save&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-interacting-with-forms" class="anchor" aria-hidden="true" href="#interacting-with-forms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interacting with forms&lt;/h3&gt;
&lt;p&gt;There are a few ways to interact with form elements on a page:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;fill_in(session, text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;First Name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;), &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
clear(session, text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;last_name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
click(session, option(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Some option&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
click(session, radio_button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My Fancy Radio Button&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
click(session, button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Some Button&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to send specific keys to an element, you can do that with &lt;code&gt;send_keys&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;send_keys(session, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Example&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Text&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;:enter&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-assertions" class="anchor" aria-hidden="true" href="#assertions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Assertions&lt;/h3&gt;
&lt;p&gt;Wallaby provides custom assertions to make writing tests easier:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;assert_has(session, css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.signup-form&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
refute_has(session, css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
has?(session, css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.user-edit-modal&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;visible:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;assert_has&lt;/code&gt; and &lt;code&gt;refute_has&lt;/code&gt; both take a parent element as their first argument.
They return that parent, making it easy to chain them together with other actions.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;session
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.signup-form&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; fill_in(text_field(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c@keathley.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Sign up&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; refute_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.error&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;text:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Welcome!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-window-size" class="anchor" aria-hidden="true" href="#window-size"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Window Size&lt;/h3&gt;
&lt;p&gt;You can set the default window size by passing in the &lt;code&gt;window_size&lt;/code&gt; option into &lt;code&gt;Wallaby.start_session\1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.start_session(&lt;span class="pl-c1"&gt;window_size:&lt;/span&gt; [&lt;span class="pl-c1"&gt;width:&lt;/span&gt; &lt;span class="pl-c1"&gt;1280&lt;/span&gt;, &lt;span class="pl-c1"&gt;height:&lt;/span&gt; &lt;span class="pl-c1"&gt;720&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also resize the window and get the current window size during the test.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;resize_window(session, &lt;span class="pl-c1"&gt;100&lt;/span&gt;, &lt;span class="pl-c1"&gt;100&lt;/span&gt;)
window_size(session)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h3&gt;
&lt;p&gt;It's possible take screenshots:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;take_screenshot(session)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All screenshots are saved to a &lt;code&gt;screenshots&lt;/code&gt; directory in the directory that the tests were run in.&lt;/p&gt;
&lt;p&gt;If you want to customize the screenshot directory you can pass it as a config value:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/test.exs&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;screenshot_dir:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/file/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; test_helper.exs&lt;/span&gt;
&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:screenshot_dir&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/file/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-automatic-screenshots" class="anchor" aria-hidden="true" href="#automatic-screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automatic screenshots&lt;/h3&gt;
&lt;p&gt;You can automatically take screenshots on an error:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/test.exs&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;screenshot_on_failure:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; test_helper.exs&lt;/span&gt;
&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:screenshot_on_failure&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-javascript" class="anchor" aria-hidden="true" href="#javascript"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JavaScript&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-asynchronous-code" class="anchor" aria-hidden="true" href="#asynchronous-code"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Asynchronous code&lt;/h3&gt;
&lt;p&gt;Testing asynchronous JavaScript code can expose timing issues and race conditions.
We might try to interact with an element that hasn't yet appeared on the page.
Elements can become stale while we're trying to interact with them.&lt;/p&gt;
&lt;p&gt;Wallaby helps solve this by blocking.
Instead of manually setting timeouts we can use &lt;code&gt;assert_has&lt;/code&gt; and some declarative queries to block until the DOM is in a good state.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;session
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Some Async Button&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; assert_has(css(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.async-result&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; click(button(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Next Action&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-interacting-with-dialogs" class="anchor" aria-hidden="true" href="#interacting-with-dialogs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interacting with dialogs&lt;/h3&gt;
&lt;p&gt;Wallaby provides several ways to interact with JavaScript dialogs such as &lt;code&gt;window.alert&lt;/code&gt;, &lt;code&gt;window.confirm&lt;/code&gt; and &lt;code&gt;window.prompt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use one of the following functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;window.alert&lt;/code&gt; use &lt;code&gt;accept_alert/2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;window.confirm&lt;/code&gt; use &lt;code&gt;accept_confirm/2&lt;/code&gt; or &lt;code&gt;dismiss_confirm/2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;window.prompt&lt;/code&gt; use &lt;code&gt;accept_prompt/2-3&lt;/code&gt; or &lt;code&gt;dismiss_prompt/2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these take a function as last parameter, which must include the necessary interactions to trigger the dialog. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;alert_message &lt;span class="pl-k"&gt;=&lt;/span&gt; accept_alert session, &lt;span class="pl-k"&gt;fn&lt;/span&gt;(session) &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
  click(session, link(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Trigger alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To emulate user input for a prompt, &lt;code&gt;accept_prompt&lt;/code&gt; takes an optional parameter:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;prompt_message &lt;span class="pl-k"&gt;=&lt;/span&gt; accept_prompt session, [&lt;span class="pl-c1"&gt;with:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;User input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], &lt;span class="pl-k"&gt;fn&lt;/span&gt;(session) &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
  click(session, link(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Trigger prompt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-javascript-logging-and-errors" class="anchor" aria-hidden="true" href="#javascript-logging-and-errors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JavaScript logging and errors&lt;/h3&gt;
&lt;p&gt;Wallaby captures both JavaScript logs and errors.
Any uncaught exceptions in JavaScript will be re-thrown in Elixir.
This can be disabled by specifying &lt;code&gt;js_errors: false&lt;/code&gt; in your Wallaby config.&lt;/p&gt;
&lt;p&gt;JavaScript logs are written to :stdio by default.
This can be changed to any IO device by setting the &lt;code&gt;:js_logger&lt;/code&gt; option in your Wallaby config.
For instance if you want to write all JavaScript console logs to a file you could do something like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, file} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;File&lt;/span&gt;.open(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;browser_logs.log&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-c1"&gt;:write&lt;/span&gt;])
&lt;span class="pl-en"&gt;Application&lt;/span&gt;.put_env(&lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;, &lt;span class="pl-c1"&gt;:js_logger&lt;/span&gt;, file)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Logging can be disabled by setting &lt;code&gt;:js_logger&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-config" class="anchor" aria-hidden="true" href="#config"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Config&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-adjusting-timeouts" class="anchor" aria-hidden="true" href="#adjusting-timeouts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adjusting timeouts&lt;/h3&gt;
&lt;p&gt;Wallaby uses &lt;a href="https://github.com/benoitc/hackney"&gt;hackney&lt;/a&gt; under the hood, so we offer a hook that allows you to control any hackney options you'd like to have sent along on every request.
This can be controlled with the &lt;code&gt;:hackney_options&lt;/code&gt; setting in &lt;code&gt;config.exs&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;hackney_options:&lt;/span&gt; [&lt;span class="pl-c1"&gt;timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;:infinity&lt;/span&gt;, &lt;span class="pl-c1"&gt;recv_timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;:infinity&lt;/span&gt;]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Overriding a value&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;hackney_options:&lt;/span&gt; [&lt;span class="pl-c1"&gt;timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;5_000&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-drivers" class="anchor" aria-hidden="true" href="#drivers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Drivers&lt;/h3&gt;
&lt;p&gt;Wallaby works with PhantomJS out of the box. There is also experimental support for both headless chrome and selenium.
The driver can be specified by setting the &lt;code&gt;driver&lt;/code&gt; option in the wallaby config like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Chrome&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;driver:&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Experimental&lt;/span&gt;.&lt;span class="pl-en"&gt;Chrome&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Selenium&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:wallaby&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;driver:&lt;/span&gt; &lt;span class="pl-en"&gt;Wallaby&lt;/span&gt;.&lt;span class="pl-en"&gt;Experimental&lt;/span&gt;.&lt;span class="pl-en"&gt;Selenium&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See below for more information on the experimental drivers.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-experimental-driver-support" class="anchor" aria-hidden="true" href="#experimental-driver-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Experimental Driver Support&lt;/h2&gt;
&lt;p&gt;Currently Wallaby provides experimental support for both headless chrome and selenium.
Both of these drivers are still "experimental" because they don't support the full API yet and because the implementation is changing rapidly.
But, if you would like to use them in your project here's what you'll need to do.&lt;/p&gt;
&lt;p&gt;Please refer to the &lt;a href="https://hexdocs.pm/wallaby/readme.html#headless-chrome" rel="nofollow"&gt;documentation&lt;/a&gt; for further information about using the Chrome driver.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-headless-chrome" class="anchor" aria-hidden="true" href="#headless-chrome"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Headless Chrome&lt;/h3&gt;
&lt;p&gt;In order to run headless chrome you'll need to have ChromeDriver &amp;gt;= 2.30 and chrome &amp;gt;= 60.
Previous versions of both of these tools &lt;em&gt;may&lt;/em&gt; work, but several features will be buggy.
If you want to setup chrome in a CI environment then you'll still need to install and run xvfb.
This is due to a bug in ChromeDriver 2.30 that inhibits ChromeDriver from handling input text correctly.
The bug should be fixed in ChromeDriver 2.31.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-selenium" class="anchor" aria-hidden="true" href="#selenium"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Selenium&lt;/h3&gt;
&lt;p&gt;Please refer to the &lt;a href="https://hexdocs.pm/wallaby/Wallaby.Experimental.Selenium.html#content" rel="nofollow"&gt;documentation&lt;/a&gt; for further information about using the Selenium driver.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Wallaby is a community project. PRs and Issues are greatly welcome.&lt;/p&gt;
&lt;p&gt;To get started and setup the project, make sure you've got Elixir 1.5+ installed and then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix deps.get
$ npm install -g phantomjs-prebuilt # unless you've already got PhantomJS installed
$ mix test # Make sure the tests pass!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Besides running the unit tests above, it is recommended to run the driver
integration tests too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Run only phantomjs integration tests
$ WALLABY_DRIVER=phantom mix test

# Run all tests (unit and all drivers)
$ mix test.all
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>elixir-wallaby</author><guid isPermaLink="false">https://github.com/elixir-wallaby/wallaby</guid><pubDate>Sat, 07 Dec 2019 00:08:00 GMT</pubDate></item></channel></rss>