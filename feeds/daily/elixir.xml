<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Elixir, Today</title><link>https://github.com/trending/elixir?since=daily</link><description>The top repositories on GitHub for elixir, measured daily</description><pubDate>Wed, 29 Jan 2020 01:06:30 GMT</pubDate><lastBuildDate>Wed, 29 Jan 2020 01:06:30 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>elixir-lang/elixir #1 in Elixir, Today</title><link>https://github.com/elixir-lang/elixir</link><description>&lt;p&gt;&lt;i&gt;Elixir is a dynamic, functional language designed for building scalable and maintainable applications&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="" class="anchor" aria-hidden="true" href="#"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/elixir-lang/elixir-lang.github.com/raw/master/images/logo/logo.png"&gt;&lt;img src="https://github.com/elixir-lang/elixir-lang.github.com/raw/master/images/logo/logo.png" alt="Elixir" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://cirrus-ci.com/github/elixir-lang/elixir" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c4d820a66eff706de4aa9371456b877a22ee03d7/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f656c697869722d6c616e672f656c697869722e7376673f6272616e63683d6d6173746572" alt="Build status" data-canonical-src="https://api.cirrus-ci.com/github/elixir-lang/elixir.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elixir is a dynamic, functional language designed for building scalable
and maintainable applications.&lt;/p&gt;
&lt;p&gt;For more about Elixir, installation and documentation,
&lt;a href="https://elixir-lang.org/" rel="nofollow"&gt;check Elixir's website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-policies" class="anchor" aria-hidden="true" href="#policies"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Policies&lt;/h2&gt;
&lt;p&gt;New releases are announced in the &lt;a href="https://groups.google.com/group/elixir-lang-ann" rel="nofollow"&gt;announcement mailing list&lt;/a&gt;.
You can subscribe by sending an email to &lt;a href="mailto:elixir-lang-ann+subscribe@googlegroups.com"&gt;elixir-lang-ann+subscribe@googlegroups.com&lt;/a&gt; and replying to the confirmation email.&lt;/p&gt;
&lt;p&gt;All security releases &lt;a href="https://groups.google.com/forum/#!searchin/elixir-lang-ann/%5Bsecurity%5D%7Csort:date" rel="nofollow"&gt;will be tagged with &lt;code&gt;[security]&lt;/code&gt;&lt;/a&gt;. For more information, please read our &lt;a href="SECURITY.md"&gt;Security Policy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All interactions in our official communication channels follow our &lt;a href="CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-bug-reports" class="anchor" aria-hidden="true" href="#bug-reports"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bug reports&lt;/h2&gt;
&lt;p&gt;For reporting bugs, &lt;a href="https://github.com/elixir-lang/elixir/issues"&gt;visit our issue tracker&lt;/a&gt; and follow the steps
for reporting a new issue. &lt;strong&gt;Please disclose security vulnerabilities
privately at &lt;a href="mailto:elixir-security@googlegroups.com"&gt;elixir-security@googlegroups.com&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-compiling-from-source" class="anchor" aria-hidden="true" href="#compiling-from-source"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compiling from source&lt;/h2&gt;
&lt;p&gt;For the many different ways to install Elixir,
&lt;a href="https://elixir-lang.org/install.html" rel="nofollow"&gt;see our installation instructions on the website&lt;/a&gt;.
To compile from source, you can follow the steps below.&lt;/p&gt;
&lt;p&gt;First, &lt;a href="https://elixir-lang.org/install.html#installing-erlang" rel="nofollow"&gt;install Erlang&lt;/a&gt;. Then clone this repository to your machine, compile and test it:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/elixir-lang/elixir.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; elixir
make clean &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: if you are running on Windows,
&lt;a href="https://github.com/elixir-lang/elixir/wiki/Windows"&gt;this article includes important notes for compiling Elixir from source
on Windows&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If Elixir fails to build (specifically when pulling in a new version via
&lt;code&gt;git&lt;/code&gt;), be sure to remove any previous build artifacts by running
&lt;code&gt;make clean&lt;/code&gt;, then &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If tests pass, you can use Interactive Elixir by running &lt;code&gt;bin/iex&lt;/code&gt; in your terminal.&lt;/p&gt;
&lt;p&gt;However, if tests fail, it is likely that you have an outdated Erlang/OTP version
(Elixir requires Erlang/OTP 21.0 or later). You can check your Erlang/OTP version
by calling &lt;code&gt;erl&lt;/code&gt; in the command line. You will see some information similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Erlang/OTP 21 [erts-9.0] [smp:2:2] [async-threads:10] [kernel-poll:false]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have properly set up your dependencies and tests still fail,
you may want to open up a bug report, as explained next.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-proposing-new-features" class="anchor" aria-hidden="true" href="#proposing-new-features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Proposing new features&lt;/h2&gt;
&lt;p&gt;For proposing new features, please start a discussion in the
&lt;a href="https://groups.google.com/group/elixir-lang-core" rel="nofollow"&gt;Elixir Core mailing list&lt;/a&gt;. Keep in mind that it is your responsibility
to argue and explain why a feature is useful and how it will impact the
codebase and the community.&lt;/p&gt;
&lt;p&gt;Once a proposal is accepted, it will be added to &lt;a href="https://github.com/elixir-lang/elixir/issues"&gt;the issue tracker&lt;/a&gt;.
The issue tracker focuses on &lt;em&gt;actionable items&lt;/em&gt; and it holds a list of
upcoming enhancements and pending bugs. All entries in the tracker are
tagged for clarity and to ease collaboration.&lt;/p&gt;
&lt;p&gt;Features and bug fixes that have already been merged and will be included
in the next release are marked as "closed" in the issue tracker and are
added to the &lt;a href="CHANGELOG.md"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We welcome everyone to contribute to Elixir. To do so, there are a few
things you need to know about the code. First, Elixir code is divided
in applications inside the &lt;code&gt;lib&lt;/code&gt; folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;elixir&lt;/code&gt; - Elixir's kernel and standard library&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eex&lt;/code&gt; - EEx is the template engine that allows you to embed Elixir&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ex_unit&lt;/code&gt; - ExUnit is a simple test framework that ships with Elixir&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;iex&lt;/code&gt; - IEx stands for Interactive Elixir: Elixir's interactive shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logger&lt;/code&gt; - Logger is the built-in logger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mix&lt;/code&gt; - Mix is Elixir's build tool&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can run all tests in the root directory with &lt;code&gt;make test&lt;/code&gt; and you can
also run tests for a specific framework &lt;code&gt;make test_#{APPLICATION}&lt;/code&gt;, for example,
&lt;code&gt;make test_ex_unit&lt;/code&gt;. If you just changed something in the Elixir's standard
library, you can run only that portion through &lt;code&gt;make test_stdlib&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are changing just one file, you can choose to compile and run tests only
for that particular file for fast development cycles. For example, if you
are changing the String module, you can compile it and run its tests as:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;bin/elixirc lib/elixir/lib/string.ex -o lib/elixir/ebin
bin/elixir lib/elixir/test/elixir/string_test.exs&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To recompile (including Erlang modules):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After your changes are done, please remember to run &lt;code&gt;make format&lt;/code&gt; to guarantee
all files are properly formatted and then run the full suite with
&lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If your contribution fails during the bootstrapping of the language,
you can rebuild the language from scratch with:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make clean_elixir compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, if you can't get Elixir to compile or the tests to pass after
updating an existing checkout, run &lt;code&gt;make clean compile&lt;/code&gt;. You can check
&lt;a href="https://cirrus-ci.com/github/elixir-lang/elixir" rel="nofollow"&gt;the official build status on Cirrus CI&lt;/a&gt;.
More tasks can be found by reading the &lt;a href="Makefile"&gt;Makefile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With tests running and passing, you are ready to contribute to Elixir and
&lt;a href="https://help.github.com/articles/using-pull-requests/"&gt;send a pull request&lt;/a&gt;.
We have saved some excellent pull requests we have received in the past in
case you are looking for some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/992"&gt;Implement Enum.member? - Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/1058"&gt;Add String.valid? - Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/1059"&gt;Implement capture_io for ExUnit - Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-reviewing-changes" class="anchor" aria-hidden="true" href="#reviewing-changes"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reviewing changes&lt;/h3&gt;
&lt;p&gt;Once a pull request is sent, the Elixir team will review your changes.
We outline our process below to clarify the roles of everyone involved.&lt;/p&gt;
&lt;p&gt;All pull requests must be approved by two committers before being merged into
the repository. If any changes are necessary, the team will leave appropriate
comments requesting changes to the code. Unfortunately we cannot guarantee a
pull request will be merged, even when modifications are requested, as the Elixir
team will re-evaluate the contribution as it changes.&lt;/p&gt;
&lt;p&gt;Committers may also push style changes directly to your branch. If you would
rather manage all changes yourself, you can disable "Allow edits from maintainers"
feature when submitting your pull request.&lt;/p&gt;
&lt;p&gt;The Elixir team may optionally assign someone to review a pull request.
If someone is assigned, they must explicitly approve the code before
another team member can merge it.&lt;/p&gt;
&lt;p&gt;When the review finishes, your pull request will be squashed and merged
into the repository. If you have carefully organized your commits and
believe they should be merged without squashing, please mention it in
a comment.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-building-documentation" class="anchor" aria-hidden="true" href="#building-documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Building documentation&lt;/h2&gt;
&lt;p&gt;Building the documentation requires &lt;a href="https://github.com/elixir-lang/ex_doc"&gt;ExDoc&lt;/a&gt;
to be installed and built alongside Elixir:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; After cloning and compiling Elixir, in its parent directory:&lt;/span&gt;
git clone git://github.com/elixir-lang/ex_doc.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; ex_doc &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ../elixir/bin/mix &lt;span class="pl-k"&gt;do&lt;/span&gt; deps.get, compile&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now go back to Elixir's root directory and run:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;make docs                  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to generate HTML pages&lt;/span&gt;
make docs DOCS_FORMAT=epub &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to generate EPUB documents&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will produce documentation sets for &lt;code&gt;elixir&lt;/code&gt;, &lt;code&gt;eex&lt;/code&gt;, &lt;code&gt;ex_unit&lt;/code&gt;, &lt;code&gt;iex&lt;/code&gt;, &lt;code&gt;logger&lt;/code&gt;,
and &lt;code&gt;mix&lt;/code&gt; under the &lt;code&gt;doc&lt;/code&gt; directory. If you are planning to contribute documentation,
&lt;a href="https://hexdocs.pm/elixir/writing-documentation.html" rel="nofollow"&gt;please check our best practices for writing documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-development-links" class="anchor" aria-hidden="true" href="#development-links"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Development links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://elixir-lang.org/docs.html" rel="nofollow"&gt;Elixir Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/group/elixir-lang-core" rel="nofollow"&gt;Elixir Core Mailing list (development)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/group/elixir-lang-ann" rel="nofollow"&gt;Announcement mailing list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/issues"&gt;Issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="CHANGELOG.md"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="SECURITY.md"&gt;Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://webchat.freenode.net/?channels=#elixir-lang" rel="nofollow"&gt;#elixir-lang&lt;/a&gt;&lt;/strong&gt; on &lt;a href="https://www.freenode.net" rel="nofollow"&gt;Freenode&lt;/a&gt; IRC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;"Elixir" and the Elixir logo are copyright (c) 2012 Plataformatec.&lt;/p&gt;
&lt;p&gt;Elixir source code is released under Apache License 2.0.&lt;/p&gt;
&lt;p&gt;Check &lt;a href="NOTICE"&gt;NOTICE&lt;/a&gt; and &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt; files for more information.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>elixir-lang</author><guid isPermaLink="false">https://github.com/elixir-lang/elixir</guid><pubDate>Wed, 29 Jan 2020 00:01:00 GMT</pubDate></item><item><title>mindok/contex #2 in Elixir, Today</title><link>https://github.com/mindok/contex</link><description>&lt;p&gt;&lt;i&gt;Charting and graphing library for Elixir&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-contex" class="anchor" aria-hidden="true" href="#contex"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ContEx&lt;/h1&gt;
&lt;p&gt;ContEx is a simple server side charting package for elixir.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./samples/mashup.png"&gt;&lt;img src="./samples/mashup.png" alt="Example Charts" title="Example Charts" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;... and it works nicely in Phoenix LiveView&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="./samples/rolling.gif"&gt;&lt;img src="./samples/rolling.gif" alt="Animated Barchart" title="Animated Barchart" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-core-concepts" class="anchor" aria-hidden="true" href="#core-concepts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Core concepts&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-dataset" class="anchor" aria-hidden="true" href="#dataset"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dataset&lt;/h3&gt;
&lt;p&gt;ContEx uses a simple &lt;code&gt;Dataset&lt;/code&gt; structure - a list of lists or a list of tuples together with a list of column names.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt; data &lt;span class="pl-k"&gt;=&lt;/span&gt; [{&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;}]
 ds &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Dataset&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(data, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-charts" class="anchor" aria-hidden="true" href="#charts"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Charts&lt;/h3&gt;
&lt;p&gt;Data can be represented within different chart types. Currently supported charts are &lt;code&gt;BarChart&lt;/code&gt;, &lt;code&gt;PointPlot&lt;/code&gt;, &lt;code&gt;GanttChart&lt;/code&gt; and &lt;code&gt;Sparkline&lt;/code&gt;. Generally speaking, you can create a chart structure by calling &lt;code&gt;new(&amp;lt;DataSet&amp;gt;)&lt;/code&gt; on the relevant module and Contex will take a reasonable guess at what you want. For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;point_plot &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;PointPlot&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(ds)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will make a new point plot with the first column used for the x-axis, the second for the y-axis, and the scales set to look ok.&lt;/p&gt;
&lt;p&gt;Each module has different option. For example, &lt;code&gt;BarChart&lt;/code&gt; allows you to set the &lt;code&gt;padding()&lt;/code&gt; between the bar groups, specify whether you want &lt;code&gt;type()&lt;/code&gt; to be &lt;code&gt;:grouped&lt;/code&gt; or &lt;code&gt;:stacked&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each chart type implements the &lt;code&gt;PlotContent&lt;/code&gt; protocol which requires it to scale to a defined height and width, emit SVG and optionally emit SVG for a legend. Generally, you won't directly access this protocol however, because...&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-plots" class="anchor" aria-hidden="true" href="#plots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plots&lt;/h3&gt;
&lt;p&gt;... Charts live within a &lt;code&gt;Plot&lt;/code&gt;. &lt;code&gt;Plot&lt;/code&gt;s manage things like titles, margins, axis titles, legend placement etc.&lt;/p&gt;
&lt;p&gt;So to generate SVG ready for your web-page you would do something like:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;plot &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Plot&lt;/span&gt;(&lt;span class="pl-c1"&gt;600&lt;/span&gt;, &lt;span class="pl-c1"&gt;400&lt;/span&gt;, point_plot)
 &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Plot&lt;/span&gt;.&lt;span class="pl-en"&gt;plot_options&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;legend_setting:&lt;/span&gt; &lt;span class="pl-c1"&gt;:legend_right&lt;/span&gt;})
 &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Plot&lt;/span&gt;.&lt;span class="pl-en"&gt;titles&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;My first plot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;With a fancy subtitle&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-en"&gt;Plot&lt;/span&gt;.&lt;span class="pl-en"&gt;to_svg&lt;/span&gt;(plot) 
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;^ This generates something like {:safe, "&amp;lt;svg&amp;gt; fancy SVG chart rendering stuff representing your plot&amp;lt;/svg&amp;gt;"}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-scales" class="anchor" aria-hidden="true" href="#scales"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scales&lt;/h3&gt;
&lt;p&gt;Scales are all about mapping attributes to plotting geometry. They handle transformation of data to screen coordinates (and other plotting attributes). They also handle calculation of tick intervals and the like where appropriate. Scales currently implemented are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContinuousLinearScale&lt;/code&gt; : A linear continuous scale&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OrdinalScale&lt;/code&gt; : For categories / discrete attributes. Used for plotting the category axis in a &lt;code&gt;BarChart&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CategoryColourScale&lt;/code&gt; : Maps unique attributes into colours&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TimeScale&lt;/code&gt; : A continuous timescale for &lt;code&gt;DateTime&lt;/code&gt; and &lt;code&gt;NaiveDateTime&lt;/code&gt; data types&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Others under consideration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContinuousLogScale&lt;/code&gt; : A log version of continuous scale&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ContinuousColourScale&lt;/code&gt; : Generate colour gradients&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-legends" class="anchor" aria-hidden="true" href="#legends"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Legends&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Legend&lt;/code&gt;s are generated for scales. Currently legend generation is only supported for a &lt;code&gt;CategoryColourScale&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-warning" class="anchor" aria-hidden="true" href="#warning"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WARNING&lt;/h3&gt;
&lt;p&gt;There are quite a few things to tidy up to make this ready for the real world, and the API is likely to be unstable for a little while yet...&lt;/p&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Reasonable docs - the best resource currently is the accompanying &lt;a href="https://github.com/mindok/contex-samples"&gt;demo project&lt;/a&gt;&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; Default styling&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; Upgrade Elixir required version to 1.10 and fix up some of the data comparison operators to&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""&gt; Multiple series in point plot&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; Line plot (probably option in point plot)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; More test coverage - it has been built interactively using a liveview page for testing / refinement&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; Options handling - needs to be better structured and use keyword lists rather than maps&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; Colour handling&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; Plot overlays (e.g. line chart on bar chart)&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; SVG generation is poorly structured - lots of string interpolation. A DSL would be a lot nicer, or something like the approach in &lt;a href="https://github.com/mmmries/chunky_svg/"&gt;Chunky SVG&lt;/a&gt;, which in turn uses &lt;a href="https://github.com/joshnuss/xml_builder"&gt;XML Builder&lt;/a&gt;, but this needs a bit of thought to maintain performance and memory efficiency. XML Builder has implemented the XML generation using IO Lists.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; Benchmarks - particularly for the situation where large datasets are getting updated frequently and served via LiveViews.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;The package can be installed
by adding &lt;code&gt;contex&lt;/code&gt; to your list of dependencies in &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:contex&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.1.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-prior-art-related-material--alternatives" class="anchor" aria-hidden="true" href="#prior-art-related-material--alternatives"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prior Art, Related Material &amp;amp; Alternatives&lt;/h2&gt;
&lt;p&gt;Various details relating to scales, axes and SVG layout have been learnt from the excellent &lt;a href="https://d3js.org/" rel="nofollow"&gt;D3&lt;/a&gt; library by &lt;a href="https://github.com/mbostock"&gt;Mike Bostock&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The theory of translating data into graphics is also very well handled by &lt;a href="https://ggplot2.tidyverse.org/" rel="nofollow"&gt;ggplot2&lt;/a&gt; and various papers by Hadley Wickham, such as &lt;a href="http://vita.had.co.nz/papers/layered-grammar.pdf" rel="nofollow"&gt;A Layered Grammar of Graphics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pure Elixir Alternatives&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/elcritch/plotex"&gt;PlotEx&lt;/a&gt; - has good line &amp;amp; time-series support and more optimised for certain situations.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sasa1977/demo_system/"&gt;Sasa Juric Homebrew&lt;/a&gt; - graph.html.leex has examples of injecting data into SVGs for very specific use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>mindok</author><guid isPermaLink="false">https://github.com/mindok/contex</guid><pubDate>Wed, 29 Jan 2020 00:02:00 GMT</pubDate></item><item><title>rrrene/credo #3 in Elixir, Today</title><link>https://github.com/rrrene/credo</link><description>&lt;p&gt;&lt;i&gt;A static code analysis tool for the Elixir language with a focus on code consistency and teaching.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-credo----" class="anchor" aria-hidden="true" href="#credo----"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credo &lt;a href="https://travis-ci.org/rrrene/credo" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64d050ab8e2f52725d108633cf9ce0e7e5dcc21f/68747470733a2f2f7472617669732d63692e6f72672f727272656e652f637265646f2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rrrene/credo.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://inch-ci.org/github/rrrene/credo" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0a56cd9aad4fe1e5e209f42180c55bdc65be44c2/68747470733a2f2f696e63682d63692e6f72672f6769746875622f727272656e652f637265646f2e7376673f6272616e63683d6d6173746572" alt="Inline docs" data-canonical-src="https://inch-ci.org/github/rrrene/credo.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://hex.pm/packages/credo" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/510855323a37a9b73e092f2c3374abee16347d72/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f762f637265646f2e737667" alt="Hex Version" data-canonical-src="https://img.shields.io/hexpm/v/credo.svg" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://elixirweekly.net" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/731c3c81a3f712b807803e517eeacd430bb8b931/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f66656174757265642d456c697869725765656b6c792d6130353466662e737667" alt="ElixirWeekly" data-canonical-src="https://img.shields.io/badge/featured-ElixirWeekly-a054ff.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Credo is a static code analysis tool for the Elixir language with a focus on teaching and code consistency.&lt;/p&gt;
&lt;p&gt;It implements &lt;a href="https://github.com/rrrene/elixir-style-guide"&gt;its own style guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-what-can-it-do" class="anchor" aria-hidden="true" href="#what-can-it-do"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What can it do?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;credo&lt;/code&gt; can show you refactoring opportunities in your code, complex code fragments, warn you about common mistakes, show inconsistencies in your naming scheme and - if needed - help you enforce a desired coding style.&lt;/p&gt;
&lt;p&gt;If you are a Rubyist it is best described as an opinionated mix between &lt;a href="https://github.com/rrrene/inch"&gt;Inch&lt;/a&gt; and &lt;a href="https://github.com/bbatsov/rubocop"&gt;Rubocop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/a0451c43f301b4d1ab2186e600e552d0f12093cc/68747470733a2f2f7261772e6769746875622e636f6d2f727272656e652f637265646f2f6d61737465722f6173736574732f73637265656e73686f742e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/a0451c43f301b4d1ab2186e600e552d0f12093cc/68747470733a2f2f7261772e6769746875622e636f6d2f727272656e652f637265646f2f6d61737465722f6173736574732f73637265656e73686f742e706e67" alt="Credo" data-canonical-src="https://raw.github.com/rrrene/credo/master/assets/screenshot.png" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;The easiest way to add Credo to your project is by &lt;a href="http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html" rel="nofollow"&gt;using Mix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;:credo&lt;/code&gt; as a dependency to your project's &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:credo&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 1.1.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:dev&lt;/span&gt;, &lt;span class="pl-c1"&gt;:test&lt;/span&gt;], &lt;span class="pl-c1"&gt;runtime:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Usage&lt;/h2&gt;
&lt;p&gt;To run credo in the current project, &lt;strong&gt;just type&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix credo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will run the code analysis and suggest places to edit your code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you want to enforce a style guide&lt;/strong&gt; and need a more traditional linting experience, try&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix credo --strict
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and continue reading in the Configuration section.&lt;/p&gt;
&lt;p&gt;If you want the &lt;strong&gt;list of issues grouped by files&lt;/strong&gt; instead of suggestions just type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix credo list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will get output like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;┃ Refactoring opportunities
┃
┃ [R] ↗ If/else blocks should not have a negated condition in `if`.
┃       lib/phoenix/channel.ex:26 (Phoenix.Channel.subscribe)
┃ [R] → Function is too complex (max ABC is 15, was 43).
┃       lib/phoenix/router.ex:563:8 (Phoenix.Router.add_resources)
┃ [R] → Function is too complex (max ABC is 15, was 16).
┃       lib/phoenix/router/socket.ex:12:12 (Phoenix.Router.Socket.channel)
┃
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you might want to know more about that particular entry, &lt;strong&gt;just copy the filename+line-number combo into the command&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix credo lib/phoenix/channel.ex:26

┃ Phoenix.Channel
┃
┃   [R] Category: refactor
┃    ↗  Priority: medium
┃
┃       If/else blocks should not have a negated condition in `if`.
┃       lib/phoenix/channel.ex:26 (Phoenix.Channel.subscribe)
┃
┃    __ CODE IN QUESTION
┃
┃       if !Socket.authenticated?(socket, channel, topic) do
┃
┃    __ WHY IT MATTERS
┃
┃       An `if` block with a negated condition should not contain an else block.
┃
┃       So while this is fine:
┃
┃           if !allowed? do
┃             raise "Not allowed!"
┃           end
┃
┃       The code in this example ...
┃
┃           if !allowed? do
┃             raise "Not allowed!"
┃           else
┃             proceed_as_planned
┃           end
┃
┃       ... should be refactored to look like this:
┃
┃           if allowed? do
┃             proceed_as_planned
┃           else
┃             raise "Not allowed!"
┃           end
┃
┃       The reason for this is not a technical but a human one. It is easier to wrap
┃       your head around a positive condition and then thinking "and else we do ...".
┃
┃       In the above example raising the error in case something is not allowed
┃       might seem so important to put it first. But when you revisit this code a
┃       while later or have to introduce a colleague to it, you might be surprised
┃       how much clearer things get when the "happy path" comes first.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-configuration-via-credoexs" class="anchor" aria-hidden="true" href="#configuration-via-credoexs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration via .credo.exs&lt;/h3&gt;
&lt;p&gt;Credo is configured via a file called &lt;code&gt;.credo.exs&lt;/code&gt;. This file can live in your project's &lt;code&gt;config/&lt;/code&gt; or root folder, both is fine.&lt;/p&gt;
&lt;p&gt;This also works for umbrella projects, where you can have individual &lt;code&gt;.credo.exs&lt;/code&gt; files for each app or a global one in the umbrella's &lt;code&gt;config/&lt;/code&gt; or root folder.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/.credo.exs&lt;/span&gt;
%{
  &lt;span class="pl-c1"&gt;configs:&lt;/span&gt; [
    %{
      &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;files:&lt;/span&gt; %{
        &lt;span class="pl-c1"&gt;included:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lib/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;src/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;web/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;apps/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
        &lt;span class="pl-c1"&gt;excluded:&lt;/span&gt; []
      },
      &lt;span class="pl-c1"&gt;checks:&lt;/span&gt; [
        {&lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Check&lt;/span&gt;.&lt;span class="pl-en"&gt;Consistency&lt;/span&gt;.&lt;span class="pl-en"&gt;TabsOrSpaces&lt;/span&gt;},

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For some checks, like AliasUsage, you can only customize the priority&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Priority values are: `low, normal, high, higher`&lt;/span&gt;
        {&lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Check&lt;/span&gt;.&lt;span class="pl-en"&gt;Design&lt;/span&gt;.&lt;span class="pl-en"&gt;AliasUsage&lt;/span&gt;, &lt;span class="pl-c1"&gt;priority:&lt;/span&gt; &lt;span class="pl-c1"&gt;:low&lt;/span&gt;},

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For others you can also set parameters&lt;/span&gt;
        {&lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Check&lt;/span&gt;.&lt;span class="pl-en"&gt;Readability&lt;/span&gt;.&lt;span class="pl-en"&gt;MaxLineLength&lt;/span&gt;, &lt;span class="pl-c1"&gt;priority:&lt;/span&gt; &lt;span class="pl-c1"&gt;:low&lt;/span&gt;, &lt;span class="pl-c1"&gt;max_length:&lt;/span&gt; &lt;span class="pl-c1"&gt;80&lt;/span&gt;},

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; You can also customize the exit_status of each check.&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If you don't want TODO comments to cause `mix credo` to fail, just&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; set this value to 0 (zero).&lt;/span&gt;
        {&lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Check&lt;/span&gt;.&lt;span class="pl-en"&gt;Design&lt;/span&gt;.&lt;span class="pl-en"&gt;TagTODO&lt;/span&gt;, &lt;span class="pl-c1"&gt;exit_status:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;},

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To deactivate a check:&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Put `false` as second element:&lt;/span&gt;
        {&lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Check&lt;/span&gt;.&lt;span class="pl-en"&gt;Design&lt;/span&gt;.&lt;span class="pl-en"&gt;TagFIXME&lt;/span&gt;, &lt;span class="pl-c1"&gt;false&lt;/span&gt;},

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; ... several checks omitted for readability ...&lt;/span&gt;
      ]
    }
  ]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mix credo --config-name &amp;lt;NAME_OF_CONFIG&amp;gt;&lt;/code&gt; allows you to use a specific config (instead of &lt;code&gt;default&lt;/code&gt;) inside a config file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix credo --config-file &amp;lt;PATH_TO_CONFIG_FILE&amp;gt;&lt;/code&gt; let's you use a specific config file.&lt;/p&gt;
&lt;p&gt;Finally, you can use &lt;code&gt;mix credo gen.config&lt;/code&gt; to generate a complete example configuration.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-inline-configuration-via-config-comments" class="anchor" aria-hidden="true" href="#inline-configuration-via-config-comments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Inline Configuration via Config Comments&lt;/h3&gt;
&lt;p&gt;Users of Credo can now disable individual lines or files for all or just
specific checks.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;do_stuff&lt;/span&gt;() &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; credo:disable-for-next-line&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.inspect {&lt;span class="pl-c1"&gt;:we_want_this_inspect_in_production!&lt;/span&gt;}
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are four config comments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# credo:disable-for-this-file&lt;/code&gt; - to disable for the entire file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# credo:disable-for-next-line&lt;/code&gt; - to disable for the next line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# credo:disable-for-previous-line&lt;/code&gt; - to disable for the previous line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# credo:disable-for-lines:&amp;lt;count&amp;gt;&lt;/code&gt; - to disable for the given number of lines (negative for previous lines)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these can also take the name of the check you want to disable:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;my_fun&lt;/span&gt;() &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; credo:disable-for-next-line Credo.Check.Warning.IoInspect&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.inspect {&lt;span class="pl-c1"&gt;:we_want_this_inspect_in_production!&lt;/span&gt;}
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, you can put a regular expression (&lt;code&gt;/.+/&lt;/code&gt;) instead of a check name to disable multiple checks (or if you do not want to type out the checks):&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;my_fun&lt;/span&gt;() &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; credo:disable-for-next-line /\.Warning\./&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.inspect {&lt;span class="pl-c1"&gt;:we_want_this_inspect_in_production!&lt;/span&gt;}
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-exit-status" class="anchor" aria-hidden="true" href="#exit-status"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exit Status&lt;/h2&gt;
&lt;p&gt;Credo fails with an exit status != 0 if it shows any issues. This enables shell based pipeline workflows (e.g. on CI systems) which test Credo compliance.&lt;/p&gt;
&lt;p&gt;The exit status of each check is used to construct a bit map of the types of
issues which were encountered by or-ing them together to produce the final
result:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Bitwise&lt;/span&gt;

issues
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.map(&lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt;.exit_status))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.reduce(&lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;|||&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;2&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way you can reason about the encountered issues right from the exit status.&lt;/p&gt;
&lt;p&gt;Default values for the checks are based on their category:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;consistency:  1
design:       2
readability:  4
refactor:     8
warning:     16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So an exit status of 12 tells you that you have only Readability Issues and Refactoring Opportunities, but e.g. no Warnings.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commands&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-suggest-default-command" class="anchor" aria-hidden="true" href="#suggest-default-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;suggest (default command)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;suggest&lt;/code&gt; is the default command of Credo. It suggests issues to fix in your code, but it cuts the list to a digestable count. If you want to see the full list, use the &lt;code&gt;--all&lt;/code&gt;  switch.&lt;/p&gt;
&lt;p&gt;Example usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix credo                         # display standard report
$ mix credo suggest                 # same thing, since it's the default command
$ mix credo --all --format=json     # include low priority issues, output as JSON

$ mix credo suggest --help          # more options
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-list" class="anchor" aria-hidden="true" href="#list"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;list&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; also suggests issues, but it groups them by file and does NOT cut the list to a certain count.&lt;/p&gt;
&lt;p&gt;Example usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix credo list                      # show issues grouped by file
$ mix credo list --format=oneline     # show issues grouped by file, one issue per line
$ mix credo list --format=oneline -a  # same thing, include low priority issues

$ mix credo list --help               # more options
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-explain" class="anchor" aria-hidden="true" href="#explain"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;explain&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;explain&lt;/code&gt; allows you to dig deeper into an issue, by showing you details about the issue and the reasoning by it being reported. To be convenient, you can just copy-paste the &lt;code&gt;filename:line_number:column&lt;/code&gt; string from the report behind the Credo command to check it out.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Credits:&lt;/em&gt; This is inspired by how you can snap the info from failed tests behind &lt;code&gt;mix test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix credo lib/my_app/server.ex:10:24          # show explanation for the issue
$ mix credo explain lib/my_app/server.ex:10:24  # same thing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are no additional options.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-categories" class="anchor" aria-hidden="true" href="#categories"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;categories&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;categories&lt;/code&gt; shows you all issue categories and explains their semantics.&lt;/p&gt;
&lt;p&gt;There are no additional options.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-info" class="anchor" aria-hidden="true" href="#info"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;info&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;info&lt;/code&gt; shows you information relevant to investigating errors and submitting bug reports.&lt;/p&gt;
&lt;p&gt;Example usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix credo info
$ mix credo info --verbose
$ mix credo info --verbose --format=json
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a id="user-content-command-line-options" class="anchor" aria-hidden="true" href="#command-line-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Command line options&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-output-formats" class="anchor" aria-hidden="true" href="#output-formats"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Output Formats&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;--format&lt;/code&gt; to format the output in one of the following formats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--format=flycheck&lt;/code&gt; for &lt;a href="http://www.flycheck.org/" rel="nofollow"&gt;Flycheck&lt;/a&gt; output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--format=json&lt;/code&gt; for &lt;a href="https://www.json.org/" rel="nofollow"&gt;JSON&lt;/a&gt; output&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-only-run-some-checks" class="anchor" aria-hidden="true" href="#only-run-some-checks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Only run some checks&lt;/h3&gt;
&lt;p&gt;To run only a subset of checks, you can use the &lt;code&gt;--checks&lt;/code&gt; or the &lt;code&gt;-c&lt;/code&gt; alias (also aliased as &lt;code&gt;--only&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to only run the Readability checks, use:&lt;/span&gt;

$ mix credo --only readability

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to only run Readability checks and Warnings, use:&lt;/span&gt;

$ mix credo --only readability,warning&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second example illustrates how the command takes a comma-separated list. All commands matching &lt;strong&gt;any&lt;/strong&gt; of the passed items will be run.&lt;/p&gt;
&lt;p&gt;You can use partial names to quickly run checks. &lt;code&gt;mix credo --only todo&lt;/code&gt; will show all &lt;code&gt;# TODO&lt;/code&gt; comments since &lt;code&gt;todo&lt;/code&gt; will match Credo.Check.Design.Tag&lt;strong&gt;TODO&lt;/strong&gt;. &lt;code&gt;mix credo --only inspect&lt;/code&gt; will show you all calls to &lt;code&gt;IO.inspect&lt;/code&gt; since it matches Credo.Check.Warning.Io&lt;strong&gt;Inspect&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-ignore-some-checks" class="anchor" aria-hidden="true" href="#ignore-some-checks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ignore some checks&lt;/h3&gt;
&lt;p&gt;To ignore selected checks, you can use the &lt;code&gt;--ignore-checks&lt;/code&gt; or the &lt;code&gt;-i&lt;/code&gt; alias (also aliased as &lt;code&gt;--ignore&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to ignore all Readability checks, use:&lt;/span&gt;

$ mix credo --ignore readability

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; to ignore all Readability checks and the DuplicatedCode check, use:&lt;/span&gt;

$ mix credo --ignore readability,duplicated&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second example illustrates how the command takes a comma-separated list. All commands matching any of the passed items will be ignored.&lt;/p&gt;
&lt;p&gt;You can use partial names to quickly exclude checks. &lt;code&gt;mix credo --ignore nameredec&lt;/code&gt; will exclude all checks for variables/parameters having the same name as declared functions by matching Credo.Check.Warning.&lt;strong&gt;NameRedeclarationBy...&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-parsing-source-from-stdin" class="anchor" aria-hidden="true" href="#parsing-source-from-stdin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Parsing source from STDIN&lt;/h3&gt;
&lt;p&gt;You can also use Credo to parse source that has been piped directly into it.
This is especially useful when integrating with external editors. You can use this feature by passing the &lt;code&gt;--read-from-stdin&lt;/code&gt; option as follows:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ &lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;IO.puts("hello world");&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; mix credo --format=flycheck --read-from-stdin
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; stdin:1: C: There is no whitespace around parentheses/brackets most of the time, but here there is.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the origin if the source is coming annotated as &lt;code&gt;stdin&lt;/code&gt;, you can change this annotation by passing it along after option like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ &lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;IO.puts("hello world");&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; mix credo --format=flycheck --read-from-stdin /path/representing/the_current/source.ex
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; /path/representing/the_current/source.ex:1: C: There is no whitespace around parentheses/brackets most of the time, but here there is.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do note with the passed option as filename is a stub that is just used to prefix the error and so certain editors can annotate the original file.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-using-credo-as-stand-alone" class="anchor" aria-hidden="true" href="#using-credo-as-stand-alone"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Credo as stand alone&lt;/h3&gt;
&lt;p&gt;If you do not want or are not allowed to include Credo in the current project you can also install it as an archive. For this, you also need to install &lt;a href="https://github.com/rrrene/bunt"&gt;bunt&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone git@github.com:rrrene/bunt.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; bunt
mix archive.build
mix archive.install
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; -
git clone git@github.com:rrrene/credo.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; credo
mix deps.get
mix archive.build
mix archive.install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; You have to install &lt;code&gt;bunt&lt;/code&gt; as well:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git clone https://github.com/rrrene/bunt
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; bunt
mix archive.build
mix archive.install&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will now be able to invoke credo as usual through Mix with &lt;code&gt;mix credo&lt;/code&gt;. This option is especially handy so credo can be used by external editors.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-show-code-snippets-in-the-output" class="anchor" aria-hidden="true" href="#show-code-snippets-in-the-output"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Show code snippets in the output&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;--verbose&lt;/code&gt; switch to include the code snippets in question in the output.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-show-all-issues-including-low-priority-ones" class="anchor" aria-hidden="true" href="#show-all-issues-including-low-priority-ones"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Show all issues including low priority ones&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;--all-priorities&lt;/code&gt; switch to include low priority issues in the output (aliased as &lt;code&gt;--strict&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-issues" class="anchor" aria-hidden="true" href="#issues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Issues&lt;/h2&gt;
&lt;p&gt;Like any code linter, Credo reports issues. Contrary to many other linters these issues are not created equal. Each issue is assigned a priority, based on a base priority set by the config and a dynamic component based on violation severity and location in the source code.&lt;/p&gt;
&lt;p&gt;These priorities hint at the importance of each issue and are displayed in the command-line interface using arrows: ↑ ↗ → ↘ ↓&lt;/p&gt;
&lt;p&gt;By default, only issues with a positive priority are part of the report (↑ ↗ →).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-checks" class="anchor" aria-hidden="true" href="#checks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Checks&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-consistency" class="anchor" aria-hidden="true" href="#consistency"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Consistency&lt;/h3&gt;
&lt;p&gt;These checks take a look at your code and ensure a consistent coding style. Using tabs or spaces? Both is fine, just don't mix them or Credo will tell you.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-readability" class="anchor" aria-hidden="true" href="#readability"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Readability&lt;/h3&gt;
&lt;p&gt;Readability checks do not concern themselves with the technical correctness of your code, but how easy it is to digest.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-refactoring-opportunities" class="anchor" aria-hidden="true" href="#refactoring-opportunities"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Refactoring Opportunities&lt;/h3&gt;
&lt;p&gt;The Refactor checks show you opportunities to avoid future problems and technical debt.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-software-design" class="anchor" aria-hidden="true" href="#software-design"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Software Design&lt;/h3&gt;
&lt;p&gt;While refactor checks show you possible problems, these checks try to highlight possibilities, like - potentially intended - duplicated code or &lt;code&gt;TODO:&lt;/code&gt; and &lt;code&gt;FIXME&lt;/code&gt; annotations.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-warnings" class="anchor" aria-hidden="true" href="#warnings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Warnings&lt;/h3&gt;
&lt;p&gt;These checks warn you about things that are potentially dangerous, like a missed call to &lt;code&gt;IEx.pry&lt;/code&gt; or a call to &lt;code&gt;String.downcase&lt;/code&gt; without saving the result.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-plugins" class="anchor" aria-hidden="true" href="#plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugins&lt;/h2&gt;
&lt;p&gt;Plugins can provide additional functionality to Credo.&lt;/p&gt;
&lt;p&gt;This functionality can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding new commands&lt;/li&gt;
&lt;li&gt;overriding existing commands (e.g. implement better Explain command)&lt;/li&gt;
&lt;li&gt;modifying the default config&lt;/li&gt;
&lt;li&gt;adding checks, which can add their own issues, with their own categories,&lt;/li&gt;
&lt;li&gt;prepending/appending steps to Credo's execution process&lt;/li&gt;
&lt;li&gt;adding new CLI options&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-using-plugins" class="anchor" aria-hidden="true" href="#using-plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using plugins&lt;/h3&gt;
&lt;p&gt;Plugins are just modules. Most of the time, a Credo plugin will be published on Hex. You include it as a dependency:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:credo_demo_plugin&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.1.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plugins, like checks, are just modules and functions.
They can be included by listing them under the &lt;code&gt;:plugins&lt;/code&gt; field in Credo's configuration file.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{
  &lt;span class="pl-c1"&gt;configs:&lt;/span&gt; [
    %{
      &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;plugins:&lt;/span&gt; [
        {&lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;, []}
      ]
    }
  ]
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-configuring-plugins" class="anchor" aria-hidden="true" href="#configuring-plugins"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuring plugins&lt;/h3&gt;
&lt;p&gt;Plugins can be configured via params, just like checks.
Each entry consists of a two-element tuple: the plugin's module and a keyword list of parameters, which can be used to configure the plugin itself.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{
  &lt;span class="pl-c1"&gt;configs:&lt;/span&gt; [
    %{
      &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;plugins:&lt;/span&gt; [
        {&lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;, [&lt;span class="pl-c1"&gt;castle:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Grayskull&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]}
      ]
    }
  ]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plugins can be deactivated by setting the second tuple element to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{
  &lt;span class="pl-c1"&gt;configs:&lt;/span&gt; [
    %{
      &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;plugins:&lt;/span&gt; [
        {&lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;, []},
        {&lt;span class="pl-en"&gt;CredoYetAnotherPlugin&lt;/span&gt;, &lt;span class="pl-c1"&gt;false&lt;/span&gt;} &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; &amp;lt;-- don't load this for now&lt;/span&gt;
      ]
    }
  ]
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-creating-a-plugin" class="anchor" aria-hidden="true" href="#creating-a-plugin"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Creating a plugin&lt;/h3&gt;
&lt;p&gt;A plugin is basically just a module that provides an &lt;code&gt;init/1&lt;/code&gt; callback.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(exec) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; but what do we do here??&lt;/span&gt;
    exec
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Credo.Plugin&lt;/code&gt; module provides a number of functions for extending Credo's core features.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@config_file&lt;/span&gt; &lt;span class="pl-en"&gt;File&lt;/span&gt;.read!(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.credo.exs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(exec) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    exec
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; register_default_config(&lt;span class="pl-smi"&gt;@config_file&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; register_command(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;demo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;.&lt;span class="pl-en"&gt;DemoCommand&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; register_cli_switch(&lt;span class="pl-c1"&gt;:castle&lt;/span&gt;, &lt;span class="pl-c1"&gt;:string&lt;/span&gt;, &lt;span class="pl-c1"&gt;:X&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; append_task(&lt;span class="pl-c1"&gt;:convert_cli_options_to_config&lt;/span&gt;, &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;.&lt;span class="pl-en"&gt;ConvertCliSwitchesToPluginParams&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; prepend_task(&lt;span class="pl-c1"&gt;:set_default_command&lt;/span&gt;, &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;.&lt;span class="pl-en"&gt;SetDemoAsDefaultCommand&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-add-new-commands" class="anchor" aria-hidden="true" href="#add-new-commands"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add new commands&lt;/h3&gt;
&lt;p&gt;Commands are just modules with a call function and adding new commands is easy.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; credo_demo_plugin.ex&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(exec) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    register_command(exec, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;demo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;.&lt;span class="pl-en"&gt;DemoCommand&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; credo_demo_plugin/demo_command.ex&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;CredoDemoPlugin&lt;/span&gt;.&lt;span class="pl-en"&gt;DemoCommand&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;CLI&lt;/span&gt;.&lt;span class="pl-en"&gt;Output&lt;/span&gt;.&lt;span class="pl-en"&gt;UI&lt;/span&gt;
  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Execution&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;call&lt;/span&gt;(exec, _) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    castle &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Execution&lt;/span&gt;.get_plugin_param(exec, &lt;span class="pl-en"&gt;CredoPlus&lt;/span&gt;, &lt;span class="pl-c1"&gt;:castle&lt;/span&gt;)

    &lt;span class="pl-en"&gt;UI&lt;/span&gt;.puts(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;By the power of &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;castle&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

    exec
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Users can use this command by typing&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ mix credo demo
By the power of &lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-override-an-existing-command" class="anchor" aria-hidden="true" href="#override-an-existing-command"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Override an existing command&lt;/h3&gt;
&lt;p&gt;Since commands are just modules with a call function, overriding existing commands is easy.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(exec) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    register_command(exec, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;explain&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;.&lt;span class="pl-en"&gt;MyBetterExplainCommand&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example would have the effect that typing &lt;code&gt;mix credo lib/my_file.ex:42&lt;/code&gt; would no longer run the built-in &lt;code&gt;Explain&lt;/code&gt; command, but rather our plugin's &lt;code&gt;MyBetterExplain&lt;/code&gt; command.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-modifying-the-default-config" class="anchor" aria-hidden="true" href="#modifying-the-default-config"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modifying the default config&lt;/h3&gt;
&lt;p&gt;Plugins can add default configuration to Credo.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(exec) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    register_default_config(exec, &lt;span class="pl-smi"&gt;@config_file&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The configuration's loading order is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Credo's own default config&lt;/li&gt;
&lt;li&gt;Default configs added by plugins&lt;/li&gt;
&lt;li&gt;Config files in the user's file system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Config values set in later stages are overwriting values from earlier ones.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-adding-checks" class="anchor" aria-hidden="true" href="#adding-checks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding checks&lt;/h3&gt;
&lt;p&gt;To add checks from your plugin, simply extend the default config ...&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; credo_demo_plugin.ex&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@config_file&lt;/span&gt; &lt;span class="pl-en"&gt;File&lt;/span&gt;.read!(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;.credo.exs&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(exec) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    register_default_config(exec, &lt;span class="pl-smi"&gt;@config_file&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and then add the new checks there:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; .credo.exs&lt;/span&gt;
%{
  &lt;span class="pl-c1"&gt;configs:&lt;/span&gt; [
    %{
      &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;checks:&lt;/span&gt; [
        {&lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;.&lt;span class="pl-en"&gt;MyNewCheck&lt;/span&gt;, []}
      ]
    }
  ]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we are extending the default config, we can also deactivate checks and "replace" them with new ones:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; .credo.exs&lt;/span&gt;
%{
  &lt;span class="pl-c1"&gt;configs:&lt;/span&gt; [
    %{
      &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;default&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="pl-c1"&gt;checks:&lt;/span&gt; [
        {&lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Check&lt;/span&gt;.&lt;span class="pl-en"&gt;Readability&lt;/span&gt;.&lt;span class="pl-en"&gt;ModuleDoc&lt;/span&gt;, &lt;span class="pl-c1"&gt;false&lt;/span&gt;},
        {&lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;.&lt;span class="pl-en"&gt;BetterModuleDoc&lt;/span&gt;, []}
      ]
    }
  ]
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-inserting-tasks-into-credos-execution-process" class="anchor" aria-hidden="true" href="#inserting-tasks-into-credos-execution-process"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Inserting tasks into Credo's execution process&lt;/h3&gt;
&lt;p&gt;Credo's execution process consists of several steps, each with a set of tasks, which you can hook into.&lt;/p&gt;
&lt;p&gt;Prepending or appending tasks to these steps is easy:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; credo_demo_plugin.ex&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(exec) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    prepend_task(exec, &lt;span class="pl-c1"&gt;:set_default_command&lt;/span&gt;, &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;.&lt;span class="pl-en"&gt;SetDemoAsDefaultCommand&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; credo_demo_plugin/set_demo_as_default_command.ex&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;CredoPlus&lt;/span&gt;.&lt;span class="pl-en"&gt;SetDemoAsDefaultCommand&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Execution&lt;/span&gt;.&lt;span class="pl-en"&gt;Task&lt;/span&gt;

  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;CLI&lt;/span&gt;.&lt;span class="pl-en"&gt;Options&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;call&lt;/span&gt;(exec, _opts) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    set_command(exec, exec.cli_options.command &lt;span class="pl-k"&gt;||&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;demo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;set_command&lt;/span&gt;(exec, command) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    %&lt;span class="pl-en"&gt;Execution&lt;/span&gt;{exec &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;cli_options:&lt;/span&gt; %&lt;span class="pl-en"&gt;Options&lt;/span&gt;{exec.cli_options &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;command:&lt;/span&gt; command}}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example would have the effect that typing &lt;code&gt;mix credo&lt;/code&gt; would no longer run the built-in &lt;code&gt;Suggest&lt;/code&gt; command, but rather our plugin's &lt;code&gt;Demo&lt;/code&gt; command.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-adding-new-cli-options" class="anchor" aria-hidden="true" href="#adding-new-cli-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding new CLI options&lt;/h3&gt;
&lt;p&gt;We saw how plugins can be configured via params in the "Configuring plugins" section:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;{&lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt;, [&lt;span class="pl-c1"&gt;castle:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Grayskull&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what about those situations where we want to be able to configure things on-the-fly via the CLI?
Plugins should be able to provide custom CLI options as well, so we can do something like:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ mix credo --castle Winterfell
Unknown switch: --castle&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Registering a custom CLI switch is easy:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(exec) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    register_cli_switch(exec, &lt;span class="pl-c1"&gt;:castle&lt;/span&gt;, &lt;span class="pl-c1"&gt;:string&lt;/span&gt;, &lt;span class="pl-c1"&gt;:X&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, having a CLI option is not worth much if we can not utilize it.
This is why every registered CLI switch is automatically converted into a plugin param of the same name.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;$ mix credo --castle Winterfell
By the power of Winterfell&lt;span class="pl-k"&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plugin authors can also provide a function to control the plugin param's name and value more granularly:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;CredoDemoPlugin&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Credo&lt;/span&gt;.&lt;span class="pl-en"&gt;Plugin&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(exec) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    register_cli_switch(exec, &lt;span class="pl-c1"&gt;:kastle&lt;/span&gt;, &lt;span class="pl-c1"&gt;:string&lt;/span&gt;, &lt;span class="pl-c1"&gt;:K&lt;/span&gt;, &lt;span class="pl-k"&gt;fn&lt;/span&gt;(switch_value) &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
      {&lt;span class="pl-c1"&gt;:castle&lt;/span&gt;, switch_value}
    &lt;span class="pl-k"&gt;end&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-integrations" class="anchor" aria-hidden="true" href="#integrations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integrations&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-ideeditor" class="anchor" aria-hidden="true" href="#ideeditor"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IDE/Editor&lt;/h3&gt;
&lt;p&gt;Some IDEs and editors are able to run Credo in the background and mark issues inline.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/KronicDeth/intellij-elixir#credo"&gt;IntelliJ Elixir&lt;/a&gt; - Elixir plugin for JetBrains IDEs (IntelliJ IDEA, Rubymine, PHPStorm, PyCharm, etc)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://atom.io/packages/linter-elixir-credo" rel="nofollow"&gt;linter-elixir-credo&lt;/a&gt; - Package for Atom editor (by @smeevil)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-automated-code-review" class="anchor" aria-hidden="true" href="#automated-code-review"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Automated Code Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codacy.com/" rel="nofollow"&gt;Codacy&lt;/a&gt; - checks your code from style to security, duplication, complexity, and also integrates with coverage.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stickler-ci.com/" rel="nofollow"&gt;Stickler CI&lt;/a&gt; - checks your code for style and best practices across your entire stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://github.com/rrrene/credo/fork"&gt;Fork it!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Commit your changes (&lt;code&gt;git commit -am 'Add some feature'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create new Pull Request&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-author" class="anchor" aria-hidden="true" href="#author"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Author&lt;/h2&gt;
&lt;p&gt;René Föhring (@rrrene)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Credo is released under the MIT License. See the LICENSE file for further
details.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>rrrene</author><guid isPermaLink="false">https://github.com/rrrene/credo</guid><pubDate>Wed, 29 Jan 2020 00:03:00 GMT</pubDate></item><item><title>sheharyarn/memento #4 in Elixir, Today</title><link>https://github.com/sheharyarn/memento</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;p&gt;No README was found for this project.&lt;/p&gt;</description><author>sheharyarn</author><guid isPermaLink="false">https://github.com/sheharyarn/memento</guid><pubDate>Wed, 29 Jan 2020 00:04:00 GMT</pubDate></item><item><title>elixir-plug/plug #5 in Elixir, Today</title><link>https://github.com/elixir-plug/plug</link><description>&lt;p&gt;&lt;i&gt;A specification and conveniences for composable modules between web applications&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-plug" class="anchor" aria-hidden="true" href="#plug"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plug&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/elixir-plug/plug" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/715503bee5bb605c2252b0a01fd08f1f018437c7/68747470733a2f2f7472617669732d63692e6f72672f656c697869722d706c75672f706c75672e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/elixir-plug/plug.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://inch-ci.org/github/elixir-plug/plug" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b6ad29387b84a95804e3672c0d038ae989cf142c/68747470733a2f2f696e63682d63692e6f72672f6769746875622f656c697869722d706c75672f706c75672e7376673f6272616e63683d6d6173746572" alt="Inline docs" data-canonical-src="https://inch-ci.org/github/elixir-plug/plug.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Plug is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A specification for composable modules between web applications&lt;/li&gt;
&lt;li&gt;Connection adapters for different web servers in the Erlang VM&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://hexdocs.pm/plug/" rel="nofollow"&gt;Documentation for Plug is available online&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;In order to use Plug, you need a webserver and its bindings for Plug. The Cowboy webserver is the most common one, which can be installed by adding &lt;code&gt;plug_cowboy&lt;/code&gt; as a dependency to your &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:plug_cowboy&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 2.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-hello-world" class="anchor" aria-hidden="true" href="#hello-world"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hello world&lt;/h2&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyPlug&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Conn&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(options) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; initialize options&lt;/span&gt;
    options
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;call&lt;/span&gt;(conn, _opts) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    conn
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; put_resp_content_type(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;text/plain&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; send_resp(&lt;span class="pl-c1"&gt;200&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The snippet above shows a very simple example on how to use Plug. Save that snippet to a file and run it inside the plug application with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ iex -S mix
iex&amp;gt; c "path/to/file.ex"
[MyPlug]
iex&amp;gt; {:ok, _} = Plug.Cowboy.http MyPlug, []
{:ok, #PID&amp;lt;...&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Access &lt;a href="http://localhost:4000/" rel="nofollow"&gt;http://localhost:4000/&lt;/a&gt; and we are done! For now, we have directly started the server in our terminal but, for production deployments, you likely want to start it in your supervision tree. See the &lt;a href="#supervised-handlers"&gt;Supervised handlers&lt;/a&gt; section next.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supervised-handlers" class="anchor" aria-hidden="true" href="#supervised-handlers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supervised handlers&lt;/h2&gt;
&lt;p&gt;On a production system, you likely want to start your Plug pipeline under your application's supervision tree. Start a new Elixir project with the &lt;code&gt;--sup&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mix new my_app --sup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then update &lt;code&gt;lib/my_app/application.ex&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; See https://hexdocs.pm/elixir/Application.html&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; for more information on OTP Applications&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc false&lt;/span&gt;

  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;start&lt;/span&gt;(_type, _args) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; List all child processes to be supervised&lt;/span&gt;
    children &lt;span class="pl-k"&gt;=&lt;/span&gt; [
      {&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Cowboy&lt;/span&gt;, &lt;span class="pl-c1"&gt;scheme:&lt;/span&gt; &lt;span class="pl-c1"&gt;:http&lt;/span&gt;, &lt;span class="pl-c1"&gt;plug:&lt;/span&gt; &lt;span class="pl-en"&gt;MyPlug&lt;/span&gt;, &lt;span class="pl-c1"&gt;options:&lt;/span&gt; [&lt;span class="pl-c1"&gt;port:&lt;/span&gt; &lt;span class="pl-c1"&gt;4001&lt;/span&gt;]}
    ]

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; See https://hexdocs.pm/elixir/Supervisor.html&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; for other strategies and supported options&lt;/span&gt;
    opts &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;strategy:&lt;/span&gt; &lt;span class="pl-c1"&gt;:one_for_one&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;]
    &lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;.start_link(children, opts)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now run &lt;code&gt;mix run --no-halt&lt;/code&gt; and it will start your application with a web server running at &lt;code&gt;localhost:4001&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-supported-versions" class="anchor" aria-hidden="true" href="#supported-versions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supported Versions&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Branch&lt;/th&gt;
&lt;th&gt;Support&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;v1.8&lt;/td&gt;
&lt;td&gt;Bug fixes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.7&lt;/td&gt;
&lt;td&gt;Security patches only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.6&lt;/td&gt;
&lt;td&gt;Security patches only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.5&lt;/td&gt;
&lt;td&gt;Security patches only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.4&lt;/td&gt;
&lt;td&gt;Unsupported from 12/2018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.3&lt;/td&gt;
&lt;td&gt;Unsupported from 12/2018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.2&lt;/td&gt;
&lt;td&gt;Unsupported from 06/2018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.1&lt;/td&gt;
&lt;td&gt;Unsupported from 01/2018&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.0&lt;/td&gt;
&lt;td&gt;Unsupported from 05/2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a id="user-content-the-plugconn-struct" class="anchor" aria-hidden="true" href="#the-plugconn-struct"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The &lt;code&gt;Plug.Conn&lt;/code&gt; struct&lt;/h2&gt;
&lt;p&gt;In the hello world example, we defined our first plug. What is a plug after all?&lt;/p&gt;
&lt;p&gt;A plug takes two shapes. A function plug receives a connection and a set of options as arguments and returns the connection:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;hello_world_plug&lt;/span&gt;(conn, _opts) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  conn
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; put_resp_content_type(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;text/plain&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; send_resp(&lt;span class="pl-c1"&gt;200&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A module plug implements an &lt;code&gt;init/1&lt;/code&gt; function to initialize the options and a &lt;code&gt;call/2&lt;/code&gt; function which receives the connection and initialized options and returns the connection:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyPlug&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;([]), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;call&lt;/span&gt;(conn, _opts), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; conn
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As per the specification above, a connection is represented by the &lt;code&gt;Plug.Conn&lt;/code&gt; struct:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Conn&lt;/span&gt;{&lt;span class="pl-c1"&gt;host:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;www.example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
           &lt;span class="pl-c1"&gt;path_info:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
           &lt;span class="pl-k"&gt;..&lt;/span&gt;.}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Data can be read directly from the connection and also pattern matched on. Manipulating the connection often happens with the use of the functions defined in the &lt;code&gt;Plug.Conn&lt;/code&gt; module. In our example, both &lt;code&gt;put_resp_content_type/2&lt;/code&gt; and &lt;code&gt;send_resp/3&lt;/code&gt; are defined in &lt;code&gt;Plug.Conn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remember that, as everything else in Elixir, &lt;strong&gt;a connection is immutable&lt;/strong&gt;, so every manipulation returns a new copy of the connection:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;conn &lt;span class="pl-k"&gt;=&lt;/span&gt; put_resp_content_type(conn, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;text/plain&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
conn &lt;span class="pl-k"&gt;=&lt;/span&gt; send_resp(conn, &lt;span class="pl-c1"&gt;200&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ok&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
conn&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, keep in mind that a connection is a &lt;strong&gt;direct interface to the underlying web server&lt;/strong&gt;. When you call &lt;code&gt;send_resp/3&lt;/code&gt; above, it will immediately send the given status and body back to the client. This makes features like streaming a breeze to work with.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-plugrouter" class="anchor" aria-hidden="true" href="#plugrouter"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Plug.Router&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To write a "router" plug that dispatches based on the path and method of incoming requests, Plug provides &lt;code&gt;Plug.Router&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyRouter&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Router&lt;/span&gt;

  plug &lt;span class="pl-c1"&gt;:match&lt;/span&gt;
  plug &lt;span class="pl-c1"&gt;:dispatch&lt;/span&gt;

  get &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    send_resp(conn, &lt;span class="pl-c1"&gt;200&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  forward &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/users&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;to:&lt;/span&gt; &lt;span class="pl-en"&gt;UsersRouter&lt;/span&gt;

  match _ &lt;span class="pl-k"&gt;do&lt;/span&gt;
    send_resp(conn, &lt;span class="pl-c1"&gt;404&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;oops&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The router is a plug. Not only that: it contains its own plug pipeline too. The example above says that when the router is invoked, it will invoke the &lt;code&gt;:match&lt;/code&gt; plug, represented by a local (imported) &lt;code&gt;match/2&lt;/code&gt; function, and then call the &lt;code&gt;:dispatch&lt;/code&gt; plug which will execute the matched code.&lt;/p&gt;
&lt;p&gt;Plug ships with many plugs that you can add to the router plug pipeline, allowing you to plug something before a route matches or before a route is dispatched to. For example, if you want to add logging to the router, just do:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;plug &lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Logger&lt;/span&gt;
plug &lt;span class="pl-c1"&gt;:match&lt;/span&gt;
plug &lt;span class="pl-c1"&gt;:dispatch&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note &lt;code&gt;Plug.Router&lt;/code&gt; compiles all of your routes into a single function and relies on the Erlang VM to optimize the underlying routes into a tree lookup, instead of a linear lookup that would instead match route-per-route. This means route lookups are extremely fast in Plug!&lt;/p&gt;
&lt;p&gt;This also means that a catch all &lt;code&gt;match&lt;/code&gt; block is recommended to be defined as in the example above, otherwise routing fails with a function clause error (as it would in any regular Elixir function).&lt;/p&gt;
&lt;p&gt;Each route needs to return the connection as per the Plug specification. See the &lt;code&gt;Plug.Router&lt;/code&gt; docs for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-testing-plugs" class="anchor" aria-hidden="true" href="#testing-plugs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing plugs&lt;/h2&gt;
&lt;p&gt;Plug ships with a &lt;code&gt;Plug.Test&lt;/code&gt; module that makes testing your plugs easy. Here is how we can test the router from above (or any other plug):&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyPlugTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;ExUnit&lt;/span&gt;.&lt;span class="pl-en"&gt;Case&lt;/span&gt;, &lt;span class="pl-c1"&gt;async:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Test&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@opts&lt;/span&gt; &lt;span class="pl-en"&gt;MyRouter&lt;/span&gt;.init([])

  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;returns hello world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Create a test connection&lt;/span&gt;
    conn &lt;span class="pl-k"&gt;=&lt;/span&gt; conn(&lt;span class="pl-c1"&gt;:get&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Invoke the plug&lt;/span&gt;
    conn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyRouter&lt;/span&gt;.call(conn, &lt;span class="pl-smi"&gt;@opts&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Assert the response and status&lt;/span&gt;
    assert conn.state &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;:sent&lt;/span&gt;
    assert conn.status &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;
    assert conn.resp_body &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-available-plugs" class="anchor" aria-hidden="true" href="#available-plugs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Available plugs&lt;/h2&gt;
&lt;p&gt;This project aims to ship with different plugs that can be re-used across applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt; - adds Cross-Site Request Forgery protection to your application. Typically required if you are using &lt;code&gt;Plug.Session&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.Head&lt;/code&gt; - converts HEAD requests to GET requests;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.Logger&lt;/code&gt; - logs requests;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.MethodOverride&lt;/code&gt; - overrides a request method with one specified in the request parameters;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.Parsers&lt;/code&gt; - responsible for parsing the request body given its content-type;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.RequestId&lt;/code&gt; - sets up a request ID to be used in logs;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.Session&lt;/code&gt; - handles session management and storage;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.SSL&lt;/code&gt; - enforces requests through SSL;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.Static&lt;/code&gt; - serves static files;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.Telemetry&lt;/code&gt; - instruments the plug pipeline with &lt;code&gt;:telemetry&lt;/code&gt; events;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can go into more details about each of them &lt;a href="http://hexdocs.pm/plug/" rel="nofollow"&gt;in our docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-helper-modules" class="anchor" aria-hidden="true" href="#helper-modules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Helper modules&lt;/h2&gt;
&lt;p&gt;Modules that can be used after you use &lt;code&gt;Plug.Router&lt;/code&gt; or &lt;code&gt;Plug.Builder&lt;/code&gt; to help development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Plug.Debugger&lt;/code&gt; - shows a helpful debugging page every time there is a failure in a request;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plug.ErrorHandler&lt;/code&gt; - allows developers to customize error pages in case of crashes instead of sending a blank one;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We welcome everyone to contribute to Plug and help us tackle existing issues!&lt;/p&gt;
&lt;p&gt;Use the &lt;a href="https://github.com/elixir-plug/plug/issues"&gt;issue tracker&lt;/a&gt; for bug reports or feature requests. Open a &lt;a href="https://github.com/elixir-plug/plug/pulls"&gt;pull request&lt;/a&gt; when you are ready to contribute. When submitting a pull request you should not update the &lt;code&gt;CHANGELOG.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are planning to contribute documentation, &lt;a href="https://hexdocs.pm/elixir/writing-documentation.html" rel="nofollow"&gt;please check our best practices for writing documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, remember all interactions in our official spaces follow our &lt;a href="https://github.com/elixir-lang/elixir/blob/master/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;Plug source code is released under Apache License 2.0.
Check LICENSE file for more information.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>elixir-plug</author><guid isPermaLink="false">https://github.com/elixir-plug/plug</guid><pubDate>Wed, 29 Jan 2020 00:05:00 GMT</pubDate></item><item><title>keathley/norm #6 in Elixir, Today</title><link>https://github.com/keathley/norm</link><description>&lt;p&gt;&lt;i&gt;Data specification and generation&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-norm" class="anchor" aria-hidden="true" href="#norm"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Norm&lt;/h1&gt;
&lt;p&gt;Norm is a system for specifying the structure of data. It can be used for
validation and for generation of data. Norm does not provide any set of
predicates and instead allows you to re-use any of your existing
validations.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Norm&lt;/span&gt;

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(&lt;span class="pl-c1"&gt;123&lt;/span&gt;, &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)))
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;123&lt;/span&gt;

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;50&lt;/span&gt;, &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)))
&lt;span class="pl-k"&gt;**&lt;/span&gt; (&lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;MismatchError&lt;/span&gt;) &lt;span class="pl-c1"&gt;val:&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;50&lt;/span&gt; &lt;span class="pl-c1"&gt;fails:&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
    (norm) lib&lt;span class="pl-k"&gt;/&lt;/span&gt;norm.&lt;span class="pl-c1"&gt;ex:&lt;/span&gt;&lt;span class="pl-c1"&gt;44&lt;/span&gt;: &lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;conform!&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;

user_schema &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
  &lt;span class="pl-c1"&gt;user:&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
    &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;()),
    &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;))
  })
})

input &lt;span class="pl-k"&gt;=&lt;/span&gt; %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;30&lt;/span&gt;, &lt;span class="pl-c1"&gt;email:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c@keathley.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(input, user_schema)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;30&lt;/span&gt;}}

user_schema
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;gen&lt;/span&gt;()
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;take&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; [
  %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}},
  %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}},
  %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}
]&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Add &lt;code&gt;norm&lt;/code&gt; to your list of dependencies in &lt;code&gt;mix.exs&lt;/code&gt;. If you'd like to use
Norm's generator capabilities then you'll also need to include StreamData
as a dependency.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:stream_data&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
    {&lt;span class="pl-c1"&gt;:norm&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.9&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-validation-and-conforming-values" class="anchor" aria-hidden="true" href="#validation-and-conforming-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Validation and conforming values&lt;/h2&gt;
&lt;p&gt;Norm validates data by "conforming" the value to a specification. If the
values don't conform then a list of errors is returned. There are
2 functions provided for this &lt;code&gt;conform/2&lt;/code&gt; and &lt;code&gt;conform!/2&lt;/code&gt;. If you need to
return a list of well defined errors then you should use &lt;code&gt;conform/2&lt;/code&gt;.
Otherwise &lt;code&gt;conform!/2&lt;/code&gt; is generally more useful. The input data is
always passed as the 1st argument to &lt;code&gt;conform&lt;/code&gt; so that calls to conform
are easily chainable.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-predicates-and-specs" class="anchor" aria-hidden="true" href="#predicates-and-specs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Predicates and specs&lt;/h3&gt;
&lt;p&gt;Norm does not provide a special set of predicates and instead allows you
to convert any predicate into a spec with the &lt;code&gt;spec/1&lt;/code&gt; macro. Predicates
can be composed together using the &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; keywords. You can also
use anonymous functions to create specs.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;())
&lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;))
&lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-k"&gt;fn&lt;/span&gt; str &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;length&lt;/span&gt;(str) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;end&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The data is always passed as the first argument to your predicate so you
can use predicates with multiple values like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;greater?&lt;/span&gt;(x, y), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; x &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; y
&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(&lt;span class="pl-c1"&gt;10&lt;/span&gt;, &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;greater?&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)))
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;
&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;greater?&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)))
&lt;span class="pl-k"&gt;**&lt;/span&gt; (&lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;MismatchError&lt;/span&gt;) &lt;span class="pl-c1"&gt;val:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-c1"&gt;fails:&lt;/span&gt; &lt;span class="pl-en"&gt;greater?&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)
    (norm) lib&lt;span class="pl-k"&gt;/&lt;/span&gt;norm.&lt;span class="pl-c1"&gt;ex:&lt;/span&gt;&lt;span class="pl-c1"&gt;44&lt;/span&gt;: &lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;conform!&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-tuples-and-atoms" class="anchor" aria-hidden="true" href="#tuples-and-atoms"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuples and atoms&lt;/h3&gt;
&lt;p&gt;Atoms and tuples can be matched without needing to wrap them in a function.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;:atom&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;conform!&lt;/span&gt;(&lt;span class="pl-c1"&gt;:atom&lt;/span&gt;, &lt;span class="pl-c1"&gt;:atom&lt;/span&gt;)

{&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;conform!&lt;/span&gt;({&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;()), &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;())})

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;({&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;:one&lt;/span&gt;, &lt;span class="pl-c1"&gt;:two&lt;/span&gt;})
&lt;span class="pl-k"&gt;**&lt;/span&gt; (&lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;MismatchError&lt;/span&gt;) &lt;span class="pl-c1"&gt;val:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;: &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-c1"&gt;fails:&lt;/span&gt; is &lt;span class="pl-k"&gt;not&lt;/span&gt; an atom.
&lt;span class="pl-c1"&gt;val:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt;: &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c1"&gt;fails:&lt;/span&gt; is &lt;span class="pl-k"&gt;not&lt;/span&gt; an atom.&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because Norm supports matching on bare tuples we can easily validate functions
that return &lt;code&gt;{:ok, term()}&lt;/code&gt; and &lt;code&gt;{:error, term()}&lt;/code&gt; tuples.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; if User.get_name/1 succeeds it returns {:ok, binary()}&lt;/span&gt;
result &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;User&lt;/span&gt;.&lt;span class="pl-en"&gt;get_name&lt;/span&gt;(&lt;span class="pl-c1"&gt;123&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, name} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;conform!&lt;/span&gt;(result, {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;())})&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These specifications can be combined with &lt;code&gt;one_of/1&lt;/code&gt; to create union types.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;result_spec &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;one_of&lt;/span&gt;([
  {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;())},
  {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-k"&gt;fn&lt;/span&gt; _ &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;end&lt;/span&gt;)},
])

{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;alice&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;conform!&lt;/span&gt;(&lt;span class="pl-en"&gt;User&lt;/span&gt;.&lt;span class="pl-en"&gt;get_name&lt;/span&gt;(&lt;span class="pl-c1"&gt;123&lt;/span&gt;), result_spec)
{&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user does not exist&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;conform!&lt;/span&gt;(&lt;span class="pl-en"&gt;User&lt;/span&gt;.&lt;span class="pl-en"&gt;get_name&lt;/span&gt;(&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;42&lt;/span&gt;), result_spec)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-schemas" class="anchor" aria-hidden="true" href="#schemas"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Schemas&lt;/h3&gt;
&lt;p&gt;Norm provides a &lt;code&gt;schema/1&lt;/code&gt; function for specifying maps and structs:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;user_schema &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
  &lt;span class="pl-c1"&gt;user:&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
    &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;()),
    &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;()),
  })
})

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;31&lt;/span&gt;}}, user_schema)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;31&lt;/span&gt;}}

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;31&lt;/span&gt;}}, user_schema)
&lt;span class="pl-k"&gt;**&lt;/span&gt; (&lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;MismatchError&lt;/span&gt;) &lt;span class="pl-k"&gt;in&lt;/span&gt;: &lt;span class="pl-c1"&gt;:user&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;:age&lt;/span&gt; &lt;span class="pl-c1"&gt;val:&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;31&lt;/span&gt; &lt;span class="pl-c1"&gt;fails:&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
    (norm) lib&lt;span class="pl-k"&gt;/&lt;/span&gt;norm.&lt;span class="pl-c1"&gt;ex:&lt;/span&gt;&lt;span class="pl-c1"&gt;44&lt;/span&gt;: &lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;conform!&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Schema's are designed to allow systems to grow over time. They provide this
functionality in two ways. The first is that any unspecified fields in the input
are passed through when conforming the input. The second is that all keys in a
schema are optional. This means that all of these are valid:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;user_schema &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
  &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;()),
  &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;()),
})

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{}, user_schema)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %{}
&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;31&lt;/span&gt;}, user_schema)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %{&lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;31&lt;/span&gt;}
&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;foo:&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt;, &lt;span class="pl-c1"&gt;bar:&lt;/span&gt; &lt;span class="pl-c1"&gt;:bar&lt;/span&gt;}, user_schema)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %{&lt;span class="pl-c1"&gt;foo:&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt;, &lt;span class="pl-c1"&gt;bar:&lt;/span&gt; &lt;span class="pl-c1"&gt;:bar&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you're used to more restrictive systems for managing data these might seem
like odd choices. We'll see how to specify required keys when we discuss Selections.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-structs" class="anchor" aria-hidden="true" href="#structs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Structs&lt;/h4&gt;
&lt;p&gt;You can also create specs from structs:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;User&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;:age&lt;/span&gt;]

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;s&lt;/span&gt;, &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%&lt;span class="pl-c1"&gt;__MODULE__&lt;/span&gt;{
      &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;()),
      &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;())
    })
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will ensure that the input is a &lt;code&gt;User&lt;/code&gt; struct with the key that match
the given specification. Its convention to provide a &lt;code&gt;s()&lt;/code&gt; function in the
module that defines the struct so that schema's can be shared throughout
your system.&lt;/p&gt;
&lt;p&gt;You don't need to provide specs for all the keys in your struct. Only the
specced keys will be conformed. The remaining keys will be checked for
presence.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;User&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;:age&lt;/span&gt;]
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%&lt;span class="pl-en"&gt;User&lt;/span&gt;{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%&lt;span class="pl-en"&gt;User&lt;/span&gt;{}))
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %&lt;span class="pl-en"&gt;User&lt;/span&gt;{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-key-semantics" class="anchor" aria-hidden="true" href="#key-semantics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key semantics&lt;/h4&gt;
&lt;p&gt;Atom and string keys are matched explicitly and there is no casting that
occurs when conforming values. If you need to match on string keys you
should specify your schema with string keys.&lt;/p&gt;
&lt;p&gt;Schemas accomodate growth by disregarding any unspecified keys in the input map.
This allows callers to start sending new data over time without coordination
with the consuming function.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-selections-and-optionality" class="anchor" aria-hidden="true" href="#selections-and-optionality"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Selections and optionality&lt;/h3&gt;
&lt;p&gt;We said that all of the fields in a schema are optional. In order to specify
the keys that are required in a specific use case we can use a Selection. The
Selections takes a schema and a list of keys - or keys to lists of keys - that
must be present in the schema.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;user_schema &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
  &lt;span class="pl-c1"&gt;user:&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
    &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;()),
    &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;()),
  })
})
just_age &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;selection&lt;/span&gt;(user_schema, [&lt;span class="pl-c1"&gt;user:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:age&lt;/span&gt;]])

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;31&lt;/span&gt;}}, just_age)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;31&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}, just_age)
&lt;span class="pl-k"&gt;**&lt;/span&gt; (&lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;MismatchError&lt;/span&gt;) &lt;span class="pl-en"&gt;Could&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; conform &lt;span class="pl-c1"&gt;input:&lt;/span&gt;
&lt;span class="pl-c1"&gt;val:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;in&lt;/span&gt;: &lt;span class="pl-c1"&gt;:user&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;:age&lt;/span&gt; &lt;span class="pl-c1"&gt;fails:&lt;/span&gt; &lt;span class="pl-c1"&gt;:required&lt;/span&gt;
    (norm) lib&lt;span class="pl-k"&gt;/&lt;/span&gt;norm.&lt;span class="pl-c1"&gt;ex:&lt;/span&gt;&lt;span class="pl-c1"&gt;387&lt;/span&gt;: &lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;conform!&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to mark all fields in a schema as required you can elide the list
of keys like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;user_schema &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
  &lt;span class="pl-c1"&gt;user:&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
    &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;()),
    &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;()),
  })
})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Require all fields recursively&lt;/span&gt;
&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;31&lt;/span&gt;}}, &lt;span class="pl-en"&gt;selection&lt;/span&gt;(user_schema))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Selections are an important tool because they give control over optionality
back to the call site. This allows callers to determine what they actually need
and makes schema's much more reusable.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-patterns" class="anchor" aria-hidden="true" href="#patterns"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Patterns&lt;/h3&gt;
&lt;p&gt;Norm provides a way to specify alternative specs using the &lt;code&gt;alt/1&lt;/code&gt;
function. This is useful when you need to support multiple schema's or
multiple alternative specs.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;create_event &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;:create&lt;/span&gt;))})
update_event &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;:update&lt;/span&gt;))})
event &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;alt&lt;/span&gt;(&lt;span class="pl-c1"&gt;create:&lt;/span&gt; create_event, &lt;span class="pl-c1"&gt;update:&lt;/span&gt; update_event)

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-c1"&gt;:create&lt;/span&gt;}, event)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:create&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-c1"&gt;:create&lt;/span&gt;}}

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-c1"&gt;:update&lt;/span&gt;}, event)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; {&lt;span class="pl-c1"&gt;:update&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-c1"&gt;:update&lt;/span&gt;}}

&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;type:&lt;/span&gt; &lt;span class="pl-c1"&gt;:delete&lt;/span&gt;}, event)
&lt;span class="pl-k"&gt;**&lt;/span&gt; (&lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;MismatchError&lt;/span&gt;)
  &lt;span class="pl-k"&gt;in&lt;/span&gt;: &lt;span class="pl-c1"&gt;:create&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;:type&lt;/span&gt; &lt;span class="pl-c1"&gt;val:&lt;/span&gt; &lt;span class="pl-c1"&gt;:delete&lt;/span&gt; &lt;span class="pl-c1"&gt;fails:&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;:create&lt;/span&gt;)
  &lt;span class="pl-k"&gt;in&lt;/span&gt;: &lt;span class="pl-c1"&gt;:update&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;:type&lt;/span&gt; &lt;span class="pl-c1"&gt;val:&lt;/span&gt; &lt;span class="pl-c1"&gt;:delete&lt;/span&gt; &lt;span class="pl-c1"&gt;fails:&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;:update&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-generators" class="anchor" aria-hidden="true" href="#generators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generators&lt;/h2&gt;
&lt;p&gt;Along with validating that data conforms to a given specification, Norm
can also use specificiations to generate examples of good data. These
examples can then be used for property based testing, local development,
seeding databases, or any other use case.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;user_schema &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
  &lt;span class="pl-c1"&gt;user:&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{
    &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;()),
    &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;))
  })
})
&lt;span class="pl-en"&gt;conform!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;30&lt;/span&gt;}}, user_schema)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;chris&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;30&lt;/span&gt;}}

user_schema
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;gen&lt;/span&gt;()
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;take&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)
&lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; [
  %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}},
  %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}},
  %{&lt;span class="pl-c1"&gt;user:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;age:&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}}
]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under the hood Norm uses StreamData for its data generation. This means
you can use your specs in tests like so:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;input_data &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;user&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;schema&lt;/span&gt;(%{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;())})})

property &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;users can update names&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  check all input &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;gen&lt;/span&gt;(input_data) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    assert &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-en"&gt;update_user&lt;/span&gt;(input)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-built-in-generators" class="anchor" aria-hidden="true" href="#built-in-generators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Built in generators&lt;/h3&gt;
&lt;p&gt;Norm will try to infer the generator to use from the predicate defined in
&lt;code&gt;spec&lt;/code&gt;. It looks specifically for the guard clauses used for primitive
types in elixir. Not all of the built in guard clauses are supported yet.
PRs are very welcome ;).&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-guiding-generators" class="anchor" aria-hidden="true" href="#guiding-generators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guiding generators&lt;/h3&gt;
&lt;p&gt;You may have specs like &lt;code&gt;spec(fn x -&amp;gt; rem(x, 2) == 0 end)&lt;/code&gt; which check to
see that an integer is even or not. This generator expects integer values
but there's no way for Norm to determine this. If you try to create
a generator from this spec you'll get an error:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;gen&lt;/span&gt;(&lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-k"&gt;fn&lt;/span&gt; x &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;rem&lt;/span&gt;(x, &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;end&lt;/span&gt;))
&lt;span class="pl-k"&gt;**&lt;/span&gt; (&lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;GeneratorError&lt;/span&gt;) &lt;span class="pl-en"&gt;Unable&lt;/span&gt; to create a generator &lt;span class="pl-c1"&gt;for:&lt;/span&gt; &lt;span class="pl-k"&gt;fn&lt;/span&gt; x &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;rem&lt;/span&gt;(x, &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;end&lt;/span&gt;
    (norm) lib&lt;span class="pl-k"&gt;/&lt;/span&gt;norm.&lt;span class="pl-c1"&gt;ex:&lt;/span&gt;&lt;span class="pl-c1"&gt;76&lt;/span&gt;: &lt;span class="pl-en"&gt;Norm&lt;/span&gt;.&lt;span class="pl-en"&gt;gen&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can guide Norm to the right generator by specifying a guard clause as
the first predicate in a spec. If Norm can find the right generator then
it will use any other predicates as filters in the generator.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;take&lt;/span&gt;(&lt;span class="pl-en"&gt;gen&lt;/span&gt;(&lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-k"&gt;fn&lt;/span&gt; x &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;rem&lt;/span&gt;(x, &lt;span class="pl-c1"&gt;2&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;end&lt;/span&gt;)), &lt;span class="pl-c1"&gt;5&lt;/span&gt;)
[&lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;4&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But its also possible to create filters that are too specific such as
this:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;gen&lt;/span&gt;(&lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_binary&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-k"&gt;~&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;~r/&lt;/span&gt;foobarbaz&lt;span class="pl-pds"&gt;/&lt;/span&gt;&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Norm can determine the generators to use however its incredibly unlikely
that Norm will be able to generate data that matches the filter. After 25
consecutive unseccessful attempts to generate a good value Norm (StreamData
under the hood) will return an error. In these scenarios we can create
a custom generator.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-overriding-generators" class="anchor" aria-hidden="true" href="#overriding-generators"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overriding generators&lt;/h3&gt;
&lt;p&gt;You'll often need to guide your generators into the interesting parts of the
state space so that you can easily find bugs. That means you'll want to tweak
and control your generators. Norm provides an escape hatch for creating your
own generators with the &lt;code&gt;with_gen/2&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;age &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;))
reasonable_ages &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;with_gen&lt;/span&gt;(age, &lt;span class="pl-en"&gt;StreamData&lt;/span&gt;.&lt;span class="pl-en"&gt;integer&lt;/span&gt;(&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;&lt;span class="pl-c1"&gt;105&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because &lt;code&gt;gen/1&lt;/code&gt; returns a StreamData generator you can compose your generators
with other StreamData functions:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;age &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;spec&lt;/span&gt;(&lt;span class="pl-en"&gt;is_integer&lt;/span&gt;() &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;))
&lt;span class="pl-en"&gt;StreamData&lt;/span&gt;.&lt;span class="pl-en"&gt;frequencies&lt;/span&gt;([
  {&lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-en"&gt;gen&lt;/span&gt;(age)},
  {&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-en"&gt;StreamData&lt;/span&gt;.&lt;span class="pl-en"&gt;binary&lt;/span&gt;()},
])

&lt;span class="pl-en"&gt;gen&lt;/span&gt;(age) &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;StreamData&lt;/span&gt;.&lt;span class="pl-en"&gt;map&lt;/span&gt;(&lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;&lt;span class="pl-en"&gt;Integer&lt;/span&gt;.&lt;span class="pl-en"&gt;to_string&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;take&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)
[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;4&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows you to compose generators however you need to while keeping your
generation co-located with the specification of the data.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-should-i-use-this" class="anchor" aria-hidden="true" href="#should-i-use-this"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Should I use this?&lt;/h2&gt;
&lt;p&gt;Norm is still early in its life so there may be some rough edges. But
we're actively using this at my current company (Bleacher Report) and
working to make improvements.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-contributing-and-todos" class="anchor" aria-hidden="true" href="#contributing-and-todos"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing and TODOS&lt;/h2&gt;
&lt;p&gt;Norm is being actively worked on. Any contributions are very welcome. Here is a
limited set of ideas that are coming soon.&lt;/p&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; More streamlined specification of keyword lists.&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; Support "sets" of literal values&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; specs for functions and anonymous functions&lt;/li&gt;
&lt;li class="task-list-item"&gt;&lt;input type="checkbox" id="" disabled="" class="task-list-item-checkbox"&gt; easier way to do dispatch based on schema keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>keathley</author><guid isPermaLink="false">https://github.com/keathley/norm</guid><pubDate>Wed, 29 Jan 2020 00:06:00 GMT</pubDate></item><item><title>sorentwo/oban #7 in Elixir, Today</title><link>https://github.com/sorentwo/oban</link><description>&lt;p&gt;&lt;i&gt;🥃 Robust asynchronous job processor powered by Elixir and modern PostgreSQL&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;p align="center"&gt;
  &lt;a href="https://github.com/sorentwo/oban"&gt;
    &lt;img alt="oban" src="https://raw.githubusercontent.com/sorentwo/oban/master/logotype.png" width="435" style="max-width:100%;"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  Robust job processing in Elixir, backed by modern PostgreSQL.
  Reliable, &lt;br&gt; observable and loaded with &lt;a href="#Features"&gt;enterprise grade features&lt;/a&gt;.
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://hex.pm/packages/oban" rel="nofollow"&gt;
    &lt;img alt="Hex Version" src="https://camo.githubusercontent.com/ed315ea60f26789e499e1f683172dc4516684c8e/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f762f6f62616e2e737667" data-canonical-src="https://img.shields.io/hexpm/v/oban.svg" style="max-width:100%;"&gt;
  &lt;/a&gt;
  &lt;a href="https://hexdocs.pm/oban" rel="nofollow"&gt;
    &lt;img alt="Hex Docs" src="https://camo.githubusercontent.com/e7fc510ae89404b0a6bc21d5454b2d041a1392c3/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6865782e706d2d646f63732d677265656e2e7376673f7374796c653d666c6174" data-canonical-src="http://img.shields.io/badge/hex.pm-docs-green.svg?style=flat" style="max-width:100%;"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://circleci.com/gh/sorentwo/oban" rel="nofollow"&gt;
    &lt;img alt="CircleCI Status" src="https://camo.githubusercontent.com/7025c93b5a76c0730b8a04008b12864ba258028b/68747470733a2f2f636972636c6563692e636f6d2f67682f736f72656e74776f2f6f62616e2e7376673f7374796c653d737667" data-canonical-src="https://circleci.com/gh/sorentwo/oban.svg?style=svg" style="max-width:100%;"&gt;
  &lt;/a&gt;
  &lt;a href="https://opensource.org/licenses/Apache-2.0" rel="nofollow"&gt;
    &lt;img alt="Apache 2 License" src="https://camo.githubusercontent.com/e4e3a7db7b393f1dad2ee96845a4c291cd7524b6/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f6c2f6f62616e" data-canonical-src="https://img.shields.io/hexpm/l/oban" style="max-width:100%;"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#UI"&gt;UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Usage"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Configuring-Queues"&gt;Configuring Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Defining-Workers"&gt;Defining Workers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Enqueueing-Jobs"&gt;Enqueuing Jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Pruning-Historic-Jobs"&gt;Pruning Historic Jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Unique-Jobs"&gt;Unique Jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Periodic-Jobs"&gt;Periodic Jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Prioritizing-Jobs"&gt;Prioritizing Jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Error-Handling"&gt;Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Instrumentation-and-Logging"&gt;Instrumentation &amp;amp; Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Isolation"&gt;Isolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Pulse-Tracking"&gt;Pulse Tracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;Oban's primary goals are &lt;strong&gt;reliability&lt;/strong&gt;, &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;observability&lt;/strong&gt;.
It is fundamentally different from other background job processing tools because
it retains job data for historic metrics and inspection. You can leave your
application running indefinitely without worrying about jobs being lost or
orphaned due to crashes.&lt;/p&gt;
&lt;p&gt;Advantages over in-memory, mnesia, Redis and RabbitMQ based tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fewer Dependencies&lt;/strong&gt; — If you are running a web app there is a &lt;em&gt;very good&lt;/em&gt;
chance that you're running on top of a &lt;a href="https://en.wikipedia.org/wiki/Relational_database#RDBMS" rel="nofollow"&gt;RDBMS&lt;/a&gt;. Running your job queue
within PostgreSQL minimizes system dependencies and simplifies data backups.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transactional Control&lt;/strong&gt; — Enqueue a job along with other database changes,
ensuring that everything is committed or rolled back atomically.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database Backups&lt;/strong&gt; — Jobs are stored inside of your primary database, which
means they are backed up together with the data that they relate to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advanced features and advantages over other RDBMS based tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Isolated Queues&lt;/strong&gt; — Jobs are stored in a single table but are executed in
distinct queues. Each queue runs in isolation, ensuring that a job in a single
slow queue can't back up other faster queues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Queue Control&lt;/strong&gt; — Queues can be started, stopped, paused, resumed and scaled
independently at runtime.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resilient Queues&lt;/strong&gt; — Failing queries won't crash the entire supervision tree,
instead they trip a circuit breaker and will be retried again in the future.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job Killing&lt;/strong&gt; — Jobs can be killed in the middle of execution regardless of
which node they are running on. This stops the job at once and flags it as
&lt;code&gt;discarded&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Triggered Execution&lt;/strong&gt; — Database triggers ensure that jobs are dispatched as
soon as they are inserted into the database.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unique Jobs&lt;/strong&gt; — Duplicate work can be avoided through unique job controls.
Uniqueness can be enforced at the argument, queue and worker level for any
period of time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scheduled Jobs&lt;/strong&gt; — Jobs can be scheduled at any time in the future, down to
the second.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Periodic (CRON) Jobs&lt;/strong&gt; — Automatically enqueue jobs on a cron-like schedule.
Duplicate jobs are never enqueued, no matter how many nodes you're running.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job Priority&lt;/strong&gt; — Prioritize jobs within a queue to run ahead of others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job Safety&lt;/strong&gt; — When a process crashes or the BEAM is terminated executing
jobs aren't lost—they are quickly recovered by other running nodes or
immediately when the node is restarted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Historic Metrics&lt;/strong&gt; — After a job is processed the row is &lt;em&gt;not&lt;/em&gt; deleted.
Instead, the job is retained in the database to provide metrics. This allows
users to inspect historic jobs and to see aggregate data at the job, queue or
argument level.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Node Metrics&lt;/strong&gt; — Every queue records metrics to the database during runtime.
These are used to monitor queue health across nodes and may be used for
analytics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Queue Draining&lt;/strong&gt; — Queue shutdown is delayed so that slow jobs can finish
executing before shutdown. When shutdown starts queues are paused and stop
executing new jobs. Any jobs left running after the shutdown grace period may
be rescued later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Telemetry Integration&lt;/strong&gt; — Job life-cycle events are emitted via
&lt;a href="https://github.com/beam-telemetry/telemetry"&gt;Telemetry&lt;/a&gt; integration. This enables simple logging, error reporting
and health checkups without plug-ins.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Oban has been developed and actively tested with Elixir 1.8+, Erlang/OTP 21.1+
and PostgreSQL 11.0+. Running Oban currently requires Elixir 1.8+, Erlang 21+,
and PostgreSQL 9.6+.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-ui" class="anchor" aria-hidden="true" href="#ui"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UI&lt;/h2&gt;
&lt;p&gt;A web-based user interface for monitoring and managing Oban is available as a
private beta. Learn more about it and register for the beta at
&lt;a href="https://oban.dev" rel="nofollow"&gt;oban.dev&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Oban is published on &lt;a href="https://hex.pm/packages/oban" rel="nofollow"&gt;Hex&lt;/a&gt;. Add it to your list of
dependencies in &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:oban&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1.0.0-rc.2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;mix deps.get&lt;/code&gt; to install Oban and its dependencies, including
&lt;a href="https://hex.pm/packages/ecto" rel="nofollow"&gt;Ecto&lt;/a&gt;, &lt;a href="https://hex.pm/packages/jason" rel="nofollow"&gt;Jason&lt;/a&gt; and &lt;a href="https://hex.pm/packages/postgrex" rel="nofollow"&gt;Postgrex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After the packages are installed you must create a database migration to
add the &lt;code&gt;oban_jobs&lt;/code&gt; table to your database:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mix ecto.gen.migration add_oban_jobs_table&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open the generated migration in your editor and call the &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt;
functions on &lt;code&gt;Oban.Migrations&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-e"&gt;Repo&lt;/span&gt;.&lt;span class="pl-e"&gt;Migrations&lt;/span&gt;.&lt;span class="pl-en"&gt;AddObanJobsTable&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Migration&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;up&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Migrations&lt;/span&gt;.&lt;span class="pl-en"&gt;up&lt;/span&gt;()
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; We specify `version: 1` in `down`, ensuring that we'll roll all the way back down if&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; necessary, regardless of which version we've migrated `up` to.&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;down&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Migrations&lt;/span&gt;.&lt;span class="pl-en"&gt;down&lt;/span&gt;(&lt;span class="pl-c1"&gt;version:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will run all of Oban's versioned migrations for your database. Migrations
between versions are idempotent and will &lt;em&gt;never&lt;/em&gt; change after a release. As new
versions are released you may need to run additional migrations.&lt;/p&gt;
&lt;p&gt;Now, run the migration to create the table:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mix ecto.migrate&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next see &lt;a href="#Usage"&gt;Usage&lt;/a&gt; for how to integrate Oban into your application and
start defining jobs!&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-note-about-releases" class="anchor" aria-hidden="true" href="#note-about-releases"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Note About Releases&lt;/h4&gt;
&lt;p&gt;If you are using releases you may see Postgrex errors logged during your initial
deploy (or any deploy requiring an Oban migration). The errors are only
temporary! After the migration has completed each queue will start producing
jobs normally.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;

&lt;p&gt;Oban is a robust job processing library which uses PostgreSQL for storage and
coordination.&lt;/p&gt;
&lt;p&gt;Each Oban instance is a supervision tree and &lt;em&gt;not an application&lt;/em&gt;. That means it
won't be started automatically and must be included in your application's
supervision tree. All of your configuration is passed into the supervisor,
allowing you to configure Oban like the rest of your application:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/config.exs&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;Oban&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;repo:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;prune:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:maxlen&lt;/span&gt;, &lt;span class="pl-c1"&gt;10_000&lt;/span&gt;},
  &lt;span class="pl-c1"&gt;queues:&lt;/span&gt; [&lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;, &lt;span class="pl-c1"&gt;events:&lt;/span&gt; &lt;span class="pl-c1"&gt;50&lt;/span&gt;, &lt;span class="pl-c1"&gt;media:&lt;/span&gt; &lt;span class="pl-c1"&gt;20&lt;/span&gt;]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; lib/my_app/application.ex&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Application&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc false&lt;/span&gt;

  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt;

  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.{&lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;, &lt;span class="pl-en"&gt;Repo&lt;/span&gt;}

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;start&lt;/span&gt;(_type, _args) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    children &lt;span class="pl-k"&gt;=&lt;/span&gt; [
      &lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
      &lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;,
      {&lt;span class="pl-en"&gt;Oban&lt;/span&gt;, &lt;span class="pl-en"&gt;Application&lt;/span&gt;.&lt;span class="pl-en"&gt;get_env&lt;/span&gt;(&lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;Oban&lt;/span&gt;)}
    ]

    &lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;.&lt;span class="pl-en"&gt;start_link&lt;/span&gt;(children, &lt;span class="pl-c1"&gt;strategy:&lt;/span&gt; &lt;span class="pl-c1"&gt;:one_for_one&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are running tests (which you should be) you'll want to disable pruning
and job dispatching altogether when testing:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/test.exs&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;Oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;crontab:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;, &lt;span class="pl-c1"&gt;queues:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;, &lt;span class="pl-c1"&gt;prune:&lt;/span&gt; &lt;span class="pl-c1"&gt;:disabled&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without dispatch and pruning disabled Ecto will raise constant ownership errors
and you won't be able to run tests.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configuring-queues" class="anchor" aria-hidden="true" href="#configuring-queues"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuring Queues&lt;/h3&gt;
&lt;p&gt;Queues are specified as a keyword list where the key is the name of the queue
and the value is the maximum number of concurrent jobs. The following
configuration would start four queues with concurrency ranging from 5 to 50:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;queues:&lt;/span&gt; [&lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;, &lt;span class="pl-c1"&gt;mailers:&lt;/span&gt; &lt;span class="pl-c1"&gt;20&lt;/span&gt;, &lt;span class="pl-c1"&gt;events:&lt;/span&gt; &lt;span class="pl-c1"&gt;50&lt;/span&gt;, &lt;span class="pl-c1"&gt;media:&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There isn't a limit to the number of queues or how many jobs may execute
concurrently in each queue. Here are a few caveats and guidelines:&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-caveats--guidelines" class="anchor" aria-hidden="true" href="#caveats--guidelines"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caveats &amp;amp; Guidelines&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each queue will run as many jobs as possible concurrently, up to the
configured limit. Make sure your system has enough resources (i.e. database
connections) to handle the concurrent load.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Queue limits are local (per-node), not global (per-cluster). For example,
running a queue with a local limit of one on three separate nodes is
effectively a global limit of three. If you require a global limit you must
restrict the number of nodes running a particular queue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only jobs in the configured queues will execute. Jobs in any other queue will
stay in the database untouched.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be careful how many concurrent jobs make expensive system calls (i.e. FFMpeg,
ImageMagick). The BEAM ensures that the system stays responsive under load,
but those guarantees don't apply when using ports or shelling out commands.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-defining-workers" class="anchor" aria-hidden="true" href="#defining-workers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Defining Workers&lt;/h3&gt;
&lt;p&gt;Worker modules do the work of processing a job. At a minimum they must define a
&lt;code&gt;perform/2&lt;/code&gt; function, which is called with an &lt;code&gt;args&lt;/code&gt; map and the job struct.&lt;/p&gt;
&lt;p&gt;Note that when Oban calls &lt;code&gt;perform/2&lt;/code&gt;, the &lt;code&gt;args&lt;/code&gt; map given when enqueueing the
job is deserialized from the PostgreSQL &lt;code&gt;jsonb&lt;/code&gt; data type and therefore map keys
are converted to strings.&lt;/p&gt;
&lt;p&gt;Define a worker to process jobs in the &lt;code&gt;events&lt;/code&gt; queue:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Business&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Worker&lt;/span&gt;, &lt;span class="pl-c1"&gt;queue:&lt;/span&gt; &lt;span class="pl-c1"&gt;:events&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Worker&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;perform&lt;/span&gt;(%{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; id} &lt;span class="pl-k"&gt;=&lt;/span&gt; args, _job) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    model &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Business&lt;/span&gt;.&lt;span class="pl-en"&gt;Man&lt;/span&gt;, id)

    &lt;span class="pl-k"&gt;case&lt;/span&gt; args &lt;span class="pl-k"&gt;do&lt;/span&gt;
      %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;in_the&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;business&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; handle business job&lt;/span&gt;
        &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;inspect&lt;/span&gt;(model)

      %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;vote_for&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; vote} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; handle vote job&lt;/span&gt;
        &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;inspect&lt;/span&gt;(model)

      _ &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;inspect&lt;/span&gt;(model)
    &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; macro also accepts options to customize max attempts, priority, tags,
and uniqueness:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;LazyBusiness&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Worker&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;queue:&lt;/span&gt; &lt;span class="pl-c1"&gt;:events&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;priority:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;max_attempts:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;tags:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;business&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
    &lt;span class="pl-c1"&gt;unique:&lt;/span&gt; [&lt;span class="pl-c1"&gt;period:&lt;/span&gt; &lt;span class="pl-c1"&gt;30&lt;/span&gt;]

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Worker&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;perform&lt;/span&gt;(_args, _job) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; do business slowly&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The value returned from &lt;code&gt;perform/2&lt;/code&gt; is ignored, unless it an &lt;code&gt;{:error, reason}&lt;/code&gt;
tuple. With an error return or when perform has an uncaught exception or throw
then the error is reported and the job is retried (provided there are attempts
remaining).&lt;/p&gt;
&lt;p&gt;See the &lt;code&gt;Oban.Worker&lt;/code&gt; docs for more details on failure conditions and
&lt;code&gt;Oban.Telemetry&lt;/code&gt; for details on job reporting.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-enqueueing-jobs" class="anchor" aria-hidden="true" href="#enqueueing-jobs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enqueueing Jobs&lt;/h3&gt;
&lt;p&gt;Jobs are simply Ecto structs and are enqueued by inserting them into the
database. For convenience and consistency all workers provide a &lt;code&gt;new/2&lt;/code&gt;
function that converts an args map into a job changeset suitable for insertion:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;in_the:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;business&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;of_doing:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;business&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Business&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;()
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The worker's defaults may be overridden by passing options:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;vote_for:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;none of the above&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Business&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(&lt;span class="pl-c1"&gt;queue:&lt;/span&gt; &lt;span class="pl-c1"&gt;:special&lt;/span&gt;, &lt;span class="pl-c1"&gt;max_attempts:&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jobs may be scheduled at a specific datetime in the future:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Business&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(&lt;span class="pl-c1"&gt;scheduled_at:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;~U[&lt;/span&gt;2020-12-25 19:00:56.0Z&lt;span class="pl-pds"&gt;]&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jobs may also be scheduled down to the second any time in the future:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Business&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(&lt;span class="pl-c1"&gt;schedule_in:&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;)
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unique jobs can be configured in the worker, or when the job is built:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{&lt;span class="pl-c1"&gt;email:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;brewster@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Mailer&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(&lt;span class="pl-c1"&gt;unique:&lt;/span&gt; [&lt;span class="pl-c1"&gt;period:&lt;/span&gt; &lt;span class="pl-c1"&gt;300&lt;/span&gt;, &lt;span class="pl-c1"&gt;fields:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:queue&lt;/span&gt;, &lt;span class="pl-c1"&gt;:worker&lt;/span&gt;])
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Job priority can be specified using an integer from 0 to 3, with 0 being the
default and highest priority:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Backfiller&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(&lt;span class="pl-c1"&gt;priority:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any number of tags can be added to a job dynamically, at the time it is
inserted:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;id &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;

%{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; id}
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;OnboardMailer&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(&lt;span class="pl-c1"&gt;tags:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mailer&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;record-&lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;id&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Multiple jobs can be inserted in a single transaction:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Multi&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;()
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;(&lt;span class="pl-c1"&gt;:b_job&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Business&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;(&lt;span class="pl-c1"&gt;:m_job&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Mailer&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;email:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;brewser@example.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}))
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Repo&lt;/span&gt;.&lt;span class="pl-en"&gt;transaction&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Occasionally you may need to insert a job for a worker that exists in another
application. In that case you can use &lt;code&gt;Oban.Job.new/2&lt;/code&gt; to build the changeset
manually:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;%{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;user_id:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;}
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Job&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;(&lt;span class="pl-c1"&gt;queue:&lt;/span&gt; &lt;span class="pl-c1"&gt;:default&lt;/span&gt;, &lt;span class="pl-c1"&gt;worker:&lt;/span&gt; &lt;span class="pl-en"&gt;OtherApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Worker&lt;/span&gt;)
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;insert&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Oban.insert/2,4&lt;/code&gt; is the preferred way of inserting jobs as it provides some of
Oban's advanced features (i.e., unique jobs). However, you can use your
application's &lt;code&gt;Repo.insert/2&lt;/code&gt; function if necessary.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;Oban.Job.new/2&lt;/code&gt; for a full list of job options.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-pruning-historic-jobs" class="anchor" aria-hidden="true" href="#pruning-historic-jobs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pruning Historic Jobs&lt;/h3&gt;
&lt;p&gt;Job stats and queue introspection are built on keeping job rows in the database
after they have completed. This allows administrators to review completed jobs
and build informative aggregates, at the expense of storage and an unbounded
table size. To prevent the &lt;code&gt;oban_jobs&lt;/code&gt; table from growing indefinitely, Oban
provides active pruning of &lt;code&gt;completed&lt;/code&gt; and &lt;code&gt;discarded&lt;/code&gt; jobs.&lt;/p&gt;
&lt;p&gt;By default, pruning retains a conservatively low 1,000 jobs. Pruning is
configured with the &lt;code&gt;:prune&lt;/code&gt; option. There are three distinct modes of pruning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:disabled&lt;/code&gt; - No pruning happens at all, primarily useful for testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;{:maxlen, count}&lt;/code&gt; - Pruning is based on the number of rows in the table, any
rows beyond the configured &lt;code&gt;count&lt;/code&gt; may be deleted. This is the default mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;{:maxage, seconds}&lt;/code&gt; - Pruning is based on a row's age, any rows older than
the configured number of &lt;code&gt;seconds&lt;/code&gt; are deleted. The age unit is always
specified in seconds, but values on the scale of days, weeks or months are
perfectly acceptable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-caveats--guidelines-1" class="anchor" aria-hidden="true" href="#caveats--guidelines-1"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caveats &amp;amp; Guidelines&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pruning is best-effort and performed out-of-band. This means that all limits
are soft; jobs beyond a specified length or age may not be pruned immediately
after jobs complete. Prune timing is based on the configured &lt;code&gt;prune_interval&lt;/code&gt;,
which is one minute by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're using a row-limited database service, like Heroku's hobby plan with
10M rows, and you have pruning &lt;code&gt;:disabled&lt;/code&gt;, you could hit that row limit
quickly by filling up the &lt;code&gt;oban_beats&lt;/code&gt; table. Instead of fully disabling
pruning, consider setting a far-out limit: &lt;code&gt;{:maxage, 60 * 60 * 24 * 365}&lt;/code&gt; (1
year). You will get the benefit of retaining completed and discarded jobs for
a year without an unwieldy beats table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pruning is only applied to jobs that are &lt;code&gt;completed&lt;/code&gt; or &lt;code&gt;discarded&lt;/code&gt; (has
reached the maximum number of retries or has been manually killed). It'll
never delete a new job, a scheduled job or a job that failed and will be
retried.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-unique-jobs" class="anchor" aria-hidden="true" href="#unique-jobs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unique Jobs&lt;/h3&gt;
&lt;p&gt;The unique jobs feature lets you specify constraints to prevent enqueuing
duplicate jobs.  Uniquness is based on a combination of &lt;code&gt;args&lt;/code&gt;, &lt;code&gt;queue&lt;/code&gt;,
&lt;code&gt;worker&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; and insertion time. It is configured at the worker or job
level using the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:period&lt;/code&gt; — The number of seconds until a job is no longer considered
duplicate. You should always specify a period.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:fields&lt;/code&gt; — The fields to compare when evaluating uniqueness. The available
fields are &lt;code&gt;:args&lt;/code&gt;, &lt;code&gt;:queue&lt;/code&gt; and &lt;code&gt;:worker&lt;/code&gt;, by default all three are used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:states&lt;/code&gt; — The job states that are checked for duplicates. The available
states are &lt;code&gt;:available&lt;/code&gt;, &lt;code&gt;:scheduled&lt;/code&gt;, &lt;code&gt;:executing&lt;/code&gt;, &lt;code&gt;:retryable&lt;/code&gt; and
&lt;code&gt;:completed&lt;/code&gt;. By default all states are checked, which prevents &lt;em&gt;any&lt;/em&gt;
duplicates, even if the previous job has been completed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, configure a worker to be unique across all fields and states for 60
seconds:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Worker&lt;/span&gt;, &lt;span class="pl-c1"&gt;unique:&lt;/span&gt; [&lt;span class="pl-c1"&gt;period:&lt;/span&gt; &lt;span class="pl-c1"&gt;60&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Configure the worker to be unique only by &lt;code&gt;:worker&lt;/code&gt; and &lt;code&gt;:queue&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Worker&lt;/span&gt;, &lt;span class="pl-c1"&gt;unique:&lt;/span&gt; [&lt;span class="pl-c1"&gt;fields:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:queue&lt;/span&gt;, &lt;span class="pl-c1"&gt;:worker&lt;/span&gt;], &lt;span class="pl-c1"&gt;period:&lt;/span&gt; &lt;span class="pl-c1"&gt;60&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, configure a worker to be unique until it has executed:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Worker&lt;/span&gt;, &lt;span class="pl-c1"&gt;unique:&lt;/span&gt; [&lt;span class="pl-c1"&gt;period:&lt;/span&gt; &lt;span class="pl-c1"&gt;300&lt;/span&gt;, &lt;span class="pl-c1"&gt;states:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:available&lt;/span&gt;, &lt;span class="pl-c1"&gt;:scheduled&lt;/span&gt;, &lt;span class="pl-c1"&gt;:executing&lt;/span&gt;]]&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;a id="user-content-strong-guarantees" class="anchor" aria-hidden="true" href="#strong-guarantees"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Strong Guarantees&lt;/h4&gt;
&lt;p&gt;Unique jobs are guaranteed through transactional locks and database queries:
they &lt;em&gt;do not&lt;/em&gt; rely on unique constraints in the database. This makes uniquness
entirely configurable by application code, without the need for database
migrations.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-performance-note" class="anchor" aria-hidden="true" href="#performance-note"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance Note&lt;/h4&gt;
&lt;p&gt;If your application makes heavy use of unique jobs you may want to add an index
on the &lt;code&gt;args&lt;/code&gt; column of the &lt;code&gt;oban_jobs&lt;/code&gt; table. The other columns considered for
uniqueness are already covered by indexes.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-periodic-jobs" class="anchor" aria-hidden="true" href="#periodic-jobs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Periodic Jobs&lt;/h3&gt;
&lt;p&gt;Oban allows jobs to be registered with a cron-like schedule and enqueued
automatically. Periodic jobs are registered as a list of &lt;code&gt;{cron, worker}&lt;/code&gt; or
&lt;code&gt;{cron, worker, options}&lt;/code&gt; tuples:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;Oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;repo:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;, &lt;span class="pl-c1"&gt;crontab:&lt;/span&gt; [
  {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;* * * * *&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;MinuteWorker&lt;/span&gt;},
  {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0 * * * *&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;HourlyWorker&lt;/span&gt;, &lt;span class="pl-c1"&gt;args:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;custom:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;arg&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}},
  {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0 0 * * *&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;DailyWorker&lt;/span&gt;, &lt;span class="pl-c1"&gt;max_attempts:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;},
  {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0 12 * * MON&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;MondayWorker&lt;/span&gt;, &lt;span class="pl-c1"&gt;queue:&lt;/span&gt; &lt;span class="pl-c1"&gt;:scheduled&lt;/span&gt;, &lt;span class="pl-c1"&gt;tags:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mondays&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]}
]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These jobs would be executed as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyApp.MinuteWorker&lt;/code&gt; — Executed once every minute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyApp.HourlyWorker&lt;/code&gt; — Executed at the first minute of every hour with custom args&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyApp.DailyWorker&lt;/code&gt; — Executed at midnight every day with no retries&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyApp.MondayWorker&lt;/code&gt; — Executed at noon every Monday in the "scheduled" queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The crontab format respects all &lt;a href="https://en.wikipedia.org/wiki/Cron#Overview" rel="nofollow"&gt;standard rules&lt;/a&gt; and has one minute
resolution. Jobs are considered unique for most of each minute, which prevents
duplicate jobs with multiple nodes and across node restarts.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-cron-expressions" class="anchor" aria-hidden="true" href="#cron-expressions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cron Expressions&lt;/h4&gt;
&lt;p&gt;Standard Cron expressions are composed of rules specifying the minutes, hours,
days, months and weekdays. Rules for each field are comprised of literal values,
wildcards, step values or ranges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; — Wildcard, matches any value (0, 1, 2, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; — Literal, matches only itself (only 0)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*/15&lt;/code&gt; — Step, matches any value that is a multiple (0, 15, 30, 45)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0-5&lt;/code&gt; — Range, matches any value within the range (0, 1, 2, 3, 4, 5)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each part may have multiple rules, where rules are separated by a comma. The
allowed values for each field are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;minute&lt;/code&gt; — 0-59&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hour&lt;/code&gt; — 0-23&lt;/li&gt;
&lt;li&gt;&lt;code&gt;days&lt;/code&gt; — 1-31&lt;/li&gt;
&lt;li&gt;&lt;code&gt;month&lt;/code&gt; — 1-12 (or aliases, &lt;code&gt;JAN&lt;/code&gt;, &lt;code&gt;FEB&lt;/code&gt;, &lt;code&gt;MAR&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weekdays&lt;/code&gt; — 0-6 (or aliases, &lt;code&gt;SUN&lt;/code&gt;, &lt;code&gt;MON&lt;/code&gt;, &lt;code&gt;TUE&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some specific examples that demonstrate the full range of expressions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 * * * *&lt;/code&gt; — The first minute of every hour&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*/15 9-17 * * *&lt;/code&gt; — Every fifteen minutes during standard business hours&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 0 * DEC *&lt;/code&gt; — Once a day at midnight during december&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 7-9,4-6 13 * FRI&lt;/code&gt; — Once an hour during both rush hours on Friday the 13th&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more in depth information see the man documentation for &lt;code&gt;cron&lt;/code&gt; and &lt;code&gt;crontab&lt;/code&gt;
in your system.  Alternatively you can experiment with various expressions
online at &lt;a href="https://crontab.guru" rel="nofollow"&gt;Crontab Guru&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-caveats--guidelines-2" class="anchor" aria-hidden="true" href="#caveats--guidelines-2"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caveats &amp;amp; Guidelines&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All schedules are evaluated as UTC unless a different timezone is configured.
See &lt;code&gt;Oban.start_link/1&lt;/code&gt; for information about configuring a timezone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workers can be used for regular and scheduled jobs so long as they accept
different arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Duplicate jobs are prevented through transactional locks and unique
constraints. Workers that are used for regular and scheduled jobs &lt;em&gt;must not&lt;/em&gt;
specify &lt;code&gt;unique&lt;/code&gt; options less than &lt;code&gt;60s&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Long running jobs may execute simultaneously if the scheduling interval is
shorter than it takes to execute the job. You can prevent overlap by passing
custom &lt;code&gt;unique&lt;/code&gt; opts in the crontab config:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;custom_args &lt;span class="pl-k"&gt;=&lt;/span&gt; %{&lt;span class="pl-c1"&gt;scheduled:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;}

unique_opts &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  &lt;span class="pl-c1"&gt;period:&lt;/span&gt; &lt;span class="pl-c1"&gt;60&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;60&lt;/span&gt; &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;24&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;states:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:available&lt;/span&gt;, &lt;span class="pl-c1"&gt;:scheduled&lt;/span&gt;, &lt;span class="pl-c1"&gt;:executing&lt;/span&gt;]
]

config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;Oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;repo:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;, &lt;span class="pl-c1"&gt;crontab:&lt;/span&gt; [
  {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;* * * * *&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;SlowWorker&lt;/span&gt;, &lt;span class="pl-c1"&gt;args:&lt;/span&gt; custom_args, &lt;span class="pl-c1"&gt;unique:&lt;/span&gt; unique_opts},
]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-prioritizing-jobs" class="anchor" aria-hidden="true" href="#prioritizing-jobs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prioritizing Jobs&lt;/h3&gt;
&lt;p&gt;Normally, all available jobs within a queue are executed in the order they were
scheduled. You can override the normal behavior and prioritize or de-prioritize
a job by assigning a numerical &lt;code&gt;priority&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Priorities from 0-3 are allowed, where 0 is the highest priority and 3 is the
lowest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The default priority is 0, unless specified all jobs have an equally high
priority.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All jobs with a higher priority will execute before any jobs with a lower
priority. Within a particular priority jobs are executed in their scheduled
order.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing&lt;/h2&gt;
&lt;p&gt;Oban provides some helpers to facilitate testing. The helpers handle the
boilerplate of making assertions on which jobs are enqueued. To use the
&lt;code&gt;assert_enqueued/1&lt;/code&gt; and &lt;code&gt;refute_enqueued/1&lt;/code&gt; helpers in your tests you must
include them in your testing module and specify your app's Ecto repo:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Testing&lt;/span&gt;, &lt;span class="pl-c1"&gt;repo:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can assert, refute or list jobs that have been enqueued within your
tests:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;assert_enqueued &lt;span class="pl-c1"&gt;worker:&lt;/span&gt; &lt;span class="pl-en"&gt;MyWorker&lt;/span&gt;, &lt;span class="pl-c1"&gt;args:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;

refute_enqueued &lt;span class="pl-c1"&gt;queue:&lt;/span&gt; &lt;span class="pl-c1"&gt;:special&lt;/span&gt;, &lt;span class="pl-c1"&gt;args:&lt;/span&gt; %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;

assert [%{&lt;span class="pl-c1"&gt;args:&lt;/span&gt; %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;}}] &lt;span class="pl-k"&gt;=&lt;/span&gt; all_enqueued &lt;span class="pl-c1"&gt;worker:&lt;/span&gt; &lt;span class="pl-en"&gt;MyWorker&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the &lt;code&gt;Oban.Testing&lt;/code&gt; module for more details.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-caveats--guidelines-3" class="anchor" aria-hidden="true" href="#caveats--guidelines-3"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Caveats &amp;amp; Guidelines&lt;/h4&gt;
&lt;p&gt;As noted in &lt;a href="#Usage"&gt;Usage&lt;/a&gt;, there are some guidelines for running tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Disable all job dispatching by setting &lt;code&gt;queues: false&lt;/code&gt; or &lt;code&gt;queues: nil&lt;/code&gt; in
your &lt;code&gt;test.exs&lt;/code&gt; config. Keyword configuration is deep merged, so setting
&lt;code&gt;queues: []&lt;/code&gt; won't have any effect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable pruning via &lt;code&gt;prune: :disabled&lt;/code&gt;. Pruning isn't necessary in testing
mode because jobs created within the sandbox are rolled back at the end of the
test. Additionally, the periodic pruning queries will raise
&lt;code&gt;DBConnection.OwnershipError&lt;/code&gt; when the application boots.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable cron jobs via &lt;code&gt;crontab: false&lt;/code&gt;. Periodic jobs aren't useful while
testing and scheduling can lead to random ownership issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be sure to use the Ecto Sandbox for testing. Oban makes use of database pubsub
events to dispatch jobs, but pubsub events never fire within a transaction.
Since sandbox tests run within a transaction no events will fire and jobs
won't be dispatched.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;, &lt;span class="pl-c1"&gt;pool:&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapters&lt;/span&gt;.&lt;span class="pl-en"&gt;SQL&lt;/span&gt;.&lt;span class="pl-en"&gt;Sandbox&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-integration-testing" class="anchor" aria-hidden="true" href="#integration-testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integration Testing&lt;/h3&gt;
&lt;p&gt;During integration testing it may be necessary to run jobs because they do work
essential for the test to complete, i.e. sending an email, processing media,
etc. You can execute all available jobs in a particular queue by calling
&lt;code&gt;Oban.drain_queue/1&lt;/code&gt; directly from your tests.&lt;/p&gt;
&lt;p&gt;For example, to process all pending jobs in the "mailer" queue while testing
some business logic:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;BusinessTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;DataCase&lt;/span&gt;, &lt;span class="pl-c1"&gt;async:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.{&lt;span class="pl-en"&gt;Business&lt;/span&gt;, &lt;span class="pl-en"&gt;Worker&lt;/span&gt;}

  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;we stay in the business of doing business&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Business&lt;/span&gt;.&lt;span class="pl-en"&gt;schedule_a_meeting&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;email:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;monty@brewster.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})

    assert %{&lt;span class="pl-c1"&gt;success:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;failure:&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;} &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;drain_queue&lt;/span&gt;(&lt;span class="pl-c1"&gt;:mailer&lt;/span&gt;)

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Now, make an assertion about the email delivery&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;code&gt;Oban.drain_queue/1&lt;/code&gt; for additional details.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-error-handling" class="anchor" aria-hidden="true" href="#error-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Error Handling&lt;/h2&gt;
&lt;p&gt;When a job returns an error value, raises an error or exits during execution the
details are recorded within the &lt;code&gt;errors&lt;/code&gt; array on the job. When the number of
execution attempts is below the configured &lt;code&gt;max_attempts&lt;/code&gt; limit, the job will
automatically be retried in the future.&lt;/p&gt;
&lt;p&gt;The retry delay has an exponential backoff, meaning the job's second attempt
will be after 16s, third after 31s, fourth after 1m 36s, etc.&lt;/p&gt;
&lt;p&gt;See the &lt;code&gt;Oban.Worker&lt;/code&gt; documentation on "Customizing Backoff" for alternative
backoff strategies.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-error-details" class="anchor" aria-hidden="true" href="#error-details"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Error Details&lt;/h3&gt;
&lt;p&gt;Execution errors are stored as a formatted exception along with metadata about
when the failure ocurred and which attempt caused it. Each error is stored with
the following keys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;at&lt;/code&gt; The utc timestamp when the error occurred at&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attempt&lt;/code&gt; The attempt number when the error ocurred&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt; A formatted error message and stacktrace&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href="#Instrumentation-and-Logging"&gt;Instrumentation&lt;/a&gt; docs for an example of
integrating with external error reporting systems.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-limiting-retries" class="anchor" aria-hidden="true" href="#limiting-retries"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Limiting Retries&lt;/h3&gt;
&lt;p&gt;By default jobs are retried up to 20 times. The number of retries is controlled by the
&lt;code&gt;max_attempts&lt;/code&gt; value, which can be set at the Worker or Job level. For example, to instruct a
worker to discard jobs after three failures:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Worker&lt;/span&gt;, &lt;span class="pl-c1"&gt;queue:&lt;/span&gt; &lt;span class="pl-c1"&gt;:limited&lt;/span&gt;, &lt;span class="pl-c1"&gt;max_attempts:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-instrumentation-and-logging" class="anchor" aria-hidden="true" href="#instrumentation-and-logging"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Instrumentation and Logging&lt;/h2&gt;
&lt;p&gt;Oban provides integration with &lt;a href="https://github.com/beam-telemetry/telemetry"&gt;Telemetry&lt;/a&gt;, a dispatching library for
metrics. It is easy to report Oban metrics to any backend by attaching to
&lt;code&gt;:oban&lt;/code&gt; events.&lt;/p&gt;
&lt;p&gt;Here is an example of a sample unstructured log handler:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;ObanLogger&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;require&lt;/span&gt; &lt;span class="pl-en"&gt;Logger&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;handle_event&lt;/span&gt;([&lt;span class="pl-c1"&gt;:oban&lt;/span&gt;, event], measure, meta, &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;when&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Logger&lt;/span&gt;.&lt;span class="pl-en"&gt;warn&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[Oban &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;event&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;]: &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;meta.worker&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt; ran in &lt;span class="pl-pse"&gt;#{&lt;/span&gt;&lt;span class="pl-s1"&gt;measure.duration&lt;/span&gt;&lt;span class="pl-pse"&gt;}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Attach the handler to success and failure events in &lt;code&gt;application.ex&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;events &lt;span class="pl-k"&gt;=&lt;/span&gt; [[&lt;span class="pl-c1"&gt;:oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;:success&lt;/span&gt;], [&lt;span class="pl-c1"&gt;:oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;:failure&lt;/span&gt;]]

&lt;span class="pl-c1"&gt;:telemetry&lt;/span&gt;.&lt;span class="pl-en"&gt;attach_many&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;oban-logger&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, events, &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;&lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;ObanLogger&lt;/span&gt;.&lt;span class="pl-en"&gt;handle_event&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Oban.Telemetry&lt;/code&gt; module provides a robust structured logger that handles all
of Oban's telemetry events. As in the example above, attach it within your
&lt;code&gt;application.ex&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Telemetry&lt;/span&gt;.&lt;span class="pl-en"&gt;attach_default_logger&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more details on the default structured logger and information on event
metadata see docs for the &lt;code&gt;Oban.Telemetry&lt;/code&gt; module.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-reporting-errors" class="anchor" aria-hidden="true" href="#reporting-errors"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reporting Errors&lt;/h3&gt;
&lt;p&gt;Another great use of execution data is error reporting. Here is an example of
integrating with &lt;a href="https://honeybadger.io" rel="nofollow"&gt;Honeybadger&lt;/a&gt; to report job failures:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;ErrorReporter&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;handle_event&lt;/span&gt;([&lt;span class="pl-c1"&gt;:oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;:failure&lt;/span&gt;], measure, meta, &lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    context &lt;span class="pl-k"&gt;=&lt;/span&gt;
      meta
      &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Map&lt;/span&gt;.&lt;span class="pl-en"&gt;take&lt;/span&gt;([&lt;span class="pl-c1"&gt;:id&lt;/span&gt;, &lt;span class="pl-c1"&gt;:args&lt;/span&gt;, &lt;span class="pl-c1"&gt;:queue&lt;/span&gt;, &lt;span class="pl-c1"&gt;:worker&lt;/span&gt;])
      &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Map&lt;/span&gt;.&lt;span class="pl-en"&gt;merge&lt;/span&gt;(measure)

    &lt;span class="pl-en"&gt;Honeybadger&lt;/span&gt;.&lt;span class="pl-en"&gt;notify&lt;/span&gt;(meta.error, context, meta.stack)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c1"&gt;:telemetry&lt;/span&gt;.&lt;span class="pl-en"&gt;attach&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;oban-errors&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, [&lt;span class="pl-c1"&gt;:oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;:failure&lt;/span&gt;], &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;&lt;span class="pl-en"&gt;ErrorReporter&lt;/span&gt;.&lt;span class="pl-en"&gt;handle_event&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;nil&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-isolation" class="anchor" aria-hidden="true" href="#isolation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Isolation&lt;/h2&gt;
&lt;p&gt;Oban supports namespacing through PostgreSQL schemas, also called "prefixes" in
Ecto. With prefixes your jobs table can reside outside of your primary schema
(usually public) and you can have multiple separate job tables.&lt;/p&gt;
&lt;p&gt;To use a prefix you first have to specify it within your migration:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-e"&gt;Repo&lt;/span&gt;.&lt;span class="pl-e"&gt;Migrations&lt;/span&gt;.&lt;span class="pl-en"&gt;AddPrefixedObanJobsTable&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Ecto&lt;/span&gt;.&lt;span class="pl-en"&gt;Migration&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;up&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Migrations&lt;/span&gt;.&lt;span class="pl-en"&gt;up&lt;/span&gt;(&lt;span class="pl-c1"&gt;prefix:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;private&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;down&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Oban&lt;/span&gt;.&lt;span class="pl-en"&gt;Migrations&lt;/span&gt;.&lt;span class="pl-en"&gt;down&lt;/span&gt;(&lt;span class="pl-c1"&gt;prefix:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;private&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The migration will create the "private" schema and all tables, functions and
triggers within that schema. With the database migrated you'll then specify the
prefix in your configuration:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;Oban&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;prefix:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;private&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;repo:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;queues:&lt;/span&gt; [&lt;span class="pl-c1"&gt;default:&lt;/span&gt; &lt;span class="pl-c1"&gt;10&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now all jobs are inserted and executed using the &lt;code&gt;private.oban_jobs&lt;/code&gt; table. Note
that &lt;code&gt;Oban.insert/2,4&lt;/code&gt; will write jobs in the &lt;code&gt;private.oban_jobs&lt;/code&gt; table, you'll
need to specify a prefix manually if you insert jobs directly through a repo.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-supervisor-isolation" class="anchor" aria-hidden="true" href="#supervisor-isolation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Supervisor Isolation&lt;/h3&gt;
&lt;p&gt;Not only is the &lt;code&gt;oban_jobs&lt;/code&gt; table isolated within the schema, but all
notification events are also isolated. That means that insert/update events will
only dispatch new jobs for their prefix. You can run multiple Oban instances
with different prefixes on the same system and have them entirely isolated,
provided you give each supervisor a distinct id.&lt;/p&gt;
&lt;p&gt;Here we configure our application to start three Oban supervisors using the
"public", "special" and "private" prefixes, respectively:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;start&lt;/span&gt;(_type, _args) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  children &lt;span class="pl-k"&gt;=&lt;/span&gt; [
    &lt;span class="pl-en"&gt;Repo&lt;/span&gt;,
    &lt;span class="pl-en"&gt;Endpoint&lt;/span&gt;,
    &lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;.&lt;span class="pl-en"&gt;child_spec&lt;/span&gt;({&lt;span class="pl-en"&gt;Oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;ObanA&lt;/span&gt;, &lt;span class="pl-c1"&gt;repo:&lt;/span&gt; &lt;span class="pl-en"&gt;Repo&lt;/span&gt;}, &lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-en"&gt;ObanA&lt;/span&gt;),
    &lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;.&lt;span class="pl-en"&gt;child_spec&lt;/span&gt;({&lt;span class="pl-en"&gt;Oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;ObanB&lt;/span&gt;, &lt;span class="pl-c1"&gt;repo:&lt;/span&gt; &lt;span class="pl-en"&gt;Repo&lt;/span&gt;, &lt;span class="pl-c1"&gt;prefix:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;special&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, &lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-en"&gt;ObanB&lt;/span&gt;),
    &lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;.&lt;span class="pl-en"&gt;child_spec&lt;/span&gt;({&lt;span class="pl-en"&gt;Oban&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;ObanC&lt;/span&gt;, &lt;span class="pl-c1"&gt;repo:&lt;/span&gt; &lt;span class="pl-en"&gt;Repo&lt;/span&gt;, &lt;span class="pl-c1"&gt;prefix:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;private&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, &lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-en"&gt;ObanC&lt;/span&gt;)
  ]

  &lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;.&lt;span class="pl-en"&gt;start_link&lt;/span&gt;(children, &lt;span class="pl-c1"&gt;strategy:&lt;/span&gt; &lt;span class="pl-c1"&gt;:one_for_one&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;)
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-pulse-tracking" class="anchor" aria-hidden="true" href="#pulse-tracking"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pulse Tracking&lt;/h2&gt;
&lt;p&gt;Historic introspection is a defining feature of Oban. In addition to retaining
completed jobs Oban also generates "heartbeat" records every second for each
running queue.&lt;/p&gt;
&lt;p&gt;Heartbeat records are recorded in the &lt;code&gt;oban_beats&lt;/code&gt; table and pruned to five
minutes of backlog. The recorded information is used for a couple of purposes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To track active jobs. When a job executes it records the node and queue that
ran it in the &lt;code&gt;attempted_by&lt;/code&gt; column. Zombie jobs (jobs that were left
executing when a producer crashes or the node is shut down) are found by
comparing the &lt;code&gt;attempted_by&lt;/code&gt; values with recent heartbeat records and
resurrected accordingly.&lt;/li&gt;
&lt;li&gt;Each heartbeat records information about a node/queue pair such as whether it
is paused, what the execution limit is and exactly which jobs are running.
These records can power additional logging or metrics (and are the backbone
of the Oban UI).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-querying-the-jobs-table" class="anchor" aria-hidden="true" href="#querying-the-jobs-table"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Querying the Jobs Table&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Oban.Job&lt;/code&gt; defines an Ecto schema and the jobs table can therefore be queried as usual, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MyApp.Repo.all(
  from j in Oban.Job,
    where: j.worker == "MyApp.Business",
    where: j.state == "discarded"
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a id="user-content-heroku" class="anchor" aria-hidden="true" href="#heroku"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Heroku&lt;/h3&gt;
&lt;p&gt;If your app crashes on launch, be sure to confirm you are running the correct
version of Elixir and Erlang (&lt;a href="#Requirements"&gt;view requirements&lt;/a&gt;). If using the
&lt;em&gt;hashnuke/elixir&lt;/em&gt; buildpack, you can update the &lt;code&gt;elixir_buildpack.config&lt;/code&gt; file
in your application's root directory to something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Elixir version
elixir_version=1.9.0

# Erlang version
erlang_version=22.0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Available Erlang versions are available &lt;a href="https://github.com/HashNuke/heroku-buildpack-elixir-otp-builds/blob/master/otp-versions"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p&gt;To run the Oban test suite you must have PostgreSQL 10+ running locally with a
database named &lt;code&gt;oban_test&lt;/code&gt;. Follow these steps to create the database, create
the database and run all migrations:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;mix test.setup&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To ensure a commit passes CI you should run &lt;code&gt;mix ci&lt;/code&gt; locally, which executes the
following commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check formatting (&lt;code&gt;mix format --check-formatted&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Lint with Credo (&lt;code&gt;mix credo --strict&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Run all tests (&lt;code&gt;mix test --raise&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Run Dialyzer (&lt;code&gt;mix dialyzer --halt-exit-status&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>sorentwo</author><guid isPermaLink="false">https://github.com/sorentwo/oban</guid><pubDate>Wed, 29 Jan 2020 00:07:00 GMT</pubDate></item><item><title>derekkraan/horde #8 in Elixir, Today</title><link>https://github.com/derekkraan/horde</link><description>&lt;p&gt;&lt;i&gt;Horde is a distributed Supervisor and Registry backed by DeltaCrdt&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-horde--" class="anchor" aria-hidden="true" href="#horde--"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Horde &lt;a href="https://hex.pm/packages/horde" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/131ec5d6499fba745cfce665cdd8bcdaed8b1e4c/687474703a2f2f696d672e736869656c64732e696f2f686578706d2f762f686f7264652e7376673f7374796c653d666c6174" alt="Hex pm" data-canonical-src="http://img.shields.io/hexpm/v/horde.svg?style=flat" style="max-width:100%;"&gt;&lt;/a&gt; &lt;a href="https://circleci.com/gh/derekkraan/horde" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1a12a0d683a0e71dd978083cd8e82e8bb4ed98a2/68747470733a2f2f636972636c6563692e636f6d2f67682f646572656b6b7261616e2f686f7264652e706e673f636972636c652d746f6b656e3d3a636972636c652d746f6b656e" alt="CircleCI badge" data-canonical-src="https://circleci.com/gh/derekkraan/horde.png?circle-token=:circle-token" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Distribute your application over multiple servers with Horde.&lt;/p&gt;
&lt;p&gt;Horde is comprised of &lt;code&gt;Horde.DynamicSupervisor&lt;/code&gt;, a distributed supervisor, and &lt;code&gt;Horde.Registry&lt;/code&gt;, a distributed registry. Horde is built on top of &lt;a href="https://github.com/derekkraan/delta_crdt_ex"&gt;DeltaCrdt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Read the &lt;a href="https://hexdocs.pm/horde" rel="nofollow"&gt;full documentation&lt;/a&gt; on hexdocs.pm.&lt;/p&gt;
&lt;p&gt;There is an &lt;a href="https://moosecode.nl/blog/introducing_horde" rel="nofollow"&gt;introductory blog post&lt;/a&gt; and a &lt;a href="https://moosecode.nl/blog/getting_started_horde" rel="nofollow"&gt;getting started guide&lt;/a&gt;. You can also find me in the Elixir slack channel #horde.&lt;/p&gt;
&lt;p&gt;Daniel Azuma gave &lt;a href="https://www.youtube.com/watch?v=nLApFANtkHs" rel="nofollow"&gt;a great talk&lt;/a&gt; at ElixirConf US 2018 where he demonstrated Horde's Supervisor and Registry.&lt;/p&gt;
&lt;p&gt;Since Horde is built on CRDTs, it is eventually (as opposed to immediately) consistent, although it does sync its state with its neighbours rather aggressively. Cluster membership in Horde is fully dynamic; nodes can be added and removed at any time and Horde will continue to operate as expected. &lt;code&gt;Horde.DynamicSupervisor&lt;/code&gt; also uses a hash ring to limit any possible race conditions to times when cluster membership is changing.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Horde.Registry&lt;/code&gt; is API-compatible with Elixir's own Registry, although it does not yet support the &lt;code&gt;keys: :duplicate&lt;/code&gt; option. For many use cases, it will be a drop-in replacement. &lt;code&gt;Horde.DynamicSupervisor&lt;/code&gt; follows the API and behaviour of &lt;code&gt;DynamicSupervisor&lt;/code&gt; as closely as possible. There will always be some difference between Horde and its standard library equivalents, if not in their APIs, then in their functionality. This is a necessary consequence of Horde's distributed nature.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-10-release" class="anchor" aria-hidden="true" href="#10-release"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.0 release&lt;/h2&gt;
&lt;p&gt;Help us get to 1.0, please fill out our &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSd0fGMuELJIKAiaR1XlvHKjpSo024cojktXjp4ASM7MSXTYfg/viewform?usp=sf_link" rel="nofollow"&gt;very short survey&lt;/a&gt; and report any issues you encounter when using Horde.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-fault-tolerance" class="anchor" aria-hidden="true" href="#fault-tolerance"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fault tolerance&lt;/h2&gt;
&lt;p&gt;If a node fails (or otherwise becomes unreachable) then Horde.DynamicSupervisor will redistribute processes among the remaining nodes.&lt;/p&gt;
&lt;p&gt;You can choose what to do in the event of a network partition by specifying &lt;code&gt;:distribution_strategy&lt;/code&gt; in the options for &lt;code&gt;Horde.DynamicSupervisor.start_link/2&lt;/code&gt;. Setting this option to &lt;code&gt;Horde.UniformDistribution&lt;/code&gt; (which is the default) distributes processes using a hash mechanism among all reachable nodes. In the event of a network partition, both sides of the partition will continue to operate. Setting it to &lt;code&gt;Horde.UniformQuorumDistribution&lt;/code&gt; will operate in the same way, but will shut down if less than half of the cluster is reachable.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-cap-theorem" class="anchor" aria-hidden="true" href="#cap-theorem"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CAP Theorem&lt;/h2&gt;
&lt;p&gt;Horde is eventually consistent, which means that Horde can guarantee availability and partition tolerancy. Horde cannot guarantee consistency. This means you may end up with duplicate processes in your cluster. Horde does aggressively synchronize between nodes (this is also tunable), but ultimately, depending on the tuning parameters you choose and the quality of the network, there are conditions under which it is possible to have duplicate processes in your cluster. Horde.Registry terminates duplicate processes as soon as they are discovered with a special exit code, so you'll always know when this is happening. See &lt;a href="https://hexdocs.pm/horde/eventual_consistency.html#horde-registry-merge-conflict" rel="nofollow"&gt;this page in the docs&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOTE: Since Horde 0.6.0, Horde.DynamicSupervisor ignores the &lt;code&gt;id&lt;/code&gt; of a child spec (as Elixir.DynamicSupervisor does), and therefore does not guarantee that each &lt;code&gt;id&lt;/code&gt; will be unique in the cluster (as it did pre-0.6.0). If you want to uniquely name your processes in a cluster, use Horde.Registry for this purpose. Having both Horde.DynamicSupervisor and Horde.Registry checking for uniqueness was subject to a race condition where Horde.DynamicSupervisor would choose process A to survive and Horde.Registry would choose process B to survive, resulting in both processes being killed.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-graceful-shutdown" class="anchor" aria-hidden="true" href="#graceful-shutdown"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Graceful shutdown&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;Horde.DynamicSupervisor.stop/3&lt;/code&gt; will cause the local supervisor to stop and any processes it was running will be shut down and redistributed to remaining supervisers in the horde. (This should happen automatically if &lt;code&gt;:init.stop()&lt;/code&gt; is called).&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Horde is &lt;a href="https://hex.pm/packages/horde" rel="nofollow"&gt;available in Hex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The package can be installed by adding &lt;code&gt;horde&lt;/code&gt; to your list of dependencies in &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:horde&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 0.7.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Here is a small taste of Horde's usage. See the full docs at &lt;a href="https://hexdocs.pm/horde" rel="nofollow"&gt;https://hexdocs.pm/horde&lt;/a&gt; for more information and examples. There is also an example application at &lt;code&gt;examples/hello_world&lt;/code&gt; that you can refer to if you get stuck.&lt;/p&gt;
&lt;p&gt;Starting &lt;code&gt;Horde.DynamicSupervisor&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Application&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;start&lt;/span&gt;(_type, _args) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    children &lt;span class="pl-k"&gt;=&lt;/span&gt; [
      {&lt;span class="pl-en"&gt;Horde&lt;/span&gt;.&lt;span class="pl-en"&gt;DynamicSupervisor&lt;/span&gt;, [&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;DistributedSupervisor&lt;/span&gt;, &lt;span class="pl-c1"&gt;strategy:&lt;/span&gt; &lt;span class="pl-c1"&gt;:one_for_one&lt;/span&gt;]}
    ]
    &lt;span class="pl-en"&gt;Supervisor&lt;/span&gt;.start_link(children, &lt;span class="pl-c1"&gt;strategy:&lt;/span&gt; &lt;span class="pl-c1"&gt;:one_for_one&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding a child to the supervisor:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Add a Task&lt;/span&gt;
&lt;span class="pl-en"&gt;Horde&lt;/span&gt;.&lt;span class="pl-en"&gt;DynamicSupervisor&lt;/span&gt;.start_child(&lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;DistributedSupervisor&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;:task&lt;/span&gt;, &lt;span class="pl-c1"&gt;start:&lt;/span&gt; {&lt;span class="pl-en"&gt;Task&lt;/span&gt;, &lt;span class="pl-c1"&gt;:start_link&lt;/span&gt;, [&lt;span class="pl-c1"&gt;:infinity&lt;/span&gt;]}})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Add an Agent&lt;/span&gt;
&lt;span class="pl-en"&gt;Horde&lt;/span&gt;.&lt;span class="pl-en"&gt;DynamicSupervisor&lt;/span&gt;.start_child(&lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;DistributedSupervisor&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;:agent&lt;/span&gt;, &lt;span class="pl-c1"&gt;start:&lt;/span&gt; {&lt;span class="pl-en"&gt;Agent&lt;/span&gt;, &lt;span class="pl-c1"&gt;:start_link&lt;/span&gt;, [&lt;span class="pl-k"&gt;fn&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; %{} &lt;span class="pl-k"&gt;end&lt;/span&gt;]}})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Add a GenServer: You need a previously defined GenServer to call the one&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; liner below.  We have a test ("graceful shutdown") in&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; `test/supervisor_test.exs` that exercises and displays that behavior. After&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; defined, it would be very similar to this:&lt;/span&gt;
&lt;span class="pl-en"&gt;Horde&lt;/span&gt;.&lt;span class="pl-en"&gt;DynamicSupervisor&lt;/span&gt;.start_child(&lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;DistributedSupervisor&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;id:&lt;/span&gt; &lt;span class="pl-c1"&gt;:gen_server&lt;/span&gt;, &lt;span class="pl-c1"&gt;start:&lt;/span&gt; {&lt;span class="pl-en"&gt;GenServer&lt;/span&gt;, &lt;span class="pl-c1"&gt;:start_link&lt;/span&gt;, [&lt;span class="pl-en"&gt;DefinedGenServer&lt;/span&gt;, {&lt;span class="pl-c1"&gt;500&lt;/span&gt;, pid}]}})&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so on. The public API should be the same as &lt;code&gt;Elixir.DynamicSupervisor&lt;/code&gt; (and please open an issue if you find a difference).&lt;/p&gt;
&lt;p&gt;Joining supervisors into a single distributed supervisor can be done using &lt;code&gt;Horde.Cluster&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, supervisor_1} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Horde&lt;/span&gt;.&lt;span class="pl-en"&gt;DynamicSupervisor&lt;/span&gt;.start_link(&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-c1"&gt;:distributed_supervisor_1&lt;/span&gt;, &lt;span class="pl-c1"&gt;strategy:&lt;/span&gt; &lt;span class="pl-c1"&gt;:one_for_one&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, supervisor_2} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Horde&lt;/span&gt;.&lt;span class="pl-en"&gt;DynamicSupervisor&lt;/span&gt;.start_link(&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-c1"&gt;:distributed_supervisor_2&lt;/span&gt;, &lt;span class="pl-c1"&gt;strategy:&lt;/span&gt; &lt;span class="pl-c1"&gt;:one_for_one&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, supervisor_3} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Horde&lt;/span&gt;.&lt;span class="pl-en"&gt;DynamicSupervisor&lt;/span&gt;.start_link(&lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-c1"&gt;:distributed_supervisor_3&lt;/span&gt;, &lt;span class="pl-c1"&gt;strategy:&lt;/span&gt; &lt;span class="pl-c1"&gt;:one_for_one&lt;/span&gt;)

&lt;span class="pl-en"&gt;Horde&lt;/span&gt;.&lt;span class="pl-en"&gt;Cluster&lt;/span&gt;.set_members(&lt;span class="pl-c1"&gt;:distributed_supervisor_1&lt;/span&gt;, [&lt;span class="pl-c1"&gt;:distributed_supervisor_1&lt;/span&gt;, &lt;span class="pl-c1"&gt;:distributed_supervisor_2&lt;/span&gt;, &lt;span class="pl-c1"&gt;:distributed_supervisor_3&lt;/span&gt;])
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; supervisor_1, supervisor_2 and supervisor_3 will be joined in a single cluster.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h1&gt;
&lt;p&gt;Contributions are welcome! Feel free to open an issue if you'd like to discuss a problem or a possible solution. Pull requests are much appreciated.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>derekkraan</author><guid isPermaLink="false">https://github.com/derekkraan/horde</guid><pubDate>Wed, 29 Jan 2020 00:08:00 GMT</pubDate></item><item><title>dashbitco/flow #9 in Elixir, Today</title><link>https://github.com/dashbitco/flow</link><description>&lt;p&gt;&lt;i&gt;[No description found.]&lt;/i&gt;&lt;/p&gt;&lt;p&gt;No README was found for this project.&lt;/p&gt;</description><author>dashbitco</author><guid isPermaLink="false">https://github.com/dashbitco/flow</guid><pubDate>Wed, 29 Jan 2020 00:09:00 GMT</pubDate></item><item><title>teamon/tesla #10 in Elixir, Today</title><link>https://github.com/teamon/tesla</link><description>&lt;p&gt;&lt;i&gt;The flexible HTTP client library for Elixir, with support for middleware and multiple adapters.&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-tesla" class="anchor" aria-hidden="true" href="#tesla"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tesla&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/teamon/tesla/actions"&gt;&lt;img src="https://github.com/teamon/tesla/workflows/Test/badge.svg" alt="Build Status" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://hex.pm/packages/tesla" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0c0944976e16b9dd00793898e4230380e9b5fd2b/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f762f7465736c612e737667" alt="Hex.pm" data-canonical-src="https://img.shields.io/hexpm/v/tesla.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hex.pm/packages/tesla" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f1412252ef362b47565bb11a86354b26cf4ead16/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f64742f7465736c612e737667" alt="Hex.pm" data-canonical-src="https://img.shields.io/hexpm/dt/tesla.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hex.pm/packages/tesla" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f1abfb0bb8617d57967acef3326a430b94d985fb/68747470733a2f2f696d672e736869656c64732e696f2f686578706d2f64772f7465736c612e737667" alt="Hex.pm" data-canonical-src="https://img.shields.io/hexpm/dw/tesla.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/teamon/tesla" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3e439f43427049e15c8e0ab64c12ded15b17a02f/68747470733a2f2f636f6465636f762e696f2f67682f7465616d6f6e2f7465736c612f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/teamon/tesla/branch/master/graph/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://inch-ci.org/github/teamon/tesla" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b6d9b7ca1274083b2ab0a8c080137023d5d87a2a/68747470733a2f2f696e63682d63692e6f72672f6769746875622f7465616d6f6e2f7465736c612e737667" alt="Inline docs" data-canonical-src="https://inch-ci.org/github/teamon/tesla.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tesla is an HTTP client loosely based on &lt;a href="https://github.com/lostisland/faraday"&gt;Faraday&lt;/a&gt;.
It embraces the concept of middleware when processing the request/response cycle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that this README refers to the &lt;code&gt;master&lt;/code&gt; branch of Tesla, not the latest
released version on Hex. See &lt;a href="http://hexdocs.pm/tesla" rel="nofollow"&gt;the documentation&lt;/a&gt; for
the documentation of the version you're using.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a id="user-content-0x-to-10-migration-guide" class="anchor" aria-hidden="true" href="#0x-to-10-migration-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/teamon/tesla/wiki/0.x-to-1.0-Migration-Guide"&gt;&lt;code&gt;0.x&lt;/code&gt; to &lt;code&gt;1.0&lt;/code&gt; Migration Guide&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:tesla&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 1.3.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/teamon/tesla/tree/0.x"&gt;Documentation for 0.x branch&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a id="user-content-http-client-example" class="anchor" aria-hidden="true" href="#http-client-example"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP Client example&lt;/h2&gt;
&lt;p&gt;Define module with &lt;code&gt;use Tesla&lt;/code&gt; and choose from a variety of middleware.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;

  plug &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;BaseUrl&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://api.github.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  plug &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;Headers&lt;/span&gt;, [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;authorization&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;token xyz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]
  plug &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;JSON&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;user_repos&lt;/span&gt;(login) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/users/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; login &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/repos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then use it like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, response} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt;.&lt;span class="pl-en"&gt;user_repos&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;teamon&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

response.status
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; =&amp;gt; 200&lt;/span&gt;

response.body
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; =&amp;gt; [%{…}, …]&lt;/span&gt;

response.headers
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; =&amp;gt; [{"content-type", "application/json"}, ...]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See below for documentation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Add &lt;code&gt;tesla&lt;/code&gt; as dependency in &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [
    {&lt;span class="pl-c1"&gt;:tesla&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 1.3.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; optional, but recommended adapter&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:hackney&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 1.15.2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; optional, required by JSON middleware&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:jason&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;gt;= 1.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  ]
&lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Configure default adapter in &lt;code&gt;config/config.exs&lt;/code&gt; (optional).&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/config.exs&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:tesla&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter:&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapter&lt;/span&gt;.&lt;span class="pl-en"&gt;Hackney&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;The default adapter is erlang's built-in &lt;code&gt;httpc&lt;/code&gt;, but it is not recommended
to use it in production environment as it does not validate SSL certificates
&lt;a href="https://github.com/teamon/tesla/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+label%3Ahttpc+"&gt;among other issues&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#middleware"&gt;Middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#runtime-middleware"&gt;Runtime middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adapters"&gt;Adapters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#streaming"&gt;Streaming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multipart"&gt;Multipart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-middleware"&gt;Writing middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#direct-usage"&gt;Direct usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cheatsheet"&gt;Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/teamon/tesla/wiki"&gt;Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/teamon/tesla/releases"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-middleware" class="anchor" aria-hidden="true" href="#middleware"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Middleware&lt;/h2&gt;
&lt;p&gt;Tesla is built around the concept of composable middlewares.
This is very similar to how &lt;a href="https://github.com/elixir-plug/plug#the-plug-router"&gt;Plug Router&lt;/a&gt; works.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-basic" class="anchor" aria-hidden="true" href="#basic"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.BaseUrl.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.BaseUrl&lt;/code&gt;&lt;/a&gt; - set base url&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.Headers.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.Headers&lt;/code&gt;&lt;/a&gt; - set request headers&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.Query.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.Query&lt;/code&gt;&lt;/a&gt; - set query parameters&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.Opts.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.Opts&lt;/code&gt;&lt;/a&gt; - set request options&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.FollowRedirects.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.FollowRedirects&lt;/code&gt;&lt;/a&gt; - follow 3xx redirects&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.MethodOverride.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.MethodOverride&lt;/code&gt;&lt;/a&gt; - set X-Http-Method-Override&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.Logger.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.Logger&lt;/code&gt;&lt;/a&gt; - log requests (method, url, status, time)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.KeepRequest.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.KeepRequest&lt;/code&gt;&lt;/a&gt; - keep request body &amp;amp; headers&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.PathParams.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.PathParams&lt;/code&gt;&lt;/a&gt; - use templated URLs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-formats" class="anchor" aria-hidden="true" href="#formats"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Formats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.FormUrlencoded.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.FormUrlencoded&lt;/code&gt;&lt;/a&gt; - urlencode POST body, useful for POSTing a map/keyword list&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.JSON.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.JSON&lt;/code&gt;&lt;/a&gt; - JSON request/response body&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.Compression.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.Compression&lt;/code&gt;&lt;/a&gt; - gzip &amp;amp; deflate&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.DecodeRels.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.DecodeRels&lt;/code&gt;&lt;/a&gt; - decode &lt;code&gt;Link&lt;/code&gt; header into &lt;code&gt;opts[:rels]&lt;/code&gt; field in response&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-auth" class="anchor" aria-hidden="true" href="#auth"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Auth&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.BasicAuth.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.BasicAuth&lt;/code&gt;&lt;/a&gt; - HTTP Basic Auth&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.DigestAuth.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.DigestAuth&lt;/code&gt;&lt;/a&gt; - Digest access authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-error-handling" class="anchor" aria-hidden="true" href="#error-handling"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Error handling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.Timeout.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.Timeout&lt;/code&gt;&lt;/a&gt; - timeout request after X milliseconds despite of server response&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.Retry.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.Retry&lt;/code&gt;&lt;/a&gt; - retry few times in case of connection refused&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Middleware.Fuse.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Middleware.Fuse&lt;/code&gt;&lt;/a&gt; - fuse circuit breaker integration&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-runtime-middleware" class="anchor" aria-hidden="true" href="#runtime-middleware"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Runtime middleware&lt;/h2&gt;
&lt;p&gt;All HTTP functions (&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, etc.) can take a dynamic client as the first argument.
This allow to use convenient syntax for modifying the behaviour in runtime.&lt;/p&gt;
&lt;p&gt;Consider the following case: GitHub API can be accessed using OAuth token authorization.&lt;/p&gt;
&lt;p&gt;We can't use &lt;code&gt;plug Tesla.Middleware.Headers, [{"authorization", "token here"}]&lt;/code&gt;
since this would be compiled only once and there is no way to insert dynamic user token.&lt;/p&gt;
&lt;p&gt;Instead, we can use &lt;code&gt;Tesla.client&lt;/code&gt; to create a client with dynamic middleware:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; notice there is no `use Tesla`&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;user_repos&lt;/span&gt;(client, login) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; pass `client` argument to `Tesla.get` function&lt;/span&gt;
    &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(client, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/user/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; login &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/repos&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;issues&lt;/span&gt;(client) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(client, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/issues&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; build dynamic client based on runtime arguments&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;client&lt;/span&gt;(token) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    middleware &lt;span class="pl-k"&gt;=&lt;/span&gt; [
      {&lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;BaseUrl&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://api.github.com&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
      &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;JSON&lt;/span&gt;,
      {&lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;Headers&lt;/span&gt;, [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;authorization&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;token: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; token }]}
    ]

    &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;client&lt;/span&gt;(middleware)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;client &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt;.&lt;span class="pl-en"&gt;client&lt;/span&gt;(user_token)
client &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt;.&lt;span class="pl-en"&gt;user_repos&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;teamon&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
client &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/me&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-adapters" class="anchor" aria-hidden="true" href="#adapters"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adapters&lt;/h2&gt;
&lt;p&gt;Tesla supports multiple HTTP adapter that do the actual HTTP request processing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Adapter.Httpc.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Adapter.Httpc&lt;/code&gt;&lt;/a&gt; - the default, built-in erlang &lt;a href="http://erlang.org/doc/man/httpc.html" rel="nofollow"&gt;httpc&lt;/a&gt; adapter&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Adapter.Hackney.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Adapter.Hackney&lt;/code&gt;&lt;/a&gt; - &lt;a href="https://github.com/benoitc/hackney"&gt;hackney&lt;/a&gt;, "simple HTTP client in Erlang"&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Adapter.Ibrowse.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Adapter.Ibrowse&lt;/code&gt;&lt;/a&gt; - &lt;a href="https://github.com/cmullaparthi/ibrowse"&gt;ibrowse&lt;/a&gt;, "Erlang HTTP client"&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Adapter.Gun.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Adapter.Gun&lt;/code&gt;&lt;/a&gt; - &lt;a href="https://github.com/ninenines/gun"&gt;gun&lt;/a&gt;, "HTTP/1.1, HTTP/2 and Websocket client for Erlang/OTP"&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/tesla/Tesla.Adapter.Mint.html" rel="nofollow"&gt;&lt;code&gt;Tesla.Adapter.Mint&lt;/code&gt;&lt;/a&gt; - &lt;a href="https://github.com/elixir-mint/mint"&gt;mint&lt;/a&gt;, "Functional HTTP client for Elixir with support for HTTP/1 and HTTP/2"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When using adapter other than httpc remember to add it to the dependencies list in &lt;code&gt;mix.exs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:tesla&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 1.3.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;},
   {&lt;span class="pl-c1"&gt;:jason&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&amp;gt;= 1.0.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; optional, required by JSON middleware&lt;/span&gt;
   {&lt;span class="pl-c1"&gt;:hackney&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 1.10&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or :gun etc.&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-adapter-options" class="anchor" aria-hidden="true" href="#adapter-options"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adapter options&lt;/h3&gt;
&lt;p&gt;In case there is a need to pass specific adapter options you can do it in one of three ways:&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;adapter&lt;/code&gt; macro:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;GitHub&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;

  adapter &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapter&lt;/span&gt;.&lt;span class="pl-en"&gt;Hackney&lt;/span&gt;, &lt;span class="pl-c1"&gt;recv_timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;30_000&lt;/span&gt;, &lt;span class="pl-c1"&gt;ssl_options:&lt;/span&gt; [&lt;span class="pl-c1"&gt;certfile:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;certs/client.crt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;Tesla.client/2&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;new&lt;/span&gt;(&lt;span class="pl-k"&gt;..&lt;/span&gt;.) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  middleware &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-k"&gt;..&lt;/span&gt;.]
  adapter &lt;span class="pl-k"&gt;=&lt;/span&gt; {&lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Adapter&lt;/span&gt;.&lt;span class="pl-en"&gt;Hackney&lt;/span&gt;, [&lt;span class="pl-c1"&gt;recv_timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;30_000&lt;/span&gt;]}
  &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;client&lt;/span&gt;(middleware, adapter)
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Passing directly to &lt;code&gt;get&lt;/code&gt;/&lt;code&gt;post&lt;/code&gt;/etc.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;MyClient&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;opts:&lt;/span&gt; [&lt;span class="pl-c1"&gt;adapter:&lt;/span&gt; [&lt;span class="pl-c1"&gt;recv_timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;30_000&lt;/span&gt;]])
&lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(client, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;opts:&lt;/span&gt; [&lt;span class="pl-c1"&gt;adapter:&lt;/span&gt; [&lt;span class="pl-c1"&gt;recv_timeout:&lt;/span&gt; &lt;span class="pl-c1"&gt;30_000&lt;/span&gt;]])&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-streaming" class="anchor" aria-hidden="true" href="#streaming"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Streaming&lt;/h2&gt;
&lt;p&gt;If adapter supports it, you can pass a &lt;a href="http://elixir-lang.org/docs/stable/elixir/Stream.html" rel="nofollow"&gt;Stream&lt;/a&gt; as body, e.g.:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;ElasticSearch&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;

  plug &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;BaseUrl&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://localhost:9200&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  plug &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;JSON&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;index&lt;/span&gt;(records_stream) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    stream &lt;span class="pl-k"&gt;=&lt;/span&gt; records_stream &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Stream&lt;/span&gt;.&lt;span class="pl-en"&gt;map&lt;/span&gt;(&lt;span class="pl-k"&gt;fn&lt;/span&gt; record &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; %{&lt;span class="pl-c1"&gt;index:&lt;/span&gt; [some, data]} &lt;span class="pl-k"&gt;end&lt;/span&gt;)
    &lt;span class="pl-en"&gt;post&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/_bulk&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, stream)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each piece of stream will be encoded as JSON and sent as a new line (conforming to JSON stream format)&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-multipart" class="anchor" aria-hidden="true" href="#multipart"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Multipart&lt;/h2&gt;
&lt;p&gt;You can pass a &lt;code&gt;Tesla.Multipart&lt;/code&gt; struct as the body.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Multipart&lt;/span&gt;

mp &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-en"&gt;Multipart&lt;/span&gt;.&lt;span class="pl-en"&gt;new&lt;/span&gt;()
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Multipart&lt;/span&gt;.&lt;span class="pl-en"&gt;add_content_type_param&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;charset=utf-8&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Multipart&lt;/span&gt;.&lt;span class="pl-en"&gt;add_field&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;field1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Multipart&lt;/span&gt;.&lt;span class="pl-en"&gt;add_field&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;field2&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-c1"&gt;headers:&lt;/span&gt; [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;content-id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;content-type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;text/plain&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]
  )
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Multipart&lt;/span&gt;.&lt;span class="pl-en"&gt;add_file&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test/tesla/multipart_test_file.sh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Multipart&lt;/span&gt;.&lt;span class="pl-en"&gt;add_file&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test/tesla/multipart_test_file.sh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foobar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Multipart&lt;/span&gt;.&lt;span class="pl-en"&gt;add_file_content&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sample file content&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sample.txt&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, response} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApiClient&lt;/span&gt;.&lt;span class="pl-en"&gt;post&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://httpbin.org/post&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, mp)&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing&lt;/h2&gt;
&lt;p&gt;You can set the adapter to &lt;code&gt;Tesla.Mock&lt;/code&gt; in tests.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; config/test.exs&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Use mock adapter for all clients&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:tesla&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter:&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Mock&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or only for one&lt;/span&gt;
config &lt;span class="pl-c1"&gt;:tesla&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApi&lt;/span&gt;, &lt;span class="pl-c1"&gt;adapter:&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Mock&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, mock requests before using your client:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyAppTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;ExUnit&lt;/span&gt;.&lt;span class="pl-en"&gt;Case&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Mock&lt;/span&gt;

  setup &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;mock&lt;/span&gt;(&lt;span class="pl-k"&gt;fn&lt;/span&gt;
      %{&lt;span class="pl-c1"&gt;method:&lt;/span&gt; &lt;span class="pl-c1"&gt;:get&lt;/span&gt;, &lt;span class="pl-c1"&gt;url:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://example.com/hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
        %&lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Env&lt;/span&gt;{&lt;span class="pl-c1"&gt;status:&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;, &lt;span class="pl-c1"&gt;body:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}

      %{&lt;span class="pl-c1"&gt;method:&lt;/span&gt; &lt;span class="pl-c1"&gt;:post&lt;/span&gt;, &lt;span class="pl-c1"&gt;url:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://example.com/world&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;} &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="pl-en"&gt;json&lt;/span&gt;(%{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})
    &lt;span class="pl-k"&gt;end&lt;/span&gt;)

    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;list things&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    assert {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, %&lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Env&lt;/span&gt;{} &lt;span class="pl-k"&gt;=&lt;/span&gt; env} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    assert env.status &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;200&lt;/span&gt;
    assert env.body &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-writing-middleware" class="anchor" aria-hidden="true" href="#writing-middleware"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing middleware&lt;/h2&gt;
&lt;p&gt;A Tesla middleware is a module with &lt;code&gt;c:Tesla.Middleware.call/3&lt;/code&gt; function, that at some point calls &lt;code&gt;Tesla.run/2&lt;/code&gt; with &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; to process
the rest of stack.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyMiddleware&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@behaviour&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;call&lt;/span&gt;(env, next, options) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    env
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;do_something_with_request&lt;/span&gt;()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;run&lt;/span&gt;(next)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;do_something_with_response&lt;/span&gt;()
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The arguments are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt; - &lt;code&gt;Tesla.Env&lt;/code&gt; instance&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; - middleware continuation stack; to be executed with &lt;code&gt;Tesla.run/2&lt;/code&gt; with &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; - arguments passed during middleware configuration (&lt;code&gt;plug MyMiddleware, options&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is no distinction between request and response middleware, it's all about executing &lt;code&gt;Tesla.run/2&lt;/code&gt; function at the correct time.&lt;/p&gt;
&lt;p&gt;For example, a request logger middleware could be implemented like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-e"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;RequestLogger&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@behaviour&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;call&lt;/span&gt;(env, next, _) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    env
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;inspect&lt;/span&gt;()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;run&lt;/span&gt;(next)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and response logger middleware like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-e"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;ResponseLogger&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@behaviour&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;call&lt;/span&gt;(env, next, _) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    env
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;run&lt;/span&gt;(next)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;inspect&lt;/span&gt;()
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://github.com/teamon/tesla/tree/master/lib/tesla/middleware"&gt;built-in middlewares&lt;/a&gt; for more examples.&lt;/p&gt;
&lt;p&gt;Middleware should have documentation following this template:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-e"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;SomeMiddleware&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  Short description what it does&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;  Longer description, including e.g. additional dependencies.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;  ### Example usage&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;  ```&lt;/span&gt;
&lt;span class="pl-c"&gt;  defmodule MyClient do&lt;/span&gt;
&lt;span class="pl-c"&gt;    use Tesla&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;    plug Tesla.Middleware.SomeMiddleware, most: :common, options: "here"&lt;/span&gt;
&lt;span class="pl-c"&gt;  end&lt;/span&gt;
&lt;span class="pl-c"&gt;  ```&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;  ### Options&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;  - `:list` - all possible options&lt;/span&gt;
&lt;span class="pl-c"&gt;  - `:with` - their default values&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@behaviour&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-direct-usage" class="anchor" aria-hidden="true" href="#direct-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Direct usage&lt;/h2&gt;
&lt;p&gt;You can also use Tesla directly, without creating a client module.
This however won’t include any middleware.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Example get request&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, response} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://httpbin.org/ip&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

response.status
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; =&amp;gt; 200&lt;/span&gt;

response.body
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; =&amp;gt; "{\n  "origin": "87.205.72.203"\n}\n"&lt;/span&gt;

response.headers
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; =&amp;gt; [{"content-type", "application/json" ...}]&lt;/span&gt;

{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, response} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://httpbin.org/get&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;query:&lt;/span&gt; [&lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])

response.url
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; =&amp;gt; "http://httpbin.org/get?a=1&amp;amp;b=foo"&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Example post request&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, response} &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;post&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://httpbin.org/post&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;headers:&lt;/span&gt; [{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;content-type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/json&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}])&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-cheatsheet" class="anchor" aria-hidden="true" href="#cheatsheet"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cheatsheet&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-making-requests-101" class="anchor" aria-hidden="true" href="#making-requests-101"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Making requests 101&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; GET /path&lt;/span&gt;
&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; GET /path?a=hi&amp;amp;b[]=1&amp;amp;b[]=2&amp;amp;b[]=3&lt;/span&gt;
&lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;query:&lt;/span&gt; [&lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;]])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; GET with dynamic client&lt;/span&gt;
&lt;span class="pl-en"&gt;get&lt;/span&gt;(client, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-en"&gt;get&lt;/span&gt;(client, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;query:&lt;/span&gt; [&lt;span class="pl-c1"&gt;page:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; arguments are the same for GET, HEAD, OPTIONS &amp;amp; TRACE&lt;/span&gt;
&lt;span class="pl-en"&gt;head&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-en"&gt;options&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-en"&gt;trace&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; POST, PUT, PATCH&lt;/span&gt;
&lt;span class="pl-en"&gt;post&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some-body-i-used-to-know&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-en"&gt;put&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some-body-i-used-to-know&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;query:&lt;/span&gt; [&lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
&lt;span class="pl-en"&gt;patch&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/path&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, multipart)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-configuring-http-functions-visibility" class="anchor" aria-hidden="true" href="#configuring-http-functions-visibility"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuring HTTP functions visibility&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; generate only get and post function&lt;/span&gt;
&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;~w(&lt;/span&gt;get post&lt;span class="pl-pds"&gt;)a&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; generate only delete function&lt;/span&gt;
&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;, &lt;span class="pl-c1"&gt;only:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:delete&lt;/span&gt;]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; generate all functions except delete and options&lt;/span&gt;
&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;, &lt;span class="pl-c1"&gt;except:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:delete&lt;/span&gt;, &lt;span class="pl-c1"&gt;:options&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-disable-docs-for-http-functions" class="anchor" aria-hidden="true" href="#disable-docs-for-http-functions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disable docs for HTTP functions&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;, &lt;span class="pl-c1"&gt;docs:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-decode-only-json-response-do-not-encode-request" class="anchor" aria-hidden="true" href="#decode-only-json-response-do-not-encode-request"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decode only JSON response (do not encode request)&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;plug &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;DecodeJson&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-use-other-json-library" class="anchor" aria-hidden="true" href="#use-other-json-library"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Use other JSON library&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; use JSX&lt;/span&gt;
plug &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;JSON&lt;/span&gt;, &lt;span class="pl-c1"&gt;engine:&lt;/span&gt; &lt;span class="pl-en"&gt;JSX&lt;/span&gt;, &lt;span class="pl-c1"&gt;engine_opts:&lt;/span&gt; [&lt;span class="pl-c1"&gt;strict:&lt;/span&gt; [&lt;span class="pl-c1"&gt;:comments&lt;/span&gt;]]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; use custom functions&lt;/span&gt;
plug &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;JSON&lt;/span&gt;, &lt;span class="pl-c1"&gt;decode:&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;&lt;span class="pl-en"&gt;JSX&lt;/span&gt;.&lt;span class="pl-en"&gt;decode&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;encode:&lt;/span&gt; &lt;span class="pl-smi"&gt;&amp;amp;&lt;/span&gt;&lt;span class="pl-en"&gt;JSX&lt;/span&gt;.&lt;span class="pl-en"&gt;encode&lt;/span&gt;&lt;span class="pl-k"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-custom-middleware" class="anchor" aria-hidden="true" href="#custom-middleware"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom middleware&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-e"&gt;Middleware&lt;/span&gt;.&lt;span class="pl-en"&gt;MyCustomMiddleware&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;call&lt;/span&gt;(env, next, options) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    env
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;do_something_with_request&lt;/span&gt;()
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Tesla&lt;/span&gt;.&lt;span class="pl-en"&gt;run&lt;/span&gt;(next)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;do_something_with_response&lt;/span&gt;()
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Fork it (&lt;a href="https://github.com/teamon/tesla/fork"&gt;https://github.com/teamon/tesla/fork&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Commit your changes (&lt;code&gt;git commit -am 'Add some feature'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create new Pull Request&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="LICENSE"&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt;
&lt;p&gt;Copyright (c) 2015-2018 &lt;a href="http://teamon.eu/about/" rel="nofollow"&gt;Tymon Tobolski&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>teamon</author><guid isPermaLink="false">https://github.com/teamon/tesla</guid><pubDate>Wed, 29 Jan 2020 00:10:00 GMT</pubDate></item></channel></rss>