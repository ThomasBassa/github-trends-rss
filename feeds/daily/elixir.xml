<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Elixir, Today</title><link>https://github.com/trending/elixir?since=daily</link><description>The top repositories on GitHub for elixir, measured daily</description><pubDate>Mon, 06 Jan 2020 01:08:20 GMT</pubDate><lastBuildDate>Mon, 06 Jan 2020 01:08:20 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>phoenixframework/phoenix_live_view #1 in Elixir, Today</title><link>https://github.com/phoenixframework/phoenix_live_view</link><description>&lt;p&gt;&lt;i&gt;Rich, real-time user experiences with server-rendered HTML&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-phoenix-liveview" class="anchor" aria-hidden="true" href="#phoenix-liveview"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Phoenix LiveView&lt;/h1&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/phoenixframework/phoenix_live_view/workflows/CI/badge.svg"&gt;&lt;img src="https://github.com/phoenixframework/phoenix_live_view/workflows/CI/badge.svg" alt="Actions Status" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Phoenix LiveView enables rich, real-time user experiences with server-rendered HTML. For more information, &lt;a href="https://dockyard.com/blog/2018/12/12/phoenix-liveview-interactive-real-time-apps-no-need-to-write-javascript" rel="nofollow"&gt;see the initial announcement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Currently LiveView is under active development and we are focused on getting a stable and solid initial version out. For this reason, we will be accepting only bug reports in the issues tracker for now. We will open the issues tracker for features after the current milestone is ironed out.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-learning" class="anchor" aria-hidden="true" href="#learning"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Learning&lt;/h2&gt;
&lt;p&gt;As official guides are being developed, see our existing
comprehensive docs and examples to get up to speed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/phoenix_live_view" rel="nofollow"&gt;Phoenix.LiveView docs for Elixir and JavaScript usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/phoenixframework/phoenix_live_view/blob/master/lib/phoenix_live_view/test/live_view_test.ex"&gt;Phoenix.LiveViewTest for testing docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chrismccord/phoenix_live_view_example"&gt;LiveView example repo&lt;/a&gt; with a handful of examples from Weather widgets, autocomplete search, and games like Snake or Pacman&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;There are currently two methods for installing LiveView. For projects that
require more stability, it is recommended that you install using the
&lt;a href="https://hexdocs.pm/phoenix_live_view/installation.html" rel="nofollow"&gt;installation guide on HexDocs&lt;/a&gt;.
If you want to use the latest features, you should follow the instructions
given in the markdown file &lt;a href="guides/introduction/installation.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-browser-support" class="anchor" aria-hidden="true" href="#browser-support"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Browser Support&lt;/h2&gt;
&lt;p&gt;All current Chrome, Safari, Firefox, and MS Edge are supported.
IE11 support is available with the following polyfills:&lt;/p&gt;
&lt;div class="highlight highlight-text-shell-session"&gt;&lt;pre&gt;$ &lt;span class="pl-s1"&gt;npm install --save --prefix assets mdn-polyfills url-search-params-polyfill formdata-polyfill child-replace-with-polyfill classlist-polyfill&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-js"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;//&lt;/span&gt; assets/js/app.js&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/CustomEvent&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/String.prototype.startsWith&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Array.from&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/NodeList.prototype.forEach&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Element.prototype.closest&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mdn-polyfills/Element.prototype.matches&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;child-replace-with-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url-search-params-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;formdata-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;classlist-polyfill&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; {&lt;span class="pl-smi"&gt;Socket&lt;/span&gt;} &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;phoenix&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;LiveSocket&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;phoenix_live_view&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;...&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>phoenixframework</author><guid isPermaLink="false">https://github.com/phoenixframework/phoenix_live_view</guid><pubDate>Mon, 06 Jan 2020 00:01:00 GMT</pubDate></item><item><title>adriankumpf/teslamate #2 in Elixir, Today</title><link>https://github.com/adriankumpf/teslamate</link><description>&lt;p&gt;&lt;i&gt;A self-hosted data logger for your Tesla  ðŸš˜&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-teslamate" class="anchor" aria-hidden="true" href="#teslamate"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TeslaMate&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://teslamate.readthedocs.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3fec9436ac98350de852be14e785495aeaa4cf3f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7465736c616d6174652f62616467652f3f76657273696f6e3d6c6174657374" alt="" data-canonical-src="https://readthedocs.org/projects/teslamate/badge/?version=latest" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/adriankumpf/teslamate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c43a9b01e70660247fcefaed6fe1daa95cb8326b/68747470733a2f2f7472617669732d63692e6f72672f61647269616e6b756d70662f7465736c616d6174652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/adriankumpf/teslamate.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/adriankumpf/teslamate?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6d125280b977180d58015d7a915e3f531beacdac/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f61647269616e6b756d70662f7465736c616d6174652f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/adriankumpf/teslamate/badge.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hub.docker.com/r/teslamate/teslamate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ac2552e90c246eb1c1918b89cf47445cf9ffb31a/68747470733a2f2f696d616765732e6d6963726f6261646765722e636f6d2f6261646765732f76657273696f6e2f7465736c616d6174652f7465736c616d6174652e737667" alt="" data-canonical-src="https://images.microbadger.com/badges/version/teslamate/teslamate.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://microbadger.com/images/teslamate/teslamate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5b32a8dcc234c1d49c1ab1c0fd88e06b4b6c6f6c/68747470733a2f2f696d616765732e6d6963726f6261646765722e636f6d2f6261646765732f696d6167652f7465736c616d6174652f7465736c616d6174652e737667" alt="" data-canonical-src="https://images.microbadger.com/badges/image/teslamate/teslamate.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://hub.docker.com/r/teslamate/teslamate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1b5b167991b3d63e76cc64448abc418f31be9a5f/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7465736c616d6174652f7465736c616d6174653f636f6c6f723d253233303939636563" alt="" data-canonical-src="https://img.shields.io/docker/pulls/teslamate/teslamate?color=%23099cec" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=YE4CPXRAV9CVL&amp;amp;source=url" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5b85b9d77e98c453a0b83d75c667832a5683c246/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f6e6174652d50617950616c2d6666363962342e737667" alt="" data-canonical-src="https://img.shields.io/badge/Donate-PayPal-ff69b4.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A powerful, self-hosted data logger for your Tesla.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Written in &lt;strong&gt;&lt;a href="https://elixir-lang.org/" rel="nofollow"&gt;Elixir&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Data is stored in a &lt;strong&gt;Postgres&lt;/strong&gt; database&lt;/li&gt;
&lt;li&gt;Visualization and data analysis with &lt;strong&gt;Grafana&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Vehicle data is published to a local &lt;strong&gt;MQTT&lt;/strong&gt; Broker&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-features" class="anchor" aria-hidden="true" href="#features"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dashboards&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lifetime driving map&lt;/li&gt;
&lt;li&gt;Drive and charging reports&lt;/li&gt;
&lt;li&gt;Driving efficiency report&lt;/li&gt;
&lt;li&gt;Consumption (net / gross)&lt;/li&gt;
&lt;li&gt;Charge energy added vs energy used&lt;/li&gt;
&lt;li&gt;Vampire drain&lt;/li&gt;
&lt;li&gt;Projected 100% range (battery degradation)&lt;/li&gt;
&lt;li&gt;SOC charging stats&lt;/li&gt;
&lt;li&gt;Visited addresses&lt;/li&gt;
&lt;li&gt;History of installed updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Little to no additional vampire drain: the car will fall asleep after a certain idle time&lt;/li&gt;
&lt;li&gt;Automatic address lookup&lt;/li&gt;
&lt;li&gt;Locally enriches positions with elevation data&lt;/li&gt;
&lt;li&gt;Geo-fencing feature to create custom locations&lt;/li&gt;
&lt;li&gt;Supports multiple vehicles per Tesla Account&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="/docs/screenshots/drive.png"&gt;&lt;img src="/docs/screenshots/drive.png" alt="Drive Details" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a target="_blank" rel="noopener noreferrer" href="/docs/screenshots/web_interface.png"&gt;&lt;img src="/docs/screenshots/web_interface.png" alt="Web Interface" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;strong&gt;&lt;a href="/docs/screenshots.md"&gt;MORE SCREENSHOTS&lt;/a&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;The full TeslaMate documentation is available on &lt;a href="https://teslamate.readthedocs.io/" rel="nofollow"&gt;Read the Docs&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting Started
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/installation/docker.html" rel="nofollow"&gt;Simple Docker install&lt;/a&gt; (inside your home network)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/installation/docker_advanced.html" rel="nofollow"&gt;Advanced Docker install&lt;/a&gt; (Reverse Proxy, Let's Encrypt Certificate, HTTP Basic Auth)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/installation/debian.html" rel="nofollow"&gt;Manual install on Debian/Ubuntu&lt;/a&gt; (without Docker)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.helm.sh/charts/billimek/teslamate" rel="nofollow"&gt;Kubernetes install&lt;/a&gt; (opinionated helm chart)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/upgrading.html" rel="nofollow"&gt;Upgrading to a new version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/faq.html" rel="nofollow"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sleep Mode
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/configuration/sleep.html" rel="nofollow"&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/configuration/guides/shortcuts.html" rel="nofollow"&gt;Shortcuts Setup (iOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/configuration/guides/tasker.html" rel="nofollow"&gt;Tasker Setup (Android)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/configuration/guides/macro_droid.html" rel="nofollow"&gt;MacroDroid Setup (Setup)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integrations
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/integrations/home_assistant.html" rel="nofollow"&gt;HomeAssistant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/integrations/mqtt.html" rel="nofollow"&gt;MQTT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advanced configuration
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/configuration/environment_variables.html" rel="nofollow"&gt;Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Development and Contributing
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teslamate.readthedocs.io/en/latest/development.html" rel="nofollow"&gt;Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-donations" class="anchor" aria-hidden="true" href="#donations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Donations&lt;/h2&gt;
&lt;p&gt;TeslaMate is open source and completely free for everyone to use.&lt;/p&gt;
&lt;p&gt;Maintaining this project isn't effortless, or free. If you would like to
support further development, that would be awesome. If you don't, no problem;
just share your love and show your support.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=YE4CPXRAV9CVL&amp;amp;source=url" rel="nofollow"&gt;
    &lt;img src="docs/images/paypal-donate-button.png" alt="Donate with PayPal" style="max-width:100%;"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Authors: Adrian Kumpf â€“ &lt;a href="https://github.com/adriankumpf/teslamate/graphs/contributors"&gt;List of contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Distributed under MIT License&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>adriankumpf</author><guid isPermaLink="false">https://github.com/adriankumpf/teslamate</guid><pubDate>Mon, 06 Jan 2020 00:02:00 GMT</pubDate></item><item><title>ueberauth/guardian #3 in Elixir, Today</title><link>https://github.com/ueberauth/guardian</link><description>&lt;p&gt;&lt;i&gt;Elixir Authentication&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-guardian" class="anchor" aria-hidden="true" href="#guardian"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Guardian&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;An authentication library for use with Elixir applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/ueberauth/guardian" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/36fa1af2e1abf6a696ee2ab1a1c790299d0e8189/68747470733a2f2f7472617669732d63692e6f72672f7565626572617574682f677561726469616e2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ueberauth/guardian.svg?branch=master" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/ueberauth/guardian" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b2ad4003b44fc5b835aaf092fcfbf23f96cbf511/68747470733a2f2f636f6465636f762e696f2f67682f7565626572617574682f677561726469616e2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/ueberauth/guardian/branch/master/graph/badge.svg" style="max-width:100%;"&gt;&lt;/a&gt;
&lt;a href="http://inch-ci.org/github/ueberauth/guardian" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/73bbaa44dafc8b3ade9b22142634f7b777da3f53/687474703a2f2f696e63682d63692e6f72672f6769746875622f7565626572617574682f677561726469616e2e737667" alt="Inline docs" data-canonical-src="http://inch-ci.org/github/ueberauth/guardian.svg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looking for &lt;a href="https://github.com/ueberauth/guardian/tree/v0.14.x"&gt;Guardian pre 1.0&lt;/a&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Upgrading from pre 1.0? See the &lt;a href="upgrade_guides/0.14.to.1.0.md"&gt;0.14 to 1.0 Upgrade Guide&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Guardian is a token based authentication library for use with Elixir applications.&lt;/p&gt;
&lt;p&gt;Guardian remains a functional system. It integrates with Plug, but can be used outside of it. If you're implementing a TCP/UDP protocol directly, or want to utilize your authentication via channels in Phoenix, Guardian is your friend.&lt;/p&gt;
&lt;p&gt;The core currency of authentication in Guardian is the &lt;em&gt;token&lt;/em&gt;.
By default &lt;a href="https://jwt.io" rel="nofollow"&gt;JSON Web Tokens&lt;/a&gt; are supported out of the box but any token that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has the concept of a key-value payload&lt;/li&gt;
&lt;li&gt;Is tamper proof&lt;/li&gt;
&lt;li&gt;Can serialize to a String&lt;/li&gt;
&lt;li&gt;Has a supporting module that implements the &lt;code&gt;Guardian.Token&lt;/code&gt; behaviour&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use Guardian tokens to authenticate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web endpoints (Plug/Phoenix/X)&lt;/li&gt;
&lt;li&gt;Channels/Sockets (Phoenix - optional)&lt;/li&gt;
&lt;li&gt;Any other system you can imagine. If you can attach an authentication token you can authenticate it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tokens should be able to contain any assertions (claims) that a developer wants to make and may contain both standard and application specific information encoded within them.&lt;/p&gt;
&lt;p&gt;Guardian also allows you to configure multiple token types/configurations in a single application.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;API documentation is available at &lt;a href="https://hexdocs.pm/guardian" rel="nofollow"&gt;https://hexdocs.pm/guardian&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Guardian requires that you create an "Implementation Module". This module is your applications implementation for a particular type/configuration of token. You do this by &lt;code&gt;use&lt;/code&gt;ing Guardian in your module and adding the relevant configuration.&lt;/p&gt;
&lt;p&gt;Add Guardian to your application&lt;/p&gt;
&lt;p&gt;mix.exs&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;deps&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  [{&lt;span class="pl-c1"&gt;:guardian&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;~&amp;gt; 2.0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a module that uses &lt;code&gt;Guardian&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;, &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;subject_for_token&lt;/span&gt;(resource, _claims) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; You can use any value for the subject of your token but&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; it should be useful in retrieving the resource later, see&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; how it being used on `resource_from_claims/1` function.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; A unique `id` is a good subject, a non-unique email address&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; is a poor subject.&lt;/span&gt;
    sub &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;to_string&lt;/span&gt;(resource.id)
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, sub}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;subject_for_token&lt;/span&gt;(_, _) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:reason_for_error&lt;/span&gt;}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;resource_from_claims&lt;/span&gt;(claims) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Here we'll look up our resource from the claims, the subject can be&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; found in the `"sub"` key. In `above subject_for_token/2` we returned&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; the resource id so here we'll rely on that to look it up.&lt;/span&gt;
    id &lt;span class="pl-k"&gt;=&lt;/span&gt; claims[&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sub&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]
    resource &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;get_resource_by_id&lt;/span&gt;(id)
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;,  resource}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;resource_from_claims&lt;/span&gt;(_claims) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:reason_for_error&lt;/span&gt;}
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add your configuration&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
       &lt;span class="pl-c1"&gt;issuer:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my_app&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
       &lt;span class="pl-c1"&gt;secret_key:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Secret key. You can use `mix guardian.gen.secret` to get one&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this level of configuration, you can have a working installation.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basics&lt;/h2&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; encode a token for a resource&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;encode_and_sign&lt;/span&gt;(resource)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; decode and verify a token&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;decode_and_verify&lt;/span&gt;(token)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; revoke a token (use GuardianDb or something similar if you need revoke to actually track a token)&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;revoke&lt;/span&gt;(token)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Refresh a token before it expires&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _old_stuff, {new_token, new_claims}} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;refresh&lt;/span&gt;(token)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Exchange a token of type "refresh" for a new token of type "access"&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, _old_stuff, {new_token, new_claims}} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;exchange&lt;/span&gt;(token, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;refresh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;access&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Lookup a resource directly from a token&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, resource, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;resource_from_token&lt;/span&gt;(token)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With Plug&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If a session is loaded the token/resource/claims will be put into the session and connection&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If no session is loaded, the token/resource/claims only go onto the connection&lt;/span&gt;
conn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;sign_in&lt;/span&gt;(conn, resource)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Optionally with claims and options&lt;/span&gt;
conn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;sign_in&lt;/span&gt;(conn, resource, %{&lt;span class="pl-c1"&gt;some:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;claim&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, &lt;span class="pl-c1"&gt;ttl:&lt;/span&gt; {&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;:minute&lt;/span&gt;})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; remove from session (if fetched) and revoke the token&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; can also clear the remember me token, if the option :clear_remember_me is set&lt;/span&gt;
conn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;sign_out&lt;/span&gt;(conn)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Set a "refresh" token directly on a cookie.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Can be used in conjunction with `Guardian.Plug.VerifyCookie` and `Guardian.Plug.SlidingCookie`&lt;/span&gt;
conn &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;remember_me&lt;/span&gt;(conn, resource)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Fetch the information from the current connection&lt;/span&gt;
token &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;current_token&lt;/span&gt;(conn)
claims &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;current_claims&lt;/span&gt;(conn)
resource &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;current_resource&lt;/span&gt;(conn)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Creating with custom claims and options&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Add custom claims to a token&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;encode_and_sign&lt;/span&gt;(resource, %{&lt;span class="pl-c1"&gt;some:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;claim&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Create a specific token type (i.e. "access"/"refresh" etc)&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;encode_and_sign&lt;/span&gt;(resource, %{}, &lt;span class="pl-c1"&gt;token_type:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;refresh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Customize the time to live (ttl) of the token&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;encode_and_sign&lt;/span&gt;(resource, %{}, &lt;span class="pl-c1"&gt;ttl:&lt;/span&gt; {&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;:minute&lt;/span&gt;})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Customize the secret&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;encode_and_sign&lt;/span&gt;(resource, %{}, &lt;span class="pl-c1"&gt;secret:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;custom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;encode_and_sign&lt;/span&gt;(resource, %{}, &lt;span class="pl-c1"&gt;secret:&lt;/span&gt; {&lt;span class="pl-en"&gt;SomeMod&lt;/span&gt;, &lt;span class="pl-c1"&gt;:some_func&lt;/span&gt;, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;args&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Require an "auth_time" claim to be added.&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;encode_and_sign&lt;/span&gt;(resource, %{}, &lt;span class="pl-c1"&gt;auth_time:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Decoding tokens&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Check some literal claims. (i.e. this is an access token)&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;decode_and_verify&lt;/span&gt;(token, %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;typ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;access&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Use a custom secret&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;decode_and_verify&lt;/span&gt;(token, %{}, &lt;span class="pl-c1"&gt;secret:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;custom&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;decode_and_verify&lt;/span&gt;(token, %{}, &lt;span class="pl-c1"&gt;secret:&lt;/span&gt; {&lt;span class="pl-en"&gt;SomeMod&lt;/span&gt;, &lt;span class="pl-c1"&gt;:some_func&lt;/span&gt;, [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;some&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;args&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]})

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Specify a maximum age (since end user authentication time). If the token has an&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; `auth_time` claim and it is older than the `max_age` allows, the token will be invalid.&lt;/span&gt;
{&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, claims} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;decode_and_verify&lt;/span&gt;(token, %{}, &lt;span class="pl-c1"&gt;max_age:&lt;/span&gt; {&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;:hours&lt;/span&gt;})&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need dynamic verification for JWT tokens, please see the documentation for &lt;code&gt;Guardian.Token.Jwt&lt;/code&gt; and &lt;code&gt;Guardian.Token.Jwt.SecretFetcher&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The following configuration is available to all implementation modules.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;token_module&lt;/code&gt; - The module that implements the functions for dealing with tokens. Default &lt;code&gt;Guardian.Token.Jwt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Guardian can handle tokens of any type that implements the &lt;code&gt;Guardian.Token&lt;/code&gt; behaviour.
Each token module will have its own configuration requirements. Please see below for the JWT configuration.&lt;/p&gt;
&lt;p&gt;All configuration values may be provided in two ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In your config files&lt;/li&gt;
&lt;li&gt;As a Keyword list to your call to &lt;code&gt;use Guardian&lt;/code&gt; in your implementation module.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any options given to &lt;code&gt;use Guardian&lt;/code&gt; have precedence over config values found in the config files.&lt;/p&gt;
&lt;p&gt;Some configuration may be required by your &lt;code&gt;token_module&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-configuration-values" class="anchor" aria-hidden="true" href="#configuration-values"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration values&lt;/h3&gt;
&lt;p&gt;Guardian supports resolving configuration options at runtime, to that we use the following syntax:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{MyModule, :func, [:some, :args]}&lt;/code&gt; Calls the function on the module with args&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are evaluated at runtime and any value that you fetch via&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyApp.Guardian.config(key, default)&lt;/code&gt; will be resolved using this scheme.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;Guardian.Config.resolve_value/1&lt;/code&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-jwt-configuration" class="anchor" aria-hidden="true" href="#jwt-configuration"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT (Configuration)&lt;/h3&gt;
&lt;p&gt;The default token type of &lt;code&gt;Guardian&lt;/code&gt; is JWT. It accepts many options but you really only &lt;em&gt;need&lt;/em&gt; to specify the &lt;code&gt;issuer&lt;/code&gt; and &lt;code&gt;secret_key&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-required-configuration-jwt" class="anchor" aria-hidden="true" href="#required-configuration-jwt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Required configuration (JWT)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;issuer&lt;/code&gt; - The issuer of the token. Your application name/id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secret_key&lt;/code&gt; - The secret key to use for the implementation module.
This may be any resolvable value for &lt;code&gt;Guardian.Config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-optional-configuration-jwt" class="anchor" aria-hidden="true" href="#optional-configuration-jwt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optional configuration (JWT)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;token_verify_module&lt;/code&gt; - default &lt;code&gt;Guardian.Token.Jwt.Verify&lt;/code&gt;. The module that verifies the claims&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allowed_algos&lt;/code&gt; - The allowed algos to use for encoding and decoding.
See &lt;code&gt;JOSE&lt;/code&gt; for available. Default &lt;code&gt;["HS512"]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ttl&lt;/code&gt; - The default time to live for all tokens. See the type in Guardian.ttl&lt;/li&gt;
&lt;li&gt;&lt;code&gt;token_ttl&lt;/code&gt; a map of &lt;code&gt;token_type&lt;/code&gt; to &lt;code&gt;ttl&lt;/code&gt;. Set specific ttls for specific types of tokens&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allowed_drift&lt;/code&gt; The drift that is allowed when decoding/verifying a token in milliseconds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verify_issuer&lt;/code&gt; Default false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secret_fetcher&lt;/code&gt; A module used to fetch the secret. Default: &lt;code&gt;Guardian.Token.Jwt.SecretFetcher&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth_time&lt;/code&gt; Include an &lt;code&gt;auth_time&lt;/code&gt; claim to denote the end user authentication time. Default false.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_age&lt;/code&gt; Specify the maximum time (since the end user authentication) the token will be valid.
Format is the same as &lt;code&gt;ttl&lt;/code&gt;. Implies &lt;code&gt;auth_time&lt;/code&gt; unless &lt;code&gt;auth_time&lt;/code&gt; is set explicitly to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href="https://openid.net/specs/openid-connect-core-1_0.html" rel="nofollow"&gt;OpenID Connect Core specification&lt;/a&gt;
for more details about &lt;code&gt;auth_time&lt;/code&gt; and &lt;code&gt;max_age&lt;/code&gt; behaviour.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-secrets-jwt" class="anchor" aria-hidden="true" href="#secrets-jwt"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Secrets (JWT)&lt;/h2&gt;
&lt;p&gt;Secrets can be simple strings or more complicated &lt;code&gt;JOSE&lt;/code&gt; secret schemes.&lt;/p&gt;
&lt;p&gt;The simplest way to use the JWT module is to provide a simple String. (&lt;code&gt;mix guardian.gen.secret&lt;/code&gt; works great)&lt;/p&gt;
&lt;p&gt;Alternatively you can use a module and function by adding &lt;code&gt;secret_key: {MyModule, :function_name, [:some, :args]}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;More advanced secret information can be found below.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-using-options-in-calls" class="anchor" aria-hidden="true" href="#using-options-in-calls"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using options in calls&lt;/h2&gt;
&lt;p&gt;Almost all of the functions provided by &lt;code&gt;Guardian&lt;/code&gt; utilize options as the last argument.
These options are passed from the initiating call through to the &lt;code&gt;token_module&lt;/code&gt; and also your &lt;code&gt;callbacks&lt;/code&gt;. See the documentation for your &lt;code&gt;token_module&lt;/code&gt; (&lt;code&gt;Guardian.Token.Jwt&lt;/code&gt; by default) for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-hooks" class="anchor" aria-hidden="true" href="#hooks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h2&gt;
&lt;p&gt;Each implementation module (modules that &lt;code&gt;use Guardian&lt;/code&gt;) implement callbacks for the &lt;code&gt;Guardian&lt;/code&gt; behaviour. By default, these are just pass-through but you can implement your own version to tweak the behaviour of your tokens.&lt;/p&gt;
&lt;p&gt;The callbacks are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;after_encode_and_sign&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;after_sign_in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;before_sign_out&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build_claims&lt;/code&gt; - Use this to tweak the claims that you include in your token&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_token_type&lt;/code&gt; - default is &lt;code&gt;"access"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_exchange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_revoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_refresh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_verify&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verify_claims&lt;/code&gt; - You can add custom validations for your tokens in this callback&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-plugs" class="anchor" aria-hidden="true" href="#plugs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugs&lt;/h2&gt;
&lt;p&gt;Guardian provides various plugs to help work with web requests in Elixir.
Guardians plugs are optional and will not be compiled if you're not using Plug in your application.&lt;/p&gt;
&lt;p&gt;All plugs need to be in a &lt;code&gt;pipeline&lt;/code&gt;.
A pipeline is just a way to get the implementation module and error handler
into the connection for use downstream. More information can be found in the &lt;code&gt;Pipelines&lt;/code&gt; section.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-plugs-and-keys-advanced-usage" class="anchor" aria-hidden="true" href="#plugs-and-keys-advanced-usage"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugs and keys (advanced usage)&lt;/h3&gt;
&lt;p&gt;All Plugs and related functions provided by &lt;code&gt;Guardian&lt;/code&gt; have the concept of a &lt;code&gt;key&lt;/code&gt;.
A &lt;code&gt;key&lt;/code&gt; specifies a label that is used to keep tokens separate so that you can have multiple token/resource/claims active in a single request.&lt;/p&gt;
&lt;p&gt;In your plug pipeline you may use something like:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;VerifyHeader&lt;/span&gt;, &lt;span class="pl-c1"&gt;key:&lt;/span&gt; &lt;span class="pl-c1"&gt;:impersonate&lt;/span&gt;
plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;EnsureAuthenticated&lt;/span&gt;, &lt;span class="pl-c1"&gt;key:&lt;/span&gt; &lt;span class="pl-c1"&gt;:impersonate&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In your action handler:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;resource &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;current_resource&lt;/span&gt;(conn, &lt;span class="pl-c1"&gt;key:&lt;/span&gt; &lt;span class="pl-c1"&gt;:impersonate&lt;/span&gt;)
claims &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;current_claims&lt;/span&gt;(conn, &lt;span class="pl-c1"&gt;key:&lt;/span&gt; &lt;span class="pl-c1"&gt;:impersonate&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-plugs-out-of-the-box" class="anchor" aria-hidden="true" href="#plugs-out-of-the-box"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plugs out of the box&lt;/h3&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugverifyheader" class="anchor" aria-hidden="true" href="#guardianplugverifyheader"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.VerifyHeader&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Look for a token in the header and verify it&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugverifysession" class="anchor" aria-hidden="true" href="#guardianplugverifysession"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.VerifySession&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Look for a token in the session and verify it&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugverifycookie" class="anchor" aria-hidden="true" href="#guardianplugverifycookie"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.VerifyCookie&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Look for a token in cookies and exchange it for an access token&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugslidingcookie" class="anchor" aria-hidden="true" href="#guardianplugslidingcookie"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.SlidingCookie&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Replace the token in cookies with a new one when a configured minimum TTL
is remaining.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugensureauthenticated" class="anchor" aria-hidden="true" href="#guardianplugensureauthenticated"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.EnsureAuthenticated&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Make sure that a token was found and is valid&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugensurenotauthenticated" class="anchor" aria-hidden="true" href="#guardianplugensurenotauthenticated"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.EnsureNotAuthenticated&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Make sure no one is logged in&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-guardianplugloadresource" class="anchor" aria-hidden="true" href="#guardianplugloadresource"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code&gt;Guardian.Plug.LoadResource&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If a token was found, load the resource for it&lt;/p&gt;
&lt;p&gt;See the documentation for each Plug for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-pipelines" class="anchor" aria-hidden="true" href="#pipelines"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pipelines&lt;/h3&gt;
&lt;p&gt;A pipeline is a way to collect together the various plugs for a particular authentication scheme.&lt;/p&gt;
&lt;p&gt;Apart from keeping an authentication flow together, pipelines provide downstream information for error handling and which implementation module to use. You can provide this separately but we recommend creating a pipeline plug.&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-create-a-custom-pipeline" class="anchor" aria-hidden="true" href="#create-a-custom-pipeline"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create a custom pipeline&lt;/h4&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthAccessPipeline&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Pipeline&lt;/span&gt;, &lt;span class="pl-c1"&gt;otp_app:&lt;/span&gt; &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;

  plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;VerifySession&lt;/span&gt;, &lt;span class="pl-c1"&gt;claims:&lt;/span&gt; %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;typ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;access&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;VerifyHeader&lt;/span&gt;, &lt;span class="pl-c1"&gt;claims:&lt;/span&gt; %{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;typ&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;access&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
  plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;EnsureAuthenticated&lt;/span&gt;
  plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;LoadResource&lt;/span&gt;, &lt;span class="pl-c1"&gt;allow_blank:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, the LoadResource plug will return an error if no resource can be found.
You can override this behaviour using the &lt;code&gt;allow_blank: true&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;Add your implementation module and error handler to your configuration:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthAccessPipeline&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;module:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;error_handler:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthErrorHandler&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By using a pipeline, apart from keeping your auth logic together, you're instructing downstream plugs to use a particular implementation module and error handler.&lt;/p&gt;
&lt;p&gt;If you wanted to do that manually:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Pipeline&lt;/span&gt;, &lt;span class="pl-c1"&gt;module:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
                             &lt;span class="pl-c1"&gt;error_handler:&lt;/span&gt; &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthErrorHandler&lt;/span&gt;

plug &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;VerifySession&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-plug-error-handlers" class="anchor" aria-hidden="true" href="#plug-error-handlers"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plug Error Handlers&lt;/h3&gt;
&lt;p&gt;The error handler is a module that implements an &lt;code&gt;auth_error&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthErrorHandler&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;Conn&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@behaviour&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;ErrorHandler&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@impl&lt;/span&gt; &lt;span class="pl-en"&gt;Guardian&lt;/span&gt;.&lt;span class="pl-en"&gt;Plug&lt;/span&gt;.&lt;span class="pl-en"&gt;ErrorHandler&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;auth_error&lt;/span&gt;(conn, {type, reason}, _opts) &lt;span class="pl-k"&gt;do&lt;/span&gt;
    body &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Jason&lt;/span&gt;.&lt;span class="pl-en"&gt;encode!&lt;/span&gt;(%{&lt;span class="pl-c1"&gt;message:&lt;/span&gt; &lt;span class="pl-en"&gt;to_string&lt;/span&gt;(type)})
    &lt;span class="pl-en"&gt;send_resp&lt;/span&gt;(conn, &lt;span class="pl-c1"&gt;401&lt;/span&gt;, body)
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a id="user-content-phoenix" class="anchor" aria-hidden="true" href="#phoenix"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Phoenix&lt;/h3&gt;
&lt;p&gt;Guardian provides some integration with Phoenix out of the box.
Not a lot is really needed but around sockets, some helper functions have been provided to make things easier to work with.&lt;/p&gt;
&lt;p&gt;Please see the documentation for &lt;code&gt;Guardian.Phoenix.Socket&lt;/code&gt; for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-permissions" class="anchor" aria-hidden="true" href="#permissions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Permissions&lt;/h2&gt;
&lt;p&gt;Permissions can be encoded into your token as an optional add-in.&lt;/p&gt;
&lt;p&gt;Encoding permissions into a token is useful in some areas of authorization.
The permissions provided by &lt;code&gt;Guardian.Permissions&lt;/code&gt; have one level of nesting.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;users -&amp;gt; profile_read&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;users -&amp;gt; profile_write&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;users -&amp;gt; followers_read&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;users -&amp;gt; followers_write&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;admin -&amp;gt; all_users_read&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;admin -&amp;gt; all_users_write&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once a permission is granted it is valid for as long as the token is valid.
Since the permission is valid for the life of a token it is not suitable to encode highly dynamic information into a token. These permissions are similar in intent to OAuth scopes. Very useful as a broad grant to an area of code for 3rd party services / other microservices. If you have a requirement to look up permissions from your database for a particular user on each request, these are not the permissions you're looking for.&lt;/p&gt;
&lt;p&gt;Please see &lt;code&gt;Guardian.Permissions&lt;/code&gt; for more information.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-tracking-tokens" class="anchor" aria-hidden="true" href="#tracking-tokens"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tracking Tokens&lt;/h2&gt;
&lt;p&gt;When using tokens, depending on the type of token you use, nothing may happen by default when you &lt;code&gt;revoke&lt;/code&gt; a token.&lt;/p&gt;
&lt;p&gt;For example, JWT tokens by default are not tracked by the application.
The fact that they are signed with the correct secret and are not expired is usually how validation of if a token is active or not. Depending on your use-case this may not be enough for your application needs.
If you need to track and revoke individual tokens, you may need to use something like
&lt;a href="https://github.com/ueberauth/guardian_db"&gt;GuardianDb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This will record each token issued in your database, confirm it is still valid on each access and then finally when you &lt;code&gt;revoke&lt;/code&gt; (called on sign_out or manually) invalidate the token.&lt;/p&gt;
&lt;p&gt;For more in-depth documentation please see the &lt;a href="https://github.com/ueberauth/guardian_db/blob/master/README.md"&gt;GuardianDb README&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-best-testing-practices" class="anchor" aria-hidden="true" href="#best-testing-practices"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Best testing practices&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-how-to-add-the-token-to-a-request-the-phoenix-way" class="anchor" aria-hidden="true" href="#how-to-add-the-token-to-a-request-the-phoenix-way"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to add the token to a request (the Phoenix way)&lt;/h3&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;HelloWeb&lt;/span&gt;.&lt;span class="pl-en"&gt;AuthControllerTest&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;HelloWeb&lt;/span&gt;.&lt;span class="pl-en"&gt;ConnCase&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;HelloWeb&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;

 test &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GET /auth/me&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, %{&lt;span class="pl-c1"&gt;conn:&lt;/span&gt; conn} &lt;span class="pl-k"&gt;do&lt;/span&gt;
    user &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;insert&lt;/span&gt;(&lt;span class="pl-c1"&gt;:user&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; See https://github.com/thoughtbot/ex_machina&lt;/span&gt;

    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, token, _} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;encode_and_sign&lt;/span&gt;(user, %{}, &lt;span class="pl-c1"&gt;token_type:&lt;/span&gt; &lt;span class="pl-c1"&gt;:access&lt;/span&gt;)

    conn &lt;span class="pl-k"&gt;=&lt;/span&gt; conn
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;put_req_header&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;authorization&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bearer: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; token)
    &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-en"&gt;auth_path&lt;/span&gt;(conn, &lt;span class="pl-c1"&gt;:me&lt;/span&gt;))

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Assert things here&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a id="user-content-related-projects" class="anchor" aria-hidden="true" href="#related-projects"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hex.pm/packages/guardian_db" rel="nofollow"&gt;GuardianDb&lt;/a&gt; - Token tracking in the database&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hex.pm/packages/sans_password" rel="nofollow"&gt;sans_password&lt;/a&gt; - A simple, passwordless authentication system based on Guardian.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hex.pm/packages/protego" rel="nofollow"&gt;protego&lt;/a&gt; - Flexible authentication solution for Elixir/Phoenix with Guardian.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-more-advanced-secrets" class="anchor" aria-hidden="true" href="#more-advanced-secrets"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;More advanced secrets&lt;/h2&gt;
&lt;p&gt;By specifying a binary, the default behavior is to treat the key as an &lt;a href="https://tools.ietf.org/html/rfc7518#section-6.4" rel="nofollow"&gt;&lt;code&gt;"oct"&lt;/code&gt;&lt;/a&gt; key type (short for octet sequence). This key type may be used with the &lt;code&gt;"HS256"&lt;/code&gt;, &lt;code&gt;"HS384"&lt;/code&gt;, and &lt;code&gt;"HS512"&lt;/code&gt; signature algorithms.&lt;/p&gt;
&lt;p&gt;Alternatively, a configuration value that resolves to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%JOSE.JWK{} Struct&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;may be specified for other key types. A full list of example key types is available &lt;a href="https://gist.github.com/potatosalad/925a8b74d85835e285b9"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://hexdocs.pm/jose/key-generation.html" rel="nofollow"&gt;key generation docs&lt;/a&gt; from Jose for how to generate your own keys.&lt;/p&gt;
&lt;p&gt;To get off the ground quickly, set your &lt;code&gt;secret_key&lt;/code&gt; in your Guardian config with the output of either:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ mix guardian.gen.secret&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iex(1)&amp;gt; JOSE.JWS.generate_key(%{"alg" =&amp;gt; "HS512"}) |&amp;gt; JOSE.JWK.to_map |&amp;gt; elem(1) |&amp;gt; Map.take(["k", "kty"])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After running &lt;code&gt;$ mix deps.get&lt;/code&gt; because JOSE is one of Guardian's dependencies.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;##&lt;/span&gt; Map ##&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;allowed_algos:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ES512&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
  &lt;span class="pl-c1"&gt;secret_key:&lt;/span&gt; %{
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;crv&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;P-521&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;d&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;axDuTtGavPjnhlfnYAwkHa4qyfz2fdseppXEzmKpQyY0xd3bGpYLEF4ognDpRJm5IRaM31Id2NfEtDFw4iTbDSE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;kty&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;EC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AL0H8OvP5NuboUoj8Pb3zpBcDyEJN907wMxrCy7H2062i3IRPF5NQ546jIJU3uQX5KN2QB_Cq6R_SUqyVZSNpIfC&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;y&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ALdxLuo6oKLoQ-xLSkShv_TA0di97I9V92sg1MKFava5hKGST1EKiVQnZMrN3HO8LtLT78SNTgwJSQHAXIUaA-lV&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  }

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;##&lt;/span&gt; Tuple ##&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If, for example, you have your secret key stored externally (in this example, we're using Redix).&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; defined elsewhere&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MySecretKey&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Bad practice for example purposes only.&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; An already established connection should be used and possibly cache the value locally.&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, conn} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;Redix&lt;/span&gt;.&lt;span class="pl-en"&gt;start_link&lt;/span&gt;
    rsa_jwk &lt;span class="pl-k"&gt;=&lt;/span&gt; conn
      &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;Redix&lt;/span&gt;.&lt;span class="pl-en"&gt;command!&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;GET my-rsa-key&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])
      &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;JOSE&lt;/span&gt;.&lt;span class="pl-en"&gt;JWK&lt;/span&gt;.&lt;span class="pl-en"&gt;from_binary&lt;/span&gt;
    &lt;span class="pl-en"&gt;Redix&lt;/span&gt;.&lt;span class="pl-en"&gt;stop&lt;/span&gt;(conn)
    rsa_jwk
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;allowed_algos:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;RS512&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
  &lt;span class="pl-c1"&gt;secret_key:&lt;/span&gt; {&lt;span class="pl-en"&gt;MySecretKey&lt;/span&gt;, &lt;span class="pl-c1"&gt;:fetch&lt;/span&gt;, []}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;##&lt;/span&gt; %JOSE.JWK{} Struct ##&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Useful if you store your secret key in an encrypted JSON file with the passphrase in an environment variable.&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; defined elsewhere&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MySecretKey&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-en"&gt;System&lt;/span&gt;.&lt;span class="pl-en"&gt;get_env&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SECRET_KEY_PASSPHRASE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;JOSE&lt;/span&gt;.&lt;span class="pl-en"&gt;JWK&lt;/span&gt;.&lt;span class="pl-en"&gt;from_file&lt;/span&gt;(&lt;span class="pl-en"&gt;System&lt;/span&gt;.&lt;span class="pl-en"&gt;get_env&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;SECRET_KEY_FILE&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;))
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

config &lt;span class="pl-c1"&gt;:my_app&lt;/span&gt;, &lt;span class="pl-en"&gt;MyApp&lt;/span&gt;.&lt;span class="pl-en"&gt;Guardian&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;allowed_algos:&lt;/span&gt; [&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Ed25519&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;],
  &lt;span class="pl-c1"&gt;secret_key:&lt;/span&gt; {&lt;span class="pl-en"&gt;MySecretKey&lt;/span&gt;, &lt;span class="pl-c1"&gt;:fetch&lt;/span&gt;, []}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A full example of how to configure guardian to use private/public key files as secrets, can be found &lt;a href="https://github.com/ueberauth/guardian_pemfile_config_example"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>ueberauth</author><guid isPermaLink="false">https://github.com/ueberauth/guardian</guid><pubDate>Mon, 06 Jan 2020 00:03:00 GMT</pubDate></item><item><title>christopheradams/elixir_style_guide #4 in Elixir, Today</title><link>https://github.com/christopheradams/elixir_style_guide</link><description>&lt;p&gt;&lt;i&gt;A community driven style guide for Elixir&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-the-elixir-style-guide" class="anchor" aria-hidden="true" href="#the-elixir-style-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href="https://github.com/christopheradams/elixir_style_guide"&gt;The Elixir Style Guide&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-table-of-contents" class="anchor" aria-hidden="true" href="#table-of-contents"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#prelude"&gt;Prelude&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#formatting"&gt;Formatting&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#whitespace"&gt;Whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indentation"&gt;Indentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#parentheses"&gt;Parentheses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#syntax"&gt;Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#the-guide"&gt;The Guide&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#expressions"&gt;Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#naming"&gt;Naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comments"&gt;Comments&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#comment-annotations"&gt;Comment Annotations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#modules"&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#typespecs"&gt;Typespecs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#structs"&gt;Structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exceptions"&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collections"&gt;Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strings"&gt;Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Regular Expressions&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#metaprogramming"&gt;Metaprogramming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#alternative-style-guides"&gt;Alternative Style Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tools"&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#getting-involved"&gt;Getting Involved&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spread-the-word"&gt;Spread the Word&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#copying"&gt;Copying&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attribution"&gt;Attribution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-prelude" class="anchor" aria-hidden="true" href="#prelude"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prelude&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Liquid architecture. It's like jazz â€” you improvise, you work together, you
play off each other, you make something, they make something.&lt;/p&gt;
&lt;p&gt;â€”Frank Gehry&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Style matters.
&lt;a href="http://elixir-lang.org" rel="nofollow"&gt;Elixir&lt;/a&gt; has plenty of style but like all languages it can be stifled.
Don't stifle the style.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;This is community style guide for the &lt;a href="http://elixir-lang.org" rel="nofollow"&gt;Elixir programming language&lt;/a&gt;.
Please feel free to make pull requests and suggestions, and be a part of
Elixir's vibrant community.&lt;/p&gt;
&lt;p&gt;If you're looking for other projects to contribute to please see the
&lt;a href="https://hex.pm/packages" rel="nofollow"&gt;Hex package manager site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="user-content-translations"&gt;&lt;/a&gt;
Translations of the guide are available in the following languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/geekerzp/elixir_style_guide/blob/master/README-zhCN.md"&gt;Chinese Simplified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixirtw/elixir_style_guide/blob/master/README_zhTW.md"&gt;Chinese Traditional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ronanboiteau/elixir_style_guide/blob/master/README_frFR.md"&gt;French&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kenichirow/elixir_style_guide/blob/master/README-jaJP.md"&gt;Japanese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marocchino/elixir_style_guide/blob/new-korean/README-koKR.md"&gt;Korean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gusaiani/elixir_style_guide/blob/master/README_ptBR.md"&gt;Portuguese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/albertoalmagro/elixir_style_guide/blob/spanish/README_esES.md"&gt;Spanish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-formatting" class="anchor" aria-hidden="true" href="#formatting"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Formatting&lt;/h2&gt;
&lt;p&gt;Elixir v1.6 introduced a &lt;a href="https://hexdocs.pm/elixir/Code.html#format_string!/2" rel="nofollow"&gt;Code Formatter&lt;/a&gt; and &lt;a href="https://hexdocs.pm/mix/Mix.Tasks.Format.html" rel="nofollow"&gt;Mix format&lt;/a&gt; task.
The formatter should be preferred for all new projects and source code.&lt;/p&gt;
&lt;p&gt;The rules in this section are applied automatically by the code formatter, but
are provided here as examples of the preferred style.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-whitespace" class="anchor" aria-hidden="true" href="#whitespace"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Whitespace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-trailing-whitespace"&gt;&lt;/a&gt;
Avoid trailing whitespace.
&lt;sup&gt;[&lt;a href="#trailing-whitespace"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-newline-eof"&gt;&lt;/a&gt;
End each file with a newline.
&lt;sup&gt;[&lt;a href="#newline-eof"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-line-endings"&gt;&lt;/a&gt;
Use Unix-style line endings (*BSD/Solaris/Linux/OSX users are covered by
default, Windows users have to be extra careful).
&lt;sup&gt;[&lt;a href="#line-endings"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-autocrlf"&gt;&lt;/a&gt;
If you're using Git you might want to add the following configuration
setting to protect your project from Windows line endings creeping in:
&lt;sup&gt;[&lt;a href="#autocrlf"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell"&gt;&lt;pre&gt;git config --global core.autocrlf &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-line-length"&gt;&lt;/a&gt;
Limit lines to 98 characters.
Otherwise, set the &lt;code&gt;:line_length&lt;/code&gt; option in your &lt;code&gt;.formatter.exs&lt;/code&gt; file.
&lt;sup&gt;[&lt;a href="#line-length"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-spaces"&gt;&lt;/a&gt;
Use spaces around operators, after commas, colons and semicolons.
Do not put spaces around matched pairs like brackets, parentheses, etc.
Whitespace might be (mostly) irrelevant to the Elixir runtime, but its proper
use is the key to writing easily readable code.
&lt;sup&gt;[&lt;a href="#spaces"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;sum &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;
{a, b} &lt;span class="pl-k"&gt;=&lt;/span&gt; {&lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;}
[first &lt;span class="pl-k"&gt;|&lt;/span&gt; rest] &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;]
&lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;map&lt;/span&gt;([&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;one&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;two&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;three&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;], &lt;span class="pl-k"&gt;fn&lt;/span&gt; num &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(num) &lt;span class="pl-k"&gt;end&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-no-spaces"&gt;&lt;/a&gt;
Do not use spaces after non-word operators that only take one argument; or
around the range operator.
&lt;sup&gt;[&lt;a href="#no-spaces"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;
&lt;span class="pl-smi"&gt;^pinned&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;some_func&lt;/span&gt;()
&lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-k"&gt;..&lt;/span&gt;&lt;span class="pl-c1"&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-def-spacing"&gt;&lt;/a&gt;
Use blank lines between &lt;code&gt;def&lt;/code&gt;s to break up a function into logical
paragraphs.
&lt;sup&gt;[&lt;a href="#def-spacing"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(some_data) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  some_data &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;other_function&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;List&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;()
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  result
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_other_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  another_result
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;a_longer_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  one
  two

  three
  four
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-defmodule-spacing"&gt;&lt;/a&gt;
Don't put a blank line after &lt;code&gt;defmodule&lt;/code&gt;.
&lt;sup&gt;[&lt;a href="#defmodule-spacing"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-long-dos"&gt;&lt;/a&gt;
If the function head and &lt;code&gt;do:&lt;/code&gt; clause are too long to fit on the same line, put
&lt;code&gt;do:&lt;/code&gt; on a new line, indented one level more than the previous line.
&lt;sup&gt;[&lt;a href="#long-dos"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([&lt;span class="pl-c1"&gt;:foo&lt;/span&gt;, &lt;span class="pl-c1"&gt;:bar&lt;/span&gt;, &lt;span class="pl-c1"&gt;:baz&lt;/span&gt;] &lt;span class="pl-k"&gt;=&lt;/span&gt; args),
  &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-en"&gt;Enum&lt;/span&gt;.&lt;span class="pl-en"&gt;map&lt;/span&gt;(args, &lt;span class="pl-k"&gt;fn&lt;/span&gt; arg &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt; arg &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; is on a very long line!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;end&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the &lt;code&gt;do:&lt;/code&gt; clause starts on its own line, treat it as a multiline
function by separating it with blank lines.&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([]), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:empty&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(_),
  &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:very_long_line_here&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([]), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:empty&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(_),
  &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:very_long_line_here&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-add-blank-line-after-multiline-assignment"&gt;&lt;/a&gt;
Add a blank line after a multiline assignment as a
visual cue that the assignment is 'over'.
&lt;sup&gt;[&lt;a href="#add-blank-line-after-multiline-assignment"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()
another_string &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; some_string

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()

another_string &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; some_string&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; also not preferred&lt;/span&gt;
something &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-k"&gt;if&lt;/span&gt; x &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;else&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bye&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;(something)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
something &lt;span class="pl-k"&gt;=&lt;/span&gt;
  &lt;span class="pl-k"&gt;if&lt;/span&gt; x &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;else&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Bye&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;(something)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiline-enums"&gt;&lt;/a&gt;
If a list, map, or struct spans multiple lines, put each element, as well as
the opening and closing brackets, on its own line.
Indent each element one level, but not the brackets.
&lt;sup&gt;[&lt;a href="#multiline-enums"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
[&lt;span class="pl-c1"&gt;:first_item&lt;/span&gt;, &lt;span class="pl-c1"&gt;:second_item&lt;/span&gt;, &lt;span class="pl-c1"&gt;:next_item&lt;/span&gt;,
&lt;span class="pl-c1"&gt;:final_item&lt;/span&gt;]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
[
  &lt;span class="pl-c1"&gt;:first_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:second_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:next_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:final_item&lt;/span&gt;
]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiline-list-assign"&gt;&lt;/a&gt;
When assigning a list, map, or struct, keep the opening bracket on the same
line as the assignment.
&lt;sup&gt;[&lt;a href="#multiline-list-assign"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
list &lt;span class="pl-k"&gt;=&lt;/span&gt;
[
  &lt;span class="pl-c1"&gt;:first_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:second_item&lt;/span&gt;
]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
list &lt;span class="pl-k"&gt;=&lt;/span&gt; [
  &lt;span class="pl-c1"&gt;:first_item&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;:second_item&lt;/span&gt;
]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiline-case-clauses"&gt;&lt;/a&gt;
When &lt;code&gt;case&lt;/code&gt; or &lt;code&gt;cond&lt;/code&gt; clauses span multiple lines, separate each clause with a
blank line.
&lt;sup&gt;[&lt;a href="#multiline-case-clauses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;case&lt;/span&gt; arg &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;
  &lt;span class="pl-c1"&gt;false&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:error&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;case&lt;/span&gt; arg &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;

  &lt;span class="pl-c1"&gt;false&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:error&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-comments-above-line"&gt;&lt;/a&gt;
Place comments above the line they comment on.
&lt;sup&gt;[&lt;a href="#comments-above-line"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;(some_string) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;(some_string)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-comment-leading-spaces"&gt;&lt;/a&gt;
Use one space between the leading &lt;code&gt;#&lt;/code&gt; character of the comment and the text of
the comment.
&lt;sup&gt;[&lt;a href="#comment-leading-spaces"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;(some_string)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;first&lt;/span&gt;(some_string)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-indentation" class="anchor" aria-hidden="true" href="#indentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Indentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-with-clauses"&gt;&lt;/a&gt;
Indent and align successive &lt;code&gt;with&lt;/code&gt; clauses.
Put the &lt;code&gt;do:&lt;/code&gt; argument on a new line, aligned with the previous clauses.
&lt;sup&gt;[&lt;a href="#with-clauses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;with&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, foo} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt;(opts, &lt;span class="pl-c1"&gt;:foo&lt;/span&gt;),
     {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, my_var} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt;(opts, &lt;span class="pl-c1"&gt;:my_var&lt;/span&gt;),
     &lt;span class="pl-c1"&gt;do:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, foo, my_var}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-with-else"&gt;&lt;/a&gt;
If the &lt;code&gt;with&lt;/code&gt; expression has a &lt;code&gt;do&lt;/code&gt; block with more than one line, or has an
&lt;code&gt;else&lt;/code&gt; option, use multiline syntax.
&lt;sup&gt;[&lt;a href="#with-else"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;with&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, foo} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt;(opts, &lt;span class="pl-c1"&gt;:foo&lt;/span&gt;),
     {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, my_var} &lt;span class="pl-k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pl-en"&gt;fetch&lt;/span&gt;(opts, &lt;span class="pl-c1"&gt;:my_var&lt;/span&gt;) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, foo, my_var}
&lt;span class="pl-k"&gt;else&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:error&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-c1"&gt;:bad_arg&lt;/span&gt;}
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-parentheses" class="anchor" aria-hidden="true" href="#parentheses"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Parentheses&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-parentheses-pipe-operator"&gt;&lt;/a&gt;
Use parentheses for one-arity functions when using the pipe operator (&lt;code&gt;|&amp;gt;&lt;/code&gt;).
&lt;sup&gt;[&lt;a href="#parentheses-pipe-operator"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt; &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-function-names-with-parentheses"&gt;&lt;/a&gt;
Never put a space between a function name and the opening parenthesis.
&lt;sup&gt;[&lt;a href="#function-names-with-parentheses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;f&lt;/span&gt; (&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;f&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-function-calls-and-parentheses"&gt;&lt;/a&gt;
Use parentheses in function calls, especially inside a pipeline.
&lt;sup&gt;[&lt;a href="#function-calls-and-parentheses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
f &lt;span class="pl-c1"&gt;3&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;f&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred and parses as rem(2, (3 |&amp;gt; g)), which is not what you want.&lt;/span&gt;
&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;rem&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;g&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;rem&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;) &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;g&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-keyword-list-brackets"&gt;&lt;/a&gt;
Omit square brackets from keyword lists whenever they are optional.
&lt;sup&gt;[&lt;a href="#keyword-list-brackets"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;some_function&lt;/span&gt;(foo, bar, [&lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;])

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;some_function&lt;/span&gt;(foo, bar, &lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-the-guide" class="anchor" aria-hidden="true" href="#the-guide"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Guide&lt;/h2&gt;
&lt;p&gt;The rules in this section may not be applied by the code formatter, but they are
generally preferred practice.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-expressions" class="anchor" aria-hidden="true" href="#expressions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Expressions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-single-line-defs"&gt;&lt;/a&gt;
Run single-line &lt;code&gt;def&lt;/code&gt;s that match for the same function together, but separate
multiline &lt;code&gt;def&lt;/code&gt;s with a blank line.
&lt;sup&gt;[&lt;a href="#single-line-defs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;No Value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([]), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([first &lt;span class="pl-k"&gt;|&lt;/span&gt; rest]) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(rest)
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiple-function-defs"&gt;&lt;/a&gt;
If you have more than one multiline &lt;code&gt;def&lt;/code&gt;, do not use single-line &lt;code&gt;def&lt;/code&gt;s.
&lt;sup&gt;[&lt;a href="#multiple-function-defs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;nil&lt;/span&gt;) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;No Value&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([]) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;:ok&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([first &lt;span class="pl-k"&gt;|&lt;/span&gt; rest]) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(rest)
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;([first &lt;span class="pl-k"&gt;|&lt;/span&gt; rest], opts) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(rest, opts)
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-pipe-operator"&gt;&lt;/a&gt;
Use the pipe operator to chain functions together.
&lt;sup&gt;[&lt;a href="#pipe-operator"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;(&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;(some_string))

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Multiline pipelines are not further indented&lt;/span&gt;
some_string
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()
&lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Multiline pipelines on the right side of a pattern match&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; should be indented on a new line&lt;/span&gt;
sanitized_string &lt;span class="pl-k"&gt;=&lt;/span&gt;
  some_string
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()
  &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this is the preferred method, take into account that copy-pasting
multiline pipelines into IEx might result in a syntax error, as IEx will
evaluate the first line without realizing that the next line has a pipeline.
To avoid this, you can wrap the pasted code in parentheses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-avoid-single-pipelines"&gt;&lt;/a&gt;
Avoid using the pipe operator just once.
&lt;sup&gt;[&lt;a href="#avoid-single-pipelines"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;(some_string)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-bare-variables"&gt;&lt;/a&gt;
Use &lt;em&gt;bare&lt;/em&gt; variables in the first part of a function chain.
&lt;sup&gt;[&lt;a href="#bare-variables"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;(some_string) &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;codepoints&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_string &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;trim&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;downcase&lt;/span&gt;() &lt;span class="pl-k"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;codepoints&lt;/span&gt;()&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-fun-def-parentheses"&gt;&lt;/a&gt;
Use parentheses when a &lt;code&gt;def&lt;/code&gt; has arguments, and omit them when it doesn't.
&lt;sup&gt;[&lt;a href="#fun-def-parentheses"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt; arg1, arg2 &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; body omitted&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;() &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; body omitted&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(arg1, arg2) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; body omitted&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; body omitted&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-do-with-single-line-if-unless"&gt;&lt;/a&gt;
Use &lt;code&gt;do:&lt;/code&gt; for single line &lt;code&gt;if/unless&lt;/code&gt; statements.
&lt;sup&gt;[&lt;a href="#do-with-single-line-if-unless"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; some_condition, &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; some_stuff&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-unless-with-else"&gt;&lt;/a&gt;
Never use &lt;code&gt;unless&lt;/code&gt; with &lt;code&gt;else&lt;/code&gt;.
Rewrite these with the positive case first.
&lt;sup&gt;[&lt;a href="#unless-with-else"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;unless&lt;/span&gt; success &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;failure&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;else&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;success&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;if&lt;/span&gt; success &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;success&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;else&lt;/span&gt;
  &lt;span class="pl-en"&gt;IO&lt;/span&gt;.&lt;span class="pl-en"&gt;puts&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;failure&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-true-as-last-condition"&gt;&lt;/a&gt;
Use &lt;code&gt;true&lt;/code&gt; as the last condition of the &lt;code&gt;cond&lt;/code&gt; special form when you need a
clause that always matches.
&lt;sup&gt;[&lt;a href="#true-as-last-condition"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;cond&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nope&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Uh, uh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-c1"&gt;:else&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;OK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;cond&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nope&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Uh, uh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

  &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;OK&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-parentheses-and-functions-with-zero-arity"&gt;&lt;/a&gt;
Use parentheses for calls to functions with zero arity, so they can be
distinguished from variables.
Starting in Elixir 1.4, the compiler will warn you about
locations where this ambiguity exists.
&lt;sup&gt;[&lt;a href="#parentheses-and-functions-with-zero-arity"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;do_stuff&lt;/span&gt;, &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-k"&gt;..&lt;/span&gt;.

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;my_func&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; is this a variable or a function call?&lt;/span&gt;
  do_stuff
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;my_func&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; this is clearly a function call&lt;/span&gt;
  &lt;span class="pl-en"&gt;do_stuff&lt;/span&gt;()
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-naming" class="anchor" aria-hidden="true" href="#naming"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Naming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-snake-case"&gt;&lt;/a&gt;
Use &lt;code&gt;snake_case&lt;/code&gt; for atoms, functions and variables.
&lt;sup&gt;[&lt;a href="#snake-case"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-c1"&gt;:"some atom"&lt;/span&gt;
&lt;span class="pl-c1"&gt;:SomeAtom&lt;/span&gt;
&lt;span class="pl-c1"&gt;:someAtom&lt;/span&gt;

someVar &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;someFunction&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-c1"&gt;:some_atom&lt;/span&gt;

some_var &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;

&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-camel-case"&gt;&lt;/a&gt;
Use &lt;code&gt;CamelCase&lt;/code&gt; for modules (keep acronyms like HTTP, RFC, XML uppercase).
&lt;sup&gt;[&lt;a href="#camel-case"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;Somemodule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;Some_Module&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeXml&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeXML&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-predicate-macro-names-with-guards"&gt;&lt;/a&gt;
The name of macros suitable for use in guard expressions should be prefixed
with &lt;code&gt;is_&lt;/code&gt;.
For a list of allowed expressions, see the &lt;a href="https://hexdocs.pm/elixir/guards.html#list-of-allowed-expressions" rel="nofollow"&gt;Guard&lt;/a&gt; docs.
&lt;sup&gt;[&lt;a href="#predicate-macro-names-with-guards"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defguard&lt;/span&gt; &lt;span class="pl-en"&gt;is_cool&lt;/span&gt;(var) &lt;span class="pl-k"&gt;when&lt;/span&gt; var &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;cool&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;defguardp&lt;/span&gt; &lt;span class="pl-en"&gt;is_very_cool&lt;/span&gt;(var) &lt;span class="pl-k"&gt;when&lt;/span&gt; var &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;very cool&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-predicate-macro-names-no-guards"&gt;&lt;/a&gt;
The names of predicate functions &lt;em&gt;that cannot be used within guards&lt;/em&gt; should
have a trailing question mark (&lt;code&gt;?&lt;/code&gt;) rather than the &lt;code&gt;is_&lt;/code&gt; (or similar) prefix.
&lt;sup&gt;[&lt;a href="#predicate-macro-names-no-guards"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;cool?&lt;/span&gt;(var) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Complex check if var is cool not possible in a pure function.&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-private-functions-with-same-name-as-public"&gt;&lt;/a&gt;
Private functions with the same name as public functions should start with
&lt;code&gt;do_&lt;/code&gt;.
&lt;sup&gt;[&lt;a href="#private-functions-with-same-name-as-public"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;sum&lt;/span&gt;(list), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-en"&gt;do_sum&lt;/span&gt;(list, &lt;span class="pl-c1"&gt;0&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; private functions&lt;/span&gt;
&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;do_sum&lt;/span&gt;([], total), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; total
&lt;span class="pl-k"&gt;defp&lt;/span&gt; &lt;span class="pl-en"&gt;do_sum&lt;/span&gt;([head &lt;span class="pl-k"&gt;|&lt;/span&gt; tail], total), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; &lt;span class="pl-en"&gt;do_sum&lt;/span&gt;(tail, head &lt;span class="pl-k"&gt;+&lt;/span&gt; total)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-comments" class="anchor" aria-hidden="true" href="#comments"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comments&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-expressive-code"&gt;&lt;/a&gt;
Write expressive code and try to convey your program's intention through
control-flow, structure and naming.
&lt;sup&gt;[&lt;a href="#expressive-code"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-comment-grammar"&gt;&lt;/a&gt;
Comments longer than a word are capitalized, and sentences use punctuation.
Use &lt;a href="http://en.wikipedia.org/wiki/Sentence_spacing" rel="nofollow"&gt;one space&lt;/a&gt; after periods.
&lt;sup&gt;[&lt;a href="#comment-grammar"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; these lowercase comments are missing punctuation&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Capitalization example&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Use punctuation for complete sentences.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-comment-line-length"&gt;&lt;/a&gt;
Limit comment lines to 100 characters.
&lt;sup&gt;[&lt;a href="#comment-line-length"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a id="user-content-comment-annotations" class="anchor" aria-hidden="true" href="#comment-annotations"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comment Annotations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-annotations"&gt;&lt;/a&gt;
Annotations should usually be written on the line immediately above the
relevant code.
&lt;sup&gt;[&lt;a href="#annotations"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-annotation-keyword"&gt;&lt;/a&gt;
The annotation keyword is uppercase, and is followed by a colon and a space,
then a note describing the problem.
&lt;sup&gt;[&lt;a href="#annotation-keyword"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; TODO: Deprecate in v1.5.&lt;/span&gt;
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(arg), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, arg}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-exceptions-to-annotations"&gt;&lt;/a&gt;
In cases where the problem is so obvious that any documentation would be
redundant, annotations may be left with no note.
This usage should be the exception and not the rule.
&lt;sup&gt;[&lt;a href="#exceptions-to-annotations"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-en"&gt;start_task&lt;/span&gt;()

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; FIXME&lt;/span&gt;
&lt;span class="pl-en"&gt;Process&lt;/span&gt;.&lt;span class="pl-en"&gt;sleep&lt;/span&gt;(&lt;span class="pl-c1"&gt;5000&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-todo-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;TODO&lt;/code&gt; to note missing features or functionality that should be added at a
later date.
&lt;sup&gt;[&lt;a href="#todo-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-fixme-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;FIXME&lt;/code&gt; to note broken code that needs to be fixed.
&lt;sup&gt;[&lt;a href="#fixme-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-optimize-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;OPTIMIZE&lt;/code&gt; to note slow or inefficient code that may cause performance
problems.
&lt;sup&gt;[&lt;a href="#optimize-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-hack-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;HACK&lt;/code&gt; to note code smells where questionable coding practices were used
and should be refactored away.
&lt;sup&gt;[&lt;a href="#hack-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-review-notes"&gt;&lt;/a&gt;
Use &lt;code&gt;REVIEW&lt;/code&gt; to note anything that should be looked at to confirm it is
working as intended.
For example: &lt;code&gt;REVIEW: Are we sure this is how the client does X currently?&lt;/code&gt;
&lt;sup&gt;[&lt;a href="#review-notes"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-custom-keywords"&gt;&lt;/a&gt;
Use other custom annotation keywords if it feels appropriate, but be sure to
document them in your project's &lt;code&gt;README&lt;/code&gt; or similar.
&lt;sup&gt;[&lt;a href="#custom-keywords"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-modules" class="anchor" aria-hidden="true" href="#modules"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-one-module-per-file"&gt;&lt;/a&gt;
Use one module per file unless the module is only used internally by another
module (such as a test).
&lt;sup&gt;[&lt;a href="#one-module-per-file"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-underscored-filenames"&gt;&lt;/a&gt;
Use &lt;code&gt;snake_case&lt;/code&gt; file names for &lt;code&gt;CamelCase&lt;/code&gt; module names.
&lt;sup&gt;[&lt;a href="#underscored-filenames"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; file is called some_module.ex&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-module-name-nesting"&gt;&lt;/a&gt;
Represent each level of nesting within a module name as a directory.
&lt;sup&gt;[&lt;a href="#module-name-nesting"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; file is called parser/core/xml_parser.ex&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Parser&lt;/span&gt;.&lt;span class="pl-e"&gt;Core&lt;/span&gt;.&lt;span class="pl-en"&gt;XMLParser&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-module-attribute-ordering"&gt;&lt;/a&gt;
List module attributes and directives in the following order:
&lt;sup&gt;[&lt;a href="#module-attribute-ordering"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@moduledoc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@behaviour&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@module_attribute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defstruct&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@callback&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@macrocallback&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@optional_callbacks&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Add a blank line between each grouping, and sort the terms (like module names)
alphabetically.
Here's an overall example of how you should order things in your modules:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;MyModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  An example module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@behaviour&lt;/span&gt; &lt;span class="pl-en"&gt;MyBehaviour&lt;/span&gt;

  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;GenServer&lt;/span&gt;

  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;Something&lt;/span&gt;
  &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-en"&gt;SomethingElse&lt;/span&gt;

  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;My&lt;/span&gt;.&lt;span class="pl-en"&gt;Long&lt;/span&gt;.&lt;span class="pl-en"&gt;Module&lt;/span&gt;.&lt;span class="pl-en"&gt;Name&lt;/span&gt;
  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-en"&gt;My&lt;/span&gt;.&lt;span class="pl-en"&gt;Other&lt;/span&gt;.&lt;span class="pl-en"&gt;Module&lt;/span&gt;.&lt;span class="pl-en"&gt;Example&lt;/span&gt;

  &lt;span class="pl-k"&gt;require&lt;/span&gt; &lt;span class="pl-en"&gt;Integer&lt;/span&gt;

  &lt;span class="pl-smi"&gt;@module_attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;:foo&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@other_attribute&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;

  &lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;params:&lt;/span&gt; []]

  &lt;span class="pl-smi"&gt;@type&lt;/span&gt; params &lt;span class="pl-k"&gt;::&lt;/span&gt; [{binary, binary}]

  &lt;span class="pl-smi"&gt;@callback&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(term) &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-c1"&gt;:ok&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, term}

  &lt;span class="pl-smi"&gt;@macrocallback&lt;/span&gt; &lt;span class="pl-en"&gt;macro_name&lt;/span&gt;(term) &lt;span class="pl-k"&gt;::&lt;/span&gt; &lt;span class="pl-en"&gt;Macro&lt;/span&gt;.&lt;span class="pl-en"&gt;t&lt;/span&gt;()

  &lt;span class="pl-smi"&gt;@optional_callbacks&lt;/span&gt; &lt;span class="pl-c1"&gt;macro_name:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;

  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-module-pseudo-variable"&gt;&lt;/a&gt;
Use the &lt;code&gt;__MODULE__&lt;/code&gt; pseudo variable when a module refers to itself. This
avoids having to update any self-references when the module name changes.
&lt;sup&gt;[&lt;a href="#module-pseudo-variable"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;SomeProject&lt;/span&gt;.&lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;]

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;name&lt;/span&gt;(%&lt;span class="pl-c1"&gt;__MODULE__&lt;/span&gt;{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; name}), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; name
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-alias-self-referencing-modules"&gt;&lt;/a&gt;
If you want a prettier name for a module self-reference, set up an alias.
&lt;sup&gt;[&lt;a href="#alias-self-referencing-modules"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;SomeProject&lt;/span&gt;.&lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;alias&lt;/span&gt; &lt;span class="pl-c1"&gt;__MODULE__&lt;/span&gt;, &lt;span class="pl-c1"&gt;as:&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt;

  &lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;]

  &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;name&lt;/span&gt;(%&lt;span class="pl-en"&gt;SomeModule&lt;/span&gt;{&lt;span class="pl-c1"&gt;name:&lt;/span&gt; name}), &lt;span class="pl-c1"&gt;do:&lt;/span&gt; name
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-repetitive-module-names"&gt;&lt;/a&gt;
Avoid repeating fragments in module names and namespaces.
This improves overall readability and
eliminates &lt;a href="https://elixirforum.com/t/using-aliases-for-fubar-fubar-named-module/1723" rel="nofollow"&gt;ambiguous aliases&lt;/a&gt;.
&lt;sup&gt;[&lt;a href="#repetitive-module-names"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Todo&lt;/span&gt;.&lt;span class="pl-en"&gt;Todo&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-e"&gt;Todo&lt;/span&gt;.&lt;span class="pl-en"&gt;Item&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h3&gt;
&lt;p&gt;Documentation in Elixir (when read either in &lt;code&gt;iex&lt;/code&gt; with &lt;code&gt;h&lt;/code&gt; or generated with
&lt;a href="https://github.com/elixir-lang/ex_doc"&gt;ExDoc&lt;/a&gt;) uses the &lt;a href="http://elixir-lang.org/getting-started/module-attributes.html#as-annotations" rel="nofollow"&gt;Module Attributes&lt;/a&gt; &lt;code&gt;@moduledoc&lt;/code&gt; and &lt;code&gt;@doc&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-moduledocs"&gt;&lt;/a&gt;
Always include a &lt;code&gt;@moduledoc&lt;/code&gt; attribute in the line right after &lt;code&gt;defmodule&lt;/code&gt; in
your module.
&lt;sup&gt;[&lt;a href="#moduledocs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;AnotherModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt;

  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;AThirdModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;

  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-moduledoc-false"&gt;&lt;/a&gt;
Use &lt;code&gt;@moduledoc false&lt;/code&gt; if you do not intend on documenting the module.
&lt;sup&gt;[&lt;a href="#moduledoc-false"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc false&lt;/span&gt;
  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-moduledoc-spacing"&gt;&lt;/a&gt;
Separate code after the &lt;code&gt;@moduledoc&lt;/code&gt; with a blank line.
&lt;sup&gt;[&lt;a href="#moduledoc-spacing"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;
  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;AnotherModule&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;

  &lt;span class="pl-k"&gt;use&lt;/span&gt; &lt;span class="pl-en"&gt;AnotherModule&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-heredocs"&gt;&lt;/a&gt;
Use heredocs with markdown for documentation.
&lt;sup&gt;[&lt;a href="#heredocs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc "About the module"&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;  Examples:&lt;/span&gt;
&lt;span class="pl-c"&gt;  iex&amp;gt; SomeModule.some_function&lt;/span&gt;
&lt;span class="pl-c"&gt;  :result&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc """&lt;/span&gt;
&lt;span class="pl-c"&gt;  About the module&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;  ## Examples&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;      iex&amp;gt; SomeModule.some_function&lt;/span&gt;
&lt;span class="pl-c"&gt;      :result&lt;/span&gt;
&lt;span class="pl-c"&gt;  """&lt;/span&gt;
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-typespecs" class="anchor" aria-hidden="true" href="#typespecs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Typespecs&lt;/h3&gt;
&lt;p&gt;Typespecs are notation for declaring types and specifications, for
documentation or for the static analysis tool Dialyzer.&lt;/p&gt;
&lt;p&gt;Custom types should be defined at the top of the module with the other
directives (see &lt;a href="#modules"&gt;Modules&lt;/a&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-typedocs"&gt;&lt;/a&gt;
Place &lt;code&gt;@typedoc&lt;/code&gt; and &lt;code&gt;@type&lt;/code&gt; definitions together, and separate each
pair with a blank line.
&lt;sup&gt;[&lt;a href="#typedocs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;SomeModule&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-c"&gt;@moduledoc false&lt;/span&gt;

  &lt;span class="pl-c"&gt;@typedoc "The name"&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@type&lt;/span&gt; name &lt;span class="pl-k"&gt;::&lt;/span&gt; atom

  &lt;span class="pl-c"&gt;@typedoc "The result"&lt;/span&gt;
  &lt;span class="pl-smi"&gt;@type&lt;/span&gt; result &lt;span class="pl-k"&gt;::&lt;/span&gt; {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, term} &lt;span class="pl-k"&gt;|&lt;/span&gt; {&lt;span class="pl-c1"&gt;:error&lt;/span&gt;, term}

  &lt;span class="pl-k"&gt;..&lt;/span&gt;.
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-union-types"&gt;&lt;/a&gt;
If a union type is too long to fit on a single line, put each part of the
type on a separate line, indented one level past the name of the type.
&lt;sup&gt;[&lt;a href="#union-types"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-smi"&gt;@type&lt;/span&gt; long_union_type &lt;span class="pl-k"&gt;::&lt;/span&gt;
        some_type &lt;span class="pl-k"&gt;|&lt;/span&gt; another_type &lt;span class="pl-k"&gt;|&lt;/span&gt; some_other_type &lt;span class="pl-k"&gt;|&lt;/span&gt; one_more_type &lt;span class="pl-k"&gt;|&lt;/span&gt; a_final_type

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-smi"&gt;@type&lt;/span&gt; long_union_type &lt;span class="pl-k"&gt;::&lt;/span&gt;
        some_type
        &lt;span class="pl-k"&gt;|&lt;/span&gt; another_type
        &lt;span class="pl-k"&gt;|&lt;/span&gt; some_other_type
        &lt;span class="pl-k"&gt;|&lt;/span&gt; one_more_type
        &lt;span class="pl-k"&gt;|&lt;/span&gt; a_final_type&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-naming-main-types"&gt;&lt;/a&gt;
Name the main type for a module &lt;code&gt;t&lt;/code&gt;, for example: the type specification for a
struct.
&lt;sup&gt;[&lt;a href="#naming-main-types"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;params:&lt;/span&gt; []]

&lt;span class="pl-smi"&gt;@type&lt;/span&gt; t &lt;span class="pl-k"&gt;::&lt;/span&gt; %&lt;span class="pl-c1"&gt;__MODULE__&lt;/span&gt;{
        &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-en"&gt;String&lt;/span&gt;.&lt;span class="pl-en"&gt;t&lt;/span&gt;() &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;params:&lt;/span&gt; &lt;span class="pl-en"&gt;Keyword&lt;/span&gt;.&lt;span class="pl-en"&gt;t&lt;/span&gt;()
      }&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-spec-spacing"&gt;&lt;/a&gt;
Place specifications right before the function definition,
after the &lt;code&gt;@doc&lt;/code&gt;,
without separating them by a blank line.
&lt;sup&gt;[&lt;a href="#spec-spacing"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;@doc """&lt;/span&gt;
&lt;span class="pl-c"&gt;Some function description.&lt;/span&gt;
&lt;span class="pl-c"&gt;"""&lt;/span&gt;
&lt;span class="pl-smi"&gt;@spec&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(term) &lt;span class="pl-k"&gt;::&lt;/span&gt; result
&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;some_function&lt;/span&gt;(some_data) &lt;span class="pl-k"&gt;do&lt;/span&gt;
  {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, some_data}
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-structs" class="anchor" aria-hidden="true" href="#structs"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Structs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-nil-struct-field-defaults"&gt;&lt;/a&gt;
Use a list of atoms for struct fields that default to &lt;code&gt;nil&lt;/code&gt;, followed by the
other keywords.
&lt;sup&gt;[&lt;a href="#nil-struct-field-defaults"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; &lt;span class="pl-c1"&gt;name:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;, &lt;span class="pl-c1"&gt;params:&lt;/span&gt; &lt;span class="pl-c1"&gt;nil&lt;/span&gt;, &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;:params&lt;/span&gt;, &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-struct-def-brackets"&gt;&lt;/a&gt;
Omit square brackets when the argument of a &lt;code&gt;defstruct&lt;/code&gt; is a keyword list.
&lt;sup&gt;[&lt;a href="#struct-def-brackets"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;params:&lt;/span&gt; [], &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; &lt;span class="pl-c1"&gt;params:&lt;/span&gt; [], &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; required - brackets are not optional, with at least one atom in the list&lt;/span&gt;
&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [&lt;span class="pl-c1"&gt;:name&lt;/span&gt;, &lt;span class="pl-c1"&gt;params:&lt;/span&gt; [], &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-multiline-structs"&gt;&lt;/a&gt;
If a struct definition spans multiple lines, put each element on its own line,
keeping the elements aligned.
&lt;sup&gt;[&lt;a href="#multiline-structs"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; &lt;span class="pl-c1"&gt;foo:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;test&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
          &lt;span class="pl-c1"&gt;bar:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;,
          &lt;span class="pl-c1"&gt;baz:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
          &lt;span class="pl-c1"&gt;qux:&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;,
          &lt;span class="pl-c1"&gt;quux:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If a multiline struct requires brackets, format it as a multiline list:&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;defstruct&lt;/span&gt; [
  &lt;span class="pl-c1"&gt;:name&lt;/span&gt;,
  &lt;span class="pl-c1"&gt;params:&lt;/span&gt; [],
  &lt;span class="pl-c1"&gt;active:&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;
]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-exceptions" class="anchor" aria-hidden="true" href="#exceptions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exceptions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-exception-names"&gt;&lt;/a&gt;
Make exception names end with a trailing &lt;code&gt;Error&lt;/code&gt;.
&lt;sup&gt;[&lt;a href="#exception-names"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;BadHTTPCode&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defexception&lt;/span&gt; [&lt;span class="pl-c1"&gt;:message&lt;/span&gt;]
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;BadHTTPCodeException&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defexception&lt;/span&gt; [&lt;span class="pl-c1"&gt;:message&lt;/span&gt;]
&lt;span class="pl-k"&gt;end&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;defmodule&lt;/span&gt; &lt;span class="pl-en"&gt;BadHTTPCodeError&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt;
  &lt;span class="pl-k"&gt;defexception&lt;/span&gt; [&lt;span class="pl-c1"&gt;:message&lt;/span&gt;]
&lt;span class="pl-k"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-lowercase-error-messages"&gt;&lt;/a&gt;
Use lowercase error messages when raising exceptions, with no trailing
punctuation.
&lt;sup&gt;[&lt;a href="#lowercase-error-messages"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-en"&gt;ArgumentError&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;This is not valid.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-en"&gt;ArgumentError&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;this is not valid&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-collections" class="anchor" aria-hidden="true" href="#collections"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collections&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-keyword-list-syntax"&gt;&lt;/a&gt;
Always use the special syntax for keyword lists.
&lt;sup&gt;[&lt;a href="#keyword-list-syntax"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
some_value &lt;span class="pl-k"&gt;=&lt;/span&gt; [{&lt;span class="pl-c1"&gt;:a&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}, {&lt;span class="pl-c1"&gt;:b&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}]

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
some_value &lt;span class="pl-k"&gt;=&lt;/span&gt; [&lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;baz&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;qux&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;]&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-map-key-atom"&gt;&lt;/a&gt;
Use the shorthand key-value syntax for maps when all of the keys are atoms.
&lt;sup&gt;[&lt;a href="#map-key-atom"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
%{&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;:c&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
%{&lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;c:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-map-key-arrow"&gt;&lt;/a&gt;
Use the verbose key-value syntax for maps if any key is not an atom.
&lt;sup&gt;[&lt;a href="#map-key-arrow"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
%{&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;a:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;b:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;}

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
%{&lt;span class="pl-c1"&gt;:a&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;:b&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;c&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-strings" class="anchor" aria-hidden="true" href="#strings"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Strings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-strings-matching-with-concatenator"&gt;&lt;/a&gt;
Match strings using the string concatenator rather than binary patterns:
&lt;sup&gt;[&lt;a href="#strings-matching-with-concatenator"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
&lt;span class="pl-k"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;::&lt;/span&gt;utf8, _rest&lt;span class="pl-k"&gt;::&lt;/span&gt;bytes&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my string&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&amp;gt;&lt;/span&gt; _rest &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;my string&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-regular-expressions" class="anchor" aria-hidden="true" href="#regular-expressions"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Regular Expressions&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No guidelines for regular expressions have been added yet.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-metaprogramming" class="anchor" aria-hidden="true" href="#metaprogramming"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Metaprogramming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a name="user-content-avoid-metaprogramming"&gt;&lt;/a&gt;
Avoid needless metaprogramming.
&lt;sup&gt;[&lt;a href="#avoid-metaprogramming"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name="user-content-testing-assert-order"&gt;&lt;/a&gt;
When writing &lt;a href="https://hexdocs.pm/ex_unit/ExUnit.html" rel="nofollow"&gt;ExUnit&lt;/a&gt; assertions, put the expression being tested to the left
of the operator, and the expected result to the right, unless the assertion is
a pattern match.
&lt;sup&gt;[&lt;a href="#testing-assert-order"&gt;link&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-elixir"&gt;&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; preferred&lt;/span&gt;
assert &lt;span class="pl-en"&gt;actual_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;) &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; not preferred&lt;/span&gt;
assert &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-en"&gt;actual_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;)

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; required - the assertion is a pattern match&lt;/span&gt;
assert {&lt;span class="pl-c1"&gt;:ok&lt;/span&gt;, expected} &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;actual_function&lt;/span&gt;(&lt;span class="pl-c1"&gt;3&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resources&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-alternative-style-guides" class="anchor" aria-hidden="true" href="#alternative-style-guides"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Alternative Style Guides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/lexmag/elixir-style-guide#readme"&gt;Aleksei Magusev's Elixir Style Guide&lt;/a&gt;
â€” An opinionated Elixir style guide stemming from the coding style practiced
in the Elixir core libraries.
Developed by &lt;a href="https://github.com/lexmag"&gt;Aleksei Magusev&lt;/a&gt; and
&lt;a href="https://github.com/whatyouhide"&gt;Andrea Leopardi&lt;/a&gt;, members of Elixir core team.
While the Elixir project doesn't adhere to any specific style guide,
this is the closest available guide to its conventions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/rrrene/elixir-style-guide#readme"&gt;Credo's Elixir Style Guide&lt;/a&gt;
â€” Style Guide for the Elixir language, implemented by
&lt;a href="http://credo-ci.org" rel="nofollow"&gt;Credo&lt;/a&gt; static code analysis tool.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a id="user-content-tools" class="anchor" aria-hidden="true" href="#tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tools&lt;/h3&gt;
&lt;p&gt;Refer to &lt;a href="https://github.com/h4cc/awesome-elixir#code-analysis"&gt;Awesome Elixir&lt;/a&gt; for libraries and tools that can help
with code analysis and style linting.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-getting-involved" class="anchor" aria-hidden="true" href="#getting-involved"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Involved&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h3&gt;
&lt;p&gt;It's our hope that this will become a central hub for community discussion on
best practices in Elixir.
Feel free to open tickets or send pull requests with improvements.
Thanks in advance for your help!&lt;/p&gt;
&lt;p&gt;Check the &lt;a href="https://github.com/christopheradams/elixir_style_guide/blob/master/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-spread-the-word" class="anchor" aria-hidden="true" href="#spread-the-word"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spread the Word&lt;/h3&gt;
&lt;p&gt;A community style guide is meaningless without the community's support. Please
tweet, &lt;a href="https://github.com/christopheradams/elixir_style_guide/stargazers"&gt;star&lt;/a&gt;, and let any Elixir programmer know
about &lt;a href="https://github.com/christopheradams/elixir_style_guide"&gt;this guide&lt;/a&gt; so they can contribute.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-copying" class="anchor" aria-hidden="true" href="#copying"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Copying&lt;/h2&gt;
&lt;h3&gt;&lt;a id="user-content-license" class="anchor" aria-hidden="true" href="#license"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h3&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ea7febd364f01e7b3f46f6fb86712fe05925bfbf/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792f332e302f38387833312e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/ea7febd364f01e7b3f46f6fb86712fe05925bfbf/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792f332e302f38387833312e706e67" alt="Creative Commons License" data-canonical-src="http://i.creativecommons.org/l/by/3.0/88x31.png" style="max-width:100%;"&gt;&lt;/a&gt;
This work is licensed under a
&lt;a href="http://creativecommons.org/licenses/by/3.0/deed.en_US" rel="nofollow"&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id="user-content-attribution" class="anchor" aria-hidden="true" href="#attribution"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Attribution&lt;/h3&gt;
&lt;p&gt;The structure of this guide, bits of example code, and many of the initial
points made in this document were borrowed from the &lt;a href="https://github.com/bbatsov/ruby-style-guide"&gt;Ruby community style guide&lt;/a&gt;.
A lot of things were applicable to Elixir and allowed us to get &lt;em&gt;some&lt;/em&gt; document
out quicker to start the conversation.&lt;/p&gt;
&lt;p&gt;Here's the &lt;a href="https://github.com/christopheradams/elixir_style_guide/graphs/contributors"&gt;list of people who have kindly contributed&lt;/a&gt; to this
project.&lt;/p&gt;

&lt;/article&gt;&lt;/div&gt;</description><author>christopheradams</author><guid isPermaLink="false">https://github.com/christopheradams/elixir_style_guide</guid><pubDate>Mon, 06 Jan 2020 00:04:00 GMT</pubDate></item></channel></rss>