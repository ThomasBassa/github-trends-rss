<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>GitHub Trending: Verilog, Today</title><link>https://github.com/trending/verilog?since=daily</link><description>The top repositories on GitHub for verilog, measured daily</description><pubDate>Fri, 03 Jan 2020 01:04:06 GMT</pubDate><lastBuildDate>Fri, 03 Jan 2020 01:04:06 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><ttl>720</ttl><item><title>SI-RISCV/e200_opensource #1 in Verilog, Today</title><link>https://github.com/SI-RISCV/e200_opensource</link><description>&lt;p&gt;&lt;i&gt;The Ultra-Low Power RISC Core&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-hummingbird-e203-opensource-processor-core" class="anchor" aria-hidden="true" href="#hummingbird-e203-opensource-processor-core"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hummingbird E203 Opensource Processor Core&lt;/h1&gt;
&lt;h2&gt;&lt;a id="user-content-about" class="anchor" aria-hidden="true" href="#about"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About&lt;/h2&gt;
&lt;p&gt;This repository hosts the project for open-source hummingbird E203 RISC processor Core.&lt;/p&gt;
&lt;p&gt;To boost the RISC-V popularity and to speed up the IoT development in China,
we are very proud to make hummingbird E203 core open-source. It is the first open-source processor core from
China mainland with state-of-art CPU design skills to support RISC-V instruction set.&lt;/p&gt;
&lt;p&gt;The Hummingbird E203 core is a two-stages pipeline based ultra-low power/area implementation, makes the Hummingbird E203 as a perfect candidate for research and education of RISC-V implementation.&lt;/p&gt;
&lt;p&gt;Welcome to visit &lt;a href="http://bbs.riscv-mcu.com/" rel="nofollow"&gt;http://bbs.riscv-mcu.com/&lt;/a&gt; to see the discussion of the Hummingbird E203.&lt;/p&gt;
&lt;p&gt;Welcome to visit &lt;a href="http://www.riscv-mcu.com/" rel="nofollow"&gt;http://www.riscv-mcu.com/&lt;/a&gt; for more comprehensive information of availiable RISC-V MCU chips and embedded development.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-usages-and-applications" class="anchor" aria-hidden="true" href="#usages-and-applications"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usages and Applications&lt;/h2&gt;
&lt;p&gt;The open-source Hummingbird E203 core can be a perferct candidate for research and education of RISC-V implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Hummingbird E203 core as a simple ultra-low power core and SoC, which is "蜂鸟虽小、五脏俱全", with detailed Docs and Software/FPGA Demos, hence, it will be a perfect example for lab practice in university or entry-level studying.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many people asked if this core can be commercially used, the answer is as below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;According to the Apache 2.0 license, this open-sourced core can be used in commercial way.&lt;/li&gt;
&lt;li&gt;But the feature is not full.&lt;/li&gt;
&lt;li&gt;The main purpose of this open-sourced core is to be used by students/university/research/
and entry-level-beginners, hence, the commercial quality (bug-free) and
service of this core is not not not warranted!!!&lt;/li&gt;
&lt;li&gt;Welcome to visit &lt;a href="http://www.riscv-mcu.com/" rel="nofollow"&gt;http://www.riscv-mcu.com/&lt;/a&gt; for more comprehensive information of RISC-V core availiable for commercial usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a id="user-content-detailed-introduction" class="anchor" aria-hidden="true" href="#detailed-introduction"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Detailed Introduction&lt;/h2&gt;
&lt;p&gt;We have provided very detailed introduction and quick start-up documents to help you ramping it up.&lt;/p&gt;
&lt;p&gt;The detailed introduction and the quick start documentation can be seen
from &lt;a href="https://github.com/SI-RISCV/e200_opensource/tree/master/doc"&gt;https://github.com/SI-RISCV/e200_opensource/tree/master/doc&lt;/a&gt; directory.&lt;/p&gt;
&lt;p&gt;By following the guidences from the doc, you can very easily start to use Hummingbird E203 processor core and demo SoC.&lt;/p&gt;
&lt;p&gt;Meanwhile, the Hummingbird E203 Core was deeply introduced in the published Book (蜂鸟E203处理器核在如下出版中文书籍中进行深入浅出的分析讲解):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;《手把手教你设计CPU：RISC-V处理器篇》（已经上市，请在京东、淘宝、当当上搜索 RISC-V关键字）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/SI-RISCV/e200_opensource/blob/master/bookpic.jpg"&gt;&lt;img src="https://github.com/SI-RISCV/e200_opensource/raw/master/bookpic.jpg" width="480" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;《RISC-V架构与嵌入式开发快速入门》（已经上市，请在京东、淘宝、当当上搜索 RISC-V关键字）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/SI-RISCV/e200_opensource/blob/master/book2pic.jpg"&gt;&lt;img src="https://github.com/SI-RISCV/e200_opensource/raw/master/book2pic.jpg" width="620" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What are you waiting for? Try it out now!&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-dedicated-fpga-board-and-jtag-debugger" class="anchor" aria-hidden="true" href="#dedicated-fpga-board-and-jtag-debugger"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dedicated FPGA-Board and JTAG-Debugger&lt;/h2&gt;
&lt;p&gt;In order to easy user to study RISC-V in a quick and easy way, we have made a dedicated FPGA-Board and JTAG-Debugger.  Diagram as below:&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-蜂鸟e203专用的fpga开发板" class="anchor" aria-hidden="true" href="#蜂鸟e203专用的fpga开发板"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;蜂鸟E203专用的FPGA开发板&lt;/h4&gt;
&lt;h4&gt;&lt;a id="user-content-nuclei-ev-kit" class="anchor" aria-hidden="true" href="#nuclei-ev-kit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nuclei EV Kit&lt;/h4&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/SI-RISCV/e200_opensource/blob/master/boards/nucleikit/pics/2-1.jpg"&gt;&lt;img src="https://github.com/SI-RISCV/e200_opensource/raw/master/boards/nucleikit/pics/2-1.jpg" width="480" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-hummingbird-ev-kit" class="anchor" aria-hidden="true" href="#hummingbird-ev-kit"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hummingbird EV Kit&lt;/h4&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/SI-RISCV/e200_opensource/blob/master/boards/hbirdkit/pics/p1.jpg"&gt;&lt;img src="https://github.com/SI-RISCV/e200_opensource/raw/master/boards/hbirdkit/pics/p1.jpg" width="480" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a id="user-content-蜂鸟e203专用的jtag调试器" class="anchor" aria-hidden="true" href="#蜂鸟e203专用的jtag调试器"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;蜂鸟E203专用的JTAG调试器&lt;/h4&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/SI-RISCV/e200_opensource/blob/master/boards/hbirdkit/pics/p4.jpg"&gt;&lt;img src="https://github.com/SI-RISCV/e200_opensource/raw/master/boards/hbirdkit/pics/p4.jpg" width="400" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The detailed introduction and the relevant documentation can be seen from &lt;a href="https://github.com/SI-RISCV/e200_opensource/tree/master/boards"&gt;https://github.com/SI-RISCV/e200_opensource/tree/master/boards&lt;/a&gt; directory.&lt;/p&gt;
&lt;h2&gt;&lt;a id="user-content-release-history" class="anchor" aria-hidden="true" href="#release-history"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Release History&lt;/h2&gt;
&lt;h4&gt;&lt;a id="user-content-note-at-first" class="anchor" aria-hidden="true" href="#note-at-first"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Note at First:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;-- Many people asked if this core can be commercially used, the answer as below:
   * According to the Apache 2.0 license, this open-sourced core can be used in commercial way.
   * But the feature is not full (e.g., the debug functionalities is not full, which 
       cannot add breakpoint into the read-only region, .e.g, ROM/Flash)
   * The main purpose of this open-sourced core is to be used by students/university/research/
       and entry-level-beginners, hence, the commercial quality (bug-free) and
       service of this core is not not not warranted!!! 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-sep-27-2018" class="anchor" aria-hidden="true" href="#sep-27-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sep 27, 2018&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;-- The 4th official release with some minor fixing.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-may-15-2018" class="anchor" aria-hidden="true" href="#may-15-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;May 15, 2018&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;-- The 3rd official release, please clone this version if you want to use it
     or reclone it (if you already cloned the earlier-test version).
-- Compared with earlier-test version, main updates includes:
   ---- Fixed a Typo in a source file (in rtl/e203/core/e203_exu_decocde.v) 
   ---- Fixed a Tied-to-zero issue in source files (in rtl/e203/perips/sirv_qspi_physical_*.v) 
          * This is original freedom-e310 chisel generated QSPI file, which have a bug in Quad-mode (the 4th data enable
            signal was tied to zero), fix it here
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-jan-13-2018" class="anchor" aria-hidden="true" href="#jan-13-2018"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jan 13, 2018&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;-- The 2nd official release, please clone this version if you want to use it
     or reclone it (if you already cloned the earlier-test version).
-- Compared with earlier-test version, main updates includes:
   ---- Change the default configuration (in rtl/e203/core/config.v) to 
          * Add two stage of syncer for IRQ lines to core, not for function, but for timing
          * Configure the ITCM and DTCM to 64KB by default
          * Configure the Regfile as DFF based rather than latch based
   ---- Update the SoC components and structure to make it in line with the latest SoC Spec
          * Please check `e200_opensource/doc/HBird_OpenSource_MCU_SoC_Spec.pdf` for the details of SoC spec
   ---- Update some internal core logics, mostly to enhance the timing and frequency, 
        which is not matter much, please check the git history if you really care to.
   ---- Note: This version still does not support the hardware-breakpoint yet, i.e.,
          you cannot set the breakpoint to read-only address space (e.g., ROM, Flash).
          But soft-break is okay, means you can use regular interactive debugger 
          functionalities (including set breakpoint to the regular R/W address space).
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-oct-13-2017" class="anchor" aria-hidden="true" href="#oct-13-2017"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Oct 13, 2017&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;-- The 1st official release, please clone this version if you want to use it
     or reclone it (if you already cloned the earlier-test version).
-- Compared with earlier-test version, main updates includes:
   ---- Added the "A" extension for opensourced E203 core, to make it support 
          IMAC sub-set RISC-V ISA, which is more popularly supported by current
          toolchain.
   ---- Updated the RTL Codes accordingly.
   ---- Updated the Docs accordingly, please see the "revision history" in the
          Doc from `e200_opensource/doc` directory.
   ---- Updated verilog tb with random interrupt and bus-error insertion to make
          more intensive. To support this, updated all the self-check tests accordingly.
          Although the test become more intensive, the drawback is make the regression 
          simulation running very slower, so by default now it is turned off.
          If you want to turn on them without caring the the regression speed,
          you can hack the tb mannually (de-comment these `force` line from `tb/tb_top.v`)
          or add macro `ENABLE_TB_FORCE` in simulation (see the note 
          from `vsim/bin/run.makefile`).
   ---- Updated some other minor issues which is not matter much, please check the 
          git history if you really care to.
   ---- Note: This version does not support the hardware-breakpoint yet, i.e.,
          you cannot set the breakpoint to read-only address space (e.g., ROM, Flash).
          But soft-break is okay, means you can use regular interactive debugger 
          functionalities (including set breakpoint to the regular R/W address space).
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a id="user-content-sep-30-2017" class="anchor" aria-hidden="true" href="#sep-30-2017"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sep 30, 2017&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;-- The earlier-test version uploaded to github to try.
-- NOTE:
   ---- This is not the official release, please wait the official release which will coming
        soon and will be recorded at here. You will see the Release History updates.
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>SI-RISCV</author><guid isPermaLink="false">https://github.com/SI-RISCV/e200_opensource</guid><pubDate>Fri, 03 Jan 2020 00:01:00 GMT</pubDate></item><item><title>T-head-Semi/wujian100_open #2 in Verilog, Today</title><link>https://github.com/T-head-Semi/wujian100_open</link><description>&lt;p&gt;&lt;i&gt;IC design and development should be faster，simpler and more reliable&lt;/i&gt;&lt;/p&gt;&lt;div id="readme" class="instapaper_body md" data-path="README.md"&gt;&lt;article class="markdown-body entry-content p-5" itemprop="text"&gt;&lt;h1&gt;&lt;a id="user-content-wujian100_open" class="anchor" aria-hidden="true" href="#wujian100_open"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;wujian100_open&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;wujian100_open is a MCU base SoC. We can simulate by EDA tools and emulate by FPGA. Also we can develop the IPs and software in this platform. We wish more and more developers building the open MCU ecosystem with T-Head. IC design and development should be faster simpler and more reliable
Directory Structure
|--Project                //open source project work directory  
  |--riscv_toolchain      //tool chain install directory download from t-head.cn
  |--wujian100_open       //wujian100_open project get from github
    |--case               //test case example for simulation
    |--doc                //wujian100_open user guide
    |--fpga               //FPGA script
    |--lib                //compile script for simulation
    |--regress            //regression result
    |--sdk                //software design kit
    |--soc                //Soc RTL source code
    |--tb                 //test bench
    |--tools              //simulation script and setup file
    |--workdir            //simulation directory
    |--LICENSE
    |--README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-get-started" class="anchor" aria-hidden="true" href="#get-started"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Get Started&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;1. prepare a project work directory just like 'Project'
2. cd Project
3. git clone https://github.com/T-head-Semi/wujian100_open.git or git clone git@github.com:T-head-Semi/wujian100_open.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-download-cc-compiler" class="anchor" aria-hidden="true" href="#download-cc-compiler"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Download C/C++ Compiler&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;1. prepare a tool chain install directory named 'riscv_toolchain'  // use the c shell command like 'mkdir riscv_toolchain'
2. download the tool chain from the url https://www.t-head.cn/product/mcu-platform?spm=a2ouz.12987052.0.0.167548abiiSAQs
3. install the tool chain to the riscv_toolchain dirctory
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-get-open-source-eda-tools" class="anchor" aria-hidden="true" href="#get-open-source-eda-tools"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Get open source EDA tools&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;centos7/rhel7:  sudo yum install iverilog verilator gtkwave
ubuntu/debian:  sudo apt-get install iverilog verilator gtkwave
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-get-ready-for-simulation" class="anchor" aria-hidden="true" href="#get-ready-for-simulation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Get ready for simulation&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;1. cd wujian100_open/tools
2. vim setup.csh then add the vcs path and license
3. source setup.csh         //if not success you can touch a new file named setup.csh and copy the content to the new file. then source the new file
4. chmod 777 run_case Srec2vmem
5. cd wujian100_open/workdir
6. if you want to use iverilog as simulation tool please execute the command '../tools/run_case -sim_tool iverilog ../case/timer/timer_test.c' or if you want to use vcs as simulation tool please execute the command '../tools/run_case -sim_tool vcs ../case/timer/timer_test.c'
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-get-ready-for-fpga-bit-generation" class="anchor" aria-hidden="true" href="#get-ready-for-fpga-bit-generation"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Get ready for FPGA bit generation&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;1. make sure you have the synplify and license
2. cd wujian100_open/fpga/synplify
3. execute the synplify and load the wujian100_open_200t_3b.prj file
4. input the command 'sdc2fdc' in synplify
5. start the synplify
6. after synplify generated the netlist we will use vivado for P&amp;amp;R and generated the bit file
7. make sure you have the vivado and licese
8. cd wujian100_open/fpga/vivado
9. run tcl use file 'wujian100_open_200t_3b_prj.tcl'
10. program the bit file to the fpga board
11. enjoy the application development
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-how-to-get-the-fpga-board" class="anchor" aria-hidden="true" href="#how-to-get-the-fpga-board"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to get the FPGA board&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;We will provide 100 FPGA board for evlalution free. Before you apply please simuated the case pass and send the log or screenshot to us. Everyone can apply the FPGA board from pingtouge.
apply from the url https://www.t-head.cn/product/mcu-platform?spm=a2ouz.12987052.0.0.167548abiiSAQs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/552ef07e2c0e38ee7ab2b0cdfcbd5b53e7fd53d8/68747470733a2f2f636f702d696d6167652d70726f642e6f73732d636e2d68616e677a686f752e616c6979756e63732e636f6d2f6d63752f622e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/552ef07e2c0e38ee7ab2b0cdfcbd5b53e7fd53d8/68747470733a2f2f636f702d696d6167652d70726f642e6f73732d636e2d68616e677a686f752e616c6979756e63732e636f6d2f6d63752f622e6a7067" alt="board.jpg" data-canonical-src="https://cop-image-prod.oss-cn-hangzhou.aliyuncs.com/mcu/b.jpg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-how-to-get-the-debug-tool" class="anchor" aria-hidden="true" href="#how-to-get-the-debug-tool"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to get the debug tool&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;download from the url https://www.t-head.cn/product/mcu-platform?spm=a2ouz.12987052.0.0.167548abiiSAQs 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-how-to-get-the-ide-for-development" class="anchor" aria-hidden="true" href="#how-to-get-the-ide-for-development"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to get the IDE for development&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;download from the url https://www.t-head.cn/product/mcu-platform?spm=a2ouz.12987052.0.0.167548abiiSAQs  
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-how-to-use-the-sdk" class="anchor" aria-hidden="true" href="#how-to-use-the-sdk"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to use the sdk&lt;/h1&gt;
&lt;p&gt;wujian100_open SDK is wujian100_open software development kit, the software follows the CSI interface specification. Through the SDK users can quickly wujian100_open test and evaluation. At the same time users can refer to the SDK integration of various commonly used components and sample procedures for application development quickly form a product solution.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SDK directory structure:
|--sdk
 |--csi_core 	//CSI-Core related interface definition, and interface implementation on
                //E902.
 |--csi_dirver  //CSI-Driver related interface definition, and peripheral Driver
                //implementation.
 |--csi_kernel  //CSI-Kernel related interface definition, and Rhino, FreeRTOSv8.2.3
                //ucos-iii and other real-time operating system docking example code
 |--libs        //Store common library implementations
 |--projicet	//Store a variety of reference examples including benchmark test
                //program, driver example program, rtos example program. The relevant
                //project documents are also included.
 |--utilites	//Store project config files.
 |--VERSION
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1. Download and install the CDK
2. Open a project using CDK, for example open the hello project:
  projects/examples/hello_world/CDK/wj100-open-hello_world.cdkproj
3. Build the project:
Click "project" on the toolbar,and select "build all". After successful compilation, you will see the following:
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Build target ' wujian100_open-hello_world BuildSet '
----------Building project:[ wujian100_open-hello_world - BuildSet ]----------
make[1]: Entering directory 'D:/release/Wujian100_open-V1.0.0/Wujian100_open-V1.0.0/projects/examples/hello_world/CDK'
make[1]: Leaving directory 'D:/release/Wujian100_open-V1.0.0/Wujian100_open-V1.0.0/projects/examples/hello_world/CDK'
make[1]: Entering directory 'D:/release/Wujian100_open-V1.0.0/Wujian100_open-V1.0.0/projects/examples/hello_world/CDK'
linking...
size of target:
   text	   data	    bss	    dec	    hex	filename
  22680	   1628	   6660	  30968	   78f8	D:/release/Wujian100_open-V1.0.0/Wujian100_open-V1.0.0/projects/examples/hello_world/CDK/Obj/wujian100_open-hello_world.elf
checksum value of target:  0xE2B2C769 (491,388)
make[1]: Leaving directory 'D:/release/Wujian100_open-V1.0.0/Wujian100_open-V1.0.0/projects/examples/hello_world/CDK'
Executing Post Build commands ...
Done
====0 errors, 0 warnings, total time : 20s263ms====
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;4. Run the project:
Click "Debug" on the toolbar,and select "Start/Stop Debugger".
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;a id="user-content-dicussion" class="anchor" aria-hidden="true" href="#dicussion"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dicussion&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;If you want to discuss about the wujian100_open project. You can scan the QR code below：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/5b54d5205d6f416b9829dc45e0de5629072018a7/68747470733a2f2f636f702d696d6167652d70726f642e6f73732d636e2d68616e677a686f752e616c6979756e63732e636f6d2f6d63752f712e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/5b54d5205d6f416b9829dc45e0de5629072018a7/68747470733a2f2f636f702d696d6167652d70726f642e6f73732d636e2d68616e677a686f752e616c6979756e63732e636f6d2f6d63752f712e6a7067" alt="barcode.jpg" data-canonical-src="https://cop-image-prod.oss-cn-hangzhou.aliyuncs.com/mcu/q.jpg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a id="user-content-reference--and-thanks" class="anchor" aria-hidden="true" href="#reference--and-thanks"&gt;&lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference  and Thanks&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;The program model of GPIO refer to the DesignWare of Synopsys 
The program model of Timer refer to the DesignWare of Synopsys 
The program model of WDT refer to the DesignWare of Synopsys 
&lt;/code&gt;&lt;/pre&gt;
&lt;/article&gt;&lt;/div&gt;</description><author>T-head-Semi</author><guid isPermaLink="false">https://github.com/T-head-Semi/wujian100_open</guid><pubDate>Fri, 03 Jan 2020 00:02:00 GMT</pubDate></item></channel></rss>